{"version":3,"sources":["../../dist/icon-save~bfVswhtX.svg","../../src/types/AutoCompleteComponent.js","../../src/types/DateTimeComponent.js","../../src/types/ConditionalComponent.js","../../src/types/TextComponents.js","../../src/drawer/RightDrawer.js","../../src/drawer/LeftDrawer.js","../../src/panel/SavedFilters.js","../../src/panel/MainFilterPanel.js","../../src/index.js","App.js","index.js"],"names":["module","exports","AutoComplete","props","useState","autoCompleteArr","setAutoAcompleteArr","useEffect","autoCompleteDiv","validationClass","item","className","key","index","React","Form","type","label","id","checked","onChange","icon","onClick","handleClose","disable","options","closeIcon","displayValue","selectedValues","onSelect","selectedList","selectedItem","e","FieldComponent","fieldComponentArr","setFieldComponentArr","fieldComponentDiv","defaultChecked","field","name","disabled","value","Condition","conditionArr","setConditionArr","conditionalDiv","controlId","Object","as","defaultValue","condition","required","TextComponents","textComponentArr","setTextComponentArr","textComponentDiv","RightDrawer","showSavePopup","setShowSavePopup","saveFilterName","setSaveFilterName","saveFilterWarning","setSaveFilterWarning","warningLabel","setWarningLabel","applyFilterWarning","setApplyFilterWarning","applyfilterWarningClassName","setApplyFilterWariningClassname","recentFilterShow","setRecentFilterShow","filterShow","setFilterShow","savedFilters","localStorage","JSON","recent","style","display","enabled","dataType","autoCompleteArray","deleteAutoCompleteElement","handleAutoCompleteEnabled","createAutoCompleteArray","dateTimesArray","deleteDateTimeElement","handleDateTimeEnabled","createDateTimeArray","addToday","addTomorrow","addThisMonth","addForteenDays","addSevenDays","addThisWeek","addThirtyDays","lastDayChange","nextDayChange","conditionsArray","handleCondionalEnabled","createConditionalArray","deleteConditionalElement","textComponentsArray","deleteTextComponentElement","createTextComponentsArray","handleTextComponentEnabled","variant","src","alt","resetDrawer","registersaveFilterName","accordianArray","LeftDrawer","leftDrawData","setLeftDrawData","leftDrawTemp","setLeftDrawTemp","setFilterType","setFilterTypeTemp","setActiveState","accordianArr","setAccordianArr","typeArray","accordianShow","accordianHeads","show","accord","Accordion","fontWeight","weight","Card","eventKey","handleAccordianArrow","fieldHeads","conditionHeads","normalHeads","placeholder","filteredList","filteredTypeList","searchKey","SavedFilters","showFilter","setShowFilter","listRef","useRef","listHandler","event","document","savedFilter","marginLeft","faCheck","ref","MainFilterPanel","listFilter","setListFilter","chipArray","setChipArray","countShow","setCountShow","handleListFilter","chipCount","chips","onSelectSavedFilter","addSavedFilters","addingToFavourite","autoCompletesValueArray","setAutoCompletesValueArray","autoCompletesArray","setAutoCompletesArray","setDateTimesArray","dateTimesValueArray","setDateTimesValueArray","setConditionsArray","conditionsValueArray","setConditionsValueArray","setTextComponentsArray","textComponentsValueArray","setTextComponentsValueArray","applyFilterChip","setApplyFilterChip","filterCount","setFilterCount","filterData","setFilterData","showSavePopUp","setShowSavePopUp","saveWarningLabel","setSaveWarningLabel","saveWarningClassName","setSaveWarningClassName","emptyFilterWarning","setEmptyFilterWarning","emptyFilterClassName","setEmptyFilterClassName","count","closeDrawer","setApplyFilter","it","tip","x","fit","aut","dateTimeArray","fieldArray","filters","getValueOfDate","dateValue","date","Date","console","Intl","year","month","day","hour","minute","seconds","dateTimeFormat","conditionArray","textComponentArray","autoComplete","text","tempArr","arrays","arr","fil","items","objectArray","saveTempDateTimeArray","saved","filter","column","amount","data","values","showApplyFilter","handleHideDropdown","handleClickOutside","useComponentVisible","fromLeftToRight","validated","warning","applyFilter","applyFilterArray","tempObj","obj","dateTime","conditional","textComponent","objec","saveFilter","valueItem","valueArray","autoCompleteValueArray","dateTimeValueArray","tempArray","fieldName","fieldValue","todayDate","dated","fromDate","toDate","today","from","to","parseInt","conditionValueArray","textComponentValueArray","openShowSavePopUp","showDrawer","addAppliedFilters","typeName","returnOptions","dt","App","airport","airportGroup","FilterData","forEach","types","i","dataSource","appliedFilters","appliedFilter","log","favourite","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.e5469095.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon-save~bfVswhtX.b242042f.svg\";","import React, { useState, useEffect } from \"react\";\n// import \"react-bootstrap-typeahead/css/Typeahead.css\";\nimport { Multiselect } from \"multiselect-react-dropdown\";\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Form } from \"react-bootstrap\";\n\nexport default function AutoComplete(props) {\n  const [autoCompleteArr, setAutoAcompleteArr] = useState([]);\n  useEffect(() => {\n    setAutoAcompleteArr(props.autoCompleteArray);\n  }, [props.autoCompleteArray]);\n  /**\n   * Method To close the filter\n   * @param {*} item is specific filter element\n   */\n  const handleClose = (item) => {\n    props.deleteAutoCompleteElement(item);\n  };\n  /**\n   * Method To pass the selected list of values to create value array\n   * @param {*} selectedList is entire list of selected\n   * @param {*} selectedItem is specific item selected now\n   * @param {*} item is specific filter element\n   */\n  const onSelect = (selectedList, selectedItem, item) => {\n    props.createAutoCompleteArray(item, selectedList);\n  };\n  let autoCompleteDiv = autoCompleteArr.map((item, index) => {\n    let validationClass = \"\";\n    if (item.validated === false) {\n      validationClass = \"text-danger\";\n    }\n    return (\n      <div className=\"filter__input\" key={index}>\n        <div className=\"filter__input-title\">\n          <div className=\"filter__label\">\n            <span>{item.name}</span>\n            <span>&nbsp;&gt;&nbsp;</span>\n            <span>{item.type}</span>\n          </div>\n          <div className=\"filter__control\">\n            <Form.Check\n              type=\"switch\"\n              label=\"\"\n              className={item.type.concat(item.name)}\n              id={item.name.concat(item.type)}\n              checked={item.enabled}\n              onChange={(e) => {\n                props.handleAutoCompleteEnabled(item);\n              }}\n            />\n            <FontAwesomeIcon\n              icon={faTimes}\n              type=\"button\"\n              onClick={(e) => {\n                handleClose(item);\n              }}\n            />\n          </div>\n        </div>\n        <div className=\"displayFlex\">\n          <Multiselect\n            id={item.type.concat(item.name)}\n            disable={!item.enabled}\n            options={item.objectArray}\n            closeIcon=\"close\"\n            displayValue=\"key\"\n            className=\"form-control\"\n            selectedValues={item.value}\n            onSelect={(e) => {\n              onSelect(e, e[e.length - 1], item);\n            }}\n          />\n        </div>\n        <span id=\"fieldWarning\" className={validationClass}>{item.warning}</span>\n      </div>\n    );\n  });\n  return <div>{autoCompleteDiv}</div>;\n}\n","import React, { useState, useEffect } from \"react\";\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Form } from \"react-bootstrap\";\n\nexport default function FieldComponent(props) {\n    const [fieldComponentArr, setFieldComponentArr] = useState([]);\n    useEffect(() => {\n        setFieldComponentArr(props.dateTimesArray);\n    }, [props.dateTimesArray]);\n    /**\n     * Method To close the filter\n     * @param {*} item is specific filter element\n     */\n    const handleClose = (item) => {\n        props.deleteDateTimeElement(item);\n    };\n    let fieldComponentDiv = fieldComponentArr.map((item, index) => {\n        let validationClass = \"\";\n        if (item.validated === false) {\n            validationClass = \"text-danger\";\n        }\n        return (\n            <div className=\"filter__input\" key={index}>\n                <div className=\"filter__input-title\" key={1}>\n                    <div className=\"filter__label\">\n                        <Form.Label>\n                            <strong>{item.name}</strong>\n                        </Form.Label>\n                    </div>\n                    <div className=\"filter__control\">\n                        <Form.Check\n                            type=\"switch\"\n                            id={item.name}\n                            label=\"\"\n                            defaultChecked={item.enabled}\n                            onChange={(e) => {\n                                props.handleDateTimeEnabled(item);\n                            }}\n                        />\n\n                        <FontAwesomeIcon\n                            className=\"fontIcons\"\n                            icon={faTimes}\n                            onClick={(e) => {\n                                handleClose(item);\n                            }}\n                        />\n                    </div>\n                </div>\n                {item.field.map((field, index) => {\n                    return (\n                        <div key={`${index}-${field.name}`}>\n                            <div className=\"displayFlex\" key={`${index},${field.name}`}>\n                                <Form.Text>{field.column}</Form.Text>\n                            </div>\n                            <div className=\"filter__split\" key={index}>\n                                <div className=\"date-wrap\">\n                                    <Form.Control\n                                        disabled={!item.enabled}\n                                        type=\"datetime-local\"\n                                        value={field.value}\n                                        className={field.name}\n                                        onChange={(e) => {\n                                            props.createDateTimeArray(item, field.column, e.target.value);\n                                        }}\n                                    />\n                                    <span className=\"date-button\">\n                                        <button type=\"button\"></button>\n                                    </span>\n                                </div>\n                            </div>\n                        </div>\n                    );\n                })}\n                <span id=\"fieldWarning\" className={validationClass}>\n                    {item.warning}\n                </span>\n            </div>\n        );\n    });\n    return <div>{fieldComponentDiv}</div>;\n}\n","import React, { useState, useEffect } from \"react\";\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Form } from \"react-bootstrap\";\n\nexport default function Condition(props) {\n  const [conditionArr, setConditionArr] = useState([]);\n  useEffect(() => {\n    setConditionArr(props.conditionsArray);\n  }, [props.conditionsArray]);\n  let conditionalDiv = conditionArr.map((item, index) => {\n    let validationClass = \"\";\n    if (item.validated === false) {\n      validationClass = \"text-danger\";\n    }\n    return (\n      <div className=\"filter__input\" key={index}>\n        <div className=\"filter__input-title\">\n          <div className=\"filter__label\">\n            <Form.Label>\n              <strong>{item.name}</strong>\n            </Form.Label>\n          </div>\n          <div className=\"filter__control\">\n            <Form.Check\n              type=\"switch\"\n              id={item.name}\n              label=\"\"\n              checked={item.enabled}\n              onChange={(e) => {\n                props.handleCondionalEnabled(item);\n              }}\n            />\n            <FontAwesomeIcon\n              className=\"fontIcons\"\n              icon={faTimes}\n              onClick={(e) => {\n                props.deleteConditionalElement(item);\n              }}\n            />\n          </div>\n        </div>\n        <div\n          onChange={(e) => {\n            props.createConditionalArray(item, e.target.value);\n          }}\n        >\n          <div className=\"displayFlex\">\n            <Form.Group controlId=\"exampleForm.ControlSelect1\">\n              <Form.Text className=\"text-muted\">\n                {Object.keys(item)[3]}\n              </Form.Text>\n              <Form.Control\n                disabled={!item.enabled}\n                as=\"select\"\n                defaultValue={item.value}\n              >\n                {item.condition.map((condition, index) => {\n                  return <option key={index}>{condition.value}</option>;\n                })}\n              </Form.Control>\n            </Form.Group>\n          </div>\n          <div className=\"displayFlex\">\n            <Form.Group>\n              <Form.Text className=\"text-muted\">\n                {Object.keys(item)[4]}\n              </Form.Text>\n              <Form.Control\n                disabled={!item.enabled}\n                defaultValue={item.amount}\n                required\n                type=\"number\"\n              />\n            </Form.Group>\n          </div>\n        </div>\n        <span id=\"fieldWarning\" className={validationClass}>\n          {item.warning}\n        </span>\n      </div>\n    );\n  });\n  return <div>{conditionalDiv}</div>;\n}\n","import React, { useEffect, useState } from \"react\";\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Form } from \"react-bootstrap\";\n\nexport default function TextComponents(props) {\n  const [textComponentArr, setTextComponentArr] = useState([]);\n  useEffect(() => {\n    setTextComponentArr(props.textComponentsArray);\n  }, [props.textComponentsArray]);\n\n  let textComponentDiv = textComponentArr.map((item, index) => {\n    let validationClass = \"\";\n    if (item.validated === false) {\n      validationClass = \"text-danger\";\n    }\n    return (\n      <div key={index}>\n        <div className=\"filter__input\">\n          <div className=\"filter__input-title\">\n            <div className=\"filter__label\">\n              <span>{item.name}</span>\n            </div>\n            <div className=\"filter__control\">\n              <Form.Check\n                type=\"switch\"\n                label=\"\"\n                id={item.name}\n                checked={item.enabled}\n                onChange={(e) => {\n                  props.handleTextComponentEnabled(item);\n                }}\n              ></Form.Check>\n              <FontAwesomeIcon\n                icon={faTimes}\n                type=\"button\"\n                onClick={(e) => {\n                  props.deleteTextComponentElement(item);\n                }}\n              />\n            </div>\n          </div>\n          <div className=\"displayFlex\">\n            <input\n              id={item.name.concat(item.dataType)}\n              disabled={!item.enabled}\n              type=\"text\"\n              defaultValue={item.value}\n              className=\"form-control\"\n              onChange={(e) => {\n                props.createTextComponentsArray(item, e.target.value);\n              }}\n            ></input>\n          </div>\n          <span id=\"fieldWarning\" className={validationClass}>\n            {item.warning}\n          </span>\n        </div>\n      </div>\n    );\n  });\n\n  return <div>{textComponentDiv}</div>;\n}\n","import React, { forwardRef, useState, useEffect } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport AutoComplete from \"../types/AutoCompleteComponent\";\nimport FieldComponent from \"../types/DateTimeComponent\";\nimport Condition from \"../types/ConditionalComponent\";\nimport TextComponents from \"../types/TextComponents\";\nimport saveLogo from \"../images/icon-save.svg\";\n\nconst RightDrawer = (props) => {\n  const [showSavePopup, setShowSavePopup] = useState(\"none\");\n  const [saveFilterName, setSaveFilterName] = useState(\"\");\n  const [saveFilterWarning, setSaveFilterWarning] = useState(\"\");\n  const [warningLabel, setWarningLabel] = useState(\"\");\n  const [applyFilterWarning, setApplyFilterWarning] = useState(\"\");\n  const [\n    applyfilterWarningClassName,\n    setApplyFilterWariningClassname,\n  ] = useState(\"\");\n  const [recentFilterShow, setRecentFilterShow] = useState(\"none\");\n  const [filterShow, setFilterShow] = useState(\"\");\n  useEffect(() => {\n    setApplyFilterWarning(props.emptyFilterWarning);\n    setApplyFilterWariningClassname(props.emptyFilterClassName);\n  }, [props.emptyFilterWarning, props.emptyFilterClassName]);\n  useEffect(() => {\n    setWarningLabel(props.saveWarningClassName);\n    setSaveFilterWarning(props.saveWarningLabel);\n    setShowSavePopup(props.showSavePopUp);\n  }, [props.saveWarningClassName, props.saveWarningLabel, props.showSavePopUp]);\n  useEffect(() => {\n    setRecentFilterShow(props.recentFilterShow);\n    setFilterShow(props.filterShow);\n  }, [props.recentFilterShow, props.filterShow]);\n  /**\n   * Method To pass the required name of the filter required to be saved\n   * @param {*} e is event triggered when typing on the to-save filter name field\n   */\n  const registersaveFilterName = (e) => {\n    setSaveFilterName(e.target.value);\n  };\n\n  /**\n   * Method To close the save popup on clicking cancel button\n   */\n  const cancelSavePopup = () => {\n    setShowSavePopup(\"none\");\n    setSaveFilterWarning(\"\");\n    setWarningLabel(\"\");\n  };\n  let savedFilters = localStorage.getItem(\"savedFilters\");\n  savedFilters = savedFilters ? JSON.parse(savedFilters) : [];\n  if (savedFilters.length > 2) {\n    savedFilters = savedFilters.slice(\n      savedFilters.length - 2,\n      savedFilters.length\n    );\n  }\n  const recent = savedFilters.map((filterArray, index) => {\n    return (\n      <div\n        className=\"recentFilters\"\n        key={index}\n        onClick={(e) => {\n          props.addSavedFilters(filterArray);\n        }}\n      >\n        {Object.keys(filterArray)[0]}\n      </div>\n    );\n  });\n  return (\n    <React.Fragment>\n      <div style={{ display: recentFilterShow }} className=\"filter__content\">\n        <div>Recent Filters</div>\n        {recent}\n      </div>\n\n      <div style={{ display: filterShow }}>\n        <div className=\"filter__title\">\n          Searched Filters\n          <span className=\"filter-count\">{props.filterCount}</span>\n        </div>\n        <div className=\"filter__content\">\n          <AutoComplete\n            name={props.name}\n            type={props.type}\n            enabled={props.enabled}\n            dataType={props.dataType}\n            options={props.options}\n            autoCompleteArray={props.autoCompleteArray}\n            deleteAutoCompleteElement={props.deleteAutoCompleteElement}\n            handleAutoCompleteEnabled={props.handleAutoCompleteEnabled}\n            createAutoCompleteArray={props.createAutoCompleteArray}\n          />\n          <FieldComponent\n            dateTimesArray={props.dateTimesArray}\n            deleteDateTimeElement={props.deleteDateTimeElement}\n            handleDateTimeEnabled={props.handleDateTimeEnabled}\n            createDateTimeArray={props.createDateTimeArray}\n            addToday={props.addToday}\n            addTomorrow={props.addTomorrow}\n            addThisMonth={props.addThisMonth}\n            addForteenDays={props.addForteenDays}\n            addSevenDays={props.addSevenDays}\n            addThisWeek={props.addThisWeek}\n            addThirtyDays={props.addThirtyDays}\n            lastDayChange={props.lastDayChange}\n            nextDayChange={props.nextDayChange}\n          />\n          <Condition\n            conditionsArray={props.conditionsArray}\n            handleCondionalEnabled={props.handleCondionalEnabled}\n            createConditionalArray={props.createConditionalArray}\n            deleteConditionalElement={props.deleteConditionalElement}\n          />\n          <TextComponents\n            textComponentsArray={props.textComponentsArray}\n            deleteTextComponentElement={props.deleteTextComponentElement}\n            createTextComponentsArray={props.createTextComponentsArray}\n            handleTextComponentEnabled={props.handleTextComponentEnabled}\n          />\n        </div>\n        <div className=\"filter__btn\">\n          <div className=\"filter__save\">\n            <Button className=\"button-save\" variant=\"\">\n              <img\n                src={saveLogo}\n                onClick={props.openShowSavePopUp}\n                alt=\"save icon\"\n              />\n              <span>SAVE</span>\n            </Button>\n          </div>\n          <div className=\"btn-wrap\">\n            <span className={applyfilterWarningClassName}>\n              {applyFilterWarning}\n            </span>\n            <Button variant=\"\" className=\"reset\" onClick={props.resetDrawer}>\n              Reset\n            </Button>\n            <Button\n              variant=\"\"\n              className=\"applyFilter\"\n              onClick={(e) => {\n                props.applyFilter();\n                props.deleteAutoCompleteElement({});\n                props.deleteConditionalElement({});\n                props.deleteDateTimeElement({});\n                props.deleteTextComponentElement({});\n              }}\n            >\n              Apply Filter\n            </Button>\n          </div>\n          <div style={{ display: showSavePopup }} className=\"popup--save\">\n            <h5>Save the Filter</h5>\n            <span className={warningLabel}>{saveFilterWarning}</span>\n            <label>Saved Filter Name</label>\n            <input\n              className=\"txt\"\n              value={saveFilterName}\n              onChange={(e) => registersaveFilterName(e)}\n            />\n            <div className=\"btn-wrap\">\n              <button\n                className=\"button\"\n                onClick={(e) => {\n                  cancelSavePopup();\n                }}\n              >\n                Cancel\n              </button>\n              <button\n                className=\"button\"\n                onClick={(e) => {\n                  props.saveFilter(saveFilterName);\n                  // setSaveFilterName(\"\");\n                }}\n              >\n                Save\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default RightDrawer;\n","import React, { useEffect, useState } from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport { Accordion, Form } from \"react-bootstrap\";\n\nlet accordianArray = [];\nexport default function LeftDrawer(props) {\n  const [leftDrawData, setLeftDrawData] = useState([]);\n  const [leftDrawTemp, setLeftDrawTemp] = useState([]);\n  const [filterType, setFilterType] = useState([]);\n  const [filterTypeTemp, setFilterTypeTemp] = useState([]);\n  const [activeState, setActiveState] = useState(\"1\");\n  const [accordianArr, setAccordianArr] = useState([]);\n\n  useEffect(() => {\n    let typeArray = [];\n    setLeftDrawData(props.filterData.filter);\n    setLeftDrawTemp(props.filterData.filter);\n    props.filterData.filter.forEach((item) => {\n      if (item.types) {\n        item.types.forEach((type) => {\n          typeArray.push(type.name);\n        });\n      }\n    });\n    setFilterType(typeArray);\n    setFilterTypeTemp(typeArray);\n  }, [props.filterData.filter]);\n  /**\n   * Method To filter out the filters displayed at the left drawer\n   * @param {*} e triggered on typing on the search field\n   */\n  const searchFilterHandler = (e) => {\n    let filteredList = [];\n    let filteredTypeList = [];\n    const searchKey = e.target.value;\n    if (leftDrawData) {\n      filteredList = leftDrawTemp.filter((item) => {\n        if (item.types) {\n          filteredTypeList = item.types.filter((type) => {\n            return (\n              type.name &&\n              type.name.toLowerCase().includes(searchKey.toLowerCase())\n            );\n          });\n          if (filteredTypeList.length > 0 && searchKey !== \"\") {\n            setActiveState(\"2\");\n            return true;\n          } else {\n            setActiveState(\"1\");\n          }\n          return (\n            item.name &&\n            item.name.toLowerCase().includes(searchKey.toLowerCase())\n          );\n        } else {\n          return (\n            item.name &&\n            item.name.toLowerCase().includes(searchKey.toLowerCase())\n          );\n        }\n      });\n    }\n    setLeftDrawData(filteredList);\n    setFilterType(filteredTypeList);\n  };\n  leftDrawData.forEach((item) => {\n    if (item.types) {\n      accordianArray.push({ name: item.name, accordianShow: \"\" });\n    }\n  });\n  /**\n   * Method To change the accordian arrow direction on toggling\n   * @param {*} name is dynamic filter name\n   * @param {*} className is the dynamic className of the div\n   */\n  const handleAccordianArrow = (name, className) => {\n    accordianArray.forEach((item) => {\n      let index = accordianArray.indexOf(item);\n      if (item.name === name) {\n        if (className === \"show card-header\") {\n          accordianArray[index] = {\n            name: item.name,\n            accordianShow: \"\",\n          };\n        } else {\n          accordianArray[index] = {\n            name: item.name,\n            accordianShow: \"show\",\n          };\n        }\n      }\n    });\n    setAccordianArr(accordianArray);\n    accordianArray = [];\n  };\n\n  let accordianHeads = leftDrawData.map((item, index) => {\n    if (item.types.length) {\n      let show = \"\";\n      accordianArr.forEach((accord) => {\n        if (accord.name === item.name) {\n          show = accord.accordianShow;\n        }\n      });\n      return (\n        <div key={index}>\n          <Accordion>\n            <Card>\n              <Accordion.Toggle\n                style={{ fontWeight: item.weight }}\n                className={show}\n                as={Card.Header}\n                eventKey=\"1\"\n                onClick={(e) => {\n                  handleAccordianArrow(item.name, e.target.className);\n                }}\n              >\n                {item.name}\n              </Accordion.Toggle>\n              <Accordion.Collapse eventKey=\"1\">\n                <Card.Body>\n                  <ul className=\"firstAccordion\" key={index}>\n                    {item.types &&\n                      item.types.map((type, index) => {\n                        return (\n                          <li\n                            style={{ fontWeight: type.weight }}\n                            onClick={(e) => {\n                              props.fromLeftToRight(\n                                item.name,\n                                type.dataType,\n                                type.enabled,\n                                type.name,\n                                item.field,\n                                item.condition,\n                                type.dataSource,\n                                type.validationMessage,\n                                type.options\n                              );\n                              // props.addedFilterCount();\n                            }}\n                            key={index}\n                          >\n                            {type.name}\n                          </li>\n                        );\n                      })}\n                  </ul>\n                </Card.Body>\n              </Accordion.Collapse>\n            </Card>\n          </Accordion>\n        </div>\n      );\n    } else {\n      return <div key={index}></div>;\n    }\n  });\n  let fieldHeads = leftDrawData.map((item, index) => {\n    if (item.field.length) {\n      return (\n        <div className=\"fieldHeads\" key={index}>\n          <li\n            style={{ fontWeight: item.weight }}\n            onClick={(e) => {\n              props.fromLeftToRight(\n                item.name,\n                item.dataType,\n                item.enabled,\n                item.types,\n                item.field,\n                item.condition,\n                item.dataSource,\n                item.validationMessage,\n                item.options\n              );\n              //props.addedFilterCount();\n            }}\n          >\n            {item.name}\n          </li>\n        </div>\n      );\n    } else {\n      return <div key={index}></div>;\n    }\n  });\n  let conditionHeads = leftDrawData.map((item, index) => {\n    if (item.condition.length) {\n      return (\n        <div className=\"conditionHeads\" key={index}>\n          <li\n            style={{ fontWeight: item.weight }}\n            onClick={(e) => {\n              props.fromLeftToRight(\n                item.name,\n                item.dataType,\n                item.enabled,\n                item.types,\n                item.field,\n                item.condition,\n                item.dataSource,\n                item.validationMessage,\n                item.options\n              );\n              //props.addedFilterCount();\n            }}\n          >\n            {item.name}\n          </li>\n        </div>\n      );\n    } else {\n      return <div key={index}></div>;\n    }\n  });\n  let normalHeads = leftDrawData.map((item, index) => {\n    if (!(item.condition.length || item.types.length || item.field.length)) {\n      return (\n        <div className=\"normalHeads\" key={index}>\n          <li\n            style={{ fontWeight: item.weight }}\n            onClick={(e) => {\n              props.fromLeftToRight(\n                item.name,\n                item.dataType,\n                item.enabled,\n                item.types,\n                item.field,\n                item.condition,\n                item.dataSource,\n                item.validationMessage,\n                item.options\n              );\n              //props.addedFilterCount();\n            }}\n          >\n            {item.name}\n          </li>\n        </div>\n      );\n    } else {\n      return <div key={index}></div>;\n    }\n  });\n  return (\n    <div>\n      <Form.Row>\n        <Form.Control\n          required\n          type=\"text\"\n          placeholder=\"Search a Filter\"\n          defaultValue=\"\"\n          className=\"customControl\"\n          onChange={searchFilterHandler}\n        />\n      </Form.Row>\n      <div className=\"leftDrawer\">\n        <div>{accordianHeads}</div>\n        <div>{fieldHeads}</div>\n        <div>{conditionHeads}</div>\n        <div>{normalHeads}</div>\n      </div>\n    </div>\n  );\n}\n","import React, { useEffect, useState, useRef } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCheck, faStar } from \"@fortawesome/free-solid-svg-icons\";\n\nconst SavedFilters = (props) => {\n  const [showFilter, setShowFilter] = useState(false);\n  let listRef = useRef();\n  useEffect(() => {\n    let listHandler = (event) => {\n      if (listRef.current && !listRef.current.contains(event.target)) {\n        setShowFilter(false);\n        props.handleListFilter();\n      }\n    };\n    setShowFilter(props.showFilter);\n    document.addEventListener(\"mousedown\", listHandler);\n\n    return () => {\n      document.removeEventListener(\"mousedown\", listHandler);\n    };\n  }, [props]);\n\n  let name = \"\";\n  let keyValue = \"\";\n  let savedFilters = localStorage.getItem(\"savedFilters\");\n  savedFilters = savedFilters ? JSON.parse(savedFilters) : [];\n  const addToFavourite = (item) => {\n    if (item.color === \"#bcbdd1\") {\n      item.color = \"#2680e8\";\n    } else {\n      item.color = \"#bcbdd1\";\n    }\n    console.log(savedFilters);\n    savedFilters.map((filterArray, index) => {\n      console.log(filterArray.color);\n    });\n    props.addingToFavourite(item);\n  };\n  const savedFilter = savedFilters.map((filterArray, index) => {\n    return (\n      <div key={index}>\n        <div className=\"alignLeft\">\n          <FontAwesomeIcon\n            style={{ marginLeft: \"-54px\" }}\n            icon={faCheck}\n          ></FontAwesomeIcon>\n          <div\n            style={{ marginLeft: \"15px\" }}\n            onClick={(e) => {\n              //below two methods are required for closing the savedFilter list popUp\n              setShowFilter(false);\n              props.handleListFilter();\n              props.addSavedFilters(filterArray);\n            }}\n          >\n            {Object.keys(filterArray)[0]}\n          </div>\n        </div>\n      </div>\n    );\n  });\n  if (showFilter) {\n    return (\n      <div className=\"lists\" ref={listRef}>\n        <div className=\"savedFilters\">\n          <div className=\"text-muted\">Saved Filters</div>\n          <ul key={keyValue} className=\"leftSpace\">\n            {savedFilter}\n          </ul>\n        </div>\n      </div>\n    );\n  } else {\n    return <div></div>;\n  }\n};\n\nexport default SavedFilters;\n","import React, { useState, useEffect } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faAlignLeft } from \"@fortawesome/free-solid-svg-icons\";\nimport SavedFilters from \"./SavedFilters\";\n\nlet chips, chipCount;\nconst MainFilterPanel = (props) => {\n  const [listFilter, setListFilter] = useState(false);\n  const [chipArray, setChipArray] = useState([]);\n  const [countShow, setCountShow] = useState(\"none\");\n  useEffect(() => {\n    setChipArray(props.applyFilterChip.applyFilter);\n    if (\n      props.applyFilterChip.applyFilter &&\n      props.applyFilterChip.applyFilter.length > 0\n    ) {\n      setCountShow(\"\");\n    } else {\n      setCountShow(\"none\");\n    }\n  }, [props.applyFilterChip]);\n  const handleListFilter = () => {\n    setListFilter(!listFilter);\n  };\n  if (chipArray) {\n    chipCount = chipArray.length;\n    chips = chipArray.map((item, index) => {\n      if (item.type) {\n        return (\n          <div\n            className=\"listContent\"\n            key={index}\n            onClick={(e) => {\n              props.addAppliedFilters(chipArray);\n            }}\n          >\n            <span>\n              {item.name}:{item.type}\n            </span>\n            {item.value.map((value, index) => {\n              return <div key={index}>{value.value}</div>;\n            })}\n          </div>\n        );\n      } else if (item.condition) {\n        return (\n          <div\n            className=\"listContent\"\n            key={index}\n            onClick={(e) => {\n              props.addAppliedFilters(chipArray);\n            }}\n          >\n            <span>{item.name}</span>:{item.condition}\n            {item.amount}\n          </div>\n        );\n      } else if (item.fieldValue) {\n        return (\n          <div\n            className=\"listContent\"\n            key={index}\n            onClick={(e) => {\n              props.addAppliedFilters(chipArray);\n            }}\n          >\n            <span>{item.fieldValue}</span>\n            {item.value}\n          </div>\n        );\n      } else {\n        return (\n          <div\n            className=\"listContent\"\n            key={index}\n            onClick={(e) => {\n              props.addAppliedFilters(chipArray);\n            }}\n          >\n            <span>{item.name}</span>:{item.value}\n          </div>\n        );\n      }\n    });\n  } else {\n    chips = <div></div>;\n  }\n\n  return (\n    <div className=\"list\">\n      <div className=\"displayFlex\">\n        <div className=\"alignLeft\">\n          <FontAwesomeIcon icon={faAlignLeft} onClick={handleListFilter} />\n          <SavedFilters\n            onSelectSavedFilter={props.onSelectSavedFilter}\n            showFilter={listFilter}\n            handleListFilter={handleListFilter}\n            addSavedFilters={props.addSavedFilters}\n            addingToFavourite={props.addingToFavourite}\n          />\n          <div className=\"leftSpace\">All flights</div>\n        </div>\n      </div>\n      <div className=\"secondList\">\n        <div className=\"displayFlex\">\n          <span style={{ display: countShow }} className=\"listContent\">\n            count:{chipCount}\n          </span>\n          {chips}\n          <div\n            onClick={(e) => {\n              props.showDrawer();\n            }}\n            className=\"addFilter\"\n          >\n            + Add Filter\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MainFilterPanel;\n","import React, { useState, useRef, useEffect } from \"react\";\nimport RightDrawer from \"./drawer/RightDrawer\";\nimport LeftDrawer from \"./drawer/LeftDrawer\";\nimport MainFilterPanel from \"./panel/MainFilterPanel\";\n\n/**\n * Component handling clock outside close of Drawer\n */\nfunction useComponentVisible() {\n  const [showApplyFilter, setApplyFilter] = useState(false);\n\n  const ref = useRef(null);\n\n  /**\n   * Method To sort the rows for a particular column\n   * @param {*} event is the event that is getting passed when an outside click is triggered\n   */\n  const handleHideDropdown = (event) => {\n    if (event.key === \"Escape\") {\n      setApplyFilter(false);\n    }\n  };\n  /**\n   * Method To sort the rows for a particular column\n   * @param {*} event it is the event triggered on the ref div when click happens\n   */\n  const handleClickOutside = (event) => {\n    if (ref.current && !ref.current.contains(event.target)) {\n      setApplyFilter(false);\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener(\"keydown\", handleHideDropdown, true);\n    document.addEventListener(\"click\", handleClickOutside, true);\n    return () => {\n      document.removeEventListener(\"keydown\", handleHideDropdown, true);\n      document.removeEventListener(\"click\", handleClickOutside, true);\n    };\n  });\n\n  return { ref, showApplyFilter, setApplyFilter };\n}\nexport default function Filter(props) {\n  const [autoCompletesValueArray, setAutoCompletesValueArray] = useState([]);\n  const [autoCompletesArray, setAutoCompletesArray] = useState([]);\n  const [dateTimesArray, setDateTimesArray] = useState([]);\n  const [dateTimesValueArray, setDateTimesValueArray] = useState([]);\n  const [conditionsArray, setConditionsArray] = useState([]);\n  const [conditionsValueArray, setConditionsValueArray] = useState([]);\n  const [textComponentsArray, setTextComponentsArray] = useState([]);\n  const [textComponentsValueArray, setTextComponentsValueArray] = useState([]);\n  const [applyFilterChip, setApplyFilterChip] = useState({});\n  const [filterCount, setFilterCount] = useState(0);\n  const [filterData, setFilterData] = useState({});\n  const [showSavePopUp, setShowSavePopUp] = useState(\"none\");\n  const [saveWarningLabel, setSaveWarningLabel] = useState(\"\");\n  const [saveWarningClassName, setSaveWarningClassName] = useState(\"\");\n  const [emptyFilterWarning, setEmptyFilterWarning] = useState(\"\");\n  const [emptyFilterClassName, setEmptyFilterClassName] = useState(\"\");\n  const [recentFilterShow, setRecentFilterShow] = useState(\"none\");\n  const [filterShow, setFilterShow] = useState(\"\");\n\n  useEffect(() => {\n    setFilterData(props.filterData);\n  }, [props.filterData]);\n  useEffect(() => {\n    let count = 0;\n    count =\n      autoCompletesArray.length +\n      dateTimesArray.length +\n      conditionsArray.length +\n      textComponentsArray.length;\n    setFilterCount(count);\n  }, [\n    autoCompletesArray,\n    dateTimesArray,\n    conditionsArray,\n    textComponentsArray,\n  ]);\n  /**\n   * Method set the state which shows the drawer when on true condition\n   */\n  const showDrawer = () => {\n    setApplyFilter(true);\n  };\n  /**\n   * Method set the state which closes the drawer when the state is in false condition\n   */\n  const closeDrawer = () => {\n    setApplyFilter(false);\n  };\n  /**\n   * Method To show the save popup\n   */\n  const openShowSavePopUp = () => {\n    setShowSavePopUp(\"\");\n  };\n  /**\n   * Method which creates the array which contains the elements to be shown in the applied filter chips\n   */\n\n  const applyFilter = () => {\n    if (filterCount > 0) {\n      setEmptyFilterClassName(\"\");\n      setEmptyFilterWarning(\"\");\n      let applyFilter = {\n        applyFilterArray: [],\n      };\n      let tempObj = { applyFilter: [] };\n      let obj = [];\n      if (autoCompletesValueArray.length > 0) {\n        autoCompletesValueArray.forEach((item) => {\n          tempObj.applyFilter.push(item);\n          obj.push(Object.assign({}, item));\n        });\n        applyFilter.applyFilterArray.push({\n          autoComplete: autoCompletesValueArray,\n        });\n      }\n      if (dateTimesValueArray.length > 0) {\n        dateTimesValueArray.forEach((item) => {\n          tempObj.applyFilter.push(item);\n          obj.push(Object.assign({}, item));\n        });\n        applyFilter.applyFilterArray.push({ dateTime: dateTimesValueArray });\n      }\n      if (conditionsValueArray.length > 0) {\n        conditionsValueArray.forEach((item) => {\n          tempObj.applyFilter.push(item);\n          obj.push(Object.assign({}, item));\n        });\n        applyFilter.applyFilterArray.push({\n          conditional: conditionsValueArray,\n        });\n      }\n      if (textComponentsValueArray.length > 0) {\n        textComponentsValueArray.forEach((item) => {\n          tempObj.applyFilter.push(item);\n          obj.push(Object.assign({}, item));\n        });\n        applyFilter.applyFilterArray.push({\n          textComponent: textComponentsValueArray,\n        });\n      }\n      setApplyFilterChip(tempObj);\n      obj.forEach((objec) => {\n        delete objec.dataType;\n        delete objec.enabled;\n      });\n      props.appliedFilters(obj);\n      tempObj = {};\n      closeDrawer();\n    } else {\n      setEmptyFilterClassName(\"text-danger\");\n      setEmptyFilterWarning(\"No Filter is being selected\");\n    }\n  };\n  /**\n   * Method To save the filters\n   * @param {*} value is saved filter from the saved filter popup list\n   */\n  const saveFilter = (value) => {\n    let obj = [];\n    if (value.length > 0) {\n      if (\n        !(\n          autoCompletesValueArray.length > 0 ||\n          dateTimesValueArray.length > 0 ||\n          conditionsValueArray.length > 0 ||\n          textComponentsValueArray.length > 0\n        )\n      ) {\n        setShowSavePopUp(\"\");\n        setSaveWarningClassName(\"text-danger\");\n        setSaveWarningLabel(\"No filters selected or values entered\");\n      } else {\n        let savedFilter = {\n          filter: [],\n        };\n        if (autoCompletesValueArray.length > 0) {\n          let autoCompleteArray = [...autoCompletesArray];\n          autoCompleteArray.forEach((item) => {\n            autoCompletesValueArray.forEach((valueItem) => {\n              if (\n                valueItem.name === item.name &&\n                valueItem.type === item.type\n              ) {\n                item.validated = true;\n                item.warning = \"\";\n              }\n            });\n          });\n          setAutoCompletesArray(autoCompleteArray);\n          let count = 0;\n          autoCompletesArray.forEach((item) => {\n            if (item.validated === false) {\n              count++;\n            }\n          });\n          if (count === 0) {\n            savedFilter.filter.push({ autoComplete: autoCompletesValueArray });\n          } else {\n            setShowSavePopUp(\"\");\n            setSaveWarningClassName(\"text-danger\");\n            setSaveWarningLabel(\"Enter values in every field\");\n          }\n          autoCompleteArray = [];\n        } else {\n          let autoCompleteArray = [...autoCompletesArray];\n          autoCompleteArray.forEach((item) => {\n            item.validated = false;\n          });\n          setAutoCompletesArray(autoCompleteArray);\n          autoCompleteArray = [];\n        }\n        if (dateTimesValueArray.length > 0) {\n          let dateTimeArray = [...dateTimesArray];\n          dateTimeArray.forEach((item) => {\n            dateTimesValueArray.forEach((valueItem) => {\n              if (valueItem.name === item.name) {\n                item.validated = true;\n                item.warning = \"\";\n              }\n            });\n          });\n          setDateTimesArray(dateTimeArray);\n          let count = 0;\n          dateTimesArray.forEach((item) => {\n            if (item.validated === false) {\n              count++;\n            }\n          });\n          if (count === 0) {\n            savedFilter.filter.push({ dateTime: dateTimesValueArray });\n          } else {\n            setShowSavePopUp(\"\");\n            setSaveWarningClassName(\"text-danger\");\n            setSaveWarningLabel(\"Enter values in every field\");\n          }\n          dateTimeArray = [];\n        } else {\n          let dateTimeArray = [...dateTimesArray];\n          dateTimeArray.forEach((item) => {\n            item.validated = false;\n          });\n          setDateTimesArray(dateTimeArray);\n          dateTimeArray = [];\n        }\n        if (conditionsValueArray.length > 0) {\n          let conditionArray = [...conditionsArray];\n          conditionArray.forEach((item) => {\n            conditionsValueArray.forEach((valueItem) => {\n              if (valueItem.name === item.name) {\n                item.validated = true;\n                item.warning = \"\";\n              }\n            });\n          });\n          setConditionsArray(conditionArray);\n          let count = 0;\n          conditionsArray.forEach((item) => {\n            if (item.validated === false) {\n              count++;\n            }\n          });\n          if (count === 0) {\n            savedFilter.filter.push({ conditional: conditionsValueArray });\n          } else {\n            setShowSavePopUp(\"\");\n            setSaveWarningClassName(\"text-danger\");\n            setSaveWarningLabel(\"Enter values in every field\");\n          }\n          conditionArray = [];\n        } else {\n          let conditionArray = [...conditionsArray];\n          conditionArray.forEach((item) => {\n            item.validated = false;\n          });\n          setConditionsArray(conditionArray);\n          conditionArray = [];\n        }\n        if (textComponentsValueArray.length > 0) {\n          let textComponentArray = [...textComponentsArray];\n          textComponentArray.forEach((item) => {\n            textComponentsValueArray.forEach((valueItem) => {\n              if (valueItem.name === item.name) {\n                item.validated = true;\n                item.warning = \"\";\n              }\n            });\n          });\n          setTextComponentsArray(textComponentArray);\n          let count = 0;\n          textComponentArray.forEach((item) => {\n            if (item.validated === false) {\n              count++;\n            }\n          });\n          if (count === 0) {\n            savedFilter.filter.push({\n              textComponent: textComponentsValueArray,\n            });\n          } else {\n            setShowSavePopUp(\"\");\n            setSaveWarningClassName(\"text-danger\");\n            setSaveWarningLabel(\"Enter values in every field\");\n          }\n          textComponentArray = [];\n        } else {\n          let textComponentArray = [...textComponentsArray];\n          textComponentArray.forEach((item) => {\n            item.validated = false;\n          });\n          setTextComponentsArray(textComponentArray);\n          textComponentArray = [];\n        }\n        if (savedFilter.filter.length > 0) {\n          savedFilter[value] = savedFilter[\"filter\"];\n          delete savedFilter.filter;\n          let savedFilters = localStorage.getItem(\"savedFilters\");\n          savedFilters = savedFilters ? JSON.parse(savedFilters) : [];\n          savedFilters.push(savedFilter);\n          localStorage.setItem(\"savedFilters\", JSON.stringify(savedFilters));\n          setShowSavePopUp(\"none\");\n          setSaveWarningClassName(\"\");\n          setSaveWarningLabel(\"\");\n          resetDrawer();\n        }\n      }\n    } else {\n      setShowSavePopUp(\"\");\n      setSaveWarningClassName(\"text-danger\");\n      setSaveWarningLabel(\"Enter a valid filterName\");\n    }\n    autoCompletesValueArray.forEach((item) => {\n      obj.push(Object.assign({}, item));\n    });\n    dateTimesValueArray.forEach((item) => {\n      obj.push(Object.assign({}, item));\n    });\n    conditionsValueArray.forEach((item) => {\n      obj.push(Object.assign({}, item));\n    });\n    textComponentsValueArray.forEach((item) => {\n      obj.push(Object.assign({}, item));\n    });\n    obj.forEach((objec) => {\n      delete objec.dataType;\n      delete objec.enabled;\n    });\n    props.savedFilters(obj);\n  };\n  /**\n   * Method To create the filter arrays for each specific type based on datatype\n   * @param {*} name is the name of the filter\n   * @param {*} dataType is the dataType of the filter\n   * @param {*} enabled is initial enabled status of the filter\n   * @param {*} type is the type array of the filter if present\n   * @param {*} field is the field array of the filter if present\n   * @param {*} condition is the condition array of the filter if present\n   * @param {*} options is the options array of the filter if present\n   */\n  const fromLeftToRight = (\n    name,\n    dataType,\n    enabled,\n    type,\n    field,\n    condition,\n    dataSource,\n    warning,\n    options\n  ) => {\n    setShowSavePopUp(\"none\");\n    setSaveWarningLabel(\"\");\n    setSaveWarningClassName(\"\");\n    setEmptyFilterClassName(\"\");\n    setEmptyFilterWarning(\"\");\n    if (dataType === \"AutoComplete\") {\n      let value = {\n        name: name,\n        type: type,\n        dataType: dataType,\n        enabled: enabled,\n        objectArray: [],\n      };\n      filterData.filter.forEach((item) => {\n        if (item.name === value.name) {\n          item.weight = 700;\n          item.types.forEach((tip) => {\n            if (tip.name === value.type) {\n              tip.weight = 600;\n            }\n          });\n        }\n      });\n      let autoCompleteArray = [...autoCompletesArray];\n      if (autoCompleteArray.length > 0) {\n        let index = autoCompleteArray.findIndex(\n          (x) => x.name === value.name && x.type === value.type\n        );\n        if (index === -1) {\n          autoCompleteArray.push({\n            name: name,\n            type: type,\n            dataType: dataType,\n            enabled: enabled,\n            objectArray: options,\n            validated: false,\n            warning: warning,\n          });\n        }\n      } else {\n        autoCompleteArray.push({\n          name: name,\n          type: type,\n          dataType: dataType,\n          enabled: enabled,\n          objectArray: options,\n          validated: false,\n          warning: warning,\n        });\n      }\n      setAutoCompletesArray(autoCompleteArray);\n      autoCompleteArray = [];\n    }\n    if (dataType === \"DateTime\") {\n      let value = {\n        name: name,\n        dataType: dataType,\n        enabled: enabled,\n        field: field,\n        validated: false,\n        warning: warning,\n      };\n      filterData.filter.forEach((item) => {\n        if (item.name === value.name) {\n          item.weight = 700;\n        }\n      });\n      let dateTimeArray = [...dateTimesArray];\n      if (dateTimeArray.length > 0) {\n        let index = dateTimeArray.findIndex(\n          (x) => x.name === value.name && x.field === value.field\n        );\n        if (index === -1) {\n          dateTimeArray.push({\n            name: name,\n            dataType: dataType,\n            enabled: enabled,\n            field: field,\n            validated: false,\n            warning: warning,\n          });\n        }\n      } else {\n        dateTimeArray.push({\n          name: name,\n          dataType: dataType,\n          enabled: enabled,\n          field: field,\n          validated: false,\n          warning: warning,\n        });\n      }\n      setDateTimesArray(dateTimeArray);\n      dateTimeArray = [];\n    }\n    if (dataType === \"Numeric\") {\n      let value = {\n        name: name,\n        dataType: dataType,\n        enabled: enabled,\n        condition: condition,\n        amount: \"\",\n        validated: false,\n        warning: warning,\n      };\n      filterData.filter.forEach((item) => {\n        if (item.name === value.name) {\n          item.weight = 700;\n        }\n      });\n      let conditionArray = [...conditionsArray];\n      if (conditionArray.length > 0) {\n        let index = conditionArray.findIndex(\n          (x) => x.name === value.name && x.condition === value.condition\n        );\n        if (index === -1) {\n          conditionArray.push({\n            name: name,\n            dataType: dataType,\n            enabled: enabled,\n            condition: condition,\n            amount: \"\",\n            validated: false,\n            warning: warning,\n          });\n        }\n      } else {\n        conditionArray.push({\n          name: name,\n          dataType: dataType,\n          enabled: enabled,\n          condition: condition,\n          amount: \"\",\n          validated: false,\n          warning: warning,\n        });\n      }\n      setConditionsArray(conditionArray);\n      conditionArray = [];\n    }\n    if (dataType === \"Text\") {\n      let value = {\n        name: name,\n        dataType: dataType,\n        enabled: enabled,\n        validated: false,\n        warning: warning,\n      };\n      filterData.filter.forEach((item) => {\n        if (item.name === value.name) {\n          item.weight = 700;\n        }\n      });\n      let textComponentArray = [...textComponentsArray];\n      if (textComponentArray.length > 0) {\n        let index = textComponentArray.findIndex(\n          (x) => x.name === value.name && x.dataType === value.dataType\n        );\n        if (index === -1) {\n          textComponentArray.push({\n            name: name,\n            dataType: dataType,\n            enabled: enabled,\n            validated: false,\n            warning: warning,\n          });\n        }\n      } else {\n        textComponentArray.push({\n          name: name,\n          dataType: dataType,\n          enabled: enabled,\n          validated: false,\n          warning: warning,\n        });\n      }\n      setTextComponentsArray(textComponentArray);\n      textComponentArray = [];\n    }\n  };\n  /**\n   * Method To create arrays containing values upon change trigger from respective input fields\n   * @param {*} item is the specific filter element object\n   * @param {*} valueArray is the selected multiselect options\n   */\n  const createAutoCompleteArray = (item, valueArray) => {\n    setShowSavePopUp(\"none\");\n    setSaveWarningLabel(\"\");\n    setSaveWarningClassName(\"\");\n    let autoCompleteArray = [...autoCompletesArray];\n    let tempObj = JSON.parse(JSON.stringify(item));\n    tempObj.value = valueArray;\n    let autoCompleteValueArray = [...autoCompletesValueArray];\n    if (autoCompleteValueArray.length > 0) {\n      let index = autoCompleteValueArray.findIndex(\n        (x) => x.name === tempObj.name && x.type === tempObj.type\n      );\n      if (index === -1) {\n        autoCompleteValueArray.push({\n          name: tempObj.name,\n          type: tempObj.type,\n          dataType: tempObj.dataType,\n          enabled: tempObj.enabled,\n          value: tempObj.value,\n        });\n      } else {\n        autoCompleteValueArray[index].value = tempObj.value;\n      }\n      autoCompleteValueArray.forEach((valueItem) => {\n        autoCompleteArray.forEach((item) => {\n          if (item.name === valueItem.name && item.type === valueItem.type) {\n            item.validated = true;\n            item.warning = \"\";\n          }\n        });\n      });\n    } else {\n      autoCompleteValueArray.push({\n        name: tempObj.name,\n        type: tempObj.type,\n        dataType: tempObj.dataType,\n        enabled: tempObj.enabled,\n        value: tempObj.value,\n      });\n      autoCompleteValueArray.forEach((valueItem) => {\n        autoCompleteArray.forEach((item) => {\n          if (item.name === valueItem.name && item.type === valueItem.type) {\n            item.validated = true;\n            item.warning = \"\";\n          }\n        });\n      });\n    }\n    setAutoCompletesArray(autoCompleteArray);\n    autoCompleteArray = [];\n    setAutoCompletesValueArray(autoCompleteValueArray);\n    autoCompleteValueArray = [];\n  };\n  /**\n   * Method To delete the specific element from filter array upon clicking close\n   * @param {*} item is the specific filter element object\n   */\n  const deleteAutoCompleteElement = (item) => {\n    filterData.filter.forEach((it) => {\n      it.types.forEach((tip) => {\n        if (tip.name === item.type && item.name === it.name) {\n          tip.weight = 400;\n        }\n      });\n    });\n    let autoCompleteArray = [...autoCompletesArray];\n    let index = autoCompleteArray.findIndex(\n      (x) => x.name === item.name && x.type === item.type\n    );\n    if (index !== -1) {\n      autoCompleteArray.splice(index, 1);\n    } else {\n      autoCompleteArray = [];\n    }\n    setAutoCompletesArray(autoCompleteArray);\n    autoCompleteArray.forEach((aut) => {\n      filterData.filter.forEach((fit) => {\n        if (fit.types && fit.name !== aut.name && fit.weight === 700) {\n          fit.weight = 400;\n        }\n      });\n    });\n  };\n  /**\n   * Method To toggle the switch to enable and disable the input fields\n   * @param {*} item is the specific filter element object\n   */\n  const handleAutoCompleteEnabled = (item) => {\n    let autoCompleteArray = [...autoCompletesArray];\n    let index = autoCompleteArray.findIndex(\n      (x) => x.name === item.name && x.type === item.type\n    );\n    if (index !== -1) {\n      autoCompleteArray[index].enabled = !autoCompleteArray[index].enabled;\n    }\n    setAutoCompletesArray(autoCompleteArray);\n    if (autoCompletesValueArray.length > 0) {\n      let autoCompleteValueArray = [...autoCompletesValueArray];\n      let index = autoCompleteValueArray.findIndex(\n        (x) => x.name === item.name && x.type === item.type\n      );\n      autoCompleteValueArray[index].enabled = !autoCompleteValueArray[index]\n        .enabled;\n      setAutoCompletesValueArray(autoCompleteValueArray);\n      autoCompleteValueArray = [];\n    }\n  };\n  /**\n   * Method To delete the specific element from filter array upon clicking close\n   * @param {*} item is the specific filter element object\n   */\n  const deleteDateTimeElement = (item) => {\n    filterData.filter.forEach((it) => {\n      if (it.name === item.name) {\n        it.weight = 400;\n      }\n    });\n    filterData.filter.forEach((it) => {\n      if (it.name === item.name) {\n        item.weight = 400;\n      }\n    });\n    let dateTimeArray = [...dateTimesArray];\n    let index = dateTimeArray.findIndex((x) => x.name === item.name);\n    dateTimeArray.splice(index, 1);\n    dateTimeArray.forEach((item) => {\n      item.field.forEach((fieldArray) => {\n        fieldArray.value = \"\";\n      });\n    });\n    setDateTimesArray(dateTimeArray);\n    dateTimeArray = [];\n    filterData.filter.forEach((filters) => {\n      if (filters.name === item.name) {\n        item.field.forEach((fieldArray) => {\n          fieldArray.value = \"\";\n        });\n      }\n    });\n    if (item === {}) {\n      setDateTimesValueArray([]);\n    }\n  };\n  /**\n   * Method To toggle the switch to enable and disable the input fields\n   * @param {*} item is the specific filter element object\n   */\n  const handleDateTimeEnabled = (item) => {\n    let dateTimeArray = [...dateTimesArray];\n    let index = dateTimeArray.findIndex(\n      (x) => x.name === item.name && x.field === item.field\n    );\n    if (index !== -1) {\n      dateTimeArray[index].enabled = !dateTimeArray[index].enabled;\n    }\n    setDateTimesArray(dateTimeArray);\n    dateTimeArray = [];\n    if (dateTimesValueArray.length > 0) {\n      let dateTimeValueArray = [...dateTimesValueArray];\n      let tempArray = [];\n      item.field.forEach((item) => {\n        tempArray.push(item.column);\n      });\n      let index = dateTimeValueArray.findIndex(\n        (x) => x.name === item.name && tempArray.includes(x.fieldValue)\n      );\n      if (index !== -1) {\n        dateTimeValueArray.forEach((item) => {\n          item.enabled = !item.enabled;\n        });\n      }\n\n      setDateTimesValueArray(dateTimeValueArray);\n      dateTimeValueArray = [];\n    }\n  };\n  /**\n   * Method To create arrays containing values upon change trigger from respective input fields\n   * @param {*} item is the specific filter element object\n   * @param {*} fieldName is the specific type of field/date in which change is happening\n   * @param {*} value is value of the field\n   */\n  const createDateTimeArray = (item, fieldName, value) => {\n    setShowSavePopUp(\"none\");\n    setSaveWarningLabel(\"\");\n    setSaveWarningClassName(\"\");\n    let dateTimeArray = [...dateTimesArray];\n    console.log(dateTimesArray);\n    console.log(value);\n    let tempObj = JSON.parse(JSON.stringify(item));\n    tempObj.fieldValue = fieldName;\n    tempObj.value = value;\n    let dateTimeValueArray = [...dateTimesValueArray];\n    if (dateTimeValueArray.length > 0) {\n      let index = dateTimeValueArray.findIndex(\n        (x) => x.fieldValue === tempObj.fieldValue && x.name === tempObj.name\n      );\n      if (index === -1) {\n        dateTimeValueArray.push({\n          name: tempObj.name,\n          dataType: tempObj.dataType,\n          enabled: tempObj.enabled,\n          fieldValue: tempObj.fieldValue,\n          value: tempObj.value,\n        });\n      } else {\n        dateTimeValueArray[index].value = tempObj.value;\n      }\n      dateTimeValueArray.forEach((valueItem) => {\n        dateTimeArray.forEach((item) => {\n          if (item.name === valueItem.name) {\n            item.validated = true;\n            item.warning = \"\";\n          }\n        });\n      });\n    } else {\n      dateTimeValueArray.push({\n        name: tempObj.name,\n        dataType: tempObj.dataType,\n        enabled: tempObj.enabled,\n        fieldValue: tempObj.fieldValue,\n        value: tempObj.value,\n      });\n      dateTimeValueArray.forEach((valueItem) => {\n        dateTimeArray.forEach((item) => {\n          if (item.name === valueItem.name) {\n            item.validated = true;\n            item.warning = \"\";\n          }\n        });\n      });\n    }\n    setDateTimesValueArray(dateTimeValueArray);\n    dateTimeValueArray = [];\n    dateTimeArray = [...dateTimesArray];\n    if (dateTimeArray.length > 0) {\n      dateTimeArray.forEach((item) => {\n        item.field.forEach((fieldArray) => {\n          if (fieldArray.column === fieldName) {\n            fieldArray.value = value;\n          }\n        });\n      });\n      setDateTimesArray(dateTimeArray);\n    }\n    dateTimeArray = [];\n  };\n  /**\n   * Method to Convert Date to required Format as per value of type\n   * @param {String} inputDate\n   * @param {String} type\n   */\n  const getValueOfDate = (dateValue) => {\n    const date = new Date(dateValue);\n    console.log(date);\n    const dateTimeFormat = new Intl.DateTimeFormat(\"en-US\", {\n      year: \"numeric\",\n      month: \"2-digit\",\n      day: \"2-digit\",\n      hour: \"2-digit\",\n      minute: \"numeric\",\n      seconds: \"numeric\",\n    });\n    const [\n      { value: month },\n      ,\n      { value: day },\n      ,\n      { value: year },\n      ,\n      { value: hour },\n      ,\n      { value: minute },\n      ,\n      { value: seconds },\n    ] = dateTimeFormat.formatToParts(date);\n    return `${year}-${month}-${day}${\"T\"}${hour}:${minute}`;\n  };\n  /**\n   * Method To set both from date and to date as todays date\n   */\n  const addToday = () => {\n    let todayDate = new Date();\n    let dated = getValueOfDate(todayDate);\n    console.log(dated);\n    let dateTimeArray = [...dateTimesArray];\n    let dateTimeValueArray = [...dateTimesValueArray];\n    if (dateTimeArray.length > 0) {\n      dateTimeArray.forEach((item) => {\n        item.field.forEach((fieldArray) => {\n          fieldArray.value = dated;\n          if (dateTimeValueArray.length > 1) {\n            dateTimeValueArray.forEach((item) => {\n              if (item.fieldValue === fieldArray.column) {\n                item.value = dated;\n              }\n            });\n          } else {\n            dateTimeValueArray.push({\n              name: item.name,\n              dataType: item.dataType,\n              enabled: item.enabled,\n              fieldValue: fieldArray.column,\n              value: dated,\n            });\n          }\n        });\n      });\n      setDateTimesArray(dateTimeArray);\n      setDateTimesValueArray(dateTimeValueArray);\n    }\n  };\n  /**\n   * Method To set both from date and to date as tomorrow's date\n   */\n  const addTomorrow = () => {\n    let fromDate = new Date();\n    let toDate = new Date();\n    fromDate.setDate(fromDate.getDate() + 1);\n    toDate.setDate(toDate.getDate() + 1);\n    fromDate = getValueOfDate(fromDate);\n    toDate = getValueOfDate(toDate);\n    let dateTimeArray = [...dateTimesArray];\n    let dateTimeValueArray = [...dateTimesValueArray];\n    if (dateTimeArray.length > 0) {\n      dateTimeArray.forEach((item) => {\n        item.field[0].value = fromDate;\n        item.field[1].value = toDate;\n        item.field.forEach((fieldArray) => {\n          if (dateTimeValueArray.length > 1) {\n            dateTimeValueArray.forEach((arr) => {\n              if (arr.fieldValue === fieldArray.column) {\n                arr.value = fieldArray.value;\n              }\n            });\n          } else {\n            dateTimeValueArray.push({\n              name: item.name,\n              dataType: item.dataType,\n              enabled: item.enabled,\n              fieldValue: fieldArray.column,\n              value: fieldArray.value,\n            });\n          }\n        });\n      });\n\n      setDateTimesArray(dateTimeArray);\n      setDateTimesValueArray(dateTimeValueArray);\n    }\n  };\n  /**\n   * Method To set the date range as this month\n   */\n  const addThisMonth = () => {\n    let today = new Date();\n    let fromDate = new Date(today.getFullYear(), today.getMonth(), 1);\n    let toDate = new Date(today.getFullYear(), today.getMonth() + 1, 0);\n    fromDate = getValueOfDate(fromDate);\n    toDate = getValueOfDate(toDate);\n    let dateTimeArray = [...dateTimesArray];\n    let dateTimeValueArray = [...dateTimesValueArray];\n    if (dateTimeArray.length > 0) {\n      dateTimeArray.forEach((item) => {\n        item.field[0].value = fromDate;\n        item.field[1].value = toDate;\n        item.field.forEach((fieldArray) => {\n          if (dateTimeValueArray.length > 1) {\n            dateTimeValueArray.forEach((arr) => {\n              if (arr.fieldValue === fieldArray.column) {\n                arr.value = fieldArray.value;\n              }\n            });\n          } else {\n            dateTimeValueArray.push({\n              name: item.name,\n              dataType: item.dataType,\n              enabled: item.enabled,\n              fieldValue: fieldArray.column,\n              value: fieldArray.value,\n            });\n          }\n        });\n      });\n\n      setDateTimesArray(dateTimeArray);\n      setDateTimesValueArray(dateTimeValueArray);\n    }\n  };\n  /**\n   * Method To set the date range as next 14 days\n   */\n  const addForteenDays = () => {\n    let fromDate = new Date();\n    let toDate = new Date();\n    fromDate.setDate(fromDate.getDate() + 1);\n    toDate.setDate(toDate.getDate() + 14);\n    fromDate = getValueOfDate(fromDate);\n    toDate = getValueOfDate(toDate);\n    let dateTimeArray = [...dateTimesArray];\n    let dateTimeValueArray = [...dateTimesValueArray];\n    if (dateTimeArray.length > 0) {\n      dateTimeArray.forEach((item) => {\n        item.field[0].value = fromDate;\n        item.field[1].value = toDate;\n        item.field.forEach((fieldArray) => {\n          if (dateTimeValueArray.length > 1) {\n            dateTimeValueArray.forEach((arr) => {\n              if (arr.fieldValue === fieldArray.column) {\n                arr.value = fieldArray.value;\n              }\n            });\n          } else {\n            dateTimeValueArray.push({\n              name: item.name,\n              dataType: item.dataType,\n              enabled: item.enabled,\n              fieldValue: fieldArray.column,\n              value: fieldArray.value,\n            });\n          }\n        });\n      });\n\n      setDateTimesArray(dateTimeArray);\n      setDateTimesValueArray(dateTimeValueArray);\n    }\n  };\n  /**\n   * Method To set the date range as next 7 days\n   */\n  const addSevenDays = () => {\n    let fromDate = new Date();\n    let toDate = new Date();\n    fromDate.setDate(fromDate.getDate() + 1);\n    toDate.setDate(toDate.getDate() + 7);\n    fromDate = getValueOfDate(fromDate);\n    toDate = getValueOfDate(toDate);\n    let dateTimeArray = [...dateTimesArray];\n    let dateTimeValueArray = [...dateTimesValueArray];\n    if (dateTimeArray.length > 0) {\n      dateTimeArray.forEach((item) => {\n        item.field[0].value = fromDate;\n        item.field[1].value = toDate;\n        item.field.forEach((fieldArray) => {\n          if (dateTimeValueArray.length > 1) {\n            dateTimeValueArray.forEach((arr) => {\n              if (arr.fieldValue === fieldArray.column) {\n                arr.value = fieldArray.value;\n              }\n            });\n          } else {\n            dateTimeValueArray.push({\n              name: item.name,\n              dataType: item.dataType,\n              enabled: item.enabled,\n              fieldValue: fieldArray.column,\n              value: fieldArray.value,\n            });\n          }\n        });\n      });\n\n      setDateTimesArray(dateTimeArray);\n      setDateTimesValueArray(dateTimeValueArray);\n    }\n  };\n  /**\n   * Method To set the date range as current week Sunday to Saturday\n   */\n  const addThisWeek = () => {\n    let today = new Date();\n    let from = today.getDate() - today.getDay();\n    let to = from + 6;\n    let fromDate = new Date(today.setDate(from)).toUTCString();\n    let toDate = new Date(today.setDate(to)).toUTCString();\n    fromDate = getValueOfDate(fromDate);\n    toDate = getValueOfDate(toDate);\n    let dateTimeArray = [...dateTimesArray];\n    let dateTimeValueArray = [...dateTimesValueArray];\n    if (dateTimeArray.length > 0) {\n      dateTimeArray.forEach((item) => {\n        item.field[0].value = fromDate;\n        item.field[1].value = toDate;\n        item.field.forEach((fieldArray) => {\n          if (dateTimeValueArray.length > 1) {\n            dateTimeValueArray.forEach((arr) => {\n              if (arr.fieldValue === fieldArray.column) {\n                arr.value = fieldArray.value;\n              }\n            });\n          } else {\n            dateTimeValueArray.push({\n              name: item.name,\n              dataType: item.dataType,\n              enabled: item.enabled,\n              fieldValue: fieldArray.column,\n              value: fieldArray.value,\n            });\n          }\n        });\n      });\n\n      setDateTimesArray(dateTimeArray);\n      setDateTimesValueArray(dateTimeValueArray);\n    }\n  };\n  /**\n   * Method To set the date range as next 30 days\n   */\n  const addThirtyDays = () => {\n    let from = new Date();\n    let to = new Date();\n    from.setDate(from.getDate() + 1);\n    to.setDate(to.getDate() + 30);\n    let fromDate = getValueOfDate(from);\n    let toDate = getValueOfDate(to);\n    let dateTimeArray = [...dateTimesArray];\n    let dateTimeValueArray = [...dateTimesValueArray];\n    if (dateTimeArray.length > 0) {\n      dateTimeArray.forEach((item) => {\n        item.field[0].value = fromDate;\n        item.field[1].value = toDate;\n        item.field.forEach((fieldArray) => {\n          if (dateTimeValueArray.length > 1) {\n            dateTimeValueArray.forEach((arr) => {\n              if (arr.fieldValue === fieldArray.column) {\n                arr.value = fieldArray.value;\n              }\n            });\n          } else {\n            dateTimeValueArray.push({\n              name: item.name,\n              dataType: item.dataType,\n              enabled: item.enabled,\n              fieldValue: fieldArray.column,\n              value: fieldArray.value,\n            });\n          }\n        });\n      });\n\n      setDateTimesArray(dateTimeArray);\n      setDateTimesValueArray(dateTimeValueArray);\n    }\n  };\n  /**\n   * Method To set the date range as next n days\n   * @param {*} value is the no: of days after today\n   */\n  const nextDayChange = (value) => {\n    if (value === \"\") {\n      value = 1;\n    }\n    let fromDate = new Date();\n    let toDate = new Date();\n    if (value !== \"0\") {\n      fromDate.setDate(fromDate.getDate() + 1);\n      toDate.setDate(toDate.getDate() + parseInt(value));\n    }\n    fromDate = getValueOfDate(fromDate);\n    toDate = getValueOfDate(toDate);\n    let dateTimeArray = [...dateTimesArray];\n    let dateTimeValueArray = [...dateTimesValueArray];\n    if (dateTimeArray.length > 0) {\n      dateTimeArray.forEach((item) => {\n        item.field[0].value = fromDate;\n        item.field[1].value = toDate;\n        item.field.forEach((fieldArray) => {\n          if (dateTimeValueArray.length > 1) {\n            dateTimeValueArray.forEach((arr) => {\n              if (arr.fieldValue === fieldArray.column) {\n                arr.value = fieldArray.value;\n              }\n            });\n          } else {\n            dateTimeValueArray.push({\n              name: item.name,\n              dataType: item.dataType,\n              enabled: item.enabled,\n              fieldValue: fieldArray.column,\n              value: fieldArray.value,\n            });\n          }\n        });\n      });\n\n      setDateTimesArray(dateTimeArray);\n      setDateTimesValueArray(dateTimeValueArray);\n    }\n  };\n  /**\n   * Method To set the date range as last n days\n   * @param {*} value is the no: of days before today\n   */\n  const lastDayChange = (value) => {\n    if (value === \"\") {\n      value = 1;\n    }\n    let fromDate = new Date();\n    let toDate = new Date();\n    if (value !== \"0\") {\n      fromDate.setDate(fromDate.getDate() - parseInt(value));\n      toDate.setDate(toDate.getDate() - 1);\n    }\n    fromDate = getValueOfDate(fromDate);\n    toDate = getValueOfDate(toDate);\n    let dateTimeArray = [...dateTimesArray];\n    let dateTimeValueArray = [...dateTimesValueArray];\n    if (dateTimeArray.length > 0) {\n      dateTimeArray.forEach((item) => {\n        item.field[0].value = fromDate;\n        item.field[1].value = toDate;\n        item.field.forEach((fieldArray) => {\n          if (dateTimeValueArray.length > 1) {\n            dateTimeValueArray.forEach((arr) => {\n              if (arr.fieldValue === fieldArray.column) {\n                arr.value = fieldArray.value;\n              }\n            });\n          } else {\n            dateTimeValueArray.push({\n              name: item.name,\n              dataType: item.dataType,\n              enabled: item.enabled,\n              fieldValue: fieldArray.column,\n              value: fieldArray.value,\n            });\n          }\n        });\n      });\n\n      setDateTimesArray(dateTimeArray);\n      setDateTimesValueArray(dateTimeValueArray);\n    }\n  };\n  /**\n   * Method To toggle the switch to enable and disable the input fields\n   * @param {*} item is the specific filter element object\n   */\n  const handleCondionalEnabled = (item) => {\n    let conditionArray = [...conditionsArray];\n    let index = conditionArray.findIndex(\n      (x) => x.name === item.name && x.condition === item.condition\n    );\n    if (index !== -1) {\n      conditionArray[index].enabled = !conditionArray[index].enabled;\n    }\n    setConditionsArray(conditionArray);\n    let conditionValueArray = [];\n    conditionValueArray = [...conditionsValueArray];\n    if (conditionValueArray.length > 0) {\n      let index = conditionValueArray.findIndex(\n        (x) => x.name === item.name && x.dataType === item.dataType\n      );\n      conditionValueArray[index].enabled = !conditionValueArray[index].enabled;\n    }\n    setConditionsValueArray(conditionValueArray);\n    conditionValueArray = [];\n  };\n  /**\n   * Method To create arrays containing values upon change trigger from respective input fields\n   * @param {*} item is the specific filter element object\n   * @param {*} value is value of the input field\n   */\n  const createConditionalArray = (item, value) => {\n    setShowSavePopUp(\"none\");\n    setSaveWarningLabel(\"\");\n    setSaveWarningClassName(\"\");\n    let conditionArray = [...conditionsArray];\n    let valueArray = [];\n    item.condition.forEach((it) => {\n      valueArray.push(it.value);\n    });\n    let conditionValueArray = [...conditionsValueArray];\n    if (conditionValueArray.length > 0) {\n      let index = conditionValueArray.findIndex(\n        (x) => x.name === item.name && x.dataType === item.dataType\n      );\n      if (index !== -1) {\n        if (valueArray.includes(value)) {\n          conditionValueArray[index].condition = value;\n        } else {\n          conditionValueArray[index].amount = value;\n        }\n      }\n      conditionValueArray.forEach((valueItem) => {\n        conditionArray.forEach((item) => {\n          if (item.name === valueItem.name) {\n            item.validated = true;\n            item.warning = \"\";\n          }\n        });\n      });\n    } else {\n      if (valueArray.includes(value)) {\n        conditionValueArray.push({\n          name: item.name,\n          dataType: item.dataType,\n          enabled: item.enabled,\n          condition: value,\n        });\n      } else {\n        conditionValueArray.push({\n          name: item.name,\n          dataType: item.dataType,\n          enabled: item.enabled,\n          condition: item.condition[0].value,\n          amount: value,\n        });\n        conditionValueArray.forEach((valueItem) => {\n          conditionArray.forEach((item) => {\n            if (item.name === valueItem.name) {\n              item.validated = true;\n              item.warning = \"\";\n            }\n          });\n        });\n      }\n    }\n    setConditionsValueArray(conditionValueArray);\n    conditionValueArray = [];\n  };\n  /**\n   * Method To delete the specific element from filter array upon clicking close\n   * @param {*} item is the specific filter element object\n   */\n  const deleteConditionalElement = (item) => {\n    filterData.filter.forEach((it) => {\n      if (it.name === item.name) {\n        it.weight = 400;\n      }\n    });\n    let conditionArray = [...conditionsArray];\n    let index = conditionArray.findIndex(\n      (x) => x.name === item.name && x.dataType === item.dataType\n    );\n    if (index !== -1) {\n      conditionArray.splice(index, 1);\n    } else {\n      conditionArray = [];\n    }\n    setConditionsArray(conditionArray);\n  };\n  /**\n   * Method To create arrays containing values upon change trigger from respective input fields\n   * @param {*} item is the specific filter element object\n   * @param {*} value is value of the input field\n   */\n  const createTextComponentsArray = (item, value) => {\n    setShowSavePopUp(\"none\");\n    setSaveWarningLabel(\"\");\n    setSaveWarningClassName(\"\");\n    let textComponentArray = [...textComponentsArray];\n    let textComponentValueArray = [...textComponentsValueArray];\n    if (textComponentValueArray.length > 0) {\n      let index = textComponentValueArray.findIndex(\n        (x) => x.name === item.name && x.dataType === item.dataType\n      );\n      if (index === -1) {\n        textComponentValueArray.push({\n          name: item.name,\n          dataType: item.dataType,\n          enabled: item.enabled,\n          value: value,\n        });\n      } else {\n        textComponentValueArray[index].value = value;\n      }\n      textComponentValueArray.forEach((valueItem) => {\n        textComponentArray.forEach((item) => {\n          if (item.name === valueItem.name) {\n            item.validated = true;\n            item.warning = \"\";\n          }\n        });\n      });\n    } else {\n      textComponentValueArray.push({\n        name: item.name,\n        dataType: item.dataType,\n        enabled: item.enabled,\n        value: value,\n      });\n      textComponentValueArray.forEach((valueItem) => {\n        textComponentArray.forEach((item) => {\n          if (item.name === valueItem.name) {\n            item.validated = true;\n            item.warning = \"\";\n          }\n        });\n      });\n    }\n    setTextComponentsValueArray(textComponentValueArray);\n    textComponentValueArray = [];\n  };\n  /**\n   * Method To toggle the switch to enable and disable the input fields\n   * @param {*} item is the specific filter element object\n   */\n  const handleTextComponentEnabled = (item) => {\n    let textComponentArray = [...textComponentsArray];\n    let index = textComponentArray.findIndex(\n      (x) => x.name === item.name && x.dataType === item.dataType\n    );\n    if (index !== -1) {\n      textComponentArray[index].enabled = !textComponentArray[index].enabled;\n    }\n    setTextComponentsArray(textComponentArray);\n    textComponentArray = [];\n    let textComponentValueArray = [...textComponentsValueArray];\n    if (textComponentValueArray.length > 0) {\n      let index = textComponentValueArray.findIndex(\n        (x) => x.name === item.name && x.dataType === item.dataType\n      );\n      if (index !== -1) {\n        textComponentValueArray[index].enabled = !textComponentValueArray[index]\n          .enabled;\n      }\n    }\n    setTextComponentsValueArray(textComponentValueArray);\n    textComponentValueArray = [];\n  };\n  /**\n   * Method To return the specific options array for autoComplete element\n   * @param {*} name is the name of the filter\n   * @param {*} typeName is the type of the filter\n   */\n  const returnOptions = (name, typeName) => {\n    let options = [];\n    filterData.filter.forEach((item) => {\n      if (item.name === name) {\n        item.types.forEach((type) => {\n          if (type.name === typeName) {\n            options = [...type.options];\n          }\n        });\n      }\n    });\n    return options;\n  };\n  /**\n   * Method To delete the specific element from filter array upon clicking close\n   * @param {*} item is the specific filter element object\n   */\n  const deleteTextComponentElement = (item) => {\n    filterData.filter.forEach((it) => {\n      if (it.name === item.name) {\n        it.weight = 400;\n      }\n    });\n    let textComponentArray = [...textComponentsArray];\n    let index = textComponentArray.findIndex(\n      (x) => x.name === item.name && x.dataType === item.dataType\n    );\n    if (index !== -1) {\n      textComponentArray.splice(index, 1);\n    } else {\n      textComponentArray = [];\n    }\n    setTextComponentsArray(textComponentArray);\n  };\n  /**\n   * Method To map the applied filters to drawer on clicking the chips\n   * @param {*} items is the  filter element array\n   */\n  const addAppliedFilters = (items) => {\n    let autoComplete = [];\n    let dateTime = [];\n    let condition = [];\n    let text = [];\n    items.forEach((item) => {\n      if (item.dataType === \"AutoComplete\") {\n        let autoCompleteArray = [...autoComplete];\n        let options = returnOptions(item.name, item.type);\n        if (autoCompleteArray.length > 0) {\n          let index = autoCompleteArray.findIndex(\n            (x) => x.name === item.name && item.type === x.type\n          );\n\n          if (index === -1) {\n            autoCompleteArray.push({\n              name: item.name,\n              dataType: item.dataType,\n              type: item.type,\n              enabled: item.enabled,\n              value: item.value,\n              objectArray: options,\n            });\n          }\n        } else {\n          autoCompleteArray.push({\n            name: item.name,\n            dataType: item.dataType,\n            type: item.type,\n            enabled: item.enabled,\n            value: item.value,\n            objectArray: options,\n          });\n        }\n        autoComplete = autoCompleteArray;\n      } else if (item.dataType === \"DateTime\") {\n        let dateTimeArray = [...dateTime];\n        if (dateTimeArray.length === 0) {\n          dateTimeArray.push({\n            name: item.name,\n            dataType: item.dataType,\n            enabled: item.enabled,\n            field: [],\n          });\n          dateTimesValueArray.forEach((item) => {\n            if (item.fieldValue) {\n              dateTimeArray.forEach((dt) => {\n                dt.field.push({\n                  column: item.fieldValue,\n                  value: item.value,\n                });\n              });\n            }\n          });\n        }\n        dateTime = dateTimeArray;\n      } else if (item.dataType === \"Numeric\") {\n        let conditionArray = [...condition];\n        if (conditionArray.length === 0) {\n          conditionArray.push({\n            name: item.name,\n            dataType: item.dataType,\n            enabled: item.enabled,\n            condition: [],\n            amount: item.amount,\n            value: item.condition,\n          });\n          filterData.filter.forEach((data) => {\n            if (data.dataType === \"Numeric\") {\n              data.condition.forEach((values) => {\n                conditionArray.forEach((item) => {\n                  item.condition.push({ value: values.value });\n                });\n              });\n            }\n          });\n        }\n        condition = conditionArray;\n      } else {\n        let textComponentArray = [...textComponentsArray];\n        if (textComponentArray.length > 0) {\n          let index = textComponentArray.findIndex((x) => x.name === item.name);\n          if (index === -1) {\n            textComponentArray.push({\n              name: item.name,\n              dataType: item.dataType,\n              enabled: item.enabled,\n              value: item.value,\n            });\n          }\n        } else {\n          textComponentArray.push({\n            name: item.name,\n            dataType: item.dataType,\n            enabled: item.enabled,\n            value: item.value,\n          });\n        }\n        text = textComponentArray;\n      }\n      setAutoCompletesArray(autoComplete);\n      setDateTimesArray(dateTime);\n      setConditionsArray(condition);\n      setTextComponentsArray(text);\n    });\n    setApplyFilter(true);\n  };\n  /**\n   * Method To map the saved filters to drawer on clicking the specific saved filter name\n   * @param {*} item is the specific filter element object\n   */\n  const addSavedFilters = (item) => {\n    setFilterShow(\"\");\n    setRecentFilterShow(\"none\");\n    let autoComplete = [];\n    let condition = [];\n    let text = [];\n    let tempArr = [];\n    let savedFilters = [];\n    for (let objects in item) {\n      item[objects].forEach((arrays) => {\n        for (let array in arrays) {\n          tempArr.push(arrays[array]);\n        }\n      });\n    }\n    let arr = [];\n    tempArr.forEach((arrays) => {\n      arrays.forEach((array) => {\n        savedFilters.push(array);\n      });\n    });\n    savedFilters.forEach((items) => {\n      filterData.filter.forEach((fil) => {\n        if (fil.types.length) {\n          let index = fil.types.findIndex(\n            (x) => x.name === items.type && fil.name === items.name\n          );\n          if (index !== -1) {\n            arr = fil.types[index].options;\n          }\n        }\n      });\n      if (items.dataType === \"AutoComplete\") {\n        let autoCompleteArray = [...autoComplete];\n        if (autoCompleteArray.length > 0) {\n          let index = autoCompleteArray.findIndex(\n            (x) => x.name === items.name && items.type === x.type\n          );\n          if (index === -1) {\n            autoCompleteArray.push({\n              name: items.name,\n              dataType: items.dataType,\n              type: items.type,\n              enabled: items.enabled,\n              value: items.value,\n              objectArray: arr,\n            });\n          }\n        } else {\n          autoCompleteArray.push({\n            name: items.name,\n            dataType: items.dataType,\n            type: items.type,\n            enabled: items.enabled,\n            value: items.value,\n            objectArray: arr,\n          });\n        }\n        autoComplete = autoCompleteArray;\n      }\n    });\n    setAutoCompletesArray(autoComplete);\n    let saveTempDateTimeArray = [];\n    savedFilters.forEach((items) => {\n      if (items.dataType === \"DateTime\") {\n        if (saveTempDateTimeArray.length === 0) {\n          saveTempDateTimeArray.push({\n            name: items.name,\n            dataType: items.dataType,\n            enabled: items.enabled,\n            field: [],\n          });\n        }\n      }\n    });\n    savedFilters.forEach((saved) => {\n      if (saved.dataType === \"DateTime\") {\n        if (saveTempDateTimeArray.length > 0) {\n          saveTempDateTimeArray.forEach((filter) => {\n            filter.field.push({\n              column: saved.fieldValue,\n              value: saved.value,\n            });\n          });\n        }\n      }\n    });\n    setDateTimesArray(saveTempDateTimeArray);\n    savedFilters.forEach((items) => {\n      if (items.dataType === \"Numeric\") {\n        let conditionArray = [...condition];\n        if (conditionArray.length === 0) {\n          conditionArray.push({\n            name: items.name,\n            dataType: items.dataType,\n            enabled: items.enabled,\n            condition: [],\n            amount: items.amount,\n            value: items.condition,\n          });\n          filterData.filter.forEach((data) => {\n            if (data.dataType === \"Numeric\") {\n              data.condition.forEach((values) => {\n                conditionArray.forEach((items) => {\n                  items.condition.push({ value: values.value });\n                });\n              });\n            }\n          });\n        }\n        condition = conditionArray;\n      }\n    });\n    setConditionsArray(condition);\n    savedFilters.forEach((items) => {\n      if (items.dataType === \"Text\") {\n        let textComponentArray = [...text];\n        if (textComponentArray.length > 0) {\n          let index = textComponentArray.findIndex(\n            (x) => x.name === items.name\n          );\n          if (index === -1) {\n            textComponentArray.push({\n              name: items.name,\n              dataType: items.dataType,\n              enabled: items.enabled,\n              value: items.value,\n            });\n          }\n        } else {\n          textComponentArray.push({\n            name: items.name,\n            dataType: items.dataType,\n            enabled: items.enabled,\n            value: items.value,\n          });\n        }\n        text = textComponentArray;\n      }\n    });\n    setTextComponentsArray(text);\n    setApplyFilter(true);\n  };\n  /**\n   * Method To reset the right drawer\n   */\n  const resetDrawer = () => {\n    deleteAutoCompleteElement({});\n    deleteConditionalElement({});\n    deleteDateTimeElement({});\n    deleteTextComponentElement({});\n    setApplyFilterChip({});\n    setRecentFilterShow(\"\");\n    setFilterShow(\"none\");\n  };\n  const { ref, showApplyFilter, setApplyFilter } = useComponentVisible(true);\n  return (\n    <div ref={ref}>\n      {showApplyFilter && (\n        <div className=\"filter--grid\" ref={ref}>\n          <div className=\"filter__wrap\">\n            <div className=\"filter__list\">\n              <LeftDrawer\n                filterData={filterData}\n                fromLeftToRight={fromLeftToRight}\n              />\n            </div>\n            <div className=\"filter__inputwrap\">\n              <RightDrawer\n                applyFilter={applyFilter}\n                saveFilter={saveFilter}\n                createAutoCompleteArray={createAutoCompleteArray}\n                handleAutoCompleteEnabled={handleAutoCompleteEnabled}\n                deleteAutoCompleteElement={deleteAutoCompleteElement}\n                autoCompleteArray={autoCompletesArray}\n                dateTimesArray={dateTimesArray}\n                deleteDateTimeElement={deleteDateTimeElement}\n                handleDateTimeEnabled={handleDateTimeEnabled}\n                createDateTimeArray={createDateTimeArray}\n                addToday={addToday}\n                addTomorrow={addTomorrow}\n                addThisMonth={addThisMonth}\n                addForteenDays={addForteenDays}\n                addSevenDays={addSevenDays}\n                addThisWeek={addThisWeek}\n                addThirtyDays={addThirtyDays}\n                lastDayChange={lastDayChange}\n                nextDayChange={nextDayChange}\n                conditionsArray={conditionsArray}\n                handleCondionalEnabled={handleCondionalEnabled}\n                createConditionalArray={createConditionalArray}\n                deleteConditionalElement={deleteConditionalElement}\n                textComponentsArray={textComponentsArray}\n                deleteTextComponentElement={deleteTextComponentElement}\n                createTextComponentsArray={createTextComponentsArray}\n                handleTextComponentEnabled={handleTextComponentEnabled}\n                closeDrawer={closeDrawer}\n                resetDrawer={resetDrawer}\n                filterCount={filterCount}\n                saveWarningClassName={saveWarningClassName}\n                saveWarningLabel={saveWarningLabel}\n                showSavePopUp={showSavePopUp}\n                emptyFilterClassName={emptyFilterClassName}\n                emptyFilterWarning={emptyFilterWarning}\n                openShowSavePopUp={openShowSavePopUp}\n                recentFilterShow={recentFilterShow}\n                filterShow={filterShow}\n                addSavedFilters={addSavedFilters}\n              />\n            </div>\n          </div>\n        </div>\n      )}\n\n      <MainFilterPanel\n        showDrawer={showDrawer}\n        applyFilterChip={applyFilterChip}\n        addAppliedFilters={addAppliedFilters}\n        addSavedFilters={addSavedFilters}\n        addingToFavourite={props.addingToFavourite}\n      />\n    </div>\n  );\n}\n","import React from \"react\";\nimport Filter from \"filter\";\nimport FilterData from \"./data.json\";\nexport default function App() {\n   /**\n   * Following are the field arrays to be provided for the dropDown option\n   * Theses arrays with the key value pairs are recieved/mounted\n   */\n  const airport = [\n    { key: \"AAA\", value: \"AAA\" },\n    { key: \"AAB\", value: \"AAB\" },\n    { key: \"ABA\", value: \"ABA\" },\n    { key: \"ABB\", value: \"ABB\" },\n    { key: \"BBA\", value: \"BBA\" },\n    { key: \"BAA\", value: \"BAA\" },\n    { key: \"BBB\", value: \"BBB\" },\n  ];\n  const airportGroup = [\n    { key: \"AAA\", value: \"AAA\" },\n    { key: \"AAB\", value: \"AAB\" },\n    { key: \"ABA\", value: \"ABA\" },\n    { key: \"ABB\", value: \"ABB\" },\n    { key: \"BBA\", value: \"BBA\" },\n    { key: \"BAA\", value: \"BAA\" },\n    { key: \"BBB\", value: \"BBB\" },\n  ];\n     /**\n   * This is where the recieved array of dropdown options are redefined with the passing filter object\n   */\n  FilterData.filter.forEach((item) => {\n    if (item.types) {\n      for (let i in item.types) {\n        if (item.types[i].dataSource === \"Airport\") {\n          item.types[i].options = airport;\n        } else {\n          item.types[i].options = airportGroup;\n        }\n      }\n    }\n  });\n   /**\n   * Method displaying the applied filters at that moment\n   * @param {*} appliedFilter is the specific applied filters array\n   */\n  const appliedFilters = (appliedFilter) => {\n    console.log(\"appliedFilter:\", appliedFilter);\n  };\n     /**\n   * Method displaying the saved filters at that moment\n   * @param {*} savedFilter is the specific saved filters array\n   */\n  const savedFilters = (savedFilter) => {\n    console.log(\"savedFilter:\", savedFilter);\n  };\n       /**\n   * Method displaying the favourite filters\n   * @param {*} favourite is the favourite filter array that just got added as favourite\n   */\n  const addingToFavourite = (favourite) => {\n    console.log(favourite);\n  };\n  return (\n    <Filter\n      filterData={FilterData}\n      appliedFilters={appliedFilters}\n      savedFilters={savedFilters}\n      addingToFavourite={addingToFavourite}\n    />\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}