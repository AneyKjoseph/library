{"version":3,"sources":["../../dist/icon-save~bfVswhtX.svg","../../src/types/AutoCompleteComponent.js","../../src/types/DateTimeComponent.js","../../src/types/ConditionalComponent.js","../../src/types/TextComponents.js","../../src/drawer/RightDrawer.js","../../src/drawer/LeftDrawer.js","../../src/panel/SavedFilters.js","../../src/panel/MainFilterPanel.js","../../src/index.js","App.js","index.js"],"names":["module","exports","AutoComplete","props","useState","useEffect","setAutoAcompleteArr","autoCompleteDiv","autoCompleteArr","item","index","className","key","React","Form","type","label","id","checked","onChange","e","icon","onClick","handleClose","disable","options","closeIcon","displayValue","selectedValues","onSelect","selectedList","selectedItem","FieldComponent","setFieldComponentArr","fieldComponentDiv","fieldComponentArr","defaultChecked","field","name","disabled","value","Condition","setConditionArr","conditionalDiv","conditionArr","controlId","Object","as","defaultValue","condition","required","TextComponents","setTextComponentArr","textComponentDiv","textComponentArr","RightDrawer","forwardRef","ref","setWarningLabel","setSaveFilterWarning","setShowSavePopup","enabled","dataType","autoCompleteArray","deleteAutoCompleteElement","handleAutoCompleteEnabled","createAutoCompleteArray","dateTimesArray","deleteDateTimeElement","handleDateTimeEnabled","createDateTimeArray","addToday","addTomorrow","addThisMonth","addForteenDays","addSevenDays","addThisWeek","addThirtyDays","lastDayChange","nextDayChange","conditionsArray","handleCondionalEnabled","createConditionalArray","deleteConditionalElement","textComponentsArray","deleteTextComponentElement","createTextComponentsArray","handleTextComponentEnabled","variant","src","alt","resetDrawer","style","display","showSavePopup","warningLabel","setSaveFilterName","registersaveFilterName","accordianArray","LeftDrawer","typeArray","setLeftDrawData","setLeftDrawTemp","setFilterType","setFilterTypeTemp","leftDrawData","accordianShow","accordianHeads","show","accordianArr","accord","Accordion","Card","eventKey","handleAccordianArrow","setAccordianArr","fieldHeads","conditionHeads","normalHeads","placeholder","filteredList","filteredTypeList","searchKey","leftDrawTemp","setActiveState","SavedFilters","listRef","useRef","listHandler","event","setShowFilter","document","savedFilters","localStorage","JSON","savedFilter","filterArray","marginLeft","faCheck","chips","chipCount","MainFilterPanel","setChipArray","setCountShow","handleListFilter","setListFilter","chipArray","console","onSelectSavedFilter","showFilter","addSavedFilters","countShow","setFilterData","count","autoCompletesArray","setFilterCount","x","setAutoCompletesArray","dateTimeArray","fieldArray","setDateTimesArray","filterData","filters","setDateTimesValueArray","getValueOfDate","dateValue","date","Date","Intl","year","month","day","hour","minute","seconds","dateTimeFormat","conditionArray","setConditionsArray","textComponentArray","setTextComponentsArray","handleHideDropdown","setApplyFilter","handleClickOutside","useComponentVisible","showApplyFilter","fromLeftToRight","objectArray","amount","applyFilter","filterCount","applyFilterArray","tempObj","autoCompletesValueArray","autoComplete","dateTimesValueArray","dateTime","conditionsValueArray","conditional","textComponentsValueArray","textComponent","setApplyFilterChip","setEmptyFilterClassName","setEmptyFilterWarning","saveFilter","setShowSavePopUp","setSaveWarningLabel","setSaveWarningClassName","filter","valueArray","autoCompleteValueArray","setAutoCompletesValueArray","dateTimeValueArray","tempArray","fieldName","fieldValue","todayDate","dated","fromDate","toDate","arr","today","from","to","parseInt","conditionValueArray","setConditionsValueArray","it","textComponentValueArray","setTextComponentsValueArray","closeDrawer","saveWarningClassName","saveWarningLabel","showSavePopUp","emptyFilterClassName","emptyFilterWarning","showDrawer","applyFilterChip","addAppliedFilters","fil","dt","column","data","values","text","tempArr","arrays","array","items","saveTempDateTimeArray","saved","App","FilterData","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.ca3eeec1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon-save~bfVswhtX.b242042f.svg\";","import React, { useState, useEffect } from \"react\";\n// import \"react-bootstrap-typeahead/css/Typeahead.css\";\nimport { Multiselect } from \"multiselect-react-dropdown\";\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Form } from \"react-bootstrap\";\n\nexport default function AutoComplete(props) {\n  const [autoCompleteArr, setAutoAcompleteArr] = useState([]);\n  useEffect(() => {\n    setAutoAcompleteArr(props.autoCompleteArray);\n  }, [props.autoCompleteArray]);\n  /**\n   * Method To close the filter\n   * @param {*} item is specific filter element\n   */\n  const handleClose = (item) => {\n    props.deleteAutoCompleteElement(item);\n  };\n  /**\n   * Method To pass the selected list of values to create value array\n   * @param {*} selectedList is entire list of selected\n   * @param {*} selectedItem is specific item selected now\n   * @param {*} item is specific filter element\n   */\n  const onSelect = (selectedList, selectedItem, item) => {\n    props.createAutoCompleteArray(item, selectedList);\n  };\n  let autoCompleteDiv = autoCompleteArr.map((item, index) => {\n    return (\n      <div className=\"filter__input\" key={index}>\n        <div className=\"filter__input-title\">\n          <div className=\"filter__label\">\n            <span>{item.name}</span>\n            <span>&nbsp;&gt;&nbsp;</span>\n            <span>{item.type}</span>\n          </div>\n          <div className=\"filter__control\">\n            <Form.Check\n              type=\"switch\"\n              label=\"\"\n              className={item.type.concat(item.name)}\n              id={item.name.concat(item.type)}\n              checked={item.enabled}\n              onChange={(e) => {\n                props.handleAutoCompleteEnabled(item);\n              }}\n            />\n            <FontAwesomeIcon\n              icon={faTimes}\n              type=\"button\"\n              onClick={(e) => {\n                handleClose(item);\n              }}\n            />\n          </div>\n        </div>\n        <div className=\"displayFlex\">\n          <Multiselect\n            id={item.type.concat(item.name)}\n            disable={!item.enabled}\n            options={item.objectArray}\n            closeIcon=\"close\"\n            displayValue=\"key\"\n            className=\"form-control\"\n            selectedValues={item.value}\n            onSelect={(e) => {\n              onSelect(e, e[e.length - 1], item);\n            }}\n          />\n        </div>\n      </div>\n    );\n  });\n  return <div>{autoCompleteDiv}</div>;\n}\n","import React, { useState, useEffect } from \"react\";\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Form } from \"react-bootstrap\";\n\nexport default function FieldComponent(props) {\n  const [fieldComponentArr, setFieldComponentArr] = useState([]);\n  useEffect(() => {\n    setFieldComponentArr(props.dateTimesArray);\n  }, [props.dateTimesArray]);\n  /**\n   * Method To close the filter\n   * @param {*} item is specific filter element\n   */\n  const handleClose = (item) => {\n    props.deleteDateTimeElement(item);\n  };\n  let fieldComponentDiv = fieldComponentArr.map((item, index) => {\n    return (\n      <div className=\"filter__input\" key={index}>\n        <div className=\"filter__input-title\" key={1}>\n          <div className=\"filter__label\">\n            <Form.Label>\n              <strong>{item.name}</strong>\n            </Form.Label>\n          </div>\n          <div className=\"filter__control\">\n            <Form.Check\n              type=\"switch\"\n              id={item.name}\n              label=\"\"\n              defaultChecked={item.enabled}\n              onChange={(e) => {\n                props.handleDateTimeEnabled(item);\n              }}\n            />\n\n            <FontAwesomeIcon\n              className=\"fontIcons\"\n              icon={faTimes}\n              onClick={(e) => {\n                handleClose(item);\n              }}\n            />\n          </div>\n        </div>\n        {item.field.map((field, index) => {\n          return (\n            <div key={`${index}-${field.name}`}>\n              <div className=\"displayFlex\" key={`${index},${field.name}`}>\n                <Form.Text>{field.column}</Form.Text>\n              </div>\n              <div className=\"filter__split\" key={index}>\n                <div className=\"date-wrap\">\n                  <Form.Control\n                    disabled={!item.enabled}\n                    type=\"datetime-local\"\n                    value={field.value}\n                    className={field.name}\n                    onChange={(e) => {\n                      props.createDateTimeArray(\n                        item,\n                        field.column,\n                        e.target.value\n                      );\n                    }}\n                  />\n                  <span className=\"date-button\">\n                    <button type=\"button\"></button>\n                  </span>\n                </div>\n                {/* <div className=\"time-wrap\">\n                  <input\n                    className=\"time\"\n                    type=\"time\"\n                    disabled={!item.enabled}\n                    onChange={(e) => {\n                      bindTimeToDate(e.target.value, item);\n                    }}\n                  />\n                </div> */}\n              </div>\n            </div>\n          );\n        })}\n        {/* <div className=\"days\">\n          <button\n            disabled={!item.enabled}\n            type=\"button\"\n            onClick={(e) => {\n              props.addToday();\n            }}\n          >\n            Today\n          </button>\n          <button\n            disabled={!item.enabled}\n            type=\"button\"\n            onClick={(e) => {\n              props.addTomorrow();\n            }}\n          >\n            Tomorrow\n          </button>\n          <button\n            disabled={!item.enabled}\n            type=\"button\"\n            onClick={(e) => {\n              props.addThisWeek();\n            }}\n          >\n            This Week\n          </button>\n          <button\n            disabled={!item.enabled}\n            type=\"button\"\n            onClick={(e) => {\n              props.addSevenDays();\n            }}\n          >\n            Next 7 days\n          </button>\n          <button\n            disabled={!item.enabled}\n            type=\"button\"\n            onClick={(e) => {\n              props.addForteenDays();\n            }}\n          >\n            Next 14 days\n          </button>\n          <button\n            disabled={!item.enabled}\n            type=\"button\"\n            onClick={(e) => {\n              props.addThisMonth();\n            }}\n          >\n            This Month\n          </button>\n          <button\n            disabled={!item.enabled}\n            type=\"button\"\n            onClick={(e) => {\n              props.addThirtyDays();\n            }}\n          >\n            Next 30 days\n          </button>\n          <br />\n          Next{\" \"}\n          <input\n            disabled={!item.enabled}\n            type=\"text\"\n            onChange={(e) => {\n              props.nextDayChange(e.target.value);\n            }}\n          />{\" \"}\n          Days\n          <br />\n          Last{\" \"}\n          <input\n            disabled={!item.enabled}\n            type=\"text\"\n            onChange={(e) => {\n              props.lastDayChange(e.target.value);\n            }}\n          />{\" \"}\n          Days\n        </div> */}\n      </div>\n    );\n  });\n  return <div>{fieldComponentDiv}</div>;\n}\n","import React, { useState, useEffect } from \"react\";\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Form } from \"react-bootstrap\";\n\nexport default function Condition(props) {\n  const [conditionArr, setConditionArr] = useState([]);\n  useEffect(() => {\n    setConditionArr(props.conditionsArray);\n  }, [props.conditionsArray]);\n  let conditionalDiv = conditionArr.map((item, index) => {\n    return (\n      <div className=\"filter__input\" key={index}>\n        <div className=\"filter__input-title\">\n          <div className=\"filter__label\">\n            <Form.Label>\n              <strong>{item.name}</strong>\n            </Form.Label>\n          </div>\n          <div className=\"filter__control\">\n            <Form.Check\n              type=\"switch\"\n              id={item.name}\n              label=\"\"\n              checked={item.enabled}\n              onChange={(e) => {\n                props.handleCondionalEnabled(item);\n              }}\n            />\n            <FontAwesomeIcon\n              className=\"fontIcons\"\n              icon={faTimes}\n              onClick={(e) => {\n                props.deleteConditionalElement(item);\n              }}\n            />\n          </div>\n        </div>\n        <div\n          onChange={(e) => {\n            props.createConditionalArray(item, e.target.value);\n          }}\n        >\n          <div className=\"displayFlex\">\n            <Form.Group controlId=\"exampleForm.ControlSelect1\">\n              <Form.Text className=\"text-muted\">\n                {Object.keys(item)[3]}\n              </Form.Text>\n              <Form.Control\n                disabled={!item.enabled}\n                as=\"select\"\n                defaultValue={item.value}\n              >\n                {item.condition.map((condition, index) => {\n                  return <option key={index}>{condition.value}</option>;\n                })}\n              </Form.Control>\n            </Form.Group>\n          </div>\n          <div className=\"displayFlex\">\n            <Form.Group>\n              <Form.Text className=\"text-muted\">\n                {Object.keys(item)[4]}\n              </Form.Text>\n              <Form.Control\n                disabled={!item.enabled}\n                defaultValue={item.amount}\n                required\n                type=\"number\"\n              />\n            </Form.Group>\n          </div>\n        </div>\n      </div>\n    );\n  });\n  return <div>{conditionalDiv}</div>;\n}\n","import React, { useEffect, useState } from \"react\";\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Form } from \"react-bootstrap\";\n\nexport default function TextComponents(props) {\n  const [textComponentArr, setTextComponentArr] = useState([]);\n  useEffect(() => {\n    setTextComponentArr(props.textComponentsArray);\n  }, [props.textComponentsArray]);\n\n  let textComponentDiv = textComponentArr.map((item, index) => {\n    return (\n      <div key={index}>\n        <div className=\"filter__input\">\n          <div className=\"filter__input-title\">\n            <div className=\"filter__label\">\n              <span>{item.name}</span>\n            </div>\n            <div className=\"filter__control\">\n              <Form.Check\n                type=\"switch\"\n                label=\"\"\n                id={item.name}\n                checked={item.enabled}\n                onChange={(e) => {\n                  props.handleTextComponentEnabled(item);\n                }}\n              ></Form.Check>\n              <FontAwesomeIcon\n                icon={faTimes}\n                type=\"button\"\n                onClick={(e) => {\n                  props.deleteTextComponentElement(item);\n                }}\n              />\n            </div>\n          </div>\n          <div className=\"displayFlex\">\n            <input\n              id={item.name.concat(item.dataType)}\n              disabled={!item.enabled}\n              type=\"text\"\n              defaultValue={item.value}\n              className=\"form-control\"\n              onChange={(e) => {\n                props.createTextComponentsArray(item, e.target.value);\n              }}\n            ></input>\n          </div>\n        </div>\n      </div>\n    );\n  });\n\n  return <div>{textComponentDiv}</div>;\n}\n","import React, { forwardRef, useState, useEffect } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport AutoComplete from \"../types/AutoCompleteComponent\";\nimport FieldComponent from \"../types/DateTimeComponent\";\nimport Condition from \"../types/ConditionalComponent\";\nimport TextComponents from \"../types/TextComponents\";\nimport saveLogo from \"../images/icon-save.svg\";\n\nconst RightDrawer = forwardRef((props, ref) => {\n  const [showSavePopup, setShowSavePopup] = useState(\"none\");\n  const [saveFilterName, setSaveFilterName] = useState(\"\");\n  const [saveFilterWarning, setSaveFilterWarning] = useState(\"\");\n  const [warningLabel, setWarningLabel] = useState(\"\");\n\n  useEffect(() => {\n    setWarningLabel(props.saveWarningClassName);\n    setSaveFilterWarning(props.saveWarningLabel);\n    setShowSavePopup(props.showSavePopUp);\n  }, [props.saveWarningClassName, props.saveWarningLabel, props.showSavePopUp]);\n  /**\n   * Method To pass the required name of the filter required to be saved\n   * @param {*} e is event triggered when typing on the to-save filter name field\n   */\n  const registersaveFilterName = (e) => {\n    setSaveFilterName(e.target.value);\n  };\n  /**\n   * Method To show the save popup\n   */\n  const showPopUp = () => {\n    setShowSavePopup(\"\");\n  };\n  /**\n   * Method To close the save popup\n   */\n  const cancelSavePopup = () => {\n    setShowSavePopup(\"none\");\n    setSaveFilterWarning(\"\");\n    setWarningLabel(\"\");\n  };\n  return (\n    <React.Fragment>\n      <div className=\"filter__title\">\n        Searched Filters\n        <span className=\"filter-count\">{props.filterCount}</span>\n      </div>\n      <div className=\"filter__content\">\n        <AutoComplete\n          name={props.name}\n          type={props.type}\n          enabled={props.enabled}\n          dataType={props.dataType}\n          options={props.options}\n          autoCompleteArray={props.autoCompleteArray}\n          deleteAutoCompleteElement={props.deleteAutoCompleteElement}\n          handleAutoCompleteEnabled={props.handleAutoCompleteEnabled}\n          createAutoCompleteArray={props.createAutoCompleteArray}\n        />\n        <FieldComponent\n          dateTimesArray={props.dateTimesArray}\n          deleteDateTimeElement={props.deleteDateTimeElement}\n          handleDateTimeEnabled={props.handleDateTimeEnabled}\n          createDateTimeArray={props.createDateTimeArray}\n          addToday={props.addToday}\n          addTomorrow={props.addTomorrow}\n          addThisMonth={props.addThisMonth}\n          addForteenDays={props.addForteenDays}\n          addSevenDays={props.addSevenDays}\n          addThisWeek={props.addThisWeek}\n          addThirtyDays={props.addThirtyDays}\n          lastDayChange={props.lastDayChange}\n          nextDayChange={props.nextDayChange}\n        />\n        <Condition\n          conditionsArray={props.conditionsArray}\n          handleCondionalEnabled={props.handleCondionalEnabled}\n          createConditionalArray={props.createConditionalArray}\n          deleteConditionalElement={props.deleteConditionalElement}\n        />\n        <TextComponents\n          textComponentsArray={props.textComponentsArray}\n          deleteTextComponentElement={props.deleteTextComponentElement}\n          createTextComponentsArray={props.createTextComponentsArray}\n          handleTextComponentEnabled={props.handleTextComponentEnabled}\n        />\n      </div>\n      <div className=\"filter__btn\">\n        <div className=\"filter__save\">\n          <Button className=\"button-save\" variant=\"\">\n            <img src={saveLogo} onClick={showPopUp} alt=\"save icon\" />\n            <span>SAVE</span>\n          </Button>\n        </div>\n        <div className=\"btn-wrap\">\n          <Button variant=\"\" className=\"reset\" onClick={props.resetDrawer}>\n            Reset\n          </Button>\n          <Button\n            variant=\"\"\n            className=\"applyFilter\"\n            onClick={(e) => {\n              props.applyFilter();\n              props.deleteAutoCompleteElement({});\n              props.deleteConditionalElement({});\n              props.deleteDateTimeElement({});\n              props.deleteTextComponentElement({});\n              props.closeDrawer();\n            }}\n          >\n            Apply Filter\n          </Button>\n        </div>\n        <div style={{ display: showSavePopup }} className=\"popup--save\">\n          <h5>Save the Filter</h5>\n          <span className={warningLabel}>{saveFilterWarning}</span>\n          <label>Saved Filter Name</label>\n          <input\n            className=\"txt\"\n            value={saveFilterName}\n            onChange={(e) => registersaveFilterName(e)}\n          />\n          <div className=\"btn-wrap\">\n            <button\n              className=\"button\"\n              onClick={(e) => {\n                cancelSavePopup();\n              }}\n            >\n              Cancel\n            </button>\n            <button\n              className=\"button\"\n              onClick={(e) => {\n                props.saveFilter(saveFilterName);\n                // setSaveFilterName(\"\");\n              }}\n            >\n              Save\n            </button>\n          </div>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n});\n\nexport default RightDrawer;\n","import React, { useEffect, useState } from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport { Accordion, Form } from \"react-bootstrap\";\n\nlet accordianArray = [];\nexport default function LeftDrawer(props) {\n  const [leftDrawData, setLeftDrawData] = useState([]);\n  const [leftDrawTemp, setLeftDrawTemp] = useState([]);\n  const [filterType, setFilterType] = useState([]);\n  const [filterTypeTemp, setFilterTypeTemp] = useState([]);\n  const [activeState, setActiveState] = useState(\"1\");\n  const [accordianArr, setAccordianArr] = useState([]);\n\n  useEffect(() => {\n    let typeArray = [];\n    setLeftDrawData(props.filterData.filter);\n    setLeftDrawTemp(props.filterData.filter);\n    props.filterData.filter.forEach((item) => {\n      if (item.types) {\n        item.types.forEach((type) => {\n          typeArray.push(type.name);\n        });\n      }\n    });\n    setFilterType(typeArray);\n    setFilterTypeTemp(typeArray);\n  }, [props.filterData.filter]);\n  /**\n   * Method To filter out the filters displayed at the left drawer\n   * @param {*} e triggered on typing on the search field\n   */\n  const searchFilterHandler = (e) => {\n    let filteredList = [];\n    let filteredTypeList = [];\n    const searchKey = e.target.value;\n    if (leftDrawData) {\n      filteredList = leftDrawTemp.filter((item) => {\n        if (item.types) {\n          filteredTypeList = item.types.filter((type) => {\n            return (\n              type.name &&\n              type.name.toLowerCase().includes(searchKey.toLowerCase())\n            );\n          });\n          if (filteredTypeList.length > 0 && searchKey !== \"\") {\n            setActiveState(\"2\");\n            return true;\n          } else {\n            setActiveState(\"1\");\n          }\n          return (\n            item.name &&\n            item.name.toLowerCase().includes(searchKey.toLowerCase())\n          );\n        } else {\n          return (\n            item.name &&\n            item.name.toLowerCase().includes(searchKey.toLowerCase())\n          );\n        }\n      });\n    }\n    setLeftDrawData(filteredList);\n    setFilterType(filteredTypeList);\n  };\n  leftDrawData.forEach((item) => {\n    if (item.types) {\n      accordianArray.push({ name: item.name, accordianShow: \"\" });\n    }\n  });\n  /**\n   * Method To change the accordian arrow direction on toggling\n   * @param {*} name is dynamic filter name\n   * @param {*} className is the dynamic className of the div\n   */\n  const handleAccordianArrow = (name, className) => {\n    accordianArray.forEach((item) => {\n      let index = accordianArray.indexOf(item);\n      if (item.name === name) {\n        if (className === \"show card-header\") {\n          accordianArray[index] = {\n            name: item.name,\n            accordianShow: \"\",\n          };\n        } else {\n          accordianArray[index] = {\n            name: item.name,\n            accordianShow: \"show\",\n          };\n        }\n      }\n    });\n    setAccordianArr(accordianArray);\n    accordianArray = [];\n  };\n\n  let accordianHeads = leftDrawData.map((item, index) => {\n    if (item.types.length) {\n      let show = \"\";\n      accordianArr.forEach((accord) => {\n        if (accord.name === item.name) {\n          show = accord.accordianShow;\n        }\n      });\n      return (\n        <div key={index}>\n          <Accordion>\n            <Card>\n              <Accordion.Toggle\n                className={show}\n                as={Card.Header}\n                eventKey=\"1\"\n                onClick={(e) => {\n                  handleAccordianArrow(item.name, e.target.className);\n                }}\n              >\n                {item.name}\n              </Accordion.Toggle>\n              <Accordion.Collapse eventKey=\"1\">\n                <Card.Body>\n                  <ul className=\"firstAccordion\" key={index}>\n                    {item.types &&\n                      item.types.map((type, index) => {\n                        return (\n                          <li\n                            onClick={(e) => {\n                              // props.handleAutoCompleteValue(\n                              //   item.name,\n                              //   type.name,\n                              //   type.dataType,\n                              //   type.enabled,\n                              //   type.options\n                              // );\n                              props.fromLeftToRight(\n                                item.name,\n                                type.dataType,\n                                type.enabled,\n                                type.name,\n                                item.field,\n                                item.condition,\n                                type.options\n                              );\n                              // props.addedFilterCount();\n                            }}\n                            key={index}\n                          >\n                            {type.name}\n                          </li>\n                        );\n                      })}\n                  </ul>\n                </Card.Body>\n              </Accordion.Collapse>\n            </Card>\n          </Accordion>\n        </div>\n      );\n    } else {\n      return <div key={index}></div>;\n    }\n  });\n  let fieldHeads = leftDrawData.map((item, index) => {\n    if (item.field.length) {\n      return (\n        <div className=\"fieldHeads\" key={index}>\n          <li\n            onClick={(e) => {\n              // props.handleFieldValue(\n              //   item.name,\n              //   item.field,\n              //   item.dataType,\n              //   item.enabled\n              // );\n              props.fromLeftToRight(\n                item.name,\n                item.dataType,\n                item.enabled,\n                item.types,\n                item.field,\n                item.condition\n              );\n              //props.addedFilterCount();\n            }}\n          >\n            {item.name}\n          </li>\n        </div>\n      );\n    } else {\n      return <div key={index}></div>;\n    }\n  });\n  let conditionHeads = leftDrawData.map((item, index) => {\n    if (item.condition.length) {\n      return (\n        <div className=\"conditionHeads\" key={index}>\n          <li\n            onClick={(e) => {\n              // props.handleConditionalValue(\n              //   item.name,\n              //   item.condition,\n              //   item.dataType,\n              //   item.enabled\n              // );\n              props.fromLeftToRight(\n                item.name,\n                item.dataType,\n                item.enabled,\n                item.types,\n                item.field,\n                item.condition\n              );\n              //props.addedFilterCount();\n            }}\n          >\n            {item.name}\n          </li>\n        </div>\n      );\n    } else {\n      return <div key={index}></div>;\n    }\n  });\n  let normalHeads = leftDrawData.map((item, index) => {\n    if (!(item.condition.length || item.types.length || item.field.length)) {\n      return (\n        <div className=\"normalHeads\" key={index}>\n          <li\n            onClick={(e) => {\n              props.fromLeftToRight(\n                item.name,\n                item.dataType,\n                item.enabled,\n                item.types,\n                item.field,\n                item.condition\n              );\n              //props.addedFilterCount();\n            }}\n          >\n            {item.name}\n          </li>\n        </div>\n      );\n    } else {\n      return <div key={index}></div>;\n    }\n  });\n  return (\n    <div>\n      <Form.Row>\n        <Form.Control\n          required\n          type=\"text\"\n          placeholder=\"Search a Filter\"\n          defaultValue=\"\"\n          className=\"customControl\"\n          onChange={searchFilterHandler}\n        />\n      </Form.Row>\n      <div className=\"leftDrawer\">\n        <div>{accordianHeads}</div>\n        <div>{fieldHeads}</div>\n        <div>{conditionHeads}</div>\n        <div>{normalHeads}</div>\n      </div>\n    </div>\n  );\n}\n","import React, { useEffect, useState, useRef } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCheck, faStar } from \"@fortawesome/free-solid-svg-icons\";\n\nconst SavedFilters = (props) => {\n  const [showFilter, setShowFilter] = useState(false);\n  let listRef = useRef();\n  useEffect(() => {\n    let listHandler = (event) => {\n      if (listRef.current && !listRef.current.contains(event.target)) {\n        setShowFilter(false);\n        props.handleListFilter();\n      }\n    };\n    setShowFilter(props.showFilter);\n    document.addEventListener(\"mousedown\", listHandler);\n\n    return () => {\n      document.removeEventListener(\"mousedown\", listHandler);\n    };\n  }, [props]);\n\n  let name = \"\";\n  let keyValue = \"\";\n  let savedFilters = localStorage.getItem(\"savedFilters\");\n  savedFilters = savedFilters ? JSON.parse(savedFilters) : [];\n  if (savedFilters.length > 5) {\n    savedFilters = savedFilters.slice(\n      savedFilters.length - 5,\n      savedFilters.length\n    );\n  }\n\n  const savedFilter = savedFilters.map((filterArray, index) => {\n    return (\n      <div key={index}>\n        <div className=\"alignLeft\">\n          <FontAwesomeIcon\n            style={{ marginLeft: \"-54px\" }}\n            icon={faCheck}\n          ></FontAwesomeIcon>\n          <div\n            style={{ marginLeft: \"15px\" }}\n            onClick={(e) => {\n              //below two methods are required for closing the savedFilter list popUp\n              setShowFilter(false);\n              props.handleListFilter();\n              props.addSavedFilters(filterArray);\n            }}\n          >\n            {Object.keys(filterArray)[0]}\n          </div>\n          <FontAwesomeIcon\n            icon={faStar}\n            className=\"marginLeft\"\n          ></FontAwesomeIcon>\n        </div>\n      </div>\n    );\n  });\n  if (showFilter) {\n    return (\n      <div className=\"lists\" ref={listRef}>\n        {/* <div className=\"listsView\">\n          <div className=\"text-muted\">list view</div>\n          <div className=\"alignLeft\">\n            <FontAwesomeIcon\n              icon={faCheck}\n              className=\"selected\"\n            ></FontAwesomeIcon>\n            <div className=\"leftSpace selected\">Recently Viewed(10)</div>\n            <FontAwesomeIcon\n              icon={faStar}\n              className=\"marginLeft\"\n            ></FontAwesomeIcon>\n          </div>\n          <div className=\"alignLeft\">\n            <FontAwesomeIcon icon={faCheck}></FontAwesomeIcon>\n            <div className=\"leftSpace\">To be called cancelled flights(12)</div>\n            <FontAwesomeIcon\n              icon={faStar}\n              className=\"marginLeft\"\n            ></FontAwesomeIcon>\n          </div>\n          <div className=\"alignLeft\">\n            <FontAwesomeIcon icon={faCheck}></FontAwesomeIcon>\n            <div className=\"leftSpace\"> Delayed Flights(10)</div>\n            <FontAwesomeIcon\n              icon={faStar}\n              className=\"marginLeft\"\n            ></FontAwesomeIcon>\n          </div>\n          <div className=\"alignLeft\">\n            <FontAwesomeIcon icon={faCheck}></FontAwesomeIcon>\n            <div className=\"leftSpace\"> Flights in next 7 days(10) </div>\n            <FontAwesomeIcon\n              icon={faStar}\n              className=\"marginLeft\"\n            ></FontAwesomeIcon>\n          </div>\n          <div className=\"alignLeft\">\n            <FontAwesomeIcon icon={faCheck}></FontAwesomeIcon>\n            <div className=\"leftSpace\"> Flights in next 10 days(10) </div>\n            <FontAwesomeIcon\n              icon={faStar}\n              className=\"marginLeft\"\n            ></FontAwesomeIcon>\n          </div>\n          <div className=\"alignLeft\">\n            <FontAwesomeIcon icon={faCheck}></FontAwesomeIcon>\n            <div className=\"leftSpace\"> Flights in next 20 days(10) </div>\n            <FontAwesomeIcon\n              icon={faStar}\n              className=\"marginLeft\"\n            ></FontAwesomeIcon>\n          </div>\n          <div className=\"alignLeft\">\n            <FontAwesomeIcon icon={faCheck}></FontAwesomeIcon>\n            <div className=\"leftSpace\"> Flights in next 30 days(10) </div>\n            <FontAwesomeIcon\n              icon={faStar}\n              className=\"marginLeft\"\n            ></FontAwesomeIcon>\n          </div>\n        </div> */}\n        <div className=\"savedFilters\">\n        <div className=\"text-muted\">Saved Filters</div>\n          <ul key={keyValue} className=\"leftSpace\">\n            {savedFilter}\n          </ul>\n        </div>\n      </div>\n    );\n  } else {\n    return <div></div>;\n  }\n};\n\nexport default SavedFilters;\n","import React, { useState, useEffect } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faAlignLeft } from \"@fortawesome/free-solid-svg-icons\";\nimport SavedFilters from \"./SavedFilters\";\n\nlet chips, chipCount;\nconst MainFilterPanel = (props) => {\n  const [listFilter, setListFilter] = useState(false);\n  const [chipArray, setChipArray] = useState([]);\n  const [countShow, setCountShow] = useState(\"none\");\n  useEffect(() => {\n    setChipArray(props.applyFilterChip.applyFilter);\n    if (\n      props.applyFilterChip.applyFilter &&\n      props.applyFilterChip.applyFilter.length > 0\n    ) {\n      setCountShow(\"\");\n    } else {\n      setCountShow(\"none\");\n    }\n  }, [props.applyFilterChip]);\n  const handleListFilter = () => {\n    setListFilter(!listFilter);\n  };\n  if (chipArray) {\n    chipCount = chipArray.length;\n    console.log(chipArray);\n    chips = chipArray.map((item, index) => {\n      if (item.type) {\n        return (\n          <div\n            className=\"listContent\"\n            key={index}\n            onClick={(e) => {\n              props.addAppliedFilters(chipArray);\n            }}\n          >\n            <span>\n              {item.name}:{item.type}\n            </span>\n            {item.value.map((value, index) => {\n              return <div key={index}>{value.value}</div>;\n            })}\n          </div>\n        );\n      } else if (item.condition) {\n        return (\n          <div\n            className=\"listContent\"\n            key={index}\n            onClick={(e) => {\n              props.addAppliedFilters(chipArray);\n            }}\n          >\n            <span>{item.name}</span>:{item.condition}\n            {item.amount}\n          </div>\n        );\n      } else if (item.fieldValue) {\n        return (\n          <div\n            className=\"listContent\"\n            key={index}\n            onClick={(e) => {\n              props.addAppliedFilters(chipArray);\n            }}\n          >\n            <span>{item.fieldValue}</span>\n            {item.value}\n          </div>\n        );\n      } else {\n        return (\n          <div\n            className=\"listContent\"\n            key={index}\n            onClick={(e) => {\n              props.addAppliedFilters(chipArray);\n            }}\n          >\n            <span>{item.name}</span>:{item.value}\n          </div>\n        );\n      }\n    });\n  } else {\n    chips = <div></div>;\n  }\n\n  return (\n    <div className=\"list\">\n      <div className=\"displayFlex\">\n        <div className=\"alignLeft\">\n          <FontAwesomeIcon icon={faAlignLeft} onClick={handleListFilter} />\n          <SavedFilters\n            onSelectSavedFilter={props.onSelectSavedFilter}\n            showFilter={listFilter}\n            handleListFilter={handleListFilter}\n            addSavedFilters={props.addSavedFilters}\n          />\n          <div className=\"leftSpace\">All flights</div>\n        </div>\n      </div>\n      <div className=\"secondList\">\n        <div className=\"displayFlex\">\n          <span style={{ display: countShow }} className=\"listContent\">\n            count:{chipCount}\n          </span>\n          {chips}\n          <div\n            onClick={(e) => {\n              props.showDrawer();\n            }}\n          >\n            + Add Filter\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MainFilterPanel;\n","import React, { useState, useRef, useEffect } from \"react\";\nimport RightDrawer from \"./drawer/RightDrawer\";\nimport LeftDrawer from \"./drawer/LeftDrawer\";\nimport MainFilterPanel from \"./panel/MainFilterPanel\";\n\n/**\n * Component handling clock outside close of Drawer\n */\nfunction useComponentVisible() {\n  const [showApplyFilter, setApplyFilter] = useState(false);\n\n  const ref = useRef(null);\n\n  /**\n   * Method To sort the rows for a particular column\n   * @param {*} event is the event that is getting passed when an outside click is triggered\n   */\n  const handleHideDropdown = (event) => {\n    if (event.key === \"Escape\") {\n      setApplyFilter(false);\n    }\n  };\n  /**\n   * Method To sort the rows for a particular column\n   * @param {*} event it is the event triggered on the ref div when click happens\n   */\n  const handleClickOutside = (event) => {\n    if (ref.current && !ref.current.contains(event.target)) {\n      setApplyFilter(false);\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener(\"keydown\", handleHideDropdown, true);\n    document.addEventListener(\"click\", handleClickOutside, true);\n    return () => {\n      document.removeEventListener(\"keydown\", handleHideDropdown, true);\n      document.removeEventListener(\"click\", handleClickOutside, true);\n    };\n  });\n\n  return { ref, showApplyFilter, setApplyFilter };\n}\nexport default function Filter(props) {\n  const [autoCompletesValueArray, setAutoCompletesValueArray] = useState([]);\n  const [autoCompletesArray, setAutoCompletesArray] = useState([]);\n  const [dateTimesArray, setDateTimesArray] = useState([]);\n  const [dateTimesValueArray, setDateTimesValueArray] = useState([]);\n  const [conditionsArray, setConditionsArray] = useState([]);\n  const [conditionsValueArray, setConditionsValueArray] = useState([]);\n  const [textComponentsArray, setTextComponentsArray] = useState([]);\n  const [textComponentsValueArray, setTextComponentsValueArray] = useState([]);\n  const [applyFilterChip, setApplyFilterChip] = useState({});\n  const [filterCount, setFilterCount] = useState(0);\n  const [filterData, setFilterData] = useState({});\n  const [showSavePopUp, setShowSavePopUp] = useState(\"none\");\n  const [saveWarningLabel, setSaveWarningLabel] = useState(\"\");\n  const [saveWarningClassName, setSaveWarningClassName] = useState(\"\");\n  const [emptyFilterWarning, setEmptyFilterWarning] = useState(\"\");\n  const [emptyFilterClassName, setEmptyFilterClassName] = useState(\"\");\n\n  useEffect(() => {\n    setFilterData(props.filterData);\n  }, [props.filterData]);\n  useEffect(() => {\n    let count = 0;\n    count =\n      autoCompletesArray.length +\n      dateTimesArray.length +\n      conditionsArray.length +\n      textComponentsArray.length;\n    setFilterCount(count);\n  }, [\n    autoCompletesArray,\n    dateTimesArray,\n    conditionsArray,\n    textComponentsArray,\n  ]);\n  /**\n   * Method set the state which shows the drawer when on true condition\n   */\n  const showDrawer = () => {\n    setApplyFilter(true);\n  };\n  /**\n   * Method set the state which closes the drawer when the state is in false condition\n   */\n  const closeDrawer = () => {\n    setApplyFilter(false);\n  };\n  /**\n   * Method which creates the array which contains the elements to be shown in the applied filter chips\n   */\n  const applyFilter = () => {\n    if (filterCount > 0) {\n      let applyFilter = {\n        applyFilterArray: [],\n      };\n      let tempObj = { applyFilter: [] };\n      if (autoCompletesValueArray.length > 0) {\n        autoCompletesValueArray.forEach((item) => {\n          tempObj.applyFilter.push(item);\n        });\n        applyFilter.applyFilterArray.push({\n          autoComplete: autoCompletesValueArray,\n        });\n      }\n      if (dateTimesValueArray.length > 0) {\n        dateTimesValueArray.forEach((item) => {\n          tempObj.applyFilter.push(item);\n        });\n        applyFilter.applyFilterArray.push({ dateTime: dateTimesValueArray });\n      }\n      if (conditionsValueArray.length > 0) {\n        conditionsValueArray.forEach((item) => {\n          tempObj.applyFilter.push(item);\n        });\n        applyFilter.applyFilterArray.push({\n          conditional: conditionsValueArray,\n        });\n      }\n      if (textComponentsValueArray.length > 0) {\n        textComponentsValueArray.forEach((item) => {\n          tempObj.applyFilter.push(item);\n        });\n        applyFilter.applyFilterArray.push({\n          textComponent: textComponentsValueArray,\n        });\n      }\n      console.log(applyFilter);\n      setApplyFilterChip(tempObj);\n      tempObj = {};\n    } else {\n      setEmptyFilterClassName(\"text-danger\");\n      setEmptyFilterWarning(\"No Filter is being selected\");\n    }\n  };\n  /**\n   * Method To pass the values from saved filter list to the right filter drawer\n   * @param {*} value is saved filter from the saved filter popup list\n   */\n  const saveFilter = (value) => {\n    if (value.length > 0) {\n      setShowSavePopUp(\"none\");\n      setSaveWarningLabel(\"\");\n      setSaveWarningClassName(\"\");\n      let savedFilter = {\n        filter: [],\n      };\n      if (autoCompletesValueArray.length > 0) {\n        savedFilter.filter.push({ autoComplete: autoCompletesValueArray });\n      }\n      if (dateTimesValueArray.length > 0) {\n        savedFilter.filter.push({ dateTime: dateTimesValueArray });\n      }\n      if (conditionsValueArray.length > 0) {\n        savedFilter.filter.push({ conditional: conditionsValueArray });\n      }\n      if (textComponentsValueArray.length > 0) {\n        savedFilter.filter.push({ textComponent: textComponentsValueArray });\n      }\n      savedFilter[value] = savedFilter[\"filter\"];\n      delete savedFilter.filter;\n      let savedFilters = localStorage.getItem(\"savedFilters\");\n      savedFilters = savedFilters ? JSON.parse(savedFilters) : [];\n      savedFilters.push(savedFilter);\n      localStorage.setItem(\"savedFilters\", JSON.stringify(savedFilters));\n      console.log(savedFilters);\n    }\n    if (value.length <= 0) {\n      console.log(value.length);\n      setShowSavePopUp(\"\");\n      setSaveWarningClassName(\"text-danger\");\n      setSaveWarningLabel(\"Enter a valid filterName\");\n    }\n  };\n  /**\n   * Method To create the filter arrays for each specific type based on datatype\n   * @param {*} name is the name of the filter\n   * @param {*} dataType is the dataType of the filter\n   * @param {*} enabled is initial enabled status of the filter\n   * @param {*} type is the type array of the filter if present\n   * @param {*} field is the field array of the filter if present\n   * @param {*} condition is the condition array of the filter if present\n   * @param {*} options is the options array of the filter if present\n   */\n  const fromLeftToRight = (\n    name,\n    dataType,\n    enabled,\n    type,\n    field,\n    condition,\n    options\n  ) => {\n    if (dataType === \"AutoComplete\") {\n      let value = {\n        name: name,\n        type: type,\n        dataType: dataType,\n        enabled: enabled,\n        objectArray: options,\n      };\n      let autoCompleteArray = [...autoCompletesArray];\n      if (autoCompleteArray.length > 0) {\n        let index = autoCompleteArray.findIndex(\n          (x) => x.name === value.name && x.type === value.type\n        );\n        if (index === -1) {\n          autoCompleteArray.push({\n            name: name,\n            type: type,\n            dataType: dataType,\n            enabled: enabled,\n            objectArray: options,\n          });\n        }\n      } else {\n        autoCompleteArray.push({\n          name: name,\n          type: type,\n          dataType: dataType,\n          enabled: enabled,\n          objectArray: options,\n        });\n      }\n      setAutoCompletesArray(autoCompleteArray);\n      autoCompleteArray = [];\n    }\n    if (dataType === \"DateTime\") {\n      let value = {\n        name: name,\n        dataType: dataType,\n        enabled: enabled,\n        field: field,\n      };\n      let dateTimeArray = [...dateTimesArray];\n      if (dateTimeArray.length > 0) {\n        let index = dateTimeArray.findIndex(\n          (x) => x.name === value.name && x.field === value.field\n        );\n        if (index === -1) {\n          dateTimeArray.push({\n            name: name,\n            dataType: dataType,\n            enabled: enabled,\n            field: field,\n          });\n        }\n      } else {\n        dateTimeArray.push({\n          name: name,\n          dataType: dataType,\n          enabled: enabled,\n          field: field,\n        });\n      }\n      setDateTimesArray(dateTimeArray);\n      dateTimeArray = [];\n    }\n    if (dataType === \"Numeric\") {\n      let value = {\n        name: name,\n        dataType: dataType,\n        enabled: enabled,\n        condition: condition,\n        amount: \"\",\n      };\n      let conditionArray = [...conditionsArray];\n      if (conditionArray.length > 0) {\n        let index = conditionArray.findIndex(\n          (x) => x.name === value.name && x.condition === value.condition\n        );\n        if (index === -1) {\n          conditionArray.push({\n            name: name,\n            dataType: dataType,\n            enabled: enabled,\n            condition: condition,\n            amount: \"\",\n          });\n        }\n      } else {\n        conditionArray.push({\n          name: name,\n          dataType: dataType,\n          enabled: enabled,\n          condition: condition,\n          amount: \"\",\n        });\n      }\n      setConditionsArray(conditionArray);\n      conditionArray = [];\n    }\n    if (dataType === \"Text\") {\n      let value = {\n        name: name,\n        dataType: dataType,\n        enabled: enabled,\n      };\n      let textComponentArray = [...textComponentsArray];\n      if (textComponentArray.length > 0) {\n        let index = textComponentArray.findIndex(\n          (x) => x.name === value.name && x.dataType === value.dataType\n        );\n        if (index === -1) {\n          textComponentArray.push({\n            name: name,\n            dataType: dataType,\n            enabled: enabled,\n          });\n        }\n      } else {\n        textComponentArray.push({\n          name: name,\n          dataType: dataType,\n          enabled: enabled,\n        });\n      }\n      setTextComponentsArray(textComponentArray);\n      textComponentArray = [];\n    }\n  };\n  /**\n   * Method To create arrays containing values upon change trigger from respective input fields\n   * @param {*} item is the specific filter element object\n   * @param {*} valueArray is the selected multiselect options\n   */\n  const createAutoCompleteArray = (item, valueArray) => {\n    let tempObj = JSON.parse(JSON.stringify(item));\n    tempObj.value = valueArray;\n    let autoCompleteValueArray = [...autoCompletesValueArray];\n    if (autoCompleteValueArray.length > 0) {\n      let index = autoCompleteValueArray.findIndex(\n        (x) => x.name === tempObj.name && x.type === tempObj.type\n      );\n      if (index === -1) {\n        autoCompleteValueArray.push({\n          name: tempObj.name,\n          type: tempObj.type,\n          dataType: tempObj.dataType,\n          enabled: tempObj.enabled,\n          value: tempObj.value,\n        });\n      } else {\n        autoCompleteValueArray[index].value = tempObj.value;\n      }\n    } else {\n      autoCompleteValueArray.push({\n        name: tempObj.name,\n        type: tempObj.type,\n        dataType: tempObj.dataType,\n        enabled: tempObj.enabled,\n        value: tempObj.value,\n      });\n    }\n    setAutoCompletesValueArray(autoCompleteValueArray);\n    autoCompleteValueArray = [];\n  };\n  /**\n   * Method To delete the specific element from filter array upon clicking close\n   * @param {*} item is the specific filter element object\n   */\n  const deleteAutoCompleteElement = (item) => {\n    let autoCompleteArray = [...autoCompletesArray];\n    let index = autoCompleteArray.findIndex(\n      (x) => x.name === item.name && x.type === item.type\n    );\n    if (index !== -1) {\n      autoCompleteArray.splice(index, 1);\n    } else {\n      autoCompleteArray = [];\n    }\n\n    setAutoCompletesArray(autoCompleteArray);\n  };\n  /**\n   * Method To toggle the switch to enable and disable the input fields\n   * @param {*} item is the specific filter element object\n   */\n  const handleAutoCompleteEnabled = (item) => {\n    let autoCompleteArray = [...autoCompletesArray];\n    let index = autoCompleteArray.findIndex(\n      (x) => x.name === item.name && x.type === item.type\n    );\n    if (index !== -1) {\n      autoCompleteArray[index].enabled = !autoCompleteArray[index].enabled;\n    }\n    setAutoCompletesArray(autoCompleteArray);\n    if (autoCompletesValueArray.length > 0) {\n      let autoCompleteValueArray = [...autoCompletesValueArray];\n      let index = autoCompleteValueArray.findIndex(\n        (x) => x.name === item.name && x.type === item.type\n      );\n      autoCompleteValueArray[index].enabled = !autoCompleteValueArray[index]\n        .enabled;\n      setAutoCompletesValueArray(autoCompleteValueArray);\n      autoCompleteValueArray = [];\n    }\n  };\n  /**\n   * Method To delete the specific element from filter array upon clicking close\n   * @param {*} item is the specific filter element object\n   */\n  const deleteDateTimeElement = (item) => {\n    let dateTimeArray = [...dateTimesArray];\n    let index = dateTimeArray.findIndex((x) => x.name === item.name);\n    dateTimeArray.splice(index, 1);\n    dateTimeArray.forEach((item) => {\n      item.field.forEach((fieldArray) => {\n        fieldArray.value = \"\";\n      });\n    });\n    setDateTimesArray(dateTimeArray);\n    dateTimeArray = [];\n    filterData.filter.forEach((filters) => {\n      if (filters.name === item.name) {\n        item.field.forEach((fieldArray) => {\n          fieldArray.value = \"\";\n        });\n      }\n    });\n    if (item === {}) {\n      setDateTimesValueArray([]);\n    }\n  };\n  /**\n   * Method To toggle the switch to enable and disable the input fields\n   * @param {*} item is the specific filter element object\n   */\n  const handleDateTimeEnabled = (item) => {\n    let dateTimeArray = [...dateTimesArray];\n    let index = dateTimeArray.findIndex(\n      (x) => x.name === item.name && x.field === item.field\n    );\n    if (index !== -1) {\n      dateTimeArray[index].enabled = !dateTimeArray[index].enabled;\n    }\n    setDateTimesArray(dateTimeArray);\n    dateTimeArray = [];\n    if (dateTimesValueArray.length > 0) {\n      let dateTimeValueArray = [...dateTimesValueArray];\n      let tempArray = [];\n      item.field.forEach((item) => {\n        tempArray.push(item.column);\n      });\n      let index = dateTimeValueArray.findIndex(\n        (x) => x.name === item.name && tempArray.includes(x.fieldValue)\n      );\n      if (index !== -1) {\n        dateTimeValueArray.forEach((item) => {\n          item.enabled = !item.enabled;\n        });\n      }\n\n      setDateTimesValueArray(dateTimeValueArray);\n      dateTimeValueArray = [];\n    }\n  };\n  /**\n   * Method To create arrays containing values upon change trigger from respective input fields\n   * @param {*} item is the specific filter element object\n   * @param {*} fieldName is the specific type of field/date in which change is happening\n   * @param {*} value is value of the field\n   */\n  const createDateTimeArray = (item, fieldName, value) => {\n    console.log(value);\n    let tempObj = JSON.parse(JSON.stringify(item));\n    tempObj.fieldValue = fieldName;\n    tempObj.value = value;\n    let dateTimeValueArray = [...dateTimesValueArray];\n    if (dateTimeValueArray.length > 0) {\n      let index = dateTimeValueArray.findIndex(\n        (x) => x.fieldValue === tempObj.fieldValue && x.name === tempObj.name\n      );\n      if (index === -1) {\n        dateTimeValueArray.push({\n          name: tempObj.name,\n          dataType: tempObj.dataType,\n          enabled: tempObj.enabled,\n          fieldValue: tempObj.fieldValue,\n          value: tempObj.value,\n        });\n      } else {\n        dateTimeValueArray[index].value = tempObj.value;\n      }\n    } else {\n      dateTimeValueArray.push({\n        name: tempObj.name,\n        dataType: tempObj.dataType,\n        enabled: tempObj.enabled,\n        fieldValue: tempObj.fieldValue,\n        value: tempObj.value,\n      });\n    }\n    setDateTimesValueArray(dateTimeValueArray);\n    dateTimeValueArray = [];\n    let dateTimeArray = [...dateTimesArray];\n    if (dateTimeArray.length > 0) {\n      dateTimeArray.forEach((item) => {\n        item.field.forEach((fieldArray) => {\n          if (fieldArray.column === fieldName) {\n            fieldArray.value = value;\n          }\n        });\n      });\n      setDateTimesArray(dateTimeArray);\n    }\n    dateTimeArray = [];\n  };\n  /**\n   * Method to Convert Date to required Format as per value of type\n   * @param {String} inputDate\n   * @param {String} type\n   */\n  const getValueOfDate = (dateValue) => {\n    const date = new Date(dateValue);\n    console.log(date);\n    const dateTimeFormat = new Intl.DateTimeFormat(\"en-US\", {\n      year: \"numeric\",\n      month: \"2-digit\",\n      day: \"2-digit\",\n      hour: \"2-digit\",\n      minute: \"numeric\",\n      seconds: \"numeric\",\n    });\n    const [\n      { value: month },\n      ,\n      { value: day },\n      ,\n      { value: year },\n      ,\n      { value: hour },\n      ,\n      { value: minute },\n      ,\n      { value: seconds },\n    ] = dateTimeFormat.formatToParts(date);\n    return `${year}-${month}-${day}${\"T\"}${hour}:${minute}`;\n  };\n  /**\n   * Method To set both from date and to date as todays date\n   */\n  const addToday = () => {\n    let todayDate = new Date();\n    let dated = getValueOfDate(todayDate);\n    console.log(dated);\n    let dateTimeArray = [...dateTimesArray];\n    let dateTimeValueArray = [...dateTimesValueArray];\n    if (dateTimeArray.length > 0) {\n      dateTimeArray.forEach((item) => {\n        item.field.forEach((fieldArray) => {\n          fieldArray.value = dated;\n          if (dateTimeValueArray.length > 1) {\n            dateTimeValueArray.forEach((item) => {\n              if (item.fieldValue === fieldArray.column) {\n                item.value = dated;\n              }\n            });\n          } else {\n            dateTimeValueArray.push({\n              name: item.name,\n              dataType: item.dataType,\n              enabled: item.enabled,\n              fieldValue: fieldArray.column,\n              value: dated,\n            });\n          }\n        });\n      });\n      setDateTimesArray(dateTimeArray);\n      setDateTimesValueArray(dateTimeValueArray);\n    }\n  };\n  /**\n   * Method To set both from date and to date as tomorrow's date\n   */\n  const addTomorrow = () => {\n    let fromDate = new Date();\n    let toDate = new Date();\n    fromDate.setDate(fromDate.getDate() + 1);\n    toDate.setDate(toDate.getDate() + 1);\n    fromDate = getValueOfDate(fromDate);\n    toDate = getValueOfDate(toDate);\n    let dateTimeArray = [...dateTimesArray];\n    let dateTimeValueArray = [...dateTimesValueArray];\n    if (dateTimeArray.length > 0) {\n      dateTimeArray.forEach((item) => {\n        item.field[0].value = fromDate;\n        item.field[1].value = toDate;\n        item.field.forEach((fieldArray) => {\n          if (dateTimeValueArray.length > 1) {\n            dateTimeValueArray.forEach((arr) => {\n              if (arr.fieldValue === fieldArray.column) {\n                arr.value = fieldArray.value;\n              }\n            });\n          } else {\n            dateTimeValueArray.push({\n              name: item.name,\n              dataType: item.dataType,\n              enabled: item.enabled,\n              fieldValue: fieldArray.column,\n              value: fieldArray.value,\n            });\n          }\n        });\n      });\n\n      setDateTimesArray(dateTimeArray);\n      setDateTimesValueArray(dateTimeValueArray);\n    }\n  };\n  /**\n   * Method To set the date range as this month\n   */\n  const addThisMonth = () => {\n    let today = new Date();\n    let fromDate = new Date(today.getFullYear(), today.getMonth(), 1);\n    let toDate = new Date(today.getFullYear(), today.getMonth() + 1, 0);\n    fromDate = getValueOfDate(fromDate);\n    toDate = getValueOfDate(toDate);\n    let dateTimeArray = [...dateTimesArray];\n    let dateTimeValueArray = [...dateTimesValueArray];\n    if (dateTimeArray.length > 0) {\n      dateTimeArray.forEach((item) => {\n        item.field[0].value = fromDate;\n        item.field[1].value = toDate;\n        item.field.forEach((fieldArray) => {\n          if (dateTimeValueArray.length > 1) {\n            dateTimeValueArray.forEach((arr) => {\n              if (arr.fieldValue === fieldArray.column) {\n                arr.value = fieldArray.value;\n              }\n            });\n          } else {\n            dateTimeValueArray.push({\n              name: item.name,\n              dataType: item.dataType,\n              enabled: item.enabled,\n              fieldValue: fieldArray.column,\n              value: fieldArray.value,\n            });\n          }\n        });\n      });\n\n      setDateTimesArray(dateTimeArray);\n      setDateTimesValueArray(dateTimeValueArray);\n    }\n  };\n  /**\n   * Method To set the date range as next 14 days\n   */\n  const addForteenDays = () => {\n    let fromDate = new Date();\n    let toDate = new Date();\n    fromDate.setDate(fromDate.getDate() + 1);\n    toDate.setDate(toDate.getDate() + 14);\n    fromDate = getValueOfDate(fromDate);\n    toDate = getValueOfDate(toDate);\n    let dateTimeArray = [...dateTimesArray];\n    let dateTimeValueArray = [...dateTimesValueArray];\n    if (dateTimeArray.length > 0) {\n      dateTimeArray.forEach((item) => {\n        item.field[0].value = fromDate;\n        item.field[1].value = toDate;\n        item.field.forEach((fieldArray) => {\n          if (dateTimeValueArray.length > 1) {\n            dateTimeValueArray.forEach((arr) => {\n              if (arr.fieldValue === fieldArray.column) {\n                arr.value = fieldArray.value;\n              }\n            });\n          } else {\n            dateTimeValueArray.push({\n              name: item.name,\n              dataType: item.dataType,\n              enabled: item.enabled,\n              fieldValue: fieldArray.column,\n              value: fieldArray.value,\n            });\n          }\n        });\n      });\n\n      setDateTimesArray(dateTimeArray);\n      setDateTimesValueArray(dateTimeValueArray);\n    }\n  };\n  /**\n   * Method To set the date range as next 7 days\n   */\n  const addSevenDays = () => {\n    let fromDate = new Date();\n    let toDate = new Date();\n    fromDate.setDate(fromDate.getDate() + 1);\n    toDate.setDate(toDate.getDate() + 7);\n    fromDate = getValueOfDate(fromDate);\n    toDate = getValueOfDate(toDate);\n    let dateTimeArray = [...dateTimesArray];\n    let dateTimeValueArray = [...dateTimesValueArray];\n    if (dateTimeArray.length > 0) {\n      dateTimeArray.forEach((item) => {\n        item.field[0].value = fromDate;\n        item.field[1].value = toDate;\n        item.field.forEach((fieldArray) => {\n          if (dateTimeValueArray.length > 1) {\n            dateTimeValueArray.forEach((arr) => {\n              if (arr.fieldValue === fieldArray.column) {\n                arr.value = fieldArray.value;\n              }\n            });\n          } else {\n            dateTimeValueArray.push({\n              name: item.name,\n              dataType: item.dataType,\n              enabled: item.enabled,\n              fieldValue: fieldArray.column,\n              value: fieldArray.value,\n            });\n          }\n        });\n      });\n\n      setDateTimesArray(dateTimeArray);\n      setDateTimesValueArray(dateTimeValueArray);\n    }\n  };\n  /**\n   * Method To set the date range as current week Sunday to Saturday\n   */\n  const addThisWeek = () => {\n    let today = new Date();\n    let from = today.getDate() - today.getDay();\n    let to = from + 6;\n    let fromDate = new Date(today.setDate(from)).toUTCString();\n    let toDate = new Date(today.setDate(to)).toUTCString();\n    fromDate = getValueOfDate(fromDate);\n    toDate = getValueOfDate(toDate);\n    let dateTimeArray = [...dateTimesArray];\n    let dateTimeValueArray = [...dateTimesValueArray];\n    if (dateTimeArray.length > 0) {\n      dateTimeArray.forEach((item) => {\n        item.field[0].value = fromDate;\n        item.field[1].value = toDate;\n        item.field.forEach((fieldArray) => {\n          if (dateTimeValueArray.length > 1) {\n            dateTimeValueArray.forEach((arr) => {\n              if (arr.fieldValue === fieldArray.column) {\n                arr.value = fieldArray.value;\n              }\n            });\n          } else {\n            dateTimeValueArray.push({\n              name: item.name,\n              dataType: item.dataType,\n              enabled: item.enabled,\n              fieldValue: fieldArray.column,\n              value: fieldArray.value,\n            });\n          }\n        });\n      });\n\n      setDateTimesArray(dateTimeArray);\n      setDateTimesValueArray(dateTimeValueArray);\n    }\n  };\n  /**\n   * Method To set the date range as next 30 days\n   */\n  const addThirtyDays = () => {\n    let from = new Date();\n    let to = new Date();\n    from.setDate(from.getDate() + 1);\n    to.setDate(to.getDate() + 30);\n    let fromDate = getValueOfDate(from);\n    let toDate = getValueOfDate(to);\n    let dateTimeArray = [...dateTimesArray];\n    let dateTimeValueArray = [...dateTimesValueArray];\n    if (dateTimeArray.length > 0) {\n      dateTimeArray.forEach((item) => {\n        item.field[0].value = fromDate;\n        item.field[1].value = toDate;\n        item.field.forEach((fieldArray) => {\n          if (dateTimeValueArray.length > 1) {\n            dateTimeValueArray.forEach((arr) => {\n              if (arr.fieldValue === fieldArray.column) {\n                arr.value = fieldArray.value;\n              }\n            });\n          } else {\n            dateTimeValueArray.push({\n              name: item.name,\n              dataType: item.dataType,\n              enabled: item.enabled,\n              fieldValue: fieldArray.column,\n              value: fieldArray.value,\n            });\n          }\n        });\n      });\n\n      setDateTimesArray(dateTimeArray);\n      setDateTimesValueArray(dateTimeValueArray);\n    }\n  };\n  /**\n   * Method To set the date range as next n days\n   * @param {*} value is the no: of days after today\n   */\n  const nextDayChange = (value) => {\n    if (value === \"\") {\n      value = 1;\n    }\n    let fromDate = new Date();\n    let toDate = new Date();\n    if (value !== \"0\") {\n      fromDate.setDate(fromDate.getDate() + 1);\n      toDate.setDate(toDate.getDate() + parseInt(value));\n    }\n    fromDate = getValueOfDate(fromDate);\n    toDate = getValueOfDate(toDate);\n    let dateTimeArray = [...dateTimesArray];\n    let dateTimeValueArray = [...dateTimesValueArray];\n    if (dateTimeArray.length > 0) {\n      dateTimeArray.forEach((item) => {\n        item.field[0].value = fromDate;\n        item.field[1].value = toDate;\n        item.field.forEach((fieldArray) => {\n          if (dateTimeValueArray.length > 1) {\n            dateTimeValueArray.forEach((arr) => {\n              if (arr.fieldValue === fieldArray.column) {\n                arr.value = fieldArray.value;\n              }\n            });\n          } else {\n            dateTimeValueArray.push({\n              name: item.name,\n              dataType: item.dataType,\n              enabled: item.enabled,\n              fieldValue: fieldArray.column,\n              value: fieldArray.value,\n            });\n          }\n        });\n      });\n\n      setDateTimesArray(dateTimeArray);\n      setDateTimesValueArray(dateTimeValueArray);\n    }\n  };\n  /**\n   * Method To set the date range as last n days\n   * @param {*} value is the no: of days before today\n   */\n  const lastDayChange = (value) => {\n    if (value === \"\") {\n      value = 1;\n    }\n    let fromDate = new Date();\n    let toDate = new Date();\n    if (value !== \"0\") {\n      fromDate.setDate(fromDate.getDate() - parseInt(value));\n      toDate.setDate(toDate.getDate() - 1);\n    }\n    fromDate = getValueOfDate(fromDate);\n    toDate = getValueOfDate(toDate);\n    let dateTimeArray = [...dateTimesArray];\n    let dateTimeValueArray = [...dateTimesValueArray];\n    if (dateTimeArray.length > 0) {\n      dateTimeArray.forEach((item) => {\n        item.field[0].value = fromDate;\n        item.field[1].value = toDate;\n        item.field.forEach((fieldArray) => {\n          if (dateTimeValueArray.length > 1) {\n            dateTimeValueArray.forEach((arr) => {\n              if (arr.fieldValue === fieldArray.column) {\n                arr.value = fieldArray.value;\n              }\n            });\n          } else {\n            dateTimeValueArray.push({\n              name: item.name,\n              dataType: item.dataType,\n              enabled: item.enabled,\n              fieldValue: fieldArray.column,\n              value: fieldArray.value,\n            });\n          }\n        });\n      });\n\n      setDateTimesArray(dateTimeArray);\n      setDateTimesValueArray(dateTimeValueArray);\n    }\n  };\n  /**\n   * Method To toggle the switch to enable and disable the input fields\n   * @param {*} item is the specific filter element object\n   */\n  const handleCondionalEnabled = (item) => {\n    let conditionArray = [...conditionsArray];\n    let index = conditionArray.findIndex(\n      (x) => x.name === item.name && x.condition === item.condition\n    );\n    if (index !== -1) {\n      conditionArray[index].enabled = !conditionArray[index].enabled;\n    }\n    setConditionsArray(conditionArray);\n    let conditionValueArray = [];\n    conditionValueArray = [...conditionsValueArray];\n    if (conditionValueArray.length > 0) {\n      let index = conditionValueArray.findIndex(\n        (x) => x.name === item.name && x.dataType === item.dataType\n      );\n      conditionValueArray[index].enabled = !conditionValueArray[index].enabled;\n    }\n    setConditionsValueArray(conditionValueArray);\n    conditionValueArray = [];\n  };\n  /**\n   * Method To create arrays containing values upon change trigger from respective input fields\n   * @param {*} item is the specific filter element object\n   * @param {*} value is value of the input field\n   */\n  const createConditionalArray = (item, value) => {\n    let valueArray = [];\n    item.condition.forEach((it) => {\n      valueArray.push(it.value);\n    });\n    let conditionValueArray = [...conditionsValueArray];\n    if (conditionValueArray.length > 0) {\n      let index = conditionValueArray.findIndex(\n        (x) => x.name === item.name && x.dataType === item.dataType\n      );\n      if (index !== -1) {\n        if (valueArray.includes(value)) {\n          conditionValueArray[index].condition = value;\n        } else {\n          conditionValueArray[index].amount = value;\n        }\n      }\n    } else {\n      if (valueArray.includes(value)) {\n        conditionValueArray.push({\n          name: item.name,\n          dataType: item.dataType,\n          enabled: item.enabled,\n          condition: value,\n        });\n      } else {\n        conditionValueArray.push({\n          name: item.name,\n          dataType: item.dataType,\n          enabled: item.enabled,\n          condition: item.condition[0].value,\n          amount: value,\n        });\n      }\n    }\n    setConditionsValueArray(conditionValueArray);\n    conditionValueArray = [];\n  };\n  /**\n   * Method To delete the specific element from filter array upon clicking close\n   * @param {*} item is the specific filter element object\n   */\n  const deleteConditionalElement = (item) => {\n    let conditionArray = [...conditionsArray];\n    let index = conditionArray.findIndex(\n      (x) => x.name === item.name && x.dataType === item.dataType\n    );\n    if (index !== -1) {\n      conditionArray.splice(index, 1);\n    } else {\n      conditionArray = [];\n    }\n    setConditionsArray(conditionArray);\n  };\n  /**\n   * Method To create arrays containing values upon change trigger from respective input fields\n   * @param {*} item is the specific filter element object\n   * @param {*} value is value of the input field\n   */\n  const createTextComponentsArray = (item, value) => {\n    let textComponentValueArray = [...textComponentsValueArray];\n    if (textComponentValueArray.length > 0) {\n      let index = textComponentValueArray.findIndex(\n        (x) => x.name === item.name && x.dataType === item.dataType\n      );\n      if (index === -1) {\n        textComponentValueArray.push({\n          name: item.name,\n          dataType: item.dataType,\n          enabled: item.enabled,\n          value: value,\n        });\n      } else {\n        textComponentValueArray[index].value = value;\n      }\n    } else {\n      textComponentValueArray.push({\n        name: item.name,\n        dataType: item.dataType,\n        enabled: item.enabled,\n        value: value,\n      });\n    }\n    setTextComponentsValueArray(textComponentValueArray);\n    textComponentValueArray = [];\n  };\n  /**\n   * Method To toggle the switch to enable and disable the input fields\n   * @param {*} item is the specific filter element object\n   */\n  const handleTextComponentEnabled = (item) => {\n    let textComponentArray = [...textComponentsArray];\n    let index = textComponentArray.findIndex(\n      (x) => x.name === item.name && x.dataType === item.dataType\n    );\n    if (index !== -1) {\n      textComponentArray[index].enabled = !textComponentArray[index].enabled;\n    }\n    setTextComponentsArray(textComponentArray);\n    textComponentArray = [];\n    let textComponentValueArray = [...textComponentsValueArray];\n    if (textComponentValueArray.length > 0) {\n      let index = textComponentValueArray.findIndex(\n        (x) => x.name === item.name && x.dataType === item.dataType\n      );\n      if (index !== -1) {\n        textComponentValueArray[index].enabled = !textComponentValueArray[index]\n          .enabled;\n      }\n    }\n    setTextComponentsValueArray(textComponentValueArray);\n    textComponentValueArray = [];\n  };\n  /**\n   * Method To delete the specific element from filter array upon clicking close\n   * @param {*} item is the specific filter element object\n   */\n  const deleteTextComponentElement = (item) => {\n    let textComponentArray = [...textComponentsArray];\n    let index = textComponentArray.findIndex(\n      (x) => x.name === item.name && x.dataType === item.dataType\n    );\n    if (index !== -1) {\n      textComponentArray.splice(index, 1);\n    } else {\n      textComponentArray = [];\n    }\n    setTextComponentsArray(textComponentArray);\n  };\n  /**\n   * Method To map the applied filters to drawer on clicking the chips\n   * @param {*} item is the specific filter element object\n   */\n  const addAppliedFilters = (item) => {\n    let arr = [];\n    filterData.filter.forEach((fil) => {\n      if (fil.types.length) {\n        let index = fil.types.findIndex(\n          (x) => x.name === item.type && fil.name === item.name\n        );\n        if (index !== -1) {\n          arr = fil.types[index].options;\n        }\n      }\n    });\n    item.forEach((item) => {\n      if (item.dataType === \"AutoComplete\") {\n        let autoCompleteArray = [...autoCompletesArray];\n        if (autoCompleteArray.length > 0) {\n          let index = autoCompleteArray.findIndex(\n            (x) => x.name === item.name && item.type === x.type\n          );\n          if (index === -1) {\n            autoCompleteArray.push({\n              name: item.name,\n              dataType: item.dataType,\n              type: item.type,\n              enabled: item.enabled,\n              value: item.value,\n              objectArray: arr,\n            });\n          }\n        } else {\n          autoCompleteArray.push({\n            name: item.name,\n            dataType: item.dataType,\n            type: item.type,\n            enabled: item.enabled,\n            value: item.value,\n            objectArray: arr,\n          });\n        }\n        setAutoCompletesArray(autoCompleteArray);\n      } else if (item.dataType === \"DateTime\") {\n        let dateTimeArray = [...dateTimesArray];\n        if (dateTimeArray.length === 0) {\n          dateTimeArray.push({\n            name: item.name,\n            dataType: item.dataType,\n            enabled: item.enabled,\n            field: [],\n          });\n          dateTimesValueArray.forEach((item) => {\n            if (item.fieldValue) {\n              dateTimeArray.forEach((dt) => {\n                dt.field.push({\n                  column: item.fieldValue,\n                  value: item.value,\n                });\n              });\n            }\n          });\n        }\n        setDateTimesArray(dateTimeArray);\n      } else if (item.dataType === \"Numeric\") {\n        let conditionArray = [...conditionsArray];\n        if (conditionArray.length === 0) {\n          conditionArray.push({\n            name: item.name,\n            dataType: item.dataType,\n            enabled: item.enabled,\n            condition: [],\n            amount: item.amount,\n            value: item.condition,\n          });\n          filterData.filter.forEach((data) => {\n            if (data.dataType === \"Numeric\") {\n              data.condition.forEach((values) => {\n                conditionArray.forEach((item) => {\n                  item.condition.push({ value: values.value });\n                });\n              });\n            }\n          });\n        }\n        setConditionsArray(conditionArray);\n      } else {\n        let textComponentArray = [...textComponentsArray];\n        if (textComponentArray.length > 0) {\n          let index = textComponentArray.findIndex((x) => x.name === item.name);\n          if (index === -1) {\n            textComponentArray.push({\n              name: item.name,\n              dataType: item.dataType,\n              enabled: item.enabled,\n              value: item.value,\n            });\n          }\n        } else {\n          textComponentArray.push({\n            name: item.name,\n            dataType: item.dataType,\n            enabled: item.enabled,\n            value: item.value,\n          });\n        }\n        setTextComponentsArray(textComponentArray);\n      }\n    });\n    setApplyFilter(true);\n  };\n  /**\n   * Method To map the saved filters to drawer on clicking the specific saved filter name\n   * @param {*} item is the specific filter element object\n   */\n  const addSavedFilters = (item) => {\n    let autoComplete = [];\n    let condition = [];\n    let text = [];\n    let tempArr = [];\n    let savedFilters = [];\n    for (let objects in item) {\n      item[objects].forEach((arrays) => {\n        for (let array in arrays) {\n          tempArr.push(arrays[array]);\n        }\n      });\n    }\n    let arr = [];\n    tempArr.forEach((arrays) => {\n      arrays.forEach((array) => {\n        savedFilters.push(array);\n      });\n    });\n    savedFilters.forEach((items) => {\n      filterData.filter.forEach((fil) => {\n        if (fil.types.length) {\n          let index = fil.types.findIndex(\n            (x) => x.name === items.type && fil.name === items.name\n          );\n          if (index !== -1) {\n            arr = fil.types[index].options;\n          }\n        }\n      });\n      if (items.dataType === \"AutoComplete\") {\n        let autoCompleteArray = [...autoComplete];\n        if (autoCompleteArray.length > 0) {\n          let index = autoCompleteArray.findIndex(\n            (x) => x.name === items.name && items.type === x.type\n          );\n          if (index === -1) {\n            autoCompleteArray.push({\n              name: items.name,\n              dataType: items.dataType,\n              type: items.type,\n              enabled: items.enabled,\n              value: items.value,\n              objectArray: arr,\n            });\n          }\n        } else {\n          autoCompleteArray.push({\n            name: items.name,\n            dataType: items.dataType,\n            type: items.type,\n            enabled: items.enabled,\n            value: items.value,\n            objectArray: arr,\n          });\n        }\n        autoComplete = autoCompleteArray;\n      }\n    });\n    setAutoCompletesArray(autoComplete);\n    let saveTempDateTimeArray = [];\n    savedFilters.forEach((items) => {\n      if (items.dataType === \"DateTime\") {\n        if (saveTempDateTimeArray.length === 0) {\n          saveTempDateTimeArray.push({\n            name: items.name,\n            dataType: items.dataType,\n            enabled: items.enabled,\n            field: [],\n          });\n        }\n      }\n    });\n    savedFilters.forEach((saved) => {\n      if (saved.dataType === \"DateTime\") {\n        if (saveTempDateTimeArray.length > 0) {\n          saveTempDateTimeArray.forEach((filter) => {\n            filter.field.push({\n              column: saved.fieldValue,\n              value: saved.value,\n            });\n          });\n        }\n      }\n    });\n    setDateTimesArray(saveTempDateTimeArray);\n    savedFilters.forEach((items) => {\n      if (items.dataType === \"Numeric\") {\n        let conditionArray = [...condition];\n        if (conditionArray.length === 0) {\n          conditionArray.push({\n            name: items.name,\n            dataType: items.dataType,\n            enabled: items.enabled,\n            condition: [],\n            amount: items.amount,\n            value: items.condition,\n          });\n          filterData.filter.forEach((data) => {\n            if (data.dataType === \"Numeric\") {\n              data.condition.forEach((values) => {\n                conditionArray.forEach((items) => {\n                  items.condition.push({ value: values.value });\n                });\n              });\n            }\n          });\n        }\n        condition = conditionArray;\n      }\n    });\n    setConditionsArray(condition);\n    savedFilters.forEach((items) => {\n      if (items.dataType === \"Text\") {\n        let textComponentArray = [...text];\n        if (textComponentArray.length > 0) {\n          let index = textComponentArray.findIndex(\n            (x) => x.name === items.name\n          );\n          if (index === -1) {\n            textComponentArray.push({\n              name: items.name,\n              dataType: items.dataType,\n              enabled: items.enabled,\n              value: items.value,\n            });\n          }\n        } else {\n          textComponentArray.push({\n            name: items.name,\n            dataType: items.dataType,\n            enabled: items.enabled,\n            value: items.value,\n          });\n        }\n        text = textComponentArray;\n      }\n    });\n    setTextComponentsArray(text);\n    setApplyFilter(true);\n  };\n  /**\n   * Method To reset the right drawer\n   */\n  const resetDrawer = () => {\n    deleteAutoCompleteElement({});\n    deleteConditionalElement({});\n    deleteDateTimeElement({});\n    deleteTextComponentElement({});\n    setApplyFilterChip({});\n  };\n  const { ref, showApplyFilter, setApplyFilter } = useComponentVisible(true);\n  return (\n    <div ref={ref}>\n      {showApplyFilter && (\n        <div className=\"filter--grid\" ref={ref}>\n          <div className=\"filter__wrap\">\n            <div className=\"filter__list\">\n              <LeftDrawer\n                filterData={filterData}\n                fromLeftToRight={fromLeftToRight}\n              />\n            </div>\n            <div className=\"filter__inputwrap\">\n              <RightDrawer\n                applyFilter={applyFilter}\n                saveFilter={saveFilter}\n                createAutoCompleteArray={createAutoCompleteArray}\n                handleAutoCompleteEnabled={handleAutoCompleteEnabled}\n                deleteAutoCompleteElement={deleteAutoCompleteElement}\n                autoCompleteArray={autoCompletesArray}\n                dateTimesArray={dateTimesArray}\n                deleteDateTimeElement={deleteDateTimeElement}\n                handleDateTimeEnabled={handleDateTimeEnabled}\n                createDateTimeArray={createDateTimeArray}\n                addToday={addToday}\n                addTomorrow={addTomorrow}\n                addThisMonth={addThisMonth}\n                addForteenDays={addForteenDays}\n                addSevenDays={addSevenDays}\n                addThisWeek={addThisWeek}\n                addThirtyDays={addThirtyDays}\n                lastDayChange={lastDayChange}\n                nextDayChange={nextDayChange}\n                conditionsArray={conditionsArray}\n                handleCondionalEnabled={handleCondionalEnabled}\n                createConditionalArray={createConditionalArray}\n                deleteConditionalElement={deleteConditionalElement}\n                textComponentsArray={textComponentsArray}\n                deleteTextComponentElement={deleteTextComponentElement}\n                createTextComponentsArray={createTextComponentsArray}\n                handleTextComponentEnabled={handleTextComponentEnabled}\n                closeDrawer={closeDrawer}\n                resetDrawer={resetDrawer}\n                filterCount={filterCount}\n                saveWarningClassName={saveWarningClassName}\n                saveWarningLabel={saveWarningLabel}\n                showSavePopUp={showSavePopUp}\n                emptyFilterClassName={emptyFilterClassName}\n                emptyFilterWarning={emptyFilterWarning}\n              />\n            </div>\n          </div>\n        </div>\n      )}\n\n      <MainFilterPanel\n        showDrawer={showDrawer}\n        applyFilterChip={applyFilterChip}\n        addAppliedFilters={addAppliedFilters}\n        addSavedFilters={addSavedFilters}\n      />\n    </div>\n  );\n}\n","import React from \"react\";\nimport Filter from \"filter\";\nimport FilterData from \"./data.json\";\n\nexport default function App() {\n  return <Filter filterData={FilterData} />;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}