{"ast":null,"code":"import _slicedToArray from \"/Users/abhilashrj/Documents/iCargoPOC/library/filter/node_modules/react-scripts/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport React, { useState, useEffect, forwardRef, useRef } from 'react';\nimport { Form, Button, Accordion } from 'react-bootstrap';\nimport { Multiselect } from 'multiselect-react-dropdown';\nimport { faTimes, faCheck, faStar, faAlignLeft } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport Card from 'react-bootstrap/Card';\n\nfunction AutoComplete(props) {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        autoCompleteArr = _useState2[0],\n        setAutoAcompleteArr = _useState2[1];\n\n  useEffect(() => {\n    setAutoAcompleteArr(props.autoCompleteArray);\n  }, [props.autoCompleteArray]);\n\n  const handleClose = item => {\n    props.deleteAutoCompleteElement(item);\n  };\n\n  const _onSelect = (selectedList, selectedItem, item) => {\n    props.createAutoCompleteArray(item, selectedList);\n  };\n\n  let autoCompleteDiv = autoCompleteArr.map((item, index) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"filter__input\",\n      key: index\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"filter__input-title\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"filter__label\"\n    }, /*#__PURE__*/React.createElement(\"span\", null, item.name), /*#__PURE__*/React.createElement(\"span\", null, \"\\xA0>\\xA0\"), /*#__PURE__*/React.createElement(\"span\", null, item.type)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"filter__control\"\n    }, /*#__PURE__*/React.createElement(Form.Check, {\n      type: \"switch\",\n      label: \"\",\n      className: item.type.concat(item.name),\n      id: item.name.concat(item.type),\n      checked: item.enabled,\n      onChange: e => {\n        props.handleAutoCompleteEnabled(item);\n      }\n    }), /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTimes,\n      type: \"button\",\n      onClick: e => {\n        handleClose(item);\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"displayFlex\"\n    }, /*#__PURE__*/React.createElement(Multiselect, {\n      id: item.type.concat(item.name),\n      disable: !item.enabled,\n      options: item.objectArray,\n      closeIcon: \"close\",\n      displayValue: \"key\",\n      className: \"form-control\",\n      selectedValues: item.value,\n      onSelect: e => {\n        _onSelect(e, e[e.length - 1], item);\n      }\n    })));\n  });\n  return /*#__PURE__*/React.createElement(\"div\", null, autoCompleteDiv);\n}\n\nfunction FieldComponent(props) {\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        fieldComponentArr = _useState4[0],\n        setFieldComponentArr = _useState4[1];\n\n  useEffect(() => {\n    setFieldComponentArr(props.dateTimesArray);\n  }, [props.dateTimesArray]);\n\n  const handleClose = item => {\n    props.deleteDateTimeElement(item);\n  };\n\n  let fieldComponentDiv = fieldComponentArr.map((item, index) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"filter__input\",\n      key: index\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"filter__input-title\",\n      key: 1\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"filter__label\"\n    }, /*#__PURE__*/React.createElement(Form.Label, null, /*#__PURE__*/React.createElement(\"strong\", null, item.name))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"filter__control\"\n    }, /*#__PURE__*/React.createElement(Form.Check, {\n      type: \"switch\",\n      id: item.name,\n      label: \"\",\n      defaultChecked: item.enabled,\n      onChange: e => {\n        props.handleDateTimeEnabled(item);\n      }\n    }), /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      className: \"fontIcons\",\n      icon: faTimes,\n      onClick: e => {\n        handleClose(item);\n      }\n    }))), item.field.map((field, index) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: \"\".concat(index, \"-\").concat(field.name)\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"displayFlex\",\n        key: \"\".concat(index, \",\").concat(field.name)\n      }, /*#__PURE__*/React.createElement(Form.Text, null, field.column)), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"filter__split\",\n        key: index\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"date-wrap\"\n      }, /*#__PURE__*/React.createElement(Form.Control, {\n        disabled: !item.enabled,\n        type: \"date\",\n        value: field.value,\n        className: field.name,\n        onChange: e => {\n          props.createDateTimeArray(item, field.column, e.target.value);\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"date-button\"\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        type: \"button\"\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"time-wrap\"\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        className: \"time\",\n        type: \"time\",\n        disabled: !item.enabled\n      }))));\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      disabled: !item.enabled,\n      type: \"button\",\n      onClick: e => {\n        props.addToday();\n      }\n    }, \"Today\"), /*#__PURE__*/React.createElement(\"button\", {\n      disabled: !item.enabled,\n      type: \"button\",\n      onClick: e => {\n        props.addTomorrow();\n      }\n    }, \"Tomorrow\"), /*#__PURE__*/React.createElement(\"button\", {\n      disabled: !item.enabled,\n      type: \"button\",\n      onClick: e => {\n        props.addThisWeek();\n      }\n    }, \"This Week\"), /*#__PURE__*/React.createElement(\"button\", {\n      disabled: !item.enabled,\n      type: \"button\",\n      onClick: e => {\n        props.addSevenDays();\n      }\n    }, \"Next 7 days\"), /*#__PURE__*/React.createElement(\"button\", {\n      disabled: !item.enabled,\n      type: \"button\",\n      onClick: e => {\n        props.addForteenDays();\n      }\n    }, \"Next 14 days\"), /*#__PURE__*/React.createElement(\"button\", {\n      disabled: !item.enabled,\n      type: \"button\",\n      onClick: e => {\n        props.addThisMonth();\n      }\n    }, \"This Month\"), /*#__PURE__*/React.createElement(\"button\", {\n      disabled: !item.enabled,\n      type: \"button\",\n      onClick: e => {\n        props.addThirtyDays();\n      }\n    }, \"Next 30 days\"), /*#__PURE__*/React.createElement(\"br\", null), \"Next\", \" \", /*#__PURE__*/React.createElement(\"input\", {\n      disabled: !item.enabled,\n      type: \"text\",\n      onChange: e => {\n        props.nextDayChange(e.target.value);\n      }\n    }), \" \", \"Days\", /*#__PURE__*/React.createElement(\"br\", null), \"Last\", \" \", /*#__PURE__*/React.createElement(\"input\", {\n      disabled: !item.enabled,\n      type: \"text\",\n      onChange: e => {\n        props.lastDayChange(e.target.value);\n      }\n    }), \" \", \"Days\");\n  });\n  return /*#__PURE__*/React.createElement(\"div\", null, fieldComponentDiv);\n}\n\nfunction Condition(props) {\n  const _useState5 = useState([]),\n        _useState6 = _slicedToArray(_useState5, 2),\n        conditionArr = _useState6[0],\n        setConditionArr = _useState6[1];\n\n  useEffect(() => {\n    setConditionArr(props.conditionsArray);\n  }, [props.conditionsArray]);\n  let conditionalDiv = conditionArr.map((item, index) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"filter__input\",\n      key: index\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"filter__input-title\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"filter__label\"\n    }, /*#__PURE__*/React.createElement(Form.Label, null, /*#__PURE__*/React.createElement(\"strong\", null, item.name))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"filter__control\"\n    }, /*#__PURE__*/React.createElement(Form.Check, {\n      type: \"switch\",\n      id: item.name,\n      label: \"\",\n      checked: item.enabled,\n      onChange: e => {\n        props.handleCondionalEnabled(item);\n      }\n    }), /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      className: \"fontIcons\",\n      icon: faTimes,\n      onClick: e => {\n        props.deleteConditionalElement(item);\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      onChange: e => {\n        props.createConditionalArray(item, e.target.value);\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"displayFlex\"\n    }, /*#__PURE__*/React.createElement(Form.Group, {\n      controlId: \"exampleForm.ControlSelect1\"\n    }, /*#__PURE__*/React.createElement(Form.Text, {\n      className: \"text-muted\"\n    }, Object.keys(item)[3]), /*#__PURE__*/React.createElement(Form.Control, {\n      disabled: !item.enabled,\n      as: \"select\",\n      defaultValue: item.value\n    }, item.condition.map((condition, index) => {\n      return /*#__PURE__*/React.createElement(\"option\", {\n        key: index\n      }, condition.value);\n    })))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"displayFlex\"\n    }, /*#__PURE__*/React.createElement(Form.Group, null, /*#__PURE__*/React.createElement(Form.Text, {\n      className: \"text-muted\"\n    }, Object.keys(item)[4]), /*#__PURE__*/React.createElement(Form.Control, {\n      disabled: !item.enabled,\n      defaultValue: item.amount,\n      required: true,\n      type: \"number\"\n    })))));\n  });\n  return /*#__PURE__*/React.createElement(\"div\", null, conditionalDiv);\n}\n\nfunction TextComponents(props) {\n  const _useState7 = useState([]),\n        _useState8 = _slicedToArray(_useState7, 2),\n        textComponentArr = _useState8[0],\n        setTextComponentArr = _useState8[1];\n\n  useEffect(() => {\n    setTextComponentArr(props.textComponentsArray);\n  }, [props.textComponentsArray]);\n  let textComponentDiv = textComponentArr.map((item, index) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: index\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"filter__input\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"filter__input-title\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"filter__label\"\n    }, /*#__PURE__*/React.createElement(\"span\", null, item.name)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"filter__control\"\n    }, /*#__PURE__*/React.createElement(Form.Check, {\n      type: \"switch\",\n      label: \"\",\n      id: item.name,\n      checked: item.enabled,\n      onChange: e => {\n        props.handleTextComponentEnabled(item);\n      }\n    }), /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTimes,\n      type: \"button\",\n      onClick: e => {\n        props.deleteTextComponentElement(item);\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"displayFlex\"\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      id: item.name.concat(item.dataType),\n      disabled: !item.enabled,\n      type: \"text\",\n      defaultValue: item.value,\n      className: \"form-control\",\n      onChange: e => {\n        props.createTextComponentsArray(item, e.target.value);\n      }\n    }))));\n  });\n  return /*#__PURE__*/React.createElement(\"div\", null, textComponentDiv);\n}\n\nconst RightDrawer = forwardRef((props, ref) => {\n  const _useState9 = useState(\"none\"),\n        _useState10 = _slicedToArray(_useState9, 2),\n        showSavePopup = _useState10[0],\n        setShowSavePopup = _useState10[1];\n\n  const _useState11 = useState(\"\"),\n        _useState12 = _slicedToArray(_useState11, 2),\n        saveFilterName = _useState12[0],\n        setSaveFilterName = _useState12[1];\n\n  const _useState13 = useState(\"\"),\n        _useState14 = _slicedToArray(_useState13, 2),\n        saveFilterWarning = _useState14[0],\n        setSaveFilterWarning = _useState14[1];\n\n  const _useState15 = useState(\"\"),\n        _useState16 = _slicedToArray(_useState15, 2),\n        warningLabel = _useState16[0],\n        setWarningLabel = _useState16[1];\n\n  const registersaveFilterName = e => {\n    setSaveFilterWarning(\"\");\n    setWarningLabel(\"\");\n    setSaveFilterName(e.target.value);\n  };\n\n  const showPopUp = () => {\n    setShowSavePopup(\"\");\n  };\n\n  const cancelSavePopup = () => {\n    setShowSavePopup(\"none\");\n    setSaveFilterWarning(\"\");\n    setWarningLabel(\"\");\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"filter__title\"\n  }, \"Searched Filters\", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"filter-count\"\n  }, props.filterCount)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"filter__content\"\n  }, /*#__PURE__*/React.createElement(AutoComplete, {\n    name: props.name,\n    type: props.type,\n    enabled: props.enabled,\n    dataType: props.dataType,\n    options: props.options,\n    autoCompleteArray: props.autoCompleteArray,\n    deleteAutoCompleteElement: props.deleteAutoCompleteElement,\n    handleAutoCompleteEnabled: props.handleAutoCompleteEnabled,\n    createAutoCompleteArray: props.createAutoCompleteArray\n  }), /*#__PURE__*/React.createElement(FieldComponent, {\n    dateTimesArray: props.dateTimesArray,\n    deleteDateTimeElement: props.deleteDateTimeElement,\n    handleDateTimeEnabled: props.handleDateTimeEnabled,\n    createDateTimeArray: props.createDateTimeArray,\n    addToday: props.addToday,\n    addTomorrow: props.addTomorrow,\n    addThisMonth: props.addThisMonth,\n    addForteenDays: props.addForteenDays,\n    addSevenDays: props.addSevenDays,\n    addThisWeek: props.addThisWeek,\n    addThirtyDays: props.addThirtyDays,\n    lastDayChange: props.lastDayChange,\n    nextDayChange: props.nextDayChange\n  }), /*#__PURE__*/React.createElement(Condition, {\n    conditionsArray: props.conditionsArray,\n    handleCondionalEnabled: props.handleCondionalEnabled,\n    createConditionalArray: props.createConditionalArray,\n    deleteConditionalElement: props.deleteConditionalElement\n  }), /*#__PURE__*/React.createElement(TextComponents, {\n    textComponentsArray: props.textComponentsArray,\n    deleteTextComponentElement: props.deleteTextComponentElement,\n    createTextComponentsArray: props.createTextComponentsArray,\n    handleTextComponentEnabled: props.handleTextComponentEnabled\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"filter__btn\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"filter__save\"\n  }, /*#__PURE__*/React.createElement(Button, {\n    className: \"button-save\",\n    variant: \"\"\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"../images/icon-save.svg\",\n    onClick: showPopUp,\n    alt: \"save icon\"\n  }), /*#__PURE__*/React.createElement(\"span\", null, \"SAVE\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"btn-wrap\"\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"\",\n    className: \"reset\",\n    onClick: props.resetDrawer\n  }, \"Reset\"), /*#__PURE__*/React.createElement(Button, {\n    variant: \"\",\n    className: \"applyFilter\",\n    onClick: e => {\n      props.applyFilter();\n      props.deleteAutoCompleteElement({});\n      props.deleteConditionalElement({});\n      props.deleteDateTimeElement({});\n      props.deleteTextComponentElement({});\n      props.closeDrawer();\n    }\n  }, \"Apply Filter\")), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: showSavePopup\n    },\n    className: \"popup--save\"\n  }, /*#__PURE__*/React.createElement(\"h5\", null, \"Save the Filter\"), /*#__PURE__*/React.createElement(\"span\", {\n    className: warningLabel\n  }, saveFilterWarning), /*#__PURE__*/React.createElement(\"label\", null, \"Saved Filter Name\"), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"txt\",\n    value: saveFilterName,\n    onChange: e => registersaveFilterName(e)\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"btn-wrap\"\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"button\",\n    onClick: e => {\n      cancelSavePopup();\n    }\n  }, \"Cancel\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"button\",\n    onClick: e => {\n      props.saveFilter(saveFilterName);\n      setSaveFilterName(\"\");\n      setShowSavePopup(\"none\");\n    }\n  }, \"Save\")))));\n});\nlet accordianArray = [];\n\nfunction LeftDrawer(props) {\n  const _useState17 = useState([]),\n        _useState18 = _slicedToArray(_useState17, 2),\n        leftDrawData = _useState18[0],\n        setLeftDrawData = _useState18[1];\n\n  const _useState19 = useState([]),\n        _useState20 = _slicedToArray(_useState19, 2),\n        leftDrawTemp = _useState20[0],\n        setLeftDrawTemp = _useState20[1];\n\n  const _useState21 = useState([]),\n        _useState22 = _slicedToArray(_useState21, 2),\n        filterType = _useState22[0],\n        setFilterType = _useState22[1];\n\n  const _useState23 = useState([]),\n        _useState24 = _slicedToArray(_useState23, 2),\n        filterTypeTemp = _useState24[0],\n        setFilterTypeTemp = _useState24[1];\n\n  const _useState25 = useState(\"1\"),\n        _useState26 = _slicedToArray(_useState25, 2),\n        activeState = _useState26[0],\n        setActiveState = _useState26[1];\n\n  const _useState27 = useState([]),\n        _useState28 = _slicedToArray(_useState27, 2),\n        accordianArr = _useState28[0],\n        setAccordianArr = _useState28[1];\n\n  useEffect(() => {\n    let typeArray = [];\n    setLeftDrawData(props.filterData.filter);\n    setLeftDrawTemp(props.filterData.filter);\n    props.filterData.filter.forEach(item => {\n      if (item.types) {\n        item.types.forEach(type => {\n          typeArray.push(type.name);\n        });\n      }\n    });\n    setFilterType(typeArray);\n    setFilterTypeTemp(typeArray);\n  }, [props.filterData.filter]);\n\n  const searchFilterHandler = e => {\n    let filteredList = [];\n    let filteredTypeList = [];\n    const searchKey = e.target.value;\n\n    if (leftDrawData) {\n      filteredList = leftDrawTemp.filter(item => {\n        if (item.types) {\n          filteredTypeList = item.types.filter(type => {\n            return type.name && type.name.toLowerCase().includes(searchKey.toLowerCase());\n          });\n\n          if (filteredTypeList.length > 0 && searchKey !== \"\") {\n            setActiveState(\"2\");\n            return true;\n          } else {\n            setActiveState(\"1\");\n          }\n\n          return item.name && item.name.toLowerCase().includes(searchKey.toLowerCase());\n        } else {\n          return item.name && item.name.toLowerCase().includes(searchKey.toLowerCase());\n        }\n      });\n    }\n\n    setLeftDrawData(filteredList);\n    setFilterType(filteredTypeList);\n  };\n\n  leftDrawData.forEach(item => {\n    if (item.types) {\n      accordianArray.push({\n        name: item.name,\n        accordianShow: \"\"\n      });\n    }\n  });\n\n  const handleAccordianArrow = (name, className) => {\n    accordianArray.forEach(item => {\n      let index = accordianArray.indexOf(item);\n\n      if (item.name === name) {\n        if (className === \"show card-header\") {\n          accordianArray[index] = {\n            name: item.name,\n            accordianShow: \"\"\n          };\n        } else {\n          accordianArray[index] = {\n            name: item.name,\n            accordianShow: \"show\"\n          };\n        }\n      }\n    });\n    setAccordianArr(accordianArray);\n    accordianArray = [];\n  };\n\n  let accordianHeads = leftDrawData.map((item, index) => {\n    if (item.types.length) {\n      let show = \"\";\n      accordianArr.forEach(accord => {\n        if (accord.name === item.name) {\n          show = accord.accordianShow;\n        }\n      });\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: index\n      }, /*#__PURE__*/React.createElement(Accordion, null, /*#__PURE__*/React.createElement(Card, null, /*#__PURE__*/React.createElement(Accordion.Toggle, {\n        className: show,\n        as: Card.Header,\n        eventKey: \"1\",\n        onClick: e => {\n          handleAccordianArrow(item.name, e.target.className);\n        }\n      }, item.name), /*#__PURE__*/React.createElement(Accordion.Collapse, {\n        eventKey: \"1\"\n      }, /*#__PURE__*/React.createElement(Card.Body, null, /*#__PURE__*/React.createElement(\"ul\", {\n        className: \"firstAccordion\",\n        key: index\n      }, item.types && item.types.map((type, index) => {\n        return /*#__PURE__*/React.createElement(\"li\", {\n          onClick: e => {\n            props.fromLeftToRight(item.name, type.dataType, type.enabled, type.name, item.field, item.condition, type.options);\n          },\n          key: index\n        }, type.name);\n      })))))));\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: index\n      });\n    }\n  });\n  let fieldHeads = leftDrawData.map((item, index) => {\n    if (item.field.length) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"fieldHeads\",\n        key: index\n      }, /*#__PURE__*/React.createElement(\"li\", {\n        onClick: e => {\n          props.fromLeftToRight(item.name, item.dataType, item.enabled, item.types, item.field, item.condition);\n        }\n      }, item.name));\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: index\n      });\n    }\n  });\n  let conditionHeads = leftDrawData.map((item, index) => {\n    if (item.condition.length) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"conditionHeads\",\n        key: index\n      }, /*#__PURE__*/React.createElement(\"li\", {\n        onClick: e => {\n          props.fromLeftToRight(item.name, item.dataType, item.enabled, item.types, item.field, item.condition);\n        }\n      }, item.name));\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: index\n      });\n    }\n  });\n  let normalHeads = leftDrawData.map((item, index) => {\n    if (!(item.condition.length || item.types.length || item.field.length)) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"normalHeads\",\n        key: index\n      }, /*#__PURE__*/React.createElement(\"li\", {\n        onClick: e => {\n          props.fromLeftToRight(item.name, item.dataType, item.enabled, item.types, item.field, item.condition);\n        }\n      }, item.name));\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: index\n      });\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Form.Row, null, /*#__PURE__*/React.createElement(Form.Control, {\n    required: true,\n    type: \"text\",\n    placeholder: \"Search a Filter\",\n    defaultValue: \"\",\n    className: \"customControl\",\n    onChange: searchFilterHandler\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"leftDrawer\"\n  }, /*#__PURE__*/React.createElement(\"div\", null, accordianHeads), /*#__PURE__*/React.createElement(\"div\", null, fieldHeads), /*#__PURE__*/React.createElement(\"div\", null, conditionHeads), /*#__PURE__*/React.createElement(\"div\", null, normalHeads)));\n}\n\nconst SavedFilters = props => {\n  const _useState29 = useState(false),\n        _useState30 = _slicedToArray(_useState29, 2),\n        showFilter = _useState30[0],\n        setShowFilter = _useState30[1];\n\n  let listRef = useRef();\n  useEffect(() => {\n    let listHandler = event => {\n      if (listRef.current && !listRef.current.contains(event.target)) {\n        setShowFilter(false);\n        props.handleListFilter();\n      }\n    };\n\n    setShowFilter(props.showFilter);\n    document.addEventListener(\"mousedown\", listHandler);\n    return () => {\n      document.removeEventListener(\"mousedown\", listHandler);\n    };\n  }, [props]);\n  let keyValue = \"\";\n  let savedFilters = localStorage.getItem(\"savedFilters\");\n  savedFilters = savedFilters ? JSON.parse(savedFilters) : [];\n\n  if (savedFilters.length > 5) {\n    savedFilters = savedFilters.slice(savedFilters.length - 5, savedFilters.length);\n  }\n\n  const savedFilter = savedFilters.map((filterArray, index) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: index\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"alignLeft\"\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      style: {\n        marginLeft: \"-54px\"\n      },\n      icon: faCheck\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        marginLeft: \"15px\"\n      },\n      onClick: e => {\n        setShowFilter(false);\n        props.handleListFilter();\n        props.addSavedFilters(filterArray);\n      }\n    }, Object.keys(filterArray)[0]), /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faStar,\n      className: \"marginLeft\"\n    })));\n  });\n\n  if (showFilter) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"lists\",\n      ref: listRef\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"listsView\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"text-muted\"\n    }, \"list view\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"alignLeft\"\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCheck,\n      className: \"selected\"\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"leftSpace selected\"\n    }, \"Recently Viewed(10)\"), /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faStar,\n      className: \"marginLeft\"\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"alignLeft\"\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCheck\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"leftSpace\"\n    }, \"To be called cancelled flights(12)\"), /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faStar,\n      className: \"marginLeft\"\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"alignLeft\"\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCheck\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"leftSpace\"\n    }, \" Delayed Flights(10)\"), /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faStar,\n      className: \"marginLeft\"\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"alignLeft\"\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCheck\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"leftSpace\"\n    }, \" Flights in next 7 days(10) \"), /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faStar,\n      className: \"marginLeft\"\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"alignLeft\"\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCheck\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"leftSpace\"\n    }, \" Flights in next 10 days(10) \"), /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faStar,\n      className: \"marginLeft\"\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"alignLeft\"\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCheck\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"leftSpace\"\n    }, \" Flights in next 20 days(10) \"), /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faStar,\n      className: \"marginLeft\"\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"alignLeft\"\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCheck\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"leftSpace\"\n    }, \" Flights in next 30 days(10) \"), /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faStar,\n      className: \"marginLeft\"\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"savedFilters\"\n    }, /*#__PURE__*/React.createElement(\"ul\", {\n      key: keyValue,\n      className: \"leftSpace\"\n    }, savedFilter)));\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", null);\n  }\n};\n\nlet chips;\n\nconst MainFilterPanel = props => {\n  const _useState31 = useState(false),\n        _useState32 = _slicedToArray(_useState31, 2),\n        listFilter = _useState32[0],\n        setListFilter = _useState32[1];\n\n  const _useState33 = useState([]),\n        _useState34 = _slicedToArray(_useState33, 2),\n        chipArray = _useState34[0],\n        setChipArray = _useState34[1];\n\n  useEffect(() => {\n    setChipArray(props.applyFilterChip.applyFilter);\n  }, [props.applyFilterChip]);\n\n  const handleListFilter = () => {\n    setListFilter(!listFilter);\n  };\n\n  if (chipArray) {\n    chips = chipArray.map((item, index) => {\n      if (item.type) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"listContent\",\n          key: index,\n          onClick: e => {\n            props.addAppliedFilters(item);\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", null, item.name, \":\", item.type), item.value.map((value, index) => {\n          return /*#__PURE__*/React.createElement(\"div\", {\n            key: index\n          }, value.value);\n        }));\n      } else if (item.condition) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"listContent\",\n          key: index,\n          onClick: e => {\n            props.addAppliedFilters(item);\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", null, item.name), \":\", item.condition, item.amount);\n      } else if (item.fieldValue) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"listContent\",\n          key: index,\n          onClick: e => {\n            props.addAppliedFilters(item);\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", null, item.fieldValue), item.value);\n      } else {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"listContent\",\n          key: index,\n          onClick: e => {\n            props.addAppliedFilters(item);\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", null, item.name), \":\", item.value);\n      }\n    });\n  } else {\n    chips = /*#__PURE__*/React.createElement(\"div\", null);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"list\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"displayFlex\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"alignLeft\"\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faAlignLeft,\n    onClick: handleListFilter\n  }), /*#__PURE__*/React.createElement(SavedFilters, {\n    onSelectSavedFilter: props.onSelectSavedFilter,\n    showFilter: listFilter,\n    handleListFilter: handleListFilter,\n    addSavedFilters: props.addSavedFilters\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"leftSpace\"\n  }, \"All flights\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"secondList\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"displayFlex\"\n  }, chips, /*#__PURE__*/React.createElement(\"div\", {\n    onClick: e => {\n      props.showDrawer();\n    }\n  }, \"+ Add Filter\"))));\n};\n\nlet dateFormat = require(\"dateformat\");\n\nfunction useComponentVisible() {\n  const _useState35 = useState(false),\n        _useState36 = _slicedToArray(_useState35, 2),\n        showApplyFilter = _useState36[0],\n        setApplyFilter = _useState36[1];\n\n  const ref = useRef(null);\n\n  const handleHideDropdown = event => {\n    if (event.key === \"Escape\") {\n      setApplyFilter(false);\n    }\n  };\n\n  const handleClickOutside = event => {\n    if (ref.current && !ref.current.contains(event.target)) {\n      setApplyFilter(false);\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener(\"keydown\", handleHideDropdown, true);\n    document.addEventListener(\"click\", handleClickOutside, true);\n    return () => {\n      document.removeEventListener(\"keydown\", handleHideDropdown, true);\n      document.removeEventListener(\"click\", handleClickOutside, true);\n    };\n  });\n  return {\n    ref,\n    showApplyFilter,\n    setApplyFilter\n  };\n}\n\nfunction filter(props) {\n  const _useState37 = useState([]),\n        _useState38 = _slicedToArray(_useState37, 2),\n        autoCompletesValueArray = _useState38[0],\n        setAutoCompletesValueArray = _useState38[1];\n\n  const _useState39 = useState([]),\n        _useState40 = _slicedToArray(_useState39, 2),\n        autoCompletesArray = _useState40[0],\n        setAutoCompletesArray = _useState40[1];\n\n  const _useState41 = useState([]),\n        _useState42 = _slicedToArray(_useState41, 2),\n        dateTimesArray = _useState42[0],\n        setDateTimesArray = _useState42[1];\n\n  const _useState43 = useState([]),\n        _useState44 = _slicedToArray(_useState43, 2),\n        dateTimesValueArray = _useState44[0],\n        setDateTimesValueArray = _useState44[1];\n\n  const _useState45 = useState([]),\n        _useState46 = _slicedToArray(_useState45, 2),\n        conditionsArray = _useState46[0],\n        setConditionsArray = _useState46[1];\n\n  const _useState47 = useState([]),\n        _useState48 = _slicedToArray(_useState47, 2),\n        conditionsValueArray = _useState48[0],\n        setConditionsValueArray = _useState48[1];\n\n  const _useState49 = useState([]),\n        _useState50 = _slicedToArray(_useState49, 2),\n        textComponentsArray = _useState50[0],\n        setTextComponentsArray = _useState50[1];\n\n  const _useState51 = useState([]),\n        _useState52 = _slicedToArray(_useState51, 2),\n        textComponentsValueArray = _useState52[0],\n        setTextComponentsValueArray = _useState52[1];\n\n  const _useState53 = useState({}),\n        _useState54 = _slicedToArray(_useState53, 2),\n        applyFilterChip = _useState54[0],\n        setApplyFilterChip = _useState54[1];\n\n  const _useState55 = useState(0),\n        _useState56 = _slicedToArray(_useState55, 2),\n        filterCount = _useState56[0],\n        setFilterCount = _useState56[1];\n\n  const _useState57 = useState({}),\n        _useState58 = _slicedToArray(_useState57, 2),\n        filterData = _useState58[0],\n        setFilterData = _useState58[1];\n\n  useEffect(() => {\n    setFilterData(props.filterData);\n  }, [props.filterData]);\n  useEffect(() => {\n    let count = 0;\n    count = autoCompletesArray.length + dateTimesArray.length + conditionsArray.length + textComponentsArray.length;\n    setFilterCount(count);\n  }, [autoCompletesArray, dateTimesArray, conditionsArray, textComponentsArray]);\n\n  const showDrawer = () => {\n    setApplyFilter(true);\n  };\n\n  const closeDrawer = () => {\n    setApplyFilter(false);\n  };\n\n  const applyFilter = () => {\n    let applyFilter = {\n      applyFilterArray: []\n    };\n    let tempObj = {\n      applyFilter: []\n    };\n\n    if (autoCompletesValueArray.length > 0) {\n      autoCompletesValueArray.forEach(item => {\n        tempObj.applyFilter.push(item);\n      });\n      applyFilter.applyFilterArray.push({\n        autoComplete: autoCompletesValueArray\n      });\n    }\n\n    if (dateTimesValueArray.length > 0) {\n      dateTimesValueArray.forEach(item => {\n        tempObj.applyFilter.push(item);\n      });\n      applyFilter.applyFilterArray.push({\n        dateTime: dateTimesValueArray\n      });\n    }\n\n    if (conditionsValueArray.length > 0) {\n      conditionsValueArray.forEach(item => {\n        tempObj.applyFilter.push(item);\n      });\n      applyFilter.applyFilterArray.push({\n        conditional: conditionsValueArray\n      });\n    }\n\n    if (textComponentsValueArray.length > 0) {\n      textComponentsValueArray.forEach(item => {\n        tempObj.applyFilter.push(item);\n      });\n      applyFilter.applyFilterArray.push({\n        textComponent: textComponentsValueArray\n      });\n    }\n\n    console.log(applyFilter);\n    setApplyFilterChip(tempObj);\n    tempObj = {};\n  };\n\n  const saveFilter = value => {\n    let savedFilter = {\n      filter: []\n    };\n\n    if (autoCompletesValueArray.length > 0) {\n      savedFilter.filter.push({\n        autoComplete: autoCompletesValueArray\n      });\n    }\n\n    if (dateTimesValueArray.length > 0) {\n      savedFilter.filter.push({\n        dateTime: dateTimesValueArray\n      });\n    }\n\n    if (conditionsValueArray.length > 0) {\n      savedFilter.filter.push({\n        conditional: conditionsValueArray\n      });\n    }\n\n    if (textComponentsValueArray.length > 0) {\n      savedFilter.filter.push({\n        textComponent: textComponentsValueArray\n      });\n    }\n\n    savedFilter[value] = savedFilter[\"filter\"];\n    delete savedFilter.filter;\n    let savedFilters = localStorage.getItem(\"savedFilters\");\n    savedFilters = savedFilters ? JSON.parse(savedFilters) : [];\n    savedFilters.push(savedFilter);\n    localStorage.setItem(\"savedFilters\", JSON.stringify(savedFilters));\n    console.log(savedFilters);\n  };\n\n  const fromLeftToRight = (name, dataType, enabled, type, field, condition, options) => {\n    if (dataType === \"AutoComplete\") {\n      let value = {\n        name: name,\n        type: type,\n        dataType: dataType,\n        enabled: enabled,\n        objectArray: options\n      };\n      let autoCompleteArray = [...autoCompletesArray];\n\n      if (autoCompleteArray.length > 0) {\n        let index = autoCompleteArray.findIndex(x => x.name === value.name && x.type === value.type);\n\n        if (index === -1) {\n          autoCompleteArray.push({\n            name: name,\n            type: type,\n            dataType: dataType,\n            enabled: enabled,\n            objectArray: options\n          });\n        }\n      } else {\n        autoCompleteArray.push({\n          name: name,\n          type: type,\n          dataType: dataType,\n          enabled: enabled,\n          objectArray: options\n        });\n      }\n\n      setAutoCompletesArray(autoCompleteArray);\n      autoCompleteArray = [];\n    }\n\n    if (dataType === \"DateTime\") {\n      let value = {\n        name: name,\n        dataType: dataType,\n        enabled: enabled,\n        field: field\n      };\n      let dateTimeArray = [...dateTimesArray];\n\n      if (dateTimeArray.length > 0) {\n        let index = dateTimeArray.findIndex(x => x.name === value.name && x.field === value.field);\n\n        if (index === -1) {\n          dateTimeArray.push({\n            name: name,\n            dataType: dataType,\n            enabled: enabled,\n            field: field\n          });\n        }\n      } else {\n        dateTimeArray.push({\n          name: name,\n          dataType: dataType,\n          enabled: enabled,\n          field: field\n        });\n      }\n\n      setDateTimesArray(dateTimeArray);\n      dateTimeArray = [];\n    }\n\n    if (dataType === \"Numeric\") {\n      let value = {\n        name: name,\n        dataType: dataType,\n        enabled: enabled,\n        condition: condition,\n        amount: \"\"\n      };\n      let conditionArray = [...conditionsArray];\n\n      if (conditionArray.length > 0) {\n        let index = conditionArray.findIndex(x => x.name === value.name && x.condition === value.condition);\n\n        if (index === -1) {\n          conditionArray.push({\n            name: name,\n            dataType: dataType,\n            enabled: enabled,\n            condition: condition,\n            amount: \"\"\n          });\n        }\n      } else {\n        conditionArray.push({\n          name: name,\n          dataType: dataType,\n          enabled: enabled,\n          condition: condition,\n          amount: \"\"\n        });\n      }\n\n      setConditionsArray(conditionArray);\n      conditionArray = [];\n    }\n\n    if (dataType === \"Text\") {\n      let value = {\n        name: name,\n        dataType: dataType,\n        enabled: enabled\n      };\n      let textComponentArray = [...textComponentsArray];\n\n      if (textComponentArray.length > 0) {\n        let index = textComponentArray.findIndex(x => x.name === value.name && x.dataType === value.dataType);\n\n        if (index === -1) {\n          textComponentArray.push({\n            name: name,\n            dataType: dataType,\n            enabled: enabled\n          });\n        }\n      } else {\n        textComponentArray.push({\n          name: name,\n          dataType: dataType,\n          enabled: enabled\n        });\n      }\n\n      setTextComponentsArray(textComponentArray);\n      textComponentArray = [];\n    }\n  };\n\n  const createAutoCompleteArray = (item, valueArray) => {\n    let tempObj = JSON.parse(JSON.stringify(item));\n    tempObj.value = valueArray;\n    let autoCompleteValueArray = [...autoCompletesValueArray];\n\n    if (autoCompleteValueArray.length > 0) {\n      let index = autoCompleteValueArray.findIndex(x => x.name === tempObj.name && x.type === tempObj.type);\n\n      if (index === -1) {\n        autoCompleteValueArray.push({\n          name: tempObj.name,\n          type: tempObj.type,\n          dataType: tempObj.dataType,\n          enabled: tempObj.enabled,\n          value: tempObj.value\n        });\n      } else {\n        autoCompleteValueArray[index].value = tempObj.value;\n      }\n    } else {\n      autoCompleteValueArray.push({\n        name: tempObj.name,\n        type: tempObj.type,\n        dataType: tempObj.dataType,\n        enabled: tempObj.enabled,\n        value: tempObj.value\n      });\n    }\n\n    setAutoCompletesValueArray(autoCompleteValueArray);\n    autoCompleteValueArray = [];\n  };\n\n  const deleteAutoCompleteElement = item => {\n    let autoCompleteArray = [...autoCompletesArray];\n    let index = autoCompleteArray.findIndex(x => x.name === item.name && x.type === item.type);\n\n    if (index !== -1) {\n      autoCompleteArray.splice(index, 1);\n    } else {\n      autoCompleteArray = [];\n    }\n\n    setAutoCompletesArray(autoCompleteArray);\n  };\n\n  const handleAutoCompleteEnabled = item => {\n    let autoCompleteArray = [...autoCompletesArray];\n    let index = autoCompleteArray.findIndex(x => x.name === item.name && x.type === item.type);\n\n    if (index !== -1) {\n      autoCompleteArray[index].enabled = !autoCompleteArray[index].enabled;\n    }\n\n    setAutoCompletesArray(autoCompleteArray);\n\n    if (autoCompletesValueArray.length > 0) {\n      let autoCompleteValueArray = [...autoCompletesValueArray];\n\n      let _index = autoCompleteValueArray.findIndex(x => x.name === item.name && x.type === item.type);\n\n      autoCompleteValueArray[_index].enabled = !autoCompleteValueArray[_index].enabled;\n      setAutoCompletesValueArray(autoCompleteValueArray);\n      autoCompleteValueArray = [];\n    }\n  };\n\n  const deleteDateTimeElement = item => {\n    let dateTimeArray = [...dateTimesArray];\n    let index = dateTimeArray.findIndex(x => x.name === item.name);\n    dateTimeArray.splice(index, 1);\n    dateTimeArray.forEach(item => {\n      item.field.forEach(fieldArray => {\n        fieldArray.value = \"\";\n      });\n    });\n    setDateTimesArray(dateTimeArray);\n    dateTimeArray = [];\n    filterData.filter.forEach(filters => {\n      if (filters.name === item.name) {\n        item.field.forEach(fieldArray => {\n          fieldArray.value = \"\";\n        });\n      }\n    });\n\n    if (item === {}) {\n      setDateTimesValueArray([]);\n    }\n  };\n\n  const handleDateTimeEnabled = item => {\n    let dateTimeArray = [...dateTimesArray];\n    let index = dateTimeArray.findIndex(x => x.name === item.name && x.field === item.field);\n\n    if (index !== -1) {\n      dateTimeArray[index].enabled = !dateTimeArray[index].enabled;\n    }\n\n    setDateTimesArray(dateTimeArray);\n    dateTimeArray = [];\n\n    if (dateTimesValueArray.length > 0) {\n      let dateTimeValueArray = [...dateTimesValueArray];\n      let tempArray = [];\n      item.field.forEach(item => {\n        tempArray.push(item.column);\n      });\n\n      let _index2 = dateTimeValueArray.findIndex(x => x.name === item.name && tempArray.includes(x.fieldValue));\n\n      if (_index2 !== -1) {\n        dateTimeValueArray.forEach(item => {\n          item.enabled = !item.enabled;\n        });\n      }\n\n      setDateTimesValueArray(dateTimeValueArray);\n      dateTimeValueArray = [];\n    }\n  };\n\n  const createDateTimeArray = (item, fieldName, value) => {\n    let tempObj = JSON.parse(JSON.stringify(item));\n    tempObj.fieldValue = fieldName;\n    tempObj.value = value;\n    let dateTimeValueArray = [...dateTimesValueArray];\n\n    if (dateTimeValueArray.length > 0) {\n      let index = dateTimeValueArray.findIndex(x => x.fieldValue === tempObj.fieldValue && x.name === tempObj.name);\n\n      if (index === -1) {\n        dateTimeValueArray.push({\n          name: tempObj.name,\n          dataType: tempObj.dataType,\n          enabled: tempObj.enabled,\n          fieldValue: tempObj.fieldValue,\n          value: tempObj.value\n        });\n      } else {\n        dateTimeValueArray[index].value = tempObj.value;\n      }\n    } else {\n      dateTimeValueArray.push({\n        name: tempObj.name,\n        dataType: tempObj.dataType,\n        enabled: tempObj.enabled,\n        fieldValue: tempObj.fieldValue,\n        value: tempObj.value\n      });\n    }\n\n    setDateTimesValueArray(dateTimeValueArray);\n    dateTimeValueArray = [];\n    let dateTimeArray = [...dateTimesArray];\n\n    if (dateTimeArray.length > 0) {\n      dateTimeArray.forEach(item => {\n        item.field.forEach(fieldArray => {\n          if (fieldArray.column === fieldName) {\n            fieldArray.value = value;\n          }\n        });\n      });\n      setDateTimesArray(dateTimeArray);\n    }\n\n    dateTimeArray = [];\n  };\n\n  const addToday = () => {\n    let todayDate = new Date();\n    let dated = dateFormat(todayDate, \"yyyy-mm-dd\");\n    let dateTimeArray = [...dateTimesArray];\n    let dateTimeValueArray = [...dateTimesValueArray];\n\n    if (dateTimeArray.length > 0) {\n      dateTimeArray.forEach(item => {\n        item.field.forEach(fieldArray => {\n          fieldArray.value = dated;\n\n          if (dateTimeValueArray.length > 1) {\n            dateTimeValueArray.forEach(item => {\n              if (item.fieldValue === fieldArray.column) {\n                item.value = dated;\n              }\n            });\n          } else {\n            dateTimeValueArray.push({\n              name: item.name,\n              dataType: item.dataType,\n              enabled: item.enabled,\n              fieldValue: fieldArray.column,\n              value: dated\n            });\n          }\n        });\n      });\n      setDateTimesArray(dateTimeArray);\n      setDateTimesValueArray(dateTimeValueArray);\n    }\n  };\n\n  const addTomorrow = () => {\n    let fromDate = new Date();\n    let toDate = new Date();\n    fromDate.setDate(fromDate.getDate() + 1);\n    toDate.setDate(toDate.getDate() + 1);\n    fromDate = dateFormat(fromDate, \"yyyy-mm-dd\");\n    toDate = dateFormat(toDate, \"yyyy-mm-dd\");\n    let dateTimeArray = [...dateTimesArray];\n    let dateTimeValueArray = [...dateTimesValueArray];\n\n    if (dateTimeArray.length > 0) {\n      dateTimeArray.forEach(item => {\n        item.field[0].value = fromDate;\n        item.field[1].value = toDate;\n        item.field.forEach(fieldArray => {\n          if (dateTimeValueArray.length > 1) {\n            dateTimeValueArray.forEach(arr => {\n              if (arr.fieldValue === fieldArray.column) {\n                arr.value = fieldArray.value;\n              }\n            });\n          } else {\n            dateTimeValueArray.push({\n              name: item.name,\n              dataType: item.dataType,\n              enabled: item.enabled,\n              fieldValue: fieldArray.column,\n              value: fieldArray.value\n            });\n          }\n        });\n      });\n      setDateTimesArray(dateTimeArray);\n      setDateTimesValueArray(dateTimeValueArray);\n    }\n  };\n\n  const addThisMonth = () => {\n    let today = new Date();\n    let fromDate = new Date(today.getFullYear(), today.getMonth(), 1);\n    let toDate = new Date(today.getFullYear(), today.getMonth() + 1, 0);\n    fromDate = dateFormat(fromDate, \"yyyy-mm-dd\");\n    toDate = dateFormat(toDate, \"yyyy-mm-dd\");\n    let dateTimeArray = [...dateTimesArray];\n    let dateTimeValueArray = [...dateTimesValueArray];\n\n    if (dateTimeArray.length > 0) {\n      dateTimeArray.forEach(item => {\n        item.field[0].value = fromDate;\n        item.field[1].value = toDate;\n        item.field.forEach(fieldArray => {\n          if (dateTimeValueArray.length > 1) {\n            dateTimeValueArray.forEach(arr => {\n              if (arr.fieldValue === fieldArray.column) {\n                arr.value = fieldArray.value;\n              }\n            });\n          } else {\n            dateTimeValueArray.push({\n              name: item.name,\n              dataType: item.dataType,\n              enabled: item.enabled,\n              fieldValue: fieldArray.column,\n              value: fieldArray.value\n            });\n          }\n        });\n      });\n      setDateTimesArray(dateTimeArray);\n      setDateTimesValueArray(dateTimeValueArray);\n    }\n  };\n\n  const addForteenDays = () => {\n    let fromDate = new Date();\n    let toDate = new Date();\n    fromDate.setDate(fromDate.getDate() + 1);\n    toDate.setDate(toDate.getDate() + 14);\n    fromDate = dateFormat(fromDate, \"yyyy-mm-dd\");\n    toDate = dateFormat(toDate, \"yyyy-mm-dd\");\n    let dateTimeArray = [...dateTimesArray];\n    let dateTimeValueArray = [...dateTimesValueArray];\n\n    if (dateTimeArray.length > 0) {\n      dateTimeArray.forEach(item => {\n        item.field[0].value = fromDate;\n        item.field[1].value = toDate;\n        item.field.forEach(fieldArray => {\n          if (dateTimeValueArray.length > 1) {\n            dateTimeValueArray.forEach(arr => {\n              if (arr.fieldValue === fieldArray.column) {\n                arr.value = fieldArray.value;\n              }\n            });\n          } else {\n            dateTimeValueArray.push({\n              name: item.name,\n              dataType: item.dataType,\n              enabled: item.enabled,\n              fieldValue: fieldArray.column,\n              value: fieldArray.value\n            });\n          }\n        });\n      });\n      setDateTimesArray(dateTimeArray);\n      setDateTimesValueArray(dateTimeValueArray);\n    }\n  };\n\n  const addSevenDays = () => {\n    let fromDate = new Date();\n    let toDate = new Date();\n    fromDate.setDate(fromDate.getDate() + 1);\n    toDate.setDate(toDate.getDate() + 7);\n    fromDate = dateFormat(fromDate, \"yyyy-mm-dd\");\n    toDate = dateFormat(toDate, \"yyyy-mm-dd\");\n    let dateTimeArray = [...dateTimesArray];\n    let dateTimeValueArray = [...dateTimesValueArray];\n\n    if (dateTimeArray.length > 0) {\n      dateTimeArray.forEach(item => {\n        item.field[0].value = fromDate;\n        item.field[1].value = toDate;\n        item.field.forEach(fieldArray => {\n          if (dateTimeValueArray.length > 1) {\n            dateTimeValueArray.forEach(arr => {\n              if (arr.fieldValue === fieldArray.column) {\n                arr.value = fieldArray.value;\n              }\n            });\n          } else {\n            dateTimeValueArray.push({\n              name: item.name,\n              dataType: item.dataType,\n              enabled: item.enabled,\n              fieldValue: fieldArray.column,\n              value: fieldArray.value\n            });\n          }\n        });\n      });\n      setDateTimesArray(dateTimeArray);\n      setDateTimesValueArray(dateTimeValueArray);\n    }\n  };\n\n  const addThisWeek = () => {\n    let today = new Date();\n    let from = today.getDate() - today.getDay();\n    let to = from + 6;\n    let fromDate = new Date(today.setDate(from)).toUTCString();\n    let toDate = new Date(today.setDate(to)).toUTCString();\n    fromDate = dateFormat(fromDate, \"yyyy-mm-dd\");\n    toDate = dateFormat(toDate, \"yyyy-mm-dd\");\n    let dateTimeArray = [...dateTimesArray];\n    let dateTimeValueArray = [...dateTimesValueArray];\n\n    if (dateTimeArray.length > 0) {\n      dateTimeArray.forEach(item => {\n        item.field[0].value = fromDate;\n        item.field[1].value = toDate;\n        item.field.forEach(fieldArray => {\n          if (dateTimeValueArray.length > 1) {\n            dateTimeValueArray.forEach(arr => {\n              if (arr.fieldValue === fieldArray.column) {\n                arr.value = fieldArray.value;\n              }\n            });\n          } else {\n            dateTimeValueArray.push({\n              name: item.name,\n              dataType: item.dataType,\n              enabled: item.enabled,\n              fieldValue: fieldArray.column,\n              value: fieldArray.value\n            });\n          }\n        });\n      });\n      setDateTimesArray(dateTimeArray);\n      setDateTimesValueArray(dateTimeValueArray);\n    }\n  };\n\n  const addThirtyDays = () => {\n    let from = new Date();\n    let to = new Date();\n    from.setDate(from.getDate() + 1);\n    to.setDate(to.getDate() + 30);\n    let fromDate = dateFormat(from, \"yyyy-mm-dd\");\n    let toDate = dateFormat(to, \"yyyy-mm-dd\");\n    let dateTimeArray = [...dateTimesArray];\n    let dateTimeValueArray = [...dateTimesValueArray];\n\n    if (dateTimeArray.length > 0) {\n      dateTimeArray.forEach(item => {\n        item.field[0].value = fromDate;\n        item.field[1].value = toDate;\n        item.field.forEach(fieldArray => {\n          if (dateTimeValueArray.length > 1) {\n            dateTimeValueArray.forEach(arr => {\n              if (arr.fieldValue === fieldArray.column) {\n                arr.value = fieldArray.value;\n              }\n            });\n          } else {\n            dateTimeValueArray.push({\n              name: item.name,\n              dataType: item.dataType,\n              enabled: item.enabled,\n              fieldValue: fieldArray.column,\n              value: fieldArray.value\n            });\n          }\n        });\n      });\n      setDateTimesArray(dateTimeArray);\n      setDateTimesValueArray(dateTimeValueArray);\n    }\n  };\n\n  const nextDayChange = value => {\n    if (value === \"\") {\n      value = 1;\n    }\n\n    let fromDate = new Date();\n    let toDate = new Date();\n\n    if (value !== \"0\") {\n      fromDate.setDate(fromDate.getDate() + 1);\n      toDate.setDate(toDate.getDate() + parseInt(value));\n    }\n\n    fromDate = dateFormat(fromDate, \"yyyy-mm-dd\");\n    toDate = dateFormat(toDate, \"yyyy-mm-dd\");\n    let dateTimeArray = [...dateTimesArray];\n    let dateTimeValueArray = [...dateTimesValueArray];\n\n    if (dateTimeArray.length > 0) {\n      dateTimeArray.forEach(item => {\n        item.field[0].value = fromDate;\n        item.field[1].value = toDate;\n        item.field.forEach(fieldArray => {\n          if (dateTimeValueArray.length > 1) {\n            dateTimeValueArray.forEach(arr => {\n              if (arr.fieldValue === fieldArray.column) {\n                arr.value = fieldArray.value;\n              }\n            });\n          } else {\n            dateTimeValueArray.push({\n              name: item.name,\n              dataType: item.dataType,\n              enabled: item.enabled,\n              fieldValue: fieldArray.column,\n              value: fieldArray.value\n            });\n          }\n        });\n      });\n      setDateTimesArray(dateTimeArray);\n      setDateTimesValueArray(dateTimeValueArray);\n    }\n  };\n\n  const lastDayChange = value => {\n    if (value === \"\") {\n      value = 1;\n    }\n\n    let fromDate = new Date();\n    let toDate = new Date();\n\n    if (value !== \"0\") {\n      fromDate.setDate(fromDate.getDate() - parseInt(value));\n      toDate.setDate(toDate.getDate() - 1);\n    }\n\n    fromDate = dateFormat(fromDate, \"yyyy-mm-dd\");\n    toDate = dateFormat(toDate, \"yyyy-mm-dd\");\n    let dateTimeArray = [...dateTimesArray];\n    let dateTimeValueArray = [...dateTimesValueArray];\n\n    if (dateTimeArray.length > 0) {\n      dateTimeArray.forEach(item => {\n        item.field[0].value = fromDate;\n        item.field[1].value = toDate;\n        item.field.forEach(fieldArray => {\n          if (dateTimeValueArray.length > 1) {\n            dateTimeValueArray.forEach(arr => {\n              if (arr.fieldValue === fieldArray.column) {\n                arr.value = fieldArray.value;\n              }\n            });\n          } else {\n            dateTimeValueArray.push({\n              name: item.name,\n              dataType: item.dataType,\n              enabled: item.enabled,\n              fieldValue: fieldArray.column,\n              value: fieldArray.value\n            });\n          }\n        });\n      });\n      setDateTimesArray(dateTimeArray);\n      setDateTimesValueArray(dateTimeValueArray);\n    }\n  };\n\n  const handleCondionalEnabled = item => {\n    let conditionArray = [...conditionsArray];\n    let index = conditionArray.findIndex(x => x.name === item.name && x.condition === item.condition);\n\n    if (index !== -1) {\n      conditionArray[index].enabled = !conditionArray[index].enabled;\n    }\n\n    setConditionsArray(conditionArray);\n    let conditionValueArray = [];\n    conditionValueArray = [...conditionsValueArray];\n\n    if (conditionValueArray.length > 0) {\n      let _index3 = conditionValueArray.findIndex(x => x.name === item.name && x.dataType === item.dataType);\n\n      conditionValueArray[_index3].enabled = !conditionValueArray[_index3].enabled;\n    }\n\n    setConditionsValueArray(conditionValueArray);\n    conditionValueArray = [];\n  };\n\n  const createConditionalArray = (item, value) => {\n    let valueArray = [];\n    item.condition.forEach(it => {\n      valueArray.push(it.value);\n    });\n    let conditionValueArray = [...conditionsValueArray];\n\n    if (conditionValueArray.length > 0) {\n      let index = conditionValueArray.findIndex(x => x.name === item.name && x.dataType === item.dataType);\n\n      if (index !== -1) {\n        if (valueArray.includes(value)) {\n          conditionValueArray[index].condition = value;\n        } else {\n          conditionValueArray[index].amount = value;\n        }\n      }\n    } else {\n      if (valueArray.includes(value)) {\n        conditionValueArray.push({\n          name: item.name,\n          dataType: item.dataType,\n          enabled: item.enabled,\n          condition: value\n        });\n      } else {\n        conditionValueArray.push({\n          name: item.name,\n          dataType: item.dataType,\n          enabled: item.enabled,\n          condition: item.condition[0].value,\n          amount: value\n        });\n      }\n    }\n\n    setConditionsValueArray(conditionValueArray);\n    conditionValueArray = [];\n  };\n\n  const deleteConditionalElement = item => {\n    let conditionArray = [...conditionsArray];\n    let index = conditionArray.findIndex(x => x.name === item.name && x.dataType === item.dataType);\n\n    if (index !== -1) {\n      conditionArray.splice(index, 1);\n    } else {\n      conditionArray = [];\n    }\n\n    setConditionsArray(conditionArray);\n  };\n\n  const createTextComponentsArray = (item, value) => {\n    let textComponentValueArray = [...textComponentsValueArray];\n\n    if (textComponentValueArray.length > 0) {\n      let index = textComponentValueArray.findIndex(x => x.name === item.name && x.dataType === item.dataType);\n\n      if (index === -1) {\n        textComponentValueArray.push({\n          name: item.name,\n          dataType: item.dataType,\n          enabled: item.enabled,\n          value: value\n        });\n      } else {\n        textComponentValueArray[index].value = value;\n      }\n    } else {\n      textComponentValueArray.push({\n        name: item.name,\n        dataType: item.dataType,\n        enabled: item.enabled,\n        value: value\n      });\n    }\n\n    setTextComponentsValueArray(textComponentValueArray);\n    textComponentValueArray = [];\n  };\n\n  const handleTextComponentEnabled = item => {\n    let textComponentArray = [...textComponentsArray];\n    let index = textComponentArray.findIndex(x => x.name === item.name && x.dataType === item.dataType);\n\n    if (index !== -1) {\n      textComponentArray[index].enabled = !textComponentArray[index].enabled;\n    }\n\n    setTextComponentsArray(textComponentArray);\n    textComponentArray = [];\n    let textComponentValueArray = [...textComponentsValueArray];\n\n    if (textComponentValueArray.length > 0) {\n      let _index4 = textComponentValueArray.findIndex(x => x.name === item.name && x.dataType === item.dataType);\n\n      if (_index4 !== -1) {\n        textComponentValueArray[_index4].enabled = !textComponentValueArray[_index4].enabled;\n      }\n    }\n\n    setTextComponentsValueArray(textComponentValueArray);\n    textComponentValueArray = [];\n  };\n\n  const deleteTextComponentElement = item => {\n    let textComponentArray = [...textComponentsArray];\n    let index = textComponentArray.findIndex(x => x.name === item.name && x.dataType === item.dataType);\n\n    if (index !== -1) {\n      textComponentArray.splice(index, 1);\n    } else {\n      textComponentArray = [];\n    }\n\n    setTextComponentsArray(textComponentArray);\n  };\n\n  const addAppliedFilters = item => {\n    let arr = [];\n    filterData.filter.forEach(fil => {\n      if (fil.types.length) {\n        let index = fil.types.findIndex(x => x.name === item.type && fil.name === item.name);\n\n        if (index !== -1) {\n          arr = fil.types[index].options;\n        }\n      }\n    });\n\n    if (item.dataType === \"AutoComplete\") {\n      let autoCompleteArray = [...autoCompletesArray];\n\n      if (autoCompleteArray.length > 0) {\n        let index = autoCompleteArray.findIndex(x => x.name === item.name && item.type === x.type);\n\n        if (index === -1) {\n          autoCompleteArray.push({\n            name: item.name,\n            dataType: item.dataType,\n            type: item.type,\n            enabled: item.enabled,\n            value: item.value,\n            objectArray: arr\n          });\n        }\n      } else {\n        autoCompleteArray.push({\n          name: item.name,\n          dataType: item.dataType,\n          type: item.type,\n          enabled: item.enabled,\n          value: item.value,\n          objectArray: arr\n        });\n      }\n\n      setAutoCompletesArray(autoCompleteArray);\n    } else if (item.dataType === \"DateTime\") {\n      let dateTimeArray = [...dateTimesArray];\n\n      if (dateTimeArray.length === 0) {\n        dateTimeArray.push({\n          name: item.name,\n          dataType: item.dataType,\n          enabled: item.enabled,\n          field: []\n        });\n        dateTimesValueArray.forEach(item => {\n          if (item.fieldValue) {\n            dateTimeArray.forEach(dt => {\n              dt.field.push({\n                column: item.fieldValue,\n                value: item.value\n              });\n            });\n          }\n        });\n      }\n\n      setDateTimesArray(dateTimeArray);\n    } else if (item.dataType === \"Numeric\") {\n      let conditionArray = [...conditionsArray];\n\n      if (conditionArray.length === 0) {\n        conditionArray.push({\n          name: item.name,\n          dataType: item.dataType,\n          enabled: item.enabled,\n          condition: [],\n          amount: item.amount,\n          value: item.condition\n        });\n        filterData.filter.forEach(data => {\n          if (data.dataType === \"Numeric\") {\n            data.condition.forEach(values => {\n              conditionArray.forEach(item => {\n                item.condition.push({\n                  value: values.value\n                });\n              });\n            });\n          }\n        });\n      }\n\n      setConditionsArray(conditionArray);\n    } else {\n      let textComponentArray = [...textComponentsArray];\n\n      if (textComponentArray.length > 0) {\n        let index = textComponentArray.findIndex(x => x.name === item.name);\n\n        if (index === -1) {\n          textComponentArray.push({\n            name: item.name,\n            dataType: item.dataType,\n            enabled: item.enabled,\n            value: item.value\n          });\n        }\n      } else {\n        textComponentArray.push({\n          name: item.name,\n          dataType: item.dataType,\n          enabled: item.enabled,\n          value: item.value\n        });\n      }\n\n      setTextComponentsArray(textComponentArray);\n    }\n\n    setApplyFilter(true);\n  };\n\n  const addSavedFilters = item => {\n    let autoComplete = [];\n    let condition = [];\n    let text = [];\n    let tempArr = [];\n    let savedFilters = [];\n\n    for (let objects in item) {\n      item[objects].forEach(arrays => {\n        for (let array in arrays) {\n          tempArr.push(arrays[array]);\n        }\n      });\n    }\n\n    let arr = [];\n    tempArr.forEach(arrays => {\n      arrays.forEach(array => {\n        savedFilters.push(array);\n      });\n    });\n    savedFilters.forEach(items => {\n      filterData.filter.forEach(fil => {\n        if (fil.types.length) {\n          let index = fil.types.findIndex(x => x.name === items.type && fil.name === items.name);\n\n          if (index !== -1) {\n            arr = fil.types[index].options;\n          }\n        }\n      });\n\n      if (items.dataType === \"AutoComplete\") {\n        let autoCompleteArray = [...autoComplete];\n\n        if (autoCompleteArray.length > 0) {\n          let index = autoCompleteArray.findIndex(x => x.name === items.name && items.type === x.type);\n\n          if (index === -1) {\n            autoCompleteArray.push({\n              name: items.name,\n              dataType: items.dataType,\n              type: items.type,\n              enabled: items.enabled,\n              value: items.value,\n              objectArray: arr\n            });\n          }\n        } else {\n          autoCompleteArray.push({\n            name: items.name,\n            dataType: items.dataType,\n            type: items.type,\n            enabled: items.enabled,\n            value: items.value,\n            objectArray: arr\n          });\n        }\n\n        autoComplete = autoCompleteArray;\n      }\n    });\n    setAutoCompletesArray(autoComplete);\n    let saveTempDateTimeArray = [];\n    savedFilters.forEach(items => {\n      if (items.dataType === \"DateTime\") {\n        if (saveTempDateTimeArray.length === 0) {\n          saveTempDateTimeArray.push({\n            name: items.name,\n            dataType: items.dataType,\n            enabled: items.enabled,\n            field: []\n          });\n        }\n      }\n    });\n    savedFilters.forEach(saved => {\n      if (saved.dataType === \"DateTime\") {\n        if (saveTempDateTimeArray.length > 0) {\n          saveTempDateTimeArray.forEach(filter => {\n            filter.field.push({\n              column: saved.fieldValue,\n              value: saved.value\n            });\n          });\n        }\n      }\n    });\n    setDateTimesArray(saveTempDateTimeArray);\n    savedFilters.forEach(items => {\n      if (items.dataType === \"Numeric\") {\n        let conditionArray = [...condition];\n\n        if (conditionArray.length === 0) {\n          conditionArray.push({\n            name: items.name,\n            dataType: items.dataType,\n            enabled: items.enabled,\n            condition: [],\n            amount: items.amount,\n            value: items.condition\n          });\n          filterData.filter.forEach(data => {\n            if (data.dataType === \"Numeric\") {\n              data.condition.forEach(values => {\n                conditionArray.forEach(items => {\n                  items.condition.push({\n                    value: values.value\n                  });\n                });\n              });\n            }\n          });\n        }\n\n        condition = conditionArray;\n      }\n    });\n    setConditionsArray(condition);\n    savedFilters.forEach(items => {\n      if (items.dataType === \"Text\") {\n        let textComponentArray = [...text];\n\n        if (textComponentArray.length > 0) {\n          let index = textComponentArray.findIndex(x => x.name === items.name);\n\n          if (index === -1) {\n            textComponentArray.push({\n              name: items.name,\n              dataType: items.dataType,\n              enabled: items.enabled,\n              value: items.value\n            });\n          }\n        } else {\n          textComponentArray.push({\n            name: items.name,\n            dataType: items.dataType,\n            enabled: items.enabled,\n            value: items.value\n          });\n        }\n\n        text = textComponentArray;\n      }\n    });\n    setTextComponentsArray(text);\n    setApplyFilter(true);\n  };\n\n  const resetDrawer = () => {\n    deleteAutoCompleteElement({});\n    deleteConditionalElement({});\n    deleteDateTimeElement({});\n    deleteTextComponentElement({});\n    setApplyFilterChip({});\n  };\n\n  const _useComponentVisible = useComponentVisible(),\n        ref = _useComponentVisible.ref,\n        showApplyFilter = _useComponentVisible.showApplyFilter,\n        setApplyFilter = _useComponentVisible.setApplyFilter;\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: ref\n  }, showApplyFilter && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"filter--grid\",\n    ref: ref\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"filter__wrap\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"filter__list\"\n  }, /*#__PURE__*/React.createElement(LeftDrawer, {\n    filterData: filterData,\n    fromLeftToRight: fromLeftToRight\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"filter__inputwrap\"\n  }, /*#__PURE__*/React.createElement(RightDrawer, {\n    applyFilter: applyFilter,\n    saveFilter: saveFilter,\n    createAutoCompleteArray: createAutoCompleteArray,\n    handleAutoCompleteEnabled: handleAutoCompleteEnabled,\n    deleteAutoCompleteElement: deleteAutoCompleteElement,\n    autoCompleteArray: autoCompletesArray,\n    dateTimesArray: dateTimesArray,\n    deleteDateTimeElement: deleteDateTimeElement,\n    handleDateTimeEnabled: handleDateTimeEnabled,\n    createDateTimeArray: createDateTimeArray,\n    addToday: addToday,\n    addTomorrow: addTomorrow,\n    addThisMonth: addThisMonth,\n    addForteenDays: addForteenDays,\n    addSevenDays: addSevenDays,\n    addThisWeek: addThisWeek,\n    addThirtyDays: addThirtyDays,\n    lastDayChange: lastDayChange,\n    nextDayChange: nextDayChange,\n    conditionsArray: conditionsArray,\n    handleCondionalEnabled: handleCondionalEnabled,\n    createConditionalArray: createConditionalArray,\n    deleteConditionalElement: deleteConditionalElement,\n    textComponentsArray: textComponentsArray,\n    deleteTextComponentElement: deleteTextComponentElement,\n    createTextComponentsArray: createTextComponentsArray,\n    handleTextComponentEnabled: handleTextComponentEnabled,\n    closeDrawer: closeDrawer,\n    resetDrawer: resetDrawer,\n    filterCount: filterCount\n  })))), /*#__PURE__*/React.createElement(MainFilterPanel, {\n    showDrawer: showDrawer,\n    applyFilterChip: applyFilterChip,\n    addAppliedFilters: addAppliedFilters,\n    addSavedFilters: addSavedFilters\n  }));\n}\n\nexport default filter;","map":{"version":3,"sources":["../src/types/AutoCompleteComponent.js","../src/types/DateTimeComponent.js","../src/types/ConditionalComponent.js","../src/types/TextComponents.js","../src/drawer/RightDrawer.js","../src/drawer/LeftDrawer.js","../src/panel/SavedFilters.js","../src/panel/MainFilterPanel.js","../src/index.js"],"names":["useState","useEffect","setAutoAcompleteArr","props","handleClose","item","onSelect","autoCompleteDiv","index","e","setFieldComponentArr","fieldComponentDiv","field","name","enabled","setConditionArr","conditionalDiv","Object","value","condition","setTextComponentArr","textComponentDiv","RightDrawer","forwardRef","registersaveFilterName","setSaveFilterWarning","setWarningLabel","setSaveFilterName","showPopUp","setShowSavePopup","cancelSavePopup","createAutoCompleteArray","nextDayChange","deleteConditionalElement","handleTextComponentEnabled","resetDrawer","display","showSavePopup","warningLabel","accordianArray","typeArray","setLeftDrawData","setLeftDrawTemp","type","setFilterType","setFilterTypeTemp","searchFilterHandler","filteredList","filteredTypeList","searchKey","setActiveState","leftDrawData","accordianShow","handleAccordianArrow","className","setAccordianArr","accordianHeads","show","accordianArr","accord","Card","fieldHeads","conditionHeads","normalHeads","SavedFilters","listRef","useRef","listHandler","event","setShowFilter","document","keyValue","savedFilters","localStorage","JSON","savedFilter","marginLeft","faCheck","MainFilterPanel","setChipArray","handleListFilter","setListFilter","chips","addSavedFilters","dateFormat","require","ref","handleHideDropdown","setApplyFilter","handleClickOutside","setFilterData","count","autoCompletesArray","dateTimesArray","conditionsArray","textComponentsArray","setFilterCount","showDrawer","closeDrawer","applyFilter","applyFilterArray","tempObj","autoCompletesValueArray","autoComplete","dateTimesValueArray","dateTime","conditionsValueArray","conditional","textComponentsValueArray","textComponent","console","setApplyFilterChip","saveFilter","filter","fromLeftToRight","dataType","objectArray","options","autoCompleteArray","x","setAutoCompletesArray","dateTimeArray","setDateTimesArray","amount","conditionArray","setConditionsArray","textComponentArray","setTextComponentsArray","autoCompleteValueArray","setAutoCompletesValueArray","deleteAutoCompleteElement","handleAutoCompleteEnabled","deleteDateTimeElement","fieldArray","filterData","filters","setDateTimesValueArray","handleDateTimeEnabled","dateTimeValueArray","tempArray","createDateTimeArray","fieldValue","addToday","todayDate","dated","addTomorrow","fromDate","toDate","arr","addThisMonth","today","addForteenDays","addSevenDays","addThisWeek","from","to","addThirtyDays","parseInt","lastDayChange","handleCondionalEnabled","conditionValueArray","setConditionsValueArray","createConditionalArray","valueArray","it","createTextComponentsArray","textComponentValueArray","setTextComponentsValueArray","deleteTextComponentElement","addAppliedFilters","fil","dt","column","data","values","text","tempArr","arrays","array","items","saveTempDateTimeArray","saved","useComponentVisible","showApplyFilter","filterCount"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\n// import \"react-bootstrap-typeahead/css/Typeahead.css\";\nimport { Multiselect } from \"multiselect-react-dropdown\";\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Form } from \"react-bootstrap\";\n\nexport default function AutoComplete(props) {\n  const [autoCompleteArr, setAutoAcompleteArr] = useState([]);\n  useEffect(() => {\n    setAutoAcompleteArr(props.autoCompleteArray);\n  }, [props.autoCompleteArray]);\n  /**\n   * Method To close the filter\n   * @param {*} item is specific filter element\n   */\n  const handleClose = (item) => {\n    props.deleteAutoCompleteElement(item);\n  };\n  /**\n   * Method To pass the selected list of values to create value array\n   * @param {*} selectedList is entire list of selected\n   * @param {*} selectedItem is specific item selected now\n   * @param {*} item is specific filter element\n   */\n  const onSelect = (selectedList, selectedItem, item) => {\n    props.createAutoCompleteArray(item, selectedList);\n  };\n  let autoCompleteDiv = autoCompleteArr.map((item, index) => {\n    return (\n      <div className=\"filter__input\" key={index}>\n        <div className=\"filter__input-title\">\n          <div className=\"filter__label\">\n            <span>{item.name}</span>\n            <span>&nbsp;&gt;&nbsp;</span>\n            <span>{item.type}</span>\n          </div>\n          <div className=\"filter__control\">\n            <Form.Check\n              type=\"switch\"\n              label=\"\"\n              className={item.type.concat(item.name)}\n              id={item.name.concat(item.type)}\n              checked={item.enabled}\n              onChange={(e) => {\n                props.handleAutoCompleteEnabled(item);\n              }}\n            />\n            <FontAwesomeIcon\n              icon={faTimes}\n              type=\"button\"\n              onClick={(e) => {\n                handleClose(item);\n              }}\n            />\n          </div>\n        </div>\n        <div className=\"displayFlex\">\n          <Multiselect\n            id={item.type.concat(item.name)}\n            disable={!item.enabled}\n            options={item.objectArray}\n            closeIcon=\"close\"\n            displayValue=\"key\"\n            className=\"form-control\"\n            selectedValues={item.value}\n            onSelect={(e) => {\n              onSelect(e, e[e.length - 1], item);\n            }}\n          />\n        </div>\n      </div>\n    );\n  });\n  return <div>{autoCompleteDiv}</div>;\n}\n","import React, { useState, useEffect } from \"react\";\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Form } from \"react-bootstrap\";\n\nexport default function FieldComponent(props) {\n  const [fieldComponentArr, setFieldComponentArr] = useState([]);\n  useEffect(() => {\n    setFieldComponentArr(props.dateTimesArray);\n  }, [props.dateTimesArray]);\n  /**\n   * Method To close the filter\n   * @param {*} item is specific filter element\n   */\n  const handleClose = (item) => {\n    props.deleteDateTimeElement(item);\n  };\n  let fieldComponentDiv = fieldComponentArr.map((item, index) => {\n    return (\n      <div className=\"filter__input\" key={index}>\n        <div className=\"filter__input-title\" key={1}>\n          <div className=\"filter__label\">\n            <Form.Label>\n              <strong>{item.name}</strong>\n            </Form.Label>\n          </div>\n          <div className=\"filter__control\">\n            <Form.Check\n              type=\"switch\"\n              id={item.name}\n              label=\"\"\n              defaultChecked={item.enabled}\n              onChange={(e) => {\n                props.handleDateTimeEnabled(item);\n              }}\n            />\n\n            <FontAwesomeIcon\n              className=\"fontIcons\"\n              icon={faTimes}\n              onClick={(e) => {\n                handleClose(item);\n              }}\n            />\n          </div>\n        </div>\n        {item.field.map((field, index) => {\n          return (\n            <div key={`${index}-${field.name}`}>\n              <div className=\"displayFlex\" key={`${index},${field.name}`}>\n                <Form.Text>{field.column}</Form.Text>\n              </div>\n              <div className=\"filter__split\" key={index}>\n                <div className=\"date-wrap\">\n                  <Form.Control\n                    disabled={!item.enabled}\n                    type=\"date\"\n                    value={field.value}\n                    className={field.name}\n                    onChange={(e) => {\n                      props.createDateTimeArray(\n                        item,\n                        field.column,\n                        e.target.value\n                      );\n                    }}\n                  />\n                  <span className=\"date-button\">\n                    <button type=\"button\"></button>\n                  </span>\n                </div>\n                <div className=\"time-wrap\">\n                  <input\n                    className=\"time\"\n                    type=\"time\"\n                    disabled={!item.enabled}\n                  />\n                </div>\n              </div>\n            </div>\n          );\n        })}\n        <button\n          disabled={!item.enabled}\n          type=\"button\"\n          onClick={(e) => {\n            props.addToday();\n          }}\n        >\n          Today\n        </button>\n        <button\n          disabled={!item.enabled}\n          type=\"button\"\n          onClick={(e) => {\n            props.addTomorrow();\n          }}\n        >\n          Tomorrow\n        </button>\n        <button\n          disabled={!item.enabled}\n          type=\"button\"\n          onClick={(e) => {\n            props.addThisWeek();\n          }}\n        >\n          This Week\n        </button>\n        <button\n          disabled={!item.enabled}\n          type=\"button\"\n          onClick={(e) => {\n            props.addSevenDays();\n          }}\n        >\n          Next 7 days\n        </button>\n        <button\n          disabled={!item.enabled}\n          type=\"button\"\n          onClick={(e) => {\n            props.addForteenDays();\n          }}\n        >\n          Next 14 days\n        </button>\n        <button\n          disabled={!item.enabled}\n          type=\"button\"\n          onClick={(e) => {\n            props.addThisMonth();\n          }}\n        >\n          This Month\n        </button>\n        <button\n          disabled={!item.enabled}\n          type=\"button\"\n          onClick={(e) => {\n            props.addThirtyDays();\n          }}\n        >\n          Next 30 days\n        </button>\n        <br />\n        Next{\" \"}\n        <input\n          disabled={!item.enabled}\n          type=\"text\"\n          onChange={(e) => {\n            props.nextDayChange(e.target.value);\n          }}\n        />{\" \"}\n        Days\n        <br />\n        Last{\" \"}\n        <input\n          disabled={!item.enabled}\n          type=\"text\"\n          onChange={(e) => {\n            props.lastDayChange(e.target.value);\n          }}\n        />{\" \"}\n        Days\n      </div>\n    );\n  });\n  return <div>{fieldComponentDiv}</div>;\n}\n","import React, { useState, useEffect } from \"react\";\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Form } from \"react-bootstrap\";\n\nexport default function Condition(props) {\n  const [conditionArr, setConditionArr] = useState([]);\n  useEffect(() => {\n    setConditionArr(props.conditionsArray);\n  }, [props.conditionsArray]);\n  let conditionalDiv = conditionArr.map((item, index) => {\n    return (\n      <div className=\"filter__input\" key={index}>\n        <div className=\"filter__input-title\">\n          <div className=\"filter__label\">\n            <Form.Label>\n              <strong>{item.name}</strong>\n            </Form.Label>\n          </div>\n          <div className=\"filter__control\">\n            <Form.Check\n              type=\"switch\"\n              id={item.name}\n              label=\"\"\n              checked={item.enabled}\n              onChange={(e) => {\n                props.handleCondionalEnabled(item);\n              }}\n            />\n            <FontAwesomeIcon\n              className=\"fontIcons\"\n              icon={faTimes}\n              onClick={(e) => {\n                props.deleteConditionalElement(item);\n              }}\n            />\n          </div>\n        </div>\n        <div\n          onChange={(e) => {\n            props.createConditionalArray(item, e.target.value);\n          }}\n        >\n          <div className=\"displayFlex\">\n            <Form.Group controlId=\"exampleForm.ControlSelect1\">\n              <Form.Text className=\"text-muted\">\n                {Object.keys(item)[3]}\n              </Form.Text>\n              <Form.Control\n                disabled={!item.enabled}\n                as=\"select\"\n                defaultValue={item.value}\n              >\n                {item.condition.map((condition, index) => {\n                  return <option key={index}>{condition.value}</option>;\n                })}\n              </Form.Control>\n            </Form.Group>\n          </div>\n          <div className=\"displayFlex\">\n            <Form.Group>\n              <Form.Text className=\"text-muted\">\n                {Object.keys(item)[4]}\n              </Form.Text>\n              <Form.Control\n                disabled={!item.enabled}\n                defaultValue={item.amount}\n                required\n                type=\"number\"\n              />\n            </Form.Group>\n          </div>\n        </div>\n      </div>\n    );\n  });\n  return <div>{conditionalDiv}</div>;\n}\n","import React, { useEffect, useState } from \"react\";\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Form } from \"react-bootstrap\";\n\nexport default function TextComponents(props) {\n  const [textComponentArr, setTextComponentArr] = useState([]);\n  useEffect(() => {\n    setTextComponentArr(props.textComponentsArray);\n  }, [props.textComponentsArray]);\n\n  let textComponentDiv = textComponentArr.map((item, index) => {\n    return (\n      <div key={index}>\n        <div className=\"filter__input\">\n          <div className=\"filter__input-title\">\n            <div className=\"filter__label\">\n              <span>{item.name}</span>\n            </div>\n            <div className=\"filter__control\">\n              <Form.Check\n                type=\"switch\"\n                label=\"\"\n                id={item.name}\n                checked={item.enabled}\n                onChange={(e) => {\n                  props.handleTextComponentEnabled(item);\n                }}\n              ></Form.Check>\n              <FontAwesomeIcon\n                icon={faTimes}\n                type=\"button\"\n                onClick={(e) => {\n                  props.deleteTextComponentElement(item);\n                }}\n              />\n            </div>\n          </div>\n          <div className=\"displayFlex\">\n            <input\n              id={item.name.concat(item.dataType)}\n              disabled={!item.enabled}\n              type=\"text\"\n              defaultValue={item.value}\n              className=\"form-control\"\n              onChange={(e) => {\n                props.createTextComponentsArray(item, e.target.value);\n              }}\n            ></input>\n          </div>\n        </div>\n      </div>\n    );\n  });\n\n  return <div>{textComponentDiv}</div>;\n}\n","import React, { forwardRef, useState } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport AutoComplete from \"../types/AutoCompleteComponent\";\nimport FieldComponent from \"../types/DateTimeComponent\";\nimport Condition from \"../types/ConditionalComponent\";\nimport TextComponents from \"../types/TextComponents\";\n\nconst RightDrawer = forwardRef((props, ref) => {\n  const [showSavePopup, setShowSavePopup] = useState(\"none\");\n  const [saveFilterName, setSaveFilterName] = useState(\"\");\n  const [saveFilterWarning, setSaveFilterWarning] = useState(\"\");\n  const [warningLabel, setWarningLabel] = useState(\"\");\n  /**\n   * Method To pass the required name of the filter required to be saved\n   * @param {*} e is event triggered when typing on the to-save filter name field\n   */\n  const registersaveFilterName = (e) => {\n    setSaveFilterWarning(\"\");\n    setWarningLabel(\"\");\n    setSaveFilterName(e.target.value);\n  };\n  /**\n   * Method To show the save popup\n   */\n  const showPopUp = () => {\n    setShowSavePopup(\"\");\n  };\n   /**\n   * Method To close the save popup\n   */\n  const cancelSavePopup = () => {\n    setShowSavePopup(\"none\");\n    setSaveFilterWarning(\"\");\n    setWarningLabel(\"\");\n  };\n  return (\n    <React.Fragment>\n      <div className=\"filter__title\">\n        Searched Filters\n        <span className=\"filter-count\">{props.filterCount}</span>\n      </div>\n      <div className=\"filter__content\">\n        <AutoComplete\n          name={props.name}\n          type={props.type}\n          enabled={props.enabled}\n          dataType={props.dataType}\n          options={props.options}\n          autoCompleteArray={props.autoCompleteArray}\n          deleteAutoCompleteElement={props.deleteAutoCompleteElement}\n          handleAutoCompleteEnabled={props.handleAutoCompleteEnabled}\n          createAutoCompleteArray={props.createAutoCompleteArray}\n        />\n        <FieldComponent\n          dateTimesArray={props.dateTimesArray}\n          deleteDateTimeElement={props.deleteDateTimeElement}\n          handleDateTimeEnabled={props.handleDateTimeEnabled}\n          createDateTimeArray={props.createDateTimeArray}\n          addToday={props.addToday}\n          addTomorrow={props.addTomorrow}\n          addThisMonth={props.addThisMonth}\n          addForteenDays={props.addForteenDays}\n          addSevenDays={props.addSevenDays}\n          addThisWeek={props.addThisWeek}\n          addThirtyDays={props.addThirtyDays}\n          lastDayChange={props.lastDayChange}\n          nextDayChange={props.nextDayChange}\n        />\n        <Condition\n          conditionsArray={props.conditionsArray}\n          handleCondionalEnabled={props.handleCondionalEnabled}\n          createConditionalArray={props.createConditionalArray}\n          deleteConditionalElement={props.deleteConditionalElement}\n        />\n        <TextComponents\n          textComponentsArray={props.textComponentsArray}\n          deleteTextComponentElement={props.deleteTextComponentElement}\n          createTextComponentsArray={props.createTextComponentsArray}\n          handleTextComponentEnabled={props.handleTextComponentEnabled}\n        />\n      </div>\n      <div className=\"filter__btn\">\n        <div className=\"filter__save\">\n          <Button className=\"button-save\" variant=\"\">\n            <img\n              src=\"../images/icon-save.svg\"\n              onClick={showPopUp}\n              alt=\"save icon\"\n            />\n            <span>SAVE</span>\n          </Button>\n        </div>\n        <div className=\"btn-wrap\">\n          <Button variant=\"\" className=\"reset\" onClick={props.resetDrawer}>\n            Reset\n          </Button>\n          <Button\n            variant=\"\"\n            className=\"applyFilter\"\n            onClick={(e) => {\n              props.applyFilter();\n              props.deleteAutoCompleteElement({});\n              props.deleteConditionalElement({});\n              props.deleteDateTimeElement({});\n              props.deleteTextComponentElement({});\n              //saveApplyFilterMap(\"applyFilter\");\n              props.closeDrawer();\n              //props.textComponentClutter();\n            }}\n          >\n            Apply Filter\n          </Button>\n        </div>\n        <div style={{ display: showSavePopup }} className=\"popup--save\">\n          <h5>Save the Filter</h5>\n          <span className={warningLabel}>{saveFilterWarning}</span>\n          <label>Saved Filter Name</label>\n          <input\n            className=\"txt\"\n            value={saveFilterName}\n            onChange={(e) => registersaveFilterName(e)}\n          />\n          <div className=\"btn-wrap\">\n            <button\n              className=\"button\"\n              onClick={(e) => {\n                cancelSavePopup();\n              }}\n            >\n              Cancel\n            </button>\n            <button\n              className=\"button\"\n              onClick={(e) => {\n                props.saveFilter(saveFilterName);\n                setSaveFilterName(\"\");\n                setShowSavePopup(\"none\");\n              }}\n            >\n              Save\n            </button>\n          </div>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n});\n\nexport default RightDrawer;\n","import React, { useEffect, useState } from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport { Accordion, Form } from \"react-bootstrap\";\n\nlet accordianArray = [];\nexport default function LeftDrawer(props) {\n  const [leftDrawData, setLeftDrawData] = useState([]);\n  const [leftDrawTemp, setLeftDrawTemp] = useState([]);\n  const [filterType, setFilterType] = useState([]);\n  const [filterTypeTemp, setFilterTypeTemp] = useState([]);\n  const [activeState, setActiveState] = useState(\"1\");\n  const [accordianArr, setAccordianArr] = useState([]);\n\n  useEffect(() => {\n    let typeArray = [];\n    setLeftDrawData(props.filterData.filter);\n    setLeftDrawTemp(props.filterData.filter);\n    props.filterData.filter.forEach((item) => {\n      if (item.types) {\n        item.types.forEach((type) => {\n          typeArray.push(type.name);\n        });\n      }\n    });\n    setFilterType(typeArray);\n    setFilterTypeTemp(typeArray);\n  }, [props.filterData.filter]);\n  /**\n   * Method To filter out the filters displayed at the left drawer\n   * @param {*} e triggered on typing on the search field\n   */\n  const searchFilterHandler = (e) => {\n    let filteredList = [];\n    let filteredTypeList = [];\n    const searchKey = e.target.value;\n    if (leftDrawData) {\n      filteredList = leftDrawTemp.filter((item) => {\n        if (item.types) {\n          filteredTypeList = item.types.filter((type) => {\n            return (\n              type.name &&\n              type.name.toLowerCase().includes(searchKey.toLowerCase())\n            );\n          });\n          if (filteredTypeList.length > 0 && searchKey !== \"\") {\n            setActiveState(\"2\");\n            return true;\n          } else {\n            setActiveState(\"1\");\n          }\n          return (\n            item.name &&\n            item.name.toLowerCase().includes(searchKey.toLowerCase())\n          );\n        } else {\n          return (\n            item.name &&\n            item.name.toLowerCase().includes(searchKey.toLowerCase())\n          );\n        }\n      });\n    }\n    setLeftDrawData(filteredList);\n    setFilterType(filteredTypeList);\n  };\n  leftDrawData.forEach((item) => {\n    if (item.types) {\n      accordianArray.push({ name: item.name, accordianShow: \"\" });\n    }\n  });\n  /**\n   * Method To change the accordian arrow direction on toggling\n   * @param {*} name is dynamic filter name\n   * @param {*} className is the dynamic className of the div\n   */\n  const handleAccordianArrow = (name, className) => {\n    accordianArray.forEach((item) => {\n      let index = accordianArray.indexOf(item);\n      if (item.name === name) {\n        if (className === \"show card-header\") {\n          accordianArray[index] = {\n            name: item.name,\n            accordianShow: \"\",\n          };\n        } else {\n          accordianArray[index] = {\n            name: item.name,\n            accordianShow: \"show\",\n          };\n        }\n      }\n    });\n    setAccordianArr(accordianArray);\n    accordianArray = [];\n  };\n\n  let accordianHeads = leftDrawData.map((item, index) => {\n    if (item.types.length) {\n      let show = \"\";\n      accordianArr.forEach((accord) => {\n        if (accord.name === item.name) {\n          show = accord.accordianShow;\n        }\n      });\n      return (\n        <div key={index}>\n          <Accordion>\n            <Card>\n              <Accordion.Toggle\n                className={show}\n                as={Card.Header}\n                eventKey=\"1\"\n                onClick={(e) => {\n                  handleAccordianArrow(item.name, e.target.className);\n                }}\n              >\n                {item.name}\n              </Accordion.Toggle>\n              <Accordion.Collapse eventKey=\"1\">\n                <Card.Body>\n                  <ul className=\"firstAccordion\" key={index}>\n                    {item.types &&\n                      item.types.map((type, index) => {\n                        return (\n                          <li\n                            onClick={(e) => {\n                              // props.handleAutoCompleteValue(\n                              //   item.name,\n                              //   type.name,\n                              //   type.dataType,\n                              //   type.enabled,\n                              //   type.options\n                              // );\n                              props.fromLeftToRight(\n                                item.name,\n                                type.dataType,\n                                type.enabled,\n                                type.name,\n                                item.field,\n                                item.condition,\n                                type.options\n                              );\n                              // props.addedFilterCount();\n                            }}\n                            key={index}\n                          >\n                            {type.name}\n                          </li>\n                        );\n                      })}\n                  </ul>\n                </Card.Body>\n              </Accordion.Collapse>\n            </Card>\n          </Accordion>\n        </div>\n      );\n    } else {\n      return <div key={index}></div>;\n    }\n  });\n  let fieldHeads = leftDrawData.map((item, index) => {\n    if (item.field.length) {\n      return (\n        <div className=\"fieldHeads\" key={index}>\n          <li\n            onClick={(e) => {\n              // props.handleFieldValue(\n              //   item.name,\n              //   item.field,\n              //   item.dataType,\n              //   item.enabled\n              // );\n              props.fromLeftToRight(\n                item.name,\n                item.dataType,\n                item.enabled,\n                item.types,\n                item.field,\n                item.condition\n              );\n              //props.addedFilterCount();\n            }}\n          >\n            {item.name}\n          </li>\n        </div>\n      );\n    } else {\n      return <div key={index}></div>;\n    }\n  });\n  let conditionHeads = leftDrawData.map((item, index) => {\n    if (item.condition.length) {\n      return (\n        <div className=\"conditionHeads\" key={index}>\n          <li\n            onClick={(e) => {\n              // props.handleConditionalValue(\n              //   item.name,\n              //   item.condition,\n              //   item.dataType,\n              //   item.enabled\n              // );\n              props.fromLeftToRight(\n                item.name,\n                item.dataType,\n                item.enabled,\n                item.types,\n                item.field,\n                item.condition\n              );\n              //props.addedFilterCount();\n            }}\n          >\n            {item.name}\n          </li>\n        </div>\n      );\n    } else {\n      return <div key={index}></div>;\n    }\n  });\n  let normalHeads = leftDrawData.map((item, index) => {\n    if (!(item.condition.length || item.types.length || item.field.length)) {\n      return (\n        <div className=\"normalHeads\" key={index}>\n          <li\n            onClick={(e) => {\n              props.fromLeftToRight(\n                item.name,\n                item.dataType,\n                item.enabled,\n                item.types,\n                item.field,\n                item.condition\n              );\n              //props.addedFilterCount();\n            }}\n          >\n            {item.name}\n          </li>\n        </div>\n      );\n    } else {\n      return <div key={index}></div>;\n    }\n  });\n  return (\n    <div>\n      <Form.Row>\n        <Form.Control\n          required\n          type=\"text\"\n          placeholder=\"Search a Filter\"\n          defaultValue=\"\"\n          className=\"customControl\"\n          onChange={searchFilterHandler}\n        />\n      </Form.Row>\n      <div className=\"leftDrawer\">\n        <div>{accordianHeads}</div>\n        <div>{fieldHeads}</div>\n        <div>{conditionHeads}</div>\n        <div>{normalHeads}</div>\n      </div>\n    </div>\n  );\n}\n","import React, { useEffect, useState, useRef } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCheck, faStar } from \"@fortawesome/free-solid-svg-icons\";\n\nconst SavedFilters = (props) => {\n  const [showFilter, setShowFilter] = useState(false);\n  let listRef = useRef();\n  useEffect(() => {\n    let listHandler = (event) => {\n      if (listRef.current && !listRef.current.contains(event.target)) {\n        setShowFilter(false);\n        props.handleListFilter();\n      }\n    };\n    setShowFilter(props.showFilter);\n    document.addEventListener(\"mousedown\", listHandler);\n\n    return () => {\n      document.removeEventListener(\"mousedown\", listHandler);\n    };\n  }, [props]);\n\n  let name = \"\";\n  let keyValue = \"\";\n  let savedFilters = localStorage.getItem(\"savedFilters\");\n  savedFilters = savedFilters ? JSON.parse(savedFilters) : [];\n  if (savedFilters.length > 5) {\n    savedFilters = savedFilters.slice(\n      savedFilters.length - 5,\n      savedFilters.length\n    );\n  }\n\n  const savedFilter = savedFilters.map((filterArray, index) => {\n    return (\n      <div key={index}>\n        <div className=\"alignLeft\">\n          <FontAwesomeIcon\n            style={{ marginLeft: \"-54px\" }}\n            icon={faCheck}\n          ></FontAwesomeIcon>\n          <div\n            style={{ marginLeft: \"15px\" }}\n            onClick={(e) => {\n              //below two methods are required for closing the savedFilter list popUp\n              setShowFilter(false);\n              props.handleListFilter();\n              props.addSavedFilters(filterArray);\n            }}\n          >\n            {Object.keys(filterArray)[0]}\n          </div>\n          <FontAwesomeIcon\n            icon={faStar}\n            className=\"marginLeft\"\n          ></FontAwesomeIcon>\n        </div>\n      </div>\n    );\n  });\n  if (showFilter) {\n    return (\n      <div className=\"lists\" ref={listRef}>\n        <div className=\"listsView\">\n          <div className=\"text-muted\">list view</div>\n          <div className=\"alignLeft\">\n            <FontAwesomeIcon\n              icon={faCheck}\n              className=\"selected\"\n            ></FontAwesomeIcon>\n            <div className=\"leftSpace selected\">Recently Viewed(10)</div>\n            <FontAwesomeIcon\n              icon={faStar}\n              className=\"marginLeft\"\n            ></FontAwesomeIcon>\n          </div>\n          <div className=\"alignLeft\">\n            <FontAwesomeIcon icon={faCheck}></FontAwesomeIcon>\n            <div className=\"leftSpace\">To be called cancelled flights(12)</div>\n            <FontAwesomeIcon\n              icon={faStar}\n              className=\"marginLeft\"\n            ></FontAwesomeIcon>\n          </div>\n          <div className=\"alignLeft\">\n            <FontAwesomeIcon icon={faCheck}></FontAwesomeIcon>\n            <div className=\"leftSpace\"> Delayed Flights(10)</div>\n            <FontAwesomeIcon\n              icon={faStar}\n              className=\"marginLeft\"\n            ></FontAwesomeIcon>\n          </div>\n          <div className=\"alignLeft\">\n            <FontAwesomeIcon icon={faCheck}></FontAwesomeIcon>\n            <div className=\"leftSpace\"> Flights in next 7 days(10) </div>\n            <FontAwesomeIcon\n              icon={faStar}\n              className=\"marginLeft\"\n            ></FontAwesomeIcon>\n          </div>\n          <div className=\"alignLeft\">\n            <FontAwesomeIcon icon={faCheck}></FontAwesomeIcon>\n            <div className=\"leftSpace\"> Flights in next 10 days(10) </div>\n            <FontAwesomeIcon\n              icon={faStar}\n              className=\"marginLeft\"\n            ></FontAwesomeIcon>\n          </div>\n          <div className=\"alignLeft\">\n            <FontAwesomeIcon icon={faCheck}></FontAwesomeIcon>\n            <div className=\"leftSpace\"> Flights in next 20 days(10) </div>\n            <FontAwesomeIcon\n              icon={faStar}\n              className=\"marginLeft\"\n            ></FontAwesomeIcon>\n          </div>\n          <div className=\"alignLeft\">\n            <FontAwesomeIcon icon={faCheck}></FontAwesomeIcon>\n            <div className=\"leftSpace\"> Flights in next 30 days(10) </div>\n            <FontAwesomeIcon\n              icon={faStar}\n              className=\"marginLeft\"\n            ></FontAwesomeIcon>\n          </div>\n        </div>\n        <div className=\"savedFilters\">\n          <ul key={keyValue} className=\"leftSpace\">\n            {savedFilter}\n          </ul>\n        </div>\n      </div>\n    );\n  } else {\n    return <div></div>;\n  }\n};\n\nexport default SavedFilters;\n","import React, { useState, useEffect } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faAlignLeft } from \"@fortawesome/free-solid-svg-icons\";\nimport SavedFilters from \"./SavedFilters\";\n\nlet chips;\nconst MainFilterPanel = (props) => {\n  const [listFilter, setListFilter] = useState(false);\n  const [chipArray, setChipArray] = useState([]);\n  useEffect(() => {\n    setChipArray(props.applyFilterChip.applyFilter);\n  }, [props.applyFilterChip]);\n  const handleListFilter = () => {\n    setListFilter(!listFilter);\n  };\n  if (chipArray) {\n    chips = chipArray.map((item, index) => {\n      if (item.type) {\n        return (\n          <div\n            className=\"listContent\"\n            key={index}\n            onClick={(e) => {\n              props.addAppliedFilters(item);\n            }}\n          >\n            <span>\n              {item.name}:{item.type}\n            </span>\n            {item.value.map((value, index) => {\n              return <div key={index}>{value.value}</div>;\n            })}\n          </div>\n        );\n      } else if (item.condition) {\n        return (\n          <div\n            className=\"listContent\"\n            key={index}\n            onClick={(e) => {\n              props.addAppliedFilters(item);\n            }}\n          >\n            <span>{item.name}</span>:{item.condition}\n            {item.amount}\n          </div>\n        );\n      } else if (item.fieldValue) {\n        return (\n          <div\n            className=\"listContent\"\n            key={index}\n            onClick={(e) => {\n              props.addAppliedFilters(item);\n            }}\n          >\n            <span>{item.fieldValue}</span>\n            {item.value}\n          </div>\n        );\n      } else {\n        return (\n          <div\n            className=\"listContent\"\n            key={index}\n            onClick={(e) => {\n              props.addAppliedFilters(item);\n            }}\n          >\n            <span>{item.name}</span>:{item.value}\n          </div>\n        );\n      }\n    });\n  } else {\n    chips = <div></div>;\n  }\n\n  return (\n    <div className=\"list\">\n      <div className=\"displayFlex\">\n        <div className=\"alignLeft\">\n          <FontAwesomeIcon icon={faAlignLeft} onClick={handleListFilter} />\n          <SavedFilters\n            onSelectSavedFilter={props.onSelectSavedFilter}\n            showFilter={listFilter}\n            handleListFilter={handleListFilter}\n            addSavedFilters={props.addSavedFilters}\n          />\n          <div className=\"leftSpace\">All flights</div>\n        </div>\n      </div>\n      <div className=\"secondList\">\n        <div className=\"displayFlex\">\n          {chips}\n          <div\n            onClick={(e) => {\n              props.showDrawer();\n            }}\n          >\n            + Add Filter\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MainFilterPanel;\n","import React, { useState, useRef, useEffect } from \"react\";\nimport RightDrawer from \"./drawer/RightDrawer\";\nimport LeftDrawer from \"./drawer/LeftDrawer\";\nimport MainFilterPanel from './panel/MainFilterPanel'\n\nlet dateFormat = require(\"dateformat\");\n\n/**\n * Component handling clock outside close of Drawer\n */\nfunction useComponentVisible() {\n  const [showApplyFilter, setApplyFilter] = useState(false);\n\n  const ref = useRef(null);\n\n  /**\n   * Method To sort the rows for a particular column\n   * @param {*} event is the event that is getting passed when an outside click is triggered\n   */\n  const handleHideDropdown = (event) => {\n    if (event.key === \"Escape\") {\n      setApplyFilter(false);\n    }\n  };\n  /**\n   * Method To sort the rows for a particular column\n   * @param {*} event it is the event triggered on the ref div when click happens\n   */\n  const handleClickOutside = (event) => {\n    if (ref.current && !ref.current.contains(event.target)) {\n      setApplyFilter(false);\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener(\"keydown\", handleHideDropdown, true);\n    document.addEventListener(\"click\", handleClickOutside, true);\n    return () => {\n      document.removeEventListener(\"keydown\", handleHideDropdown, true);\n      document.removeEventListener(\"click\", handleClickOutside, true);\n    };\n  });\n\n  return { ref, showApplyFilter, setApplyFilter };\n}\nfunction filter(props) {\n  const [autoCompletesValueArray, setAutoCompletesValueArray] = useState([]);\n  const [autoCompletesArray, setAutoCompletesArray] = useState([]);\n  const [dateTimesArray, setDateTimesArray] = useState([]);\n  const [dateTimesValueArray, setDateTimesValueArray] = useState([]);\n  const [conditionsArray, setConditionsArray] = useState([]);\n  const [conditionsValueArray, setConditionsValueArray] = useState([]);\n  const [textComponentsArray, setTextComponentsArray] = useState([]);\n  const [textComponentsValueArray, setTextComponentsValueArray] = useState([]);\n  const [applyFilterChip, setApplyFilterChip] = useState({});\n  const [filterCount, setFilterCount] = useState(0);\n  const [filterData, setFilterData] = useState({});\n\n  useEffect(() => {\n    setFilterData(props.filterData);\n  }, [props.filterData]);\n  useEffect(() => {\n    let count = 0;\n    count =\n      autoCompletesArray.length +\n      dateTimesArray.length +\n      conditionsArray.length +\n      textComponentsArray.length;\n    setFilterCount(count);\n  }, [\n    autoCompletesArray,\n    dateTimesArray,\n    conditionsArray,\n    textComponentsArray,\n  ]);\n  /**\n   * Method set the state which shows the drawer when on true condition\n   */\n  const showDrawer = () => {\n    setApplyFilter(true);\n  };\n  /**\n   * Method set the state which closes the drawer when the state is in false condition\n   */\n  const closeDrawer = () => {\n    setApplyFilter(false);\n  };\n  /**\n   * Method which creates the array which contains the elements to be shown in the applied filter chips\n   */\n  const applyFilter = () => {\n    let applyFilter = {\n      applyFilterArray: [],\n    };\n    let tempObj = { applyFilter: [] };\n    if (autoCompletesValueArray.length > 0) {\n      autoCompletesValueArray.forEach((item) => {\n        tempObj.applyFilter.push(item);\n      });\n      applyFilter.applyFilterArray.push({\n        autoComplete: autoCompletesValueArray,\n      });\n    }\n    if (dateTimesValueArray.length > 0) {\n      dateTimesValueArray.forEach((item) => {\n        tempObj.applyFilter.push(item);\n      });\n      applyFilter.applyFilterArray.push({ dateTime: dateTimesValueArray });\n    }\n    if (conditionsValueArray.length > 0) {\n      conditionsValueArray.forEach((item) => {\n        tempObj.applyFilter.push(item);\n      });\n      applyFilter.applyFilterArray.push({ conditional: conditionsValueArray });\n    }\n    if (textComponentsValueArray.length > 0) {\n      textComponentsValueArray.forEach((item) => {\n        tempObj.applyFilter.push(item);\n      });\n      applyFilter.applyFilterArray.push({\n        textComponent: textComponentsValueArray,\n      });\n    }\n    console.log(applyFilter);\n    setApplyFilterChip(tempObj);\n    tempObj = {};\n  };\n  /**\n   * Method To pass the values from saved filter list to the right filter drawer\n   * @param {*} value is saved filter from the saved filter popup list\n   */\n  const saveFilter = (value) => {\n    let savedFilter = {\n      filter: [],\n    };\n    if (autoCompletesValueArray.length > 0) {\n      savedFilter.filter.push({ autoComplete: autoCompletesValueArray });\n    }\n    if (dateTimesValueArray.length > 0) {\n      savedFilter.filter.push({ dateTime: dateTimesValueArray });\n    }\n    if (conditionsValueArray.length > 0) {\n      savedFilter.filter.push({ conditional: conditionsValueArray });\n    }\n    if (textComponentsValueArray.length > 0) {\n      savedFilter.filter.push({ textComponent: textComponentsValueArray });\n    }\n    savedFilter[value] = savedFilter[\"filter\"];\n    delete savedFilter.filter;\n    let savedFilters = localStorage.getItem(\"savedFilters\");\n    savedFilters = savedFilters ? JSON.parse(savedFilters) : [];\n    savedFilters.push(savedFilter);\n    localStorage.setItem(\"savedFilters\", JSON.stringify(savedFilters));\n    console.log(savedFilters);\n  };\n  /**\n   * Method To create the filter arrays for each specific type based on datatype\n   * @param {*} name is the name of the filter\n   * @param {*} dataType is the dataType of the filter\n   * @param {*} enabled is initial enabled status of the filter\n   * @param {*} type is the type array of the filter if present\n   * @param {*} field is the field array of the filter if present\n   * @param {*} condition is the condition array of the filter if present\n   * @param {*} options is the options array of the filter if present\n   */\n  const fromLeftToRight = (\n    name,\n    dataType,\n    enabled,\n    type,\n    field,\n    condition,\n    options\n  ) => {\n    if (dataType === \"AutoComplete\") {\n      let value = {\n        name: name,\n        type: type,\n        dataType: dataType,\n        enabled: enabled,\n        objectArray: options,\n      };\n      let autoCompleteArray = [...autoCompletesArray];\n      if (autoCompleteArray.length > 0) {\n        let index = autoCompleteArray.findIndex(\n          (x) => x.name === value.name && x.type === value.type\n        );\n        if (index === -1) {\n          autoCompleteArray.push({\n            name: name,\n            type: type,\n            dataType: dataType,\n            enabled: enabled,\n            objectArray: options,\n          });\n        }\n      } else {\n        autoCompleteArray.push({\n          name: name,\n          type: type,\n          dataType: dataType,\n          enabled: enabled,\n          objectArray: options,\n        });\n      }\n      setAutoCompletesArray(autoCompleteArray);\n      autoCompleteArray = [];\n    }\n    if (dataType === \"DateTime\") {\n      let value = {\n        name: name,\n        dataType: dataType,\n        enabled: enabled,\n        field: field,\n      };\n      let dateTimeArray = [...dateTimesArray];\n      if (dateTimeArray.length > 0) {\n        let index = dateTimeArray.findIndex(\n          (x) => x.name === value.name && x.field === value.field\n        );\n        if (index === -1) {\n          dateTimeArray.push({\n            name: name,\n            dataType: dataType,\n            enabled: enabled,\n            field: field,\n          });\n        }\n      } else {\n        dateTimeArray.push({\n          name: name,\n          dataType: dataType,\n          enabled: enabled,\n          field: field,\n        });\n      }\n      setDateTimesArray(dateTimeArray);\n      dateTimeArray = [];\n    }\n    if (dataType === \"Numeric\") {\n      let value = {\n        name: name,\n        dataType: dataType,\n        enabled: enabled,\n        condition: condition,\n        amount: \"\",\n      };\n      let conditionArray = [...conditionsArray];\n      if (conditionArray.length > 0) {\n        let index = conditionArray.findIndex(\n          (x) => x.name === value.name && x.condition === value.condition\n        );\n        if (index === -1) {\n          conditionArray.push({\n            name: name,\n            dataType: dataType,\n            enabled: enabled,\n            condition: condition,\n            amount: \"\",\n          });\n        }\n      } else {\n        conditionArray.push({\n          name: name,\n          dataType: dataType,\n          enabled: enabled,\n          condition: condition,\n          amount: \"\",\n        });\n      }\n      setConditionsArray(conditionArray);\n      conditionArray = [];\n    }\n    if (dataType === \"Text\") {\n      let value = {\n        name: name,\n        dataType: dataType,\n        enabled: enabled,\n      };\n      let textComponentArray = [...textComponentsArray];\n      if (textComponentArray.length > 0) {\n        let index = textComponentArray.findIndex(\n          (x) => x.name === value.name && x.dataType === value.dataType\n        );\n        if (index === -1) {\n          textComponentArray.push({\n            name: name,\n            dataType: dataType,\n            enabled: enabled,\n          });\n        }\n      } else {\n        textComponentArray.push({\n          name: name,\n          dataType: dataType,\n          enabled: enabled,\n        });\n      }\n      setTextComponentsArray(textComponentArray);\n      textComponentArray = [];\n    }\n  };\n  /**\n   * Method To create arrays containing values upon change trigger from respective input fields\n   * @param {*} item is the specific filter element object\n   * @param {*} valueArray is the selected multiselect options\n   */\n  const createAutoCompleteArray = (item, valueArray) => {\n    let tempObj = JSON.parse(JSON.stringify(item));\n    tempObj.value = valueArray;\n    let autoCompleteValueArray = [...autoCompletesValueArray];\n    if (autoCompleteValueArray.length > 0) {\n      let index = autoCompleteValueArray.findIndex(\n        (x) => x.name === tempObj.name && x.type === tempObj.type\n      );\n      if (index === -1) {\n        autoCompleteValueArray.push({\n          name: tempObj.name,\n          type: tempObj.type,\n          dataType: tempObj.dataType,\n          enabled: tempObj.enabled,\n          value: tempObj.value,\n        });\n      } else {\n        autoCompleteValueArray[index].value = tempObj.value;\n      }\n    } else {\n      autoCompleteValueArray.push({\n        name: tempObj.name,\n        type: tempObj.type,\n        dataType: tempObj.dataType,\n        enabled: tempObj.enabled,\n        value: tempObj.value,\n      });\n    }\n    setAutoCompletesValueArray(autoCompleteValueArray);\n    autoCompleteValueArray = [];\n  };\n  /**\n   * Method To delete the specific element from filter array upon clicking close\n   * @param {*} item is the specific filter element object\n   */\n  const deleteAutoCompleteElement = (item) => {\n    let autoCompleteArray = [...autoCompletesArray];\n    let index = autoCompleteArray.findIndex(\n      (x) => x.name === item.name && x.type === item.type\n    );\n    if (index !== -1) {\n      autoCompleteArray.splice(index, 1);\n    } else {\n      autoCompleteArray = [];\n    }\n\n    setAutoCompletesArray(autoCompleteArray);\n  };\n  /**\n   * Method To toggle the switch to enable and disable the input fields\n   * @param {*} item is the specific filter element object\n   */\n  const handleAutoCompleteEnabled = (item) => {\n    let autoCompleteArray = [...autoCompletesArray];\n    let index = autoCompleteArray.findIndex(\n      (x) => x.name === item.name && x.type === item.type\n    );\n    if (index !== -1) {\n      autoCompleteArray[index].enabled = !autoCompleteArray[index].enabled;\n    }\n    setAutoCompletesArray(autoCompleteArray);\n    if (autoCompletesValueArray.length > 0) {\n      let autoCompleteValueArray = [...autoCompletesValueArray];\n      let index = autoCompleteValueArray.findIndex(\n        (x) => x.name === item.name && x.type === item.type\n      );\n      autoCompleteValueArray[index].enabled = !autoCompleteValueArray[index]\n        .enabled;\n      setAutoCompletesValueArray(autoCompleteValueArray);\n      autoCompleteValueArray = [];\n    }\n  };\n  /**\n   * Method To delete the specific element from filter array upon clicking close\n   * @param {*} item is the specific filter element object\n   */\n  const deleteDateTimeElement = (item) => {\n    let dateTimeArray = [...dateTimesArray];\n    let index = dateTimeArray.findIndex((x) => x.name === item.name);\n    dateTimeArray.splice(index, 1);\n    dateTimeArray.forEach((item) => {\n      item.field.forEach((fieldArray) => {\n        fieldArray.value = \"\";\n      });\n    });\n    setDateTimesArray(dateTimeArray);\n    dateTimeArray = [];\n    filterData.filter.forEach((filters) => {\n      if (filters.name === item.name) {\n        item.field.forEach((fieldArray) => {\n          fieldArray.value = \"\";\n        });\n      }\n    });\n    if (item === {}) {\n      setDateTimesValueArray([]);\n    }\n  };\n  /**\n   * Method To toggle the switch to enable and disable the input fields\n   * @param {*} item is the specific filter element object\n   */\n  const handleDateTimeEnabled = (item) => {\n    let dateTimeArray = [...dateTimesArray];\n    let index = dateTimeArray.findIndex(\n      (x) => x.name === item.name && x.field === item.field\n    );\n    if (index !== -1) {\n      dateTimeArray[index].enabled = !dateTimeArray[index].enabled;\n    }\n    setDateTimesArray(dateTimeArray);\n    dateTimeArray = [];\n    if (dateTimesValueArray.length > 0) {\n      let dateTimeValueArray = [...dateTimesValueArray];\n      let tempArray = [];\n      item.field.forEach((item) => {\n        tempArray.push(item.column);\n      });\n      let index = dateTimeValueArray.findIndex(\n        (x) => x.name === item.name && tempArray.includes(x.fieldValue)\n      );\n      if (index !== -1) {\n        dateTimeValueArray.forEach((item) => {\n          item.enabled = !item.enabled;\n        });\n      }\n\n      setDateTimesValueArray(dateTimeValueArray);\n      dateTimeValueArray = [];\n    }\n  };\n  /**\n   * Method To create arrays containing values upon change trigger from respective input fields\n   * @param {*} item is the specific filter element object\n   * @param {*} fieldName is the specific type of field/date in which change is happening\n   * @param {*} value is value of the field\n   */\n  const createDateTimeArray = (item, fieldName, value) => {\n    let tempObj = JSON.parse(JSON.stringify(item));\n    tempObj.fieldValue = fieldName;\n    tempObj.value = value;\n    let dateTimeValueArray = [...dateTimesValueArray];\n    if (dateTimeValueArray.length > 0) {\n      let index = dateTimeValueArray.findIndex(\n        (x) => x.fieldValue === tempObj.fieldValue && x.name === tempObj.name\n      );\n      if (index === -1) {\n        dateTimeValueArray.push({\n          name: tempObj.name,\n          dataType: tempObj.dataType,\n          enabled: tempObj.enabled,\n          fieldValue: tempObj.fieldValue,\n          value: tempObj.value,\n        });\n      } else {\n        dateTimeValueArray[index].value = tempObj.value;\n      }\n    } else {\n      dateTimeValueArray.push({\n        name: tempObj.name,\n        dataType: tempObj.dataType,\n        enabled: tempObj.enabled,\n        fieldValue: tempObj.fieldValue,\n        value: tempObj.value,\n      });\n    }\n    setDateTimesValueArray(dateTimeValueArray);\n    dateTimeValueArray = [];\n    let dateTimeArray = [...dateTimesArray];\n    if (dateTimeArray.length > 0) {\n      dateTimeArray.forEach((item) => {\n        item.field.forEach((fieldArray) => {\n          if (fieldArray.column === fieldName) {\n            fieldArray.value = value;\n          }\n        });\n      });\n      setDateTimesArray(dateTimeArray);\n    }\n    dateTimeArray = [];\n  };\n  /**\n   * Method To set both from date and to date as todays date\n   */\n  const addToday = () => {\n    let todayDate = new Date();\n    let dated = dateFormat(todayDate, \"yyyy-mm-dd\");\n    let dateTimeArray = [...dateTimesArray];\n    let dateTimeValueArray = [...dateTimesValueArray];\n    if (dateTimeArray.length > 0) {\n      dateTimeArray.forEach((item) => {\n        item.field.forEach((fieldArray) => {\n          fieldArray.value = dated;\n          if (dateTimeValueArray.length > 1) {\n            dateTimeValueArray.forEach((item) => {\n              if (item.fieldValue === fieldArray.column) {\n                item.value = dated;\n              }\n            });\n          } else {\n            dateTimeValueArray.push({\n              name: item.name,\n              dataType: item.dataType,\n              enabled: item.enabled,\n              fieldValue: fieldArray.column,\n              value: dated,\n            });\n          }\n        });\n      });\n      setDateTimesArray(dateTimeArray);\n      setDateTimesValueArray(dateTimeValueArray);\n    }\n  };\n  /**\n   * Method To set both from date and to date as tomorrow's date\n   */\n  const addTomorrow = () => {\n    let fromDate = new Date();\n    let toDate = new Date();\n    fromDate.setDate(fromDate.getDate() + 1);\n    toDate.setDate(toDate.getDate() + 1);\n    fromDate = dateFormat(fromDate, \"yyyy-mm-dd\");\n    toDate = dateFormat(toDate, \"yyyy-mm-dd\");\n    let dateTimeArray = [...dateTimesArray];\n    let dateTimeValueArray = [...dateTimesValueArray];\n    if (dateTimeArray.length > 0) {\n      dateTimeArray.forEach((item) => {\n        item.field[0].value = fromDate;\n        item.field[1].value = toDate;\n        item.field.forEach((fieldArray) => {\n          if (dateTimeValueArray.length > 1) {\n            dateTimeValueArray.forEach((arr) => {\n              if (arr.fieldValue === fieldArray.column) {\n                arr.value = fieldArray.value;\n              }\n            });\n          } else {\n            dateTimeValueArray.push({\n              name: item.name,\n              dataType: item.dataType,\n              enabled: item.enabled,\n              fieldValue: fieldArray.column,\n              value: fieldArray.value,\n            });\n          }\n        });\n      });\n\n      setDateTimesArray(dateTimeArray);\n      setDateTimesValueArray(dateTimeValueArray);\n    }\n  };\n  /**\n   * Method To set the date range as this month\n   */\n  const addThisMonth = () => {\n    let today = new Date();\n    let fromDate = new Date(today.getFullYear(), today.getMonth(), 1);\n    let toDate = new Date(today.getFullYear(), today.getMonth() + 1, 0);\n    fromDate = dateFormat(fromDate, \"yyyy-mm-dd\");\n    toDate = dateFormat(toDate, \"yyyy-mm-dd\");\n    let dateTimeArray = [...dateTimesArray];\n    let dateTimeValueArray = [...dateTimesValueArray];\n    if (dateTimeArray.length > 0) {\n      dateTimeArray.forEach((item) => {\n        item.field[0].value = fromDate;\n        item.field[1].value = toDate;\n        item.field.forEach((fieldArray) => {\n          if (dateTimeValueArray.length > 1) {\n            dateTimeValueArray.forEach((arr) => {\n              if (arr.fieldValue === fieldArray.column) {\n                arr.value = fieldArray.value;\n              }\n            });\n          } else {\n            dateTimeValueArray.push({\n              name: item.name,\n              dataType: item.dataType,\n              enabled: item.enabled,\n              fieldValue: fieldArray.column,\n              value: fieldArray.value,\n            });\n          }\n        });\n      });\n\n      setDateTimesArray(dateTimeArray);\n      setDateTimesValueArray(dateTimeValueArray);\n    }\n  };\n  /**\n   * Method To set the date range as next 14 days\n   */\n  const addForteenDays = () => {\n    let fromDate = new Date();\n    let toDate = new Date();\n    fromDate.setDate(fromDate.getDate() + 1);\n    toDate.setDate(toDate.getDate() + 14);\n    fromDate = dateFormat(fromDate, \"yyyy-mm-dd\");\n    toDate = dateFormat(toDate, \"yyyy-mm-dd\");\n    let dateTimeArray = [...dateTimesArray];\n    let dateTimeValueArray = [...dateTimesValueArray];\n    if (dateTimeArray.length > 0) {\n      dateTimeArray.forEach((item) => {\n        item.field[0].value = fromDate;\n        item.field[1].value = toDate;\n        item.field.forEach((fieldArray) => {\n          if (dateTimeValueArray.length > 1) {\n            dateTimeValueArray.forEach((arr) => {\n              if (arr.fieldValue === fieldArray.column) {\n                arr.value = fieldArray.value;\n              }\n            });\n          } else {\n            dateTimeValueArray.push({\n              name: item.name,\n              dataType: item.dataType,\n              enabled: item.enabled,\n              fieldValue: fieldArray.column,\n              value: fieldArray.value,\n            });\n          }\n        });\n      });\n\n      setDateTimesArray(dateTimeArray);\n      setDateTimesValueArray(dateTimeValueArray);\n    }\n  };\n  /**\n   * Method To set the date range as next 7 days\n   */\n  const addSevenDays = () => {\n    let fromDate = new Date();\n    let toDate = new Date();\n    fromDate.setDate(fromDate.getDate() + 1);\n    toDate.setDate(toDate.getDate() + 7);\n    fromDate = dateFormat(fromDate, \"yyyy-mm-dd\");\n    toDate = dateFormat(toDate, \"yyyy-mm-dd\");\n    let dateTimeArray = [...dateTimesArray];\n    let dateTimeValueArray = [...dateTimesValueArray];\n    if (dateTimeArray.length > 0) {\n      dateTimeArray.forEach((item) => {\n        item.field[0].value = fromDate;\n        item.field[1].value = toDate;\n        item.field.forEach((fieldArray) => {\n          if (dateTimeValueArray.length > 1) {\n            dateTimeValueArray.forEach((arr) => {\n              if (arr.fieldValue === fieldArray.column) {\n                arr.value = fieldArray.value;\n              }\n            });\n          } else {\n            dateTimeValueArray.push({\n              name: item.name,\n              dataType: item.dataType,\n              enabled: item.enabled,\n              fieldValue: fieldArray.column,\n              value: fieldArray.value,\n            });\n          }\n        });\n      });\n\n      setDateTimesArray(dateTimeArray);\n      setDateTimesValueArray(dateTimeValueArray);\n    }\n  };\n  /**\n   * Method To set the date range as current week Sunday to Saturday\n   */\n  const addThisWeek = () => {\n    let today = new Date();\n    let from = today.getDate() - today.getDay();\n    let to = from + 6;\n    let fromDate = new Date(today.setDate(from)).toUTCString();\n    let toDate = new Date(today.setDate(to)).toUTCString();\n    fromDate = dateFormat(fromDate, \"yyyy-mm-dd\");\n    toDate = dateFormat(toDate, \"yyyy-mm-dd\");\n    let dateTimeArray = [...dateTimesArray];\n    let dateTimeValueArray = [...dateTimesValueArray];\n    if (dateTimeArray.length > 0) {\n      dateTimeArray.forEach((item) => {\n        item.field[0].value = fromDate;\n        item.field[1].value = toDate;\n        item.field.forEach((fieldArray) => {\n          if (dateTimeValueArray.length > 1) {\n            dateTimeValueArray.forEach((arr) => {\n              if (arr.fieldValue === fieldArray.column) {\n                arr.value = fieldArray.value;\n              }\n            });\n          } else {\n            dateTimeValueArray.push({\n              name: item.name,\n              dataType: item.dataType,\n              enabled: item.enabled,\n              fieldValue: fieldArray.column,\n              value: fieldArray.value,\n            });\n          }\n        });\n      });\n\n      setDateTimesArray(dateTimeArray);\n      setDateTimesValueArray(dateTimeValueArray);\n    }\n  };\n  /**\n   * Method To set the date range as next 30 days\n   */\n  const addThirtyDays = () => {\n    let from = new Date();\n    let to = new Date();\n    from.setDate(from.getDate() + 1);\n    to.setDate(to.getDate() + 30);\n    let fromDate = dateFormat(from, \"yyyy-mm-dd\");\n    let toDate = dateFormat(to, \"yyyy-mm-dd\");\n    let dateTimeArray = [...dateTimesArray];\n    let dateTimeValueArray = [...dateTimesValueArray];\n    if (dateTimeArray.length > 0) {\n      dateTimeArray.forEach((item) => {\n        item.field[0].value = fromDate;\n        item.field[1].value = toDate;\n        item.field.forEach((fieldArray) => {\n          if (dateTimeValueArray.length > 1) {\n            dateTimeValueArray.forEach((arr) => {\n              if (arr.fieldValue === fieldArray.column) {\n                arr.value = fieldArray.value;\n              }\n            });\n          } else {\n            dateTimeValueArray.push({\n              name: item.name,\n              dataType: item.dataType,\n              enabled: item.enabled,\n              fieldValue: fieldArray.column,\n              value: fieldArray.value,\n            });\n          }\n        });\n      });\n\n      setDateTimesArray(dateTimeArray);\n      setDateTimesValueArray(dateTimeValueArray);\n    }\n  };\n  /**\n   * Method To set the date range as next n days\n   * @param {*} value is the no: of days after today\n   */\n  const nextDayChange = (value) => {\n    if (value === \"\") {\n      value = 1;\n    }\n    let fromDate = new Date();\n    let toDate = new Date();\n    if (value !== \"0\") {\n      fromDate.setDate(fromDate.getDate() + 1);\n      toDate.setDate(toDate.getDate() + parseInt(value));\n    }\n    fromDate = dateFormat(fromDate, \"yyyy-mm-dd\");\n    toDate = dateFormat(toDate, \"yyyy-mm-dd\");\n    let dateTimeArray = [...dateTimesArray];\n    let dateTimeValueArray = [...dateTimesValueArray];\n    if (dateTimeArray.length > 0) {\n      dateTimeArray.forEach((item) => {\n        item.field[0].value = fromDate;\n        item.field[1].value = toDate;\n        item.field.forEach((fieldArray) => {\n          if (dateTimeValueArray.length > 1) {\n            dateTimeValueArray.forEach((arr) => {\n              if (arr.fieldValue === fieldArray.column) {\n                arr.value = fieldArray.value;\n              }\n            });\n          } else {\n            dateTimeValueArray.push({\n              name: item.name,\n              dataType: item.dataType,\n              enabled: item.enabled,\n              fieldValue: fieldArray.column,\n              value: fieldArray.value,\n            });\n          }\n        });\n      });\n\n      setDateTimesArray(dateTimeArray);\n      setDateTimesValueArray(dateTimeValueArray);\n    }\n  };\n  /**\n   * Method To set the date range as last n days\n   * @param {*} value is the no: of days before today\n   */\n  const lastDayChange = (value) => {\n    if (value === \"\") {\n      value = 1;\n    }\n    let fromDate = new Date();\n    let toDate = new Date();\n    if (value !== \"0\") {\n      fromDate.setDate(fromDate.getDate() - parseInt(value));\n      toDate.setDate(toDate.getDate() - 1);\n    }\n    fromDate = dateFormat(fromDate, \"yyyy-mm-dd\");\n    toDate = dateFormat(toDate, \"yyyy-mm-dd\");\n    let dateTimeArray = [...dateTimesArray];\n    let dateTimeValueArray = [...dateTimesValueArray];\n    if (dateTimeArray.length > 0) {\n      dateTimeArray.forEach((item) => {\n        item.field[0].value = fromDate;\n        item.field[1].value = toDate;\n        item.field.forEach((fieldArray) => {\n          if (dateTimeValueArray.length > 1) {\n            dateTimeValueArray.forEach((arr) => {\n              if (arr.fieldValue === fieldArray.column) {\n                arr.value = fieldArray.value;\n              }\n            });\n          } else {\n            dateTimeValueArray.push({\n              name: item.name,\n              dataType: item.dataType,\n              enabled: item.enabled,\n              fieldValue: fieldArray.column,\n              value: fieldArray.value,\n            });\n          }\n        });\n      });\n\n      setDateTimesArray(dateTimeArray);\n      setDateTimesValueArray(dateTimeValueArray);\n    }\n  };\n  /**\n   * Method To toggle the switch to enable and disable the input fields\n   * @param {*} item is the specific filter element object\n   */\n  const handleCondionalEnabled = (item) => {\n    let conditionArray = [...conditionsArray];\n    let index = conditionArray.findIndex(\n      (x) => x.name === item.name && x.condition === item.condition\n    );\n    if (index !== -1) {\n      conditionArray[index].enabled = !conditionArray[index].enabled;\n    }\n    setConditionsArray(conditionArray);\n    let conditionValueArray = [];\n    conditionValueArray = [...conditionsValueArray];\n    if (conditionValueArray.length > 0) {\n      let index = conditionValueArray.findIndex(\n        (x) => x.name === item.name && x.dataType === item.dataType\n      );\n      conditionValueArray[index].enabled = !conditionValueArray[index].enabled;\n    }\n    setConditionsValueArray(conditionValueArray);\n    conditionValueArray = [];\n  };\n  /**\n   * Method To create arrays containing values upon change trigger from respective input fields\n   * @param {*} item is the specific filter element object\n   * @param {*} value is value of the input field\n   */\n  const createConditionalArray = (item, value) => {\n    let valueArray = [];\n    item.condition.forEach((it) => {\n      valueArray.push(it.value);\n    });\n    let conditionValueArray = [...conditionsValueArray];\n    if (conditionValueArray.length > 0) {\n      let index = conditionValueArray.findIndex(\n        (x) => x.name === item.name && x.dataType === item.dataType\n      );\n      if (index !== -1) {\n        if (valueArray.includes(value)) {\n          conditionValueArray[index].condition = value;\n        } else {\n          conditionValueArray[index].amount = value;\n        }\n      }\n    } else {\n      if (valueArray.includes(value)) {\n        conditionValueArray.push({\n          name: item.name,\n          dataType: item.dataType,\n          enabled: item.enabled,\n          condition: value,\n        });\n      } else {\n        conditionValueArray.push({\n          name: item.name,\n          dataType: item.dataType,\n          enabled: item.enabled,\n          condition: item.condition[0].value,\n          amount: value,\n        });\n      }\n    }\n    setConditionsValueArray(conditionValueArray);\n    conditionValueArray = [];\n  };\n  /**\n   * Method To delete the specific element from filter array upon clicking close\n   * @param {*} item is the specific filter element object\n   */\n  const deleteConditionalElement = (item) => {\n    let conditionArray = [...conditionsArray];\n    let index = conditionArray.findIndex(\n      (x) => x.name === item.name && x.dataType === item.dataType\n    );\n    if (index !== -1) {\n      conditionArray.splice(index, 1);\n    } else {\n      conditionArray = [];\n    }\n    setConditionsArray(conditionArray);\n  };\n  /**\n   * Method To create arrays containing values upon change trigger from respective input fields\n   * @param {*} item is the specific filter element object\n   * @param {*} value is value of the input field\n   */\n  const createTextComponentsArray = (item, value) => {\n    let textComponentValueArray = [...textComponentsValueArray];\n    if (textComponentValueArray.length > 0) {\n      let index = textComponentValueArray.findIndex(\n        (x) => x.name === item.name && x.dataType === item.dataType\n      );\n      if (index === -1) {\n        textComponentValueArray.push({\n          name: item.name,\n          dataType: item.dataType,\n          enabled: item.enabled,\n          value: value,\n        });\n      } else {\n        textComponentValueArray[index].value = value;\n      }\n    } else {\n      textComponentValueArray.push({\n        name: item.name,\n        dataType: item.dataType,\n        enabled: item.enabled,\n        value: value,\n      });\n    }\n    setTextComponentsValueArray(textComponentValueArray);\n    textComponentValueArray = [];\n  };\n  /**\n   * Method To toggle the switch to enable and disable the input fields\n   * @param {*} item is the specific filter element object\n   */\n  const handleTextComponentEnabled = (item) => {\n    let textComponentArray = [...textComponentsArray];\n    let index = textComponentArray.findIndex(\n      (x) => x.name === item.name && x.dataType === item.dataType\n    );\n    if (index !== -1) {\n      textComponentArray[index].enabled = !textComponentArray[index].enabled;\n    }\n    setTextComponentsArray(textComponentArray);\n    textComponentArray = [];\n    let textComponentValueArray = [...textComponentsValueArray];\n    if (textComponentValueArray.length > 0) {\n      let index = textComponentValueArray.findIndex(\n        (x) => x.name === item.name && x.dataType === item.dataType\n      );\n      if (index !== -1) {\n        textComponentValueArray[index].enabled = !textComponentValueArray[index]\n          .enabled;\n      }\n    }\n    setTextComponentsValueArray(textComponentValueArray);\n    textComponentValueArray = [];\n  };\n  /**\n   * Method To delete the specific element from filter array upon clicking close\n   * @param {*} item is the specific filter element object\n   */\n  const deleteTextComponentElement = (item) => {\n    let textComponentArray = [...textComponentsArray];\n    let index = textComponentArray.findIndex(\n      (x) => x.name === item.name && x.dataType === item.dataType\n    );\n    if (index !== -1) {\n      textComponentArray.splice(index, 1);\n    } else {\n      textComponentArray = [];\n    }\n    setTextComponentsArray(textComponentArray);\n  };\n  /**\n   * Method To map the applied filters to drawer on clicking the chips\n   * @param {*} item is the specific filter element object\n   */\n  const addAppliedFilters = (item) => {\n    let arr = [];\n    filterData.filter.forEach((fil) => {\n      if (fil.types.length) {\n        let index = fil.types.findIndex(\n          (x) => x.name === item.type && fil.name === item.name\n        );\n        if (index !== -1) {\n          arr = fil.types[index].options;\n        }\n      }\n    });\n    if (item.dataType === \"AutoComplete\") {\n      let autoCompleteArray = [...autoCompletesArray];\n      if (autoCompleteArray.length > 0) {\n        let index = autoCompleteArray.findIndex(\n          (x) => x.name === item.name && item.type === x.type\n        );\n        if (index === -1) {\n          autoCompleteArray.push({\n            name: item.name,\n            dataType: item.dataType,\n            type: item.type,\n            enabled: item.enabled,\n            value: item.value,\n            objectArray: arr,\n          });\n        }\n      } else {\n        autoCompleteArray.push({\n          name: item.name,\n          dataType: item.dataType,\n          type: item.type,\n          enabled: item.enabled,\n          value: item.value,\n          objectArray: arr,\n        });\n      }\n      setAutoCompletesArray(autoCompleteArray);\n    } else if (item.dataType === \"DateTime\") {\n      let dateTimeArray = [...dateTimesArray];\n      if (dateTimeArray.length === 0) {\n        dateTimeArray.push({\n          name: item.name,\n          dataType: item.dataType,\n          enabled: item.enabled,\n          field: [],\n        });\n        dateTimesValueArray.forEach((item) => {\n          if (item.fieldValue) {\n            dateTimeArray.forEach((dt) => {\n              dt.field.push({\n                column: item.fieldValue,\n                value: item.value,\n              });\n            });\n          }\n        });\n      }\n      setDateTimesArray(dateTimeArray);\n    } else if (item.dataType === \"Numeric\") {\n      let conditionArray = [...conditionsArray];\n      if (conditionArray.length === 0) {\n        conditionArray.push({\n          name: item.name,\n          dataType: item.dataType,\n          enabled: item.enabled,\n          condition: [],\n          amount: item.amount,\n          value: item.condition,\n        });\n        filterData.filter.forEach((data) => {\n          if (data.dataType === \"Numeric\") {\n            data.condition.forEach((values) => {\n              conditionArray.forEach((item) => {\n                item.condition.push({ value: values.value });\n              });\n            });\n          }\n        });\n      }\n      setConditionsArray(conditionArray);\n    } else {\n      let textComponentArray = [...textComponentsArray];\n      if (textComponentArray.length > 0) {\n        let index = textComponentArray.findIndex((x) => x.name === item.name);\n        if (index === -1) {\n          textComponentArray.push({\n            name: item.name,\n            dataType: item.dataType,\n            enabled: item.enabled,\n            value: item.value,\n          });\n        }\n      } else {\n        textComponentArray.push({\n          name: item.name,\n          dataType: item.dataType,\n          enabled: item.enabled,\n          value: item.value,\n        });\n      }\n      setTextComponentsArray(textComponentArray);\n    }\n    setApplyFilter(true);\n  };\n  /**\n   * Method To map the saved filters to drawer on clicking the specific saved filter name\n   * @param {*} item is the specific filter element object\n   */\n  const addSavedFilters = (item) => {\n    let autoComplete = [];\n    let condition = [];\n    let text = [];\n    let tempArr = [];\n    let savedFilters = [];\n    for (let objects in item) {\n      item[objects].forEach((arrays) => {\n        for (let array in arrays) {\n          tempArr.push(arrays[array]);\n        }\n      });\n    }\n    let arr = [];\n    tempArr.forEach((arrays) => {\n      arrays.forEach((array) => {\n        savedFilters.push(array);\n      });\n    });\n    savedFilters.forEach((items) => {\n      filterData.filter.forEach((fil) => {\n        if (fil.types.length) {\n          let index = fil.types.findIndex(\n            (x) => x.name === items.type && fil.name === items.name\n          );\n          if (index !== -1) {\n            arr = fil.types[index].options;\n          }\n        }\n      });\n      if (items.dataType === \"AutoComplete\") {\n        let autoCompleteArray = [...autoComplete];\n        if (autoCompleteArray.length > 0) {\n          let index = autoCompleteArray.findIndex(\n            (x) => x.name === items.name && items.type === x.type\n          );\n          if (index === -1) {\n            autoCompleteArray.push({\n              name: items.name,\n              dataType: items.dataType,\n              type: items.type,\n              enabled: items.enabled,\n              value: items.value,\n              objectArray: arr,\n            });\n          }\n        } else {\n          autoCompleteArray.push({\n            name: items.name,\n            dataType: items.dataType,\n            type: items.type,\n            enabled: items.enabled,\n            value: items.value,\n            objectArray: arr,\n          });\n        }\n        autoComplete = autoCompleteArray;\n      }\n    });\n    setAutoCompletesArray(autoComplete);\n    let saveTempDateTimeArray = [];\n    savedFilters.forEach((items) => {\n      if (items.dataType === \"DateTime\") {\n        if (saveTempDateTimeArray.length === 0) {\n          saveTempDateTimeArray.push({\n            name: items.name,\n            dataType: items.dataType,\n            enabled: items.enabled,\n            field: [],\n          });\n        }\n      }\n    });\n    savedFilters.forEach((saved) => {\n      if (saved.dataType === \"DateTime\") {\n        if (saveTempDateTimeArray.length > 0) {\n          saveTempDateTimeArray.forEach((filter) => {\n            filter.field.push({\n              column: saved.fieldValue,\n              value: saved.value,\n            });\n          });\n        }\n      }\n    });\n    setDateTimesArray(saveTempDateTimeArray);\n    savedFilters.forEach((items) => {\n      if (items.dataType === \"Numeric\") {\n        let conditionArray = [...condition];\n        if (conditionArray.length === 0) {\n          conditionArray.push({\n            name: items.name,\n            dataType: items.dataType,\n            enabled: items.enabled,\n            condition: [],\n            amount: items.amount,\n            value: items.condition,\n          });\n          filterData.filter.forEach((data) => {\n            if (data.dataType === \"Numeric\") {\n              data.condition.forEach((values) => {\n                conditionArray.forEach((items) => {\n                  items.condition.push({ value: values.value });\n                });\n              });\n            }\n          });\n        }\n        condition = conditionArray;\n      }\n    });\n    setConditionsArray(condition);\n    savedFilters.forEach((items) => {\n      if (items.dataType === \"Text\") {\n        let textComponentArray = [...text];\n        if (textComponentArray.length > 0) {\n          let index = textComponentArray.findIndex(\n            (x) => x.name === items.name\n          );\n          if (index === -1) {\n            textComponentArray.push({\n              name: items.name,\n              dataType: items.dataType,\n              enabled: items.enabled,\n              value: items.value,\n            });\n          }\n        } else {\n          textComponentArray.push({\n            name: items.name,\n            dataType: items.dataType,\n            enabled: items.enabled,\n            value: items.value,\n          });\n        }\n        text = textComponentArray;\n      }\n    });\n    setTextComponentsArray(text);\n    setApplyFilter(true);\n  };\n  /**\n   * Method To reset the right drawer\n   */\n  const resetDrawer = () => {\n    deleteAutoCompleteElement({});\n    deleteConditionalElement({});\n    deleteDateTimeElement({});\n    deleteTextComponentElement({});\n    setApplyFilterChip({});\n  };\n  const { ref, showApplyFilter, setApplyFilter } = useComponentVisible(true);\n  return (\n    <div ref={ref}>\n      {showApplyFilter && (\n        <div className=\"filter--grid\" ref={ref}>\n          <div className=\"filter__wrap\">\n            <div className=\"filter__list\">\n              <LeftDrawer\n                filterData={filterData}\n                fromLeftToRight={fromLeftToRight}\n              />\n            </div>\n            <div className=\"filter__inputwrap\">\n              <RightDrawer\n                applyFilter={applyFilter}\n                saveFilter={saveFilter}\n                createAutoCompleteArray={createAutoCompleteArray}\n                handleAutoCompleteEnabled={handleAutoCompleteEnabled}\n                deleteAutoCompleteElement={deleteAutoCompleteElement}\n                autoCompleteArray={autoCompletesArray}\n                dateTimesArray={dateTimesArray}\n                deleteDateTimeElement={deleteDateTimeElement}\n                handleDateTimeEnabled={handleDateTimeEnabled}\n                createDateTimeArray={createDateTimeArray}\n                addToday={addToday}\n                addTomorrow={addTomorrow}\n                addThisMonth={addThisMonth}\n                addForteenDays={addForteenDays}\n                addSevenDays={addSevenDays}\n                addThisWeek={addThisWeek}\n                addThirtyDays={addThirtyDays}\n                lastDayChange={lastDayChange}\n                nextDayChange={nextDayChange}\n                conditionsArray={conditionsArray}\n                handleCondionalEnabled={handleCondionalEnabled}\n                createConditionalArray={createConditionalArray}\n                deleteConditionalElement={deleteConditionalElement}\n                textComponentsArray={textComponentsArray}\n                deleteTextComponentElement={deleteTextComponentElement}\n                createTextComponentsArray={createTextComponentsArray}\n                handleTextComponentEnabled={handleTextComponentEnabled}\n                closeDrawer={closeDrawer}\n                resetDrawer={resetDrawer}\n                filterCount={filterCount}\n              />\n            </div>\n          </div>\n        </div>\n      )}\n\n      <MainFilterPanel\n        showDrawer={showDrawer}\n        applyFilterChip={applyFilterChip}\n        addAppliedFilters={addAppliedFilters}\n        addSavedFilters={addSavedFilters}\n      />\n    </div>\n  );\n}\nexport default filter;\n"]},"metadata":{},"sourceType":"module"}