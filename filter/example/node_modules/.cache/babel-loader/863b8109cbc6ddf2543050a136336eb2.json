{"ast":null,"code":"import _slicedToArray from \"/Users/abhilashrj/Documents/iCargoPOC/library/filter/node_modules/react-scripts/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/abhilashrj/Documents/iCargoPOC/library/filter/example/src/App.js\";\nimport React, { useState, useRef, useEffect } from \"react\";\nimport RightDrawer from \"./components/drawer/RightDrawer\";\nimport LeftDrawer from \"./components/drawer/LeftDrawer\";\nimport MainFilterPanel from \"./components/panel/MainFilterPanel\";\nimport FilterData from \"../src/data.json\";\n\nlet dateFormat = require(\"dateformat\");\n/**\n * Component handling clock outside close of Drawer\n */\n\n\nfunction useComponentVisible() {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        showApplyFilter = _useState2[0],\n        setApplyFilter = _useState2[1];\n\n  const ref = useRef(null);\n  /**\n   * Method To sort the rows for a particular column\n   * @param {*} event is the event that is getting passed when an outside click is triggered\n   */\n\n  const handleHideDropdown = event => {\n    if (event.key === \"Escape\") {\n      setApplyFilter(false);\n    }\n  };\n  /**\n   * Method To sort the rows for a particular column\n   * @param {*} event it is the event triggered on the ref div when click happens\n   */\n\n\n  const handleClickOutside = event => {\n    if (ref.current && !ref.current.contains(event.target)) {\n      setApplyFilter(false);\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener(\"keydown\", handleHideDropdown, true);\n    document.addEventListener(\"click\", handleClickOutside, true);\n    return () => {\n      document.removeEventListener(\"keydown\", handleHideDropdown, true);\n      document.removeEventListener(\"click\", handleClickOutside, true);\n    };\n  });\n  return {\n    ref,\n    showApplyFilter,\n    setApplyFilter\n  };\n}\n\nfunction App() {\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        autoCompletesValueArray = _useState4[0],\n        setAutoCompletesValueArray = _useState4[1];\n\n  const _useState5 = useState([]),\n        _useState6 = _slicedToArray(_useState5, 2),\n        autoCompletesArray = _useState6[0],\n        setAutoCompletesArray = _useState6[1];\n\n  const _useState7 = useState([]),\n        _useState8 = _slicedToArray(_useState7, 2),\n        dateTimesArray = _useState8[0],\n        setDateTimesArray = _useState8[1];\n\n  const _useState9 = useState([]),\n        _useState10 = _slicedToArray(_useState9, 2),\n        dateTimesValueArray = _useState10[0],\n        setDateTimesValueArray = _useState10[1];\n\n  const _useState11 = useState([]),\n        _useState12 = _slicedToArray(_useState11, 2),\n        conditionsArray = _useState12[0],\n        setConditionsArray = _useState12[1];\n\n  const _useState13 = useState([]),\n        _useState14 = _slicedToArray(_useState13, 2),\n        conditionsValueArray = _useState14[0],\n        setConditionsValueArray = _useState14[1];\n\n  const _useState15 = useState([]),\n        _useState16 = _slicedToArray(_useState15, 2),\n        textComponentsArray = _useState16[0],\n        setTextComponentsArray = _useState16[1];\n\n  const _useState17 = useState([]),\n        _useState18 = _slicedToArray(_useState17, 2),\n        textComponentsValueArray = _useState18[0],\n        setTextComponentsValueArray = _useState18[1];\n\n  const _useState19 = useState({}),\n        _useState20 = _slicedToArray(_useState19, 2),\n        applyFilterChip = _useState20[0],\n        setApplyFilterChip = _useState20[1];\n\n  const _useState21 = useState(0),\n        _useState22 = _slicedToArray(_useState21, 2),\n        filterCount = _useState22[0],\n        setFilterCount = _useState22[1];\n\n  useEffect(() => {\n    let count = 0;\n    count = autoCompletesArray.length + dateTimesArray.length + conditionsArray.length + textComponentsArray.length;\n    setFilterCount(count);\n  }, [autoCompletesArray, dateTimesArray, conditionsArray, textComponentsArray]);\n  /**\n   * Method set the state which shows the drawer when on true condition\n   */\n\n  const showDrawer = () => {\n    setApplyFilter(true);\n  };\n  /**\n   * Method set the state which closes the drawer when the state is in false condition\n   */\n\n\n  const closeDrawer = () => {\n    setApplyFilter(false);\n  };\n  /**\n   * Method which creates the array which contains the elements to be shown in the applied filter chips\n   */\n\n\n  const applyFilter = () => {\n    let applyFilter = {\n      applyFilterArray: []\n    };\n    let tempObj = {\n      applyFilter: []\n    };\n\n    if (autoCompletesValueArray.length > 0) {\n      autoCompletesValueArray.forEach(item => {\n        tempObj.applyFilter.push(item);\n      });\n      applyFilter.applyFilterArray.push({\n        autoComplete: autoCompletesValueArray\n      });\n    }\n\n    if (dateTimesValueArray.length > 0) {\n      dateTimesValueArray.forEach(item => {\n        tempObj.applyFilter.push(item);\n      });\n      applyFilter.applyFilterArray.push({\n        dateTime: dateTimesValueArray\n      });\n    }\n\n    if (conditionsValueArray.length > 0) {\n      conditionsValueArray.forEach(item => {\n        tempObj.applyFilter.push(item);\n      });\n      applyFilter.applyFilterArray.push({\n        conditional: conditionsValueArray\n      });\n    }\n\n    if (textComponentsValueArray.length > 0) {\n      textComponentsValueArray.forEach(item => {\n        tempObj.applyFilter.push(item);\n      });\n      applyFilter.applyFilterArray.push({\n        textComponent: textComponentsValueArray\n      });\n    }\n\n    console.log(applyFilter);\n    setApplyFilterChip(tempObj);\n    tempObj = {};\n  };\n  /**\n   * Method To pass the values from saved filter list to the right filter drawer\n   * @param {*} value is saved filter from the saved filter popup list\n   */\n\n\n  const saveFilter = value => {\n    let savedFilter = {\n      filter: []\n    };\n\n    if (autoCompletesValueArray.length > 0) {\n      savedFilter.filter.push({\n        autoComplete: autoCompletesValueArray\n      });\n    }\n\n    if (dateTimesValueArray.length > 0) {\n      savedFilter.filter.push({\n        dateTime: dateTimesValueArray\n      });\n    }\n\n    if (conditionsValueArray.length > 0) {\n      savedFilter.filter.push({\n        conditional: conditionsValueArray\n      });\n    }\n\n    if (textComponentsValueArray.length > 0) {\n      savedFilter.filter.push({\n        textComponent: textComponentsValueArray\n      });\n    }\n\n    savedFilter[value] = savedFilter[\"filter\"];\n    delete savedFilter.filter;\n    let savedFilters = localStorage.getItem(\"savedFilters\");\n    savedFilters = savedFilters ? JSON.parse(savedFilters) : [];\n    savedFilters.push(savedFilter);\n    localStorage.setItem(\"savedFilters\", JSON.stringify(savedFilters));\n    console.log(savedFilters);\n  };\n  /**\n   * Method To create the filter arrays for each specific type based on datatype\n   * @param {*} name is the name of the filter\n   * @param {*} dataType is the dataType of the filter\n   * @param {*} enabled is initial enabled status of the filter\n   * @param {*} type is the type array of the filter if present\n   * @param {*} field is the field array of the filter if present\n   * @param {*} condition is the condition array of the filter if present\n   * @param {*} options is the options array of the filter if present\n   */\n\n\n  const fromLeftToRight = (name, dataType, enabled, type, field, condition, options) => {\n    if (dataType === \"AutoComplete\") {\n      let value = {\n        name: name,\n        type: type,\n        dataType: dataType,\n        enabled: enabled,\n        objectArray: options\n      };\n      let autoCompleteArray = [...autoCompletesArray];\n\n      if (autoCompleteArray.length > 0) {\n        let index = autoCompleteArray.findIndex(x => x.name === value.name && x.type === value.type);\n\n        if (index === -1) {\n          autoCompleteArray.push({\n            name: name,\n            type: type,\n            dataType: dataType,\n            enabled: enabled,\n            objectArray: options\n          });\n        }\n      } else {\n        autoCompleteArray.push({\n          name: name,\n          type: type,\n          dataType: dataType,\n          enabled: enabled,\n          objectArray: options\n        });\n      }\n\n      setAutoCompletesArray(autoCompleteArray);\n      autoCompleteArray = [];\n    }\n\n    if (dataType === \"DateTime\") {\n      let value = {\n        name: name,\n        dataType: dataType,\n        enabled: enabled,\n        field: field\n      };\n      let dateTimeArray = [...dateTimesArray];\n\n      if (dateTimeArray.length > 0) {\n        let index = dateTimeArray.findIndex(x => x.name === value.name && x.field === value.field);\n\n        if (index === -1) {\n          dateTimeArray.push({\n            name: name,\n            dataType: dataType,\n            enabled: enabled,\n            field: field\n          });\n        }\n      } else {\n        dateTimeArray.push({\n          name: name,\n          dataType: dataType,\n          enabled: enabled,\n          field: field\n        });\n      }\n\n      setDateTimesArray(dateTimeArray);\n      dateTimeArray = [];\n    }\n\n    if (dataType === \"Numeric\") {\n      let value = {\n        name: name,\n        dataType: dataType,\n        enabled: enabled,\n        condition: condition,\n        amount: \"\"\n      };\n      let conditionArray = [...conditionsArray];\n\n      if (conditionArray.length > 0) {\n        let index = conditionArray.findIndex(x => x.name === value.name && x.condition === value.condition);\n\n        if (index === -1) {\n          conditionArray.push({\n            name: name,\n            dataType: dataType,\n            enabled: enabled,\n            condition: condition,\n            amount: \"\"\n          });\n        }\n      } else {\n        conditionArray.push({\n          name: name,\n          dataType: dataType,\n          enabled: enabled,\n          condition: condition,\n          amount: \"\"\n        });\n      }\n\n      setConditionsArray(conditionArray);\n      conditionArray = [];\n    }\n\n    if (dataType === \"Text\") {\n      let value = {\n        name: name,\n        dataType: dataType,\n        enabled: enabled\n      };\n      let textComponentArray = [...textComponentsArray];\n\n      if (textComponentArray.length > 0) {\n        let index = textComponentArray.findIndex(x => x.name === value.name && x.dataType === value.dataType);\n\n        if (index === -1) {\n          textComponentArray.push({\n            name: name,\n            dataType: dataType,\n            enabled: enabled\n          });\n        }\n      } else {\n        textComponentArray.push({\n          name: name,\n          dataType: dataType,\n          enabled: enabled\n        });\n      }\n\n      setTextComponentsArray(textComponentArray);\n      textComponentArray = [];\n    }\n  };\n  /**\n   * Method To create arrays containing values upon change trigger from respective input fields\n   * @param {*} item is the specific filter element object\n   * @param {*} valueArray is the selected multiselect options\n   */\n\n\n  const createAutoCompleteArray = (item, valueArray) => {\n    let tempObj = JSON.parse(JSON.stringify(item));\n    tempObj.value = valueArray;\n    let autoCompleteValueArray = [...autoCompletesValueArray];\n\n    if (autoCompleteValueArray.length > 0) {\n      let index = autoCompleteValueArray.findIndex(x => x.name === tempObj.name && x.type === tempObj.type);\n\n      if (index === -1) {\n        autoCompleteValueArray.push({\n          name: tempObj.name,\n          type: tempObj.type,\n          dataType: tempObj.dataType,\n          enabled: tempObj.enabled,\n          value: tempObj.value\n        });\n      } else {\n        autoCompleteValueArray[index].value = tempObj.value;\n      }\n    } else {\n      autoCompleteValueArray.push({\n        name: tempObj.name,\n        type: tempObj.type,\n        dataType: tempObj.dataType,\n        enabled: tempObj.enabled,\n        value: tempObj.value\n      });\n    }\n\n    setAutoCompletesValueArray(autoCompleteValueArray);\n    autoCompleteValueArray = [];\n  };\n  /**\n   * Method To delete the specific element from filter array upon clicking close\n   * @param {*} item is the specific filter element object\n   */\n\n\n  const deleteAutoCompleteElement = item => {\n    let autoCompleteArray = [...autoCompletesArray];\n    let index = autoCompleteArray.findIndex(x => x.name === item.name && x.type === item.type);\n\n    if (index !== -1) {\n      autoCompleteArray.splice(index, 1);\n    } else {\n      autoCompleteArray = [];\n    }\n\n    setAutoCompletesArray(autoCompleteArray);\n  };\n  /**\n   * Method To toggle the switch to enable and disable the input fields\n   * @param {*} item is the specific filter element object\n   */\n\n\n  const handleAutoCompleteEnabled = item => {\n    let autoCompleteArray = [...autoCompletesArray];\n    let index = autoCompleteArray.findIndex(x => x.name === item.name && x.type === item.type);\n\n    if (index !== -1) {\n      autoCompleteArray[index].enabled = !autoCompleteArray[index].enabled;\n    }\n\n    setAutoCompletesArray(autoCompleteArray);\n\n    if (autoCompletesValueArray.length > 0) {\n      let autoCompleteValueArray = [...autoCompletesValueArray];\n      let index = autoCompleteValueArray.findIndex(x => x.name === item.name && x.type === item.type);\n      autoCompleteValueArray[index].enabled = !autoCompleteValueArray[index].enabled;\n      setAutoCompletesValueArray(autoCompleteValueArray);\n      autoCompleteValueArray = [];\n    }\n  };\n  /**\n   * Method To delete the specific element from filter array upon clicking close\n   * @param {*} item is the specific filter element object\n   */\n\n\n  const deleteDateTimeElement = item => {\n    let dateTimeArray = [...dateTimesArray];\n    let index = dateTimeArray.findIndex(x => x.name === item.name);\n    dateTimeArray.splice(index, 1);\n    dateTimeArray.forEach(item => {\n      item.field.forEach(fieldArray => {\n        fieldArray.value = \"\";\n      });\n    });\n    setDateTimesArray(dateTimeArray);\n    dateTimeArray = [];\n    FilterData.filter.forEach(filters => {\n      if (filters.name === item.name) {\n        item.field.forEach(fieldArray => {\n          fieldArray.value = \"\";\n        });\n      }\n    });\n\n    if (item === {}) {\n      setDateTimesValueArray([]);\n    }\n  };\n  /**\n   * Method To toggle the switch to enable and disable the input fields\n   * @param {*} item is the specific filter element object\n   */\n\n\n  const handleDateTimeEnabled = item => {\n    let dateTimeArray = [...dateTimesArray];\n    let index = dateTimeArray.findIndex(x => x.name === item.name && x.field === item.field);\n\n    if (index !== -1) {\n      dateTimeArray[index].enabled = !dateTimeArray[index].enabled;\n    }\n\n    setDateTimesArray(dateTimeArray);\n    dateTimeArray = [];\n\n    if (dateTimesValueArray.length > 0) {\n      let dateTimeValueArray = [...dateTimesValueArray];\n      let tempArray = [];\n      item.field.forEach(item => {\n        tempArray.push(item.column);\n      });\n      let index = dateTimeValueArray.findIndex(x => x.name === item.name && tempArray.includes(x.fieldValue));\n\n      if (index !== -1) {\n        dateTimeValueArray.forEach(item => {\n          item.enabled = !item.enabled;\n        });\n      }\n\n      setDateTimesValueArray(dateTimeValueArray);\n      dateTimeValueArray = [];\n    }\n  };\n  /**\n   * Method To create arrays containing values upon change trigger from respective input fields\n   * @param {*} item is the specific filter element object\n   * @param {*} fieldName is the specific type of field/date in which change is happening\n   * @param {*} value is value of the field\n   */\n\n\n  const createDateTimeArray = (item, fieldName, value) => {\n    let tempObj = JSON.parse(JSON.stringify(item));\n    tempObj.fieldValue = fieldName;\n    tempObj.value = value;\n    let dateTimeValueArray = [...dateTimesValueArray];\n\n    if (dateTimeValueArray.length > 0) {\n      let index = dateTimeValueArray.findIndex(x => x.fieldValue === tempObj.fieldValue && x.name === tempObj.name);\n\n      if (index === -1) {\n        dateTimeValueArray.push({\n          name: tempObj.name,\n          dataType: tempObj.dataType,\n          enabled: tempObj.enabled,\n          fieldValue: tempObj.fieldValue,\n          value: tempObj.value\n        });\n      } else {\n        dateTimeValueArray[index].value = tempObj.value;\n      }\n    } else {\n      dateTimeValueArray.push({\n        name: tempObj.name,\n        dataType: tempObj.dataType,\n        enabled: tempObj.enabled,\n        fieldValue: tempObj.fieldValue,\n        value: tempObj.value\n      });\n    }\n\n    setDateTimesValueArray(dateTimeValueArray);\n    dateTimeValueArray = [];\n    let dateTimeArray = [...dateTimesArray];\n\n    if (dateTimeArray.length > 0) {\n      dateTimeArray.forEach(item => {\n        item.field.forEach(fieldArray => {\n          if (fieldArray.column === fieldName) {\n            fieldArray.value = value;\n          }\n        });\n      });\n      setDateTimesArray(dateTimeArray);\n    }\n\n    dateTimeArray = [];\n  };\n  /**\n   * Method To set both from date and to date as todays date\n   */\n\n\n  const addToday = () => {\n    let todayDate = new Date();\n    let dated = dateFormat(todayDate, \"yyyy-mm-dd\");\n    let dateTimeArray = [...dateTimesArray];\n    let dateTimeValueArray = [...dateTimesValueArray];\n\n    if (dateTimeArray.length > 0) {\n      dateTimeArray.forEach(item => {\n        item.field.forEach(fieldArray => {\n          fieldArray.value = dated;\n\n          if (dateTimeValueArray.length > 1) {\n            dateTimeValueArray.forEach(item => {\n              if (item.fieldValue === fieldArray.column) {\n                item.value = dated;\n              }\n            });\n          } else {\n            dateTimeValueArray.push({\n              name: item.name,\n              dataType: item.dataType,\n              enabled: item.enabled,\n              fieldValue: fieldArray.column,\n              value: dated\n            });\n          }\n        });\n      });\n      setDateTimesArray(dateTimeArray);\n      setDateTimesValueArray(dateTimeValueArray);\n    }\n  };\n  /**\n   * Method To set both from date and to date as tomorrow's date\n   */\n\n\n  const addTomorrow = () => {\n    let fromDate = new Date();\n    let toDate = new Date();\n    fromDate.setDate(fromDate.getDate() + 1);\n    toDate.setDate(toDate.getDate() + 1);\n    fromDate = dateFormat(fromDate, \"yyyy-mm-dd\");\n    toDate = dateFormat(toDate, \"yyyy-mm-dd\");\n    let dateTimeArray = [...dateTimesArray];\n    let dateTimeValueArray = [...dateTimesValueArray];\n\n    if (dateTimeArray.length > 0) {\n      dateTimeArray.forEach(item => {\n        item.field[0].value = fromDate;\n        item.field[1].value = toDate;\n        item.field.forEach(fieldArray => {\n          if (dateTimeValueArray.length > 1) {\n            dateTimeValueArray.forEach(arr => {\n              if (arr.fieldValue === fieldArray.column) {\n                arr.value = fieldArray.value;\n              }\n            });\n          } else {\n            dateTimeValueArray.push({\n              name: item.name,\n              dataType: item.dataType,\n              enabled: item.enabled,\n              fieldValue: fieldArray.column,\n              value: fieldArray.value\n            });\n          }\n        });\n      });\n      setDateTimesArray(dateTimeArray);\n      setDateTimesValueArray(dateTimeValueArray);\n    }\n  };\n  /**\n   * Method To set the date range as this month\n   */\n\n\n  const addThisMonth = () => {\n    let today = new Date();\n    let fromDate = new Date(today.getFullYear(), today.getMonth(), 1);\n    let toDate = new Date(today.getFullYear(), today.getMonth() + 1, 0);\n    fromDate = dateFormat(fromDate, \"yyyy-mm-dd\");\n    toDate = dateFormat(toDate, \"yyyy-mm-dd\");\n    let dateTimeArray = [...dateTimesArray];\n    let dateTimeValueArray = [...dateTimesValueArray];\n\n    if (dateTimeArray.length > 0) {\n      dateTimeArray.forEach(item => {\n        item.field[0].value = fromDate;\n        item.field[1].value = toDate;\n        item.field.forEach(fieldArray => {\n          if (dateTimeValueArray.length > 1) {\n            dateTimeValueArray.forEach(arr => {\n              if (arr.fieldValue === fieldArray.column) {\n                arr.value = fieldArray.value;\n              }\n            });\n          } else {\n            dateTimeValueArray.push({\n              name: item.name,\n              dataType: item.dataType,\n              enabled: item.enabled,\n              fieldValue: fieldArray.column,\n              value: fieldArray.value\n            });\n          }\n        });\n      });\n      setDateTimesArray(dateTimeArray);\n      setDateTimesValueArray(dateTimeValueArray);\n    }\n  };\n  /**\n   * Method To set the date range as next 14 days\n   */\n\n\n  const addForteenDays = () => {\n    let fromDate = new Date();\n    let toDate = new Date();\n    fromDate.setDate(fromDate.getDate() + 1);\n    toDate.setDate(toDate.getDate() + 14);\n    fromDate = dateFormat(fromDate, \"yyyy-mm-dd\");\n    toDate = dateFormat(toDate, \"yyyy-mm-dd\");\n    let dateTimeArray = [...dateTimesArray];\n    let dateTimeValueArray = [...dateTimesValueArray];\n\n    if (dateTimeArray.length > 0) {\n      dateTimeArray.forEach(item => {\n        item.field[0].value = fromDate;\n        item.field[1].value = toDate;\n        item.field.forEach(fieldArray => {\n          if (dateTimeValueArray.length > 1) {\n            dateTimeValueArray.forEach(arr => {\n              if (arr.fieldValue === fieldArray.column) {\n                arr.value = fieldArray.value;\n              }\n            });\n          } else {\n            dateTimeValueArray.push({\n              name: item.name,\n              dataType: item.dataType,\n              enabled: item.enabled,\n              fieldValue: fieldArray.column,\n              value: fieldArray.value\n            });\n          }\n        });\n      });\n      setDateTimesArray(dateTimeArray);\n      setDateTimesValueArray(dateTimeValueArray);\n    }\n  };\n  /**\n   * Method To set the date range as next 7 days\n   */\n\n\n  const addSevenDays = () => {\n    let fromDate = new Date();\n    let toDate = new Date();\n    fromDate.setDate(fromDate.getDate() + 1);\n    toDate.setDate(toDate.getDate() + 7);\n    fromDate = dateFormat(fromDate, \"yyyy-mm-dd\");\n    toDate = dateFormat(toDate, \"yyyy-mm-dd\");\n    let dateTimeArray = [...dateTimesArray];\n    let dateTimeValueArray = [...dateTimesValueArray];\n\n    if (dateTimeArray.length > 0) {\n      dateTimeArray.forEach(item => {\n        item.field[0].value = fromDate;\n        item.field[1].value = toDate;\n        item.field.forEach(fieldArray => {\n          if (dateTimeValueArray.length > 1) {\n            dateTimeValueArray.forEach(arr => {\n              if (arr.fieldValue === fieldArray.column) {\n                arr.value = fieldArray.value;\n              }\n            });\n          } else {\n            dateTimeValueArray.push({\n              name: item.name,\n              dataType: item.dataType,\n              enabled: item.enabled,\n              fieldValue: fieldArray.column,\n              value: fieldArray.value\n            });\n          }\n        });\n      });\n      setDateTimesArray(dateTimeArray);\n      setDateTimesValueArray(dateTimeValueArray);\n    }\n  };\n  /**\n   * Method To set the date range as current week Sunday to Saturday\n   */\n\n\n  const addThisWeek = () => {\n    let today = new Date();\n    let from = today.getDate() - today.getDay();\n    let to = from + 6;\n    let fromDate = new Date(today.setDate(from)).toUTCString();\n    let toDate = new Date(today.setDate(to)).toUTCString();\n    fromDate = dateFormat(fromDate, \"yyyy-mm-dd\");\n    toDate = dateFormat(toDate, \"yyyy-mm-dd\");\n    let dateTimeArray = [...dateTimesArray];\n    let dateTimeValueArray = [...dateTimesValueArray];\n\n    if (dateTimeArray.length > 0) {\n      dateTimeArray.forEach(item => {\n        item.field[0].value = fromDate;\n        item.field[1].value = toDate;\n        item.field.forEach(fieldArray => {\n          if (dateTimeValueArray.length > 1) {\n            dateTimeValueArray.forEach(arr => {\n              if (arr.fieldValue === fieldArray.column) {\n                arr.value = fieldArray.value;\n              }\n            });\n          } else {\n            dateTimeValueArray.push({\n              name: item.name,\n              dataType: item.dataType,\n              enabled: item.enabled,\n              fieldValue: fieldArray.column,\n              value: fieldArray.value\n            });\n          }\n        });\n      });\n      setDateTimesArray(dateTimeArray);\n      setDateTimesValueArray(dateTimeValueArray);\n    }\n  };\n  /**\n   * Method To set the date range as next 30 days\n   */\n\n\n  const addThirtyDays = () => {\n    let from = new Date();\n    let to = new Date();\n    from.setDate(from.getDate() + 1);\n    to.setDate(to.getDate() + 30);\n    let fromDate = dateFormat(from, \"yyyy-mm-dd\");\n    let toDate = dateFormat(to, \"yyyy-mm-dd\");\n    let dateTimeArray = [...dateTimesArray];\n    let dateTimeValueArray = [...dateTimesValueArray];\n\n    if (dateTimeArray.length > 0) {\n      dateTimeArray.forEach(item => {\n        item.field[0].value = fromDate;\n        item.field[1].value = toDate;\n        item.field.forEach(fieldArray => {\n          if (dateTimeValueArray.length > 1) {\n            dateTimeValueArray.forEach(arr => {\n              if (arr.fieldValue === fieldArray.column) {\n                arr.value = fieldArray.value;\n              }\n            });\n          } else {\n            dateTimeValueArray.push({\n              name: item.name,\n              dataType: item.dataType,\n              enabled: item.enabled,\n              fieldValue: fieldArray.column,\n              value: fieldArray.value\n            });\n          }\n        });\n      });\n      setDateTimesArray(dateTimeArray);\n      setDateTimesValueArray(dateTimeValueArray);\n    }\n  };\n  /**\n   * Method To set the date range as next n days\n   * @param {*} value is the no: of days after today\n   */\n\n\n  const nextDayChange = value => {\n    if (value === \"\") {\n      value = 1;\n    }\n\n    let fromDate = new Date();\n    let toDate = new Date();\n\n    if (value !== \"0\") {\n      fromDate.setDate(fromDate.getDate() + 1);\n      toDate.setDate(toDate.getDate() + parseInt(value));\n    }\n\n    fromDate = dateFormat(fromDate, \"yyyy-mm-dd\");\n    toDate = dateFormat(toDate, \"yyyy-mm-dd\");\n    let dateTimeArray = [...dateTimesArray];\n    let dateTimeValueArray = [...dateTimesValueArray];\n\n    if (dateTimeArray.length > 0) {\n      dateTimeArray.forEach(item => {\n        item.field[0].value = fromDate;\n        item.field[1].value = toDate;\n        item.field.forEach(fieldArray => {\n          if (dateTimeValueArray.length > 1) {\n            dateTimeValueArray.forEach(arr => {\n              if (arr.fieldValue === fieldArray.column) {\n                arr.value = fieldArray.value;\n              }\n            });\n          } else {\n            dateTimeValueArray.push({\n              name: item.name,\n              dataType: item.dataType,\n              enabled: item.enabled,\n              fieldValue: fieldArray.column,\n              value: fieldArray.value\n            });\n          }\n        });\n      });\n      setDateTimesArray(dateTimeArray);\n      setDateTimesValueArray(dateTimeValueArray);\n    }\n  };\n  /**\n   * Method To set the date range as last n days\n   * @param {*} value is the no: of days before today\n   */\n\n\n  const lastDayChange = value => {\n    if (value === \"\") {\n      value = 1;\n    }\n\n    let fromDate = new Date();\n    let toDate = new Date();\n\n    if (value !== \"0\") {\n      fromDate.setDate(fromDate.getDate() - parseInt(value));\n      toDate.setDate(toDate.getDate() - 1);\n    }\n\n    fromDate = dateFormat(fromDate, \"yyyy-mm-dd\");\n    toDate = dateFormat(toDate, \"yyyy-mm-dd\");\n    let dateTimeArray = [...dateTimesArray];\n    let dateTimeValueArray = [...dateTimesValueArray];\n\n    if (dateTimeArray.length > 0) {\n      dateTimeArray.forEach(item => {\n        item.field[0].value = fromDate;\n        item.field[1].value = toDate;\n        item.field.forEach(fieldArray => {\n          if (dateTimeValueArray.length > 1) {\n            dateTimeValueArray.forEach(arr => {\n              if (arr.fieldValue === fieldArray.column) {\n                arr.value = fieldArray.value;\n              }\n            });\n          } else {\n            dateTimeValueArray.push({\n              name: item.name,\n              dataType: item.dataType,\n              enabled: item.enabled,\n              fieldValue: fieldArray.column,\n              value: fieldArray.value\n            });\n          }\n        });\n      });\n      setDateTimesArray(dateTimeArray);\n      setDateTimesValueArray(dateTimeValueArray);\n    }\n  };\n  /**\n   * Method To toggle the switch to enable and disable the input fields\n   * @param {*} item is the specific filter element object\n   */\n\n\n  const handleCondionalEnabled = item => {\n    let conditionArray = [...conditionsArray];\n    let index = conditionArray.findIndex(x => x.name === item.name && x.condition === item.condition);\n\n    if (index !== -1) {\n      conditionArray[index].enabled = !conditionArray[index].enabled;\n    }\n\n    setConditionsArray(conditionArray);\n    let conditionValueArray = [];\n    conditionValueArray = [...conditionsValueArray];\n\n    if (conditionValueArray.length > 0) {\n      let index = conditionValueArray.findIndex(x => x.name === item.name && x.dataType === item.dataType);\n      conditionValueArray[index].enabled = !conditionValueArray[index].enabled;\n    }\n\n    setConditionsValueArray(conditionValueArray);\n    conditionValueArray = [];\n  };\n  /**\n   * Method To create arrays containing values upon change trigger from respective input fields\n   * @param {*} item is the specific filter element object\n   * @param {*} value is value of the input field\n   */\n\n\n  const createConditionalArray = (item, value) => {\n    let valueArray = [];\n    item.condition.forEach(it => {\n      valueArray.push(it.value);\n    });\n    let conditionValueArray = [...conditionsValueArray];\n\n    if (conditionValueArray.length > 0) {\n      let index = conditionValueArray.findIndex(x => x.name === item.name && x.dataType === item.dataType);\n\n      if (index !== -1) {\n        if (valueArray.includes(value)) {\n          conditionValueArray[index].condition = value;\n        } else {\n          conditionValueArray[index].amount = value;\n        }\n      }\n    } else {\n      if (valueArray.includes(value)) {\n        conditionValueArray.push({\n          name: item.name,\n          dataType: item.dataType,\n          enabled: item.enabled,\n          condition: value\n        });\n      } else {\n        conditionValueArray.push({\n          name: item.name,\n          dataType: item.dataType,\n          enabled: item.enabled,\n          condition: item.condition[0].value,\n          amount: value\n        });\n      }\n    }\n\n    setConditionsValueArray(conditionValueArray);\n    conditionValueArray = [];\n  };\n  /**\n   * Method To delete the specific element from filter array upon clicking close\n   * @param {*} item is the specific filter element object\n   */\n\n\n  const deleteConditionalElement = item => {\n    let conditionArray = [...conditionsArray];\n    let index = conditionArray.findIndex(x => x.name === item.name && x.dataType === item.dataType);\n\n    if (index !== -1) {\n      conditionArray.splice(index, 1);\n    } else {\n      conditionArray = [];\n    }\n\n    setConditionsArray(conditionArray);\n  };\n  /**\n   * Method To create arrays containing values upon change trigger from respective input fields\n   * @param {*} item is the specific filter element object\n   * @param {*} value is value of the input field\n   */\n\n\n  const createTextComponentsArray = (item, value) => {\n    let textComponentValueArray = [...textComponentsValueArray];\n\n    if (textComponentValueArray.length > 0) {\n      let index = textComponentValueArray.findIndex(x => x.name === item.name && x.dataType === item.dataType);\n\n      if (index === -1) {\n        textComponentValueArray.push({\n          name: item.name,\n          dataType: item.dataType,\n          enabled: item.enabled,\n          value: value\n        });\n      } else {\n        textComponentValueArray[index].value = value;\n      }\n    } else {\n      textComponentValueArray.push({\n        name: item.name,\n        dataType: item.dataType,\n        enabled: item.enabled,\n        value: value\n      });\n    }\n\n    setTextComponentsValueArray(textComponentValueArray);\n    textComponentValueArray = [];\n  };\n  /**\n   * Method To toggle the switch to enable and disable the input fields\n   * @param {*} item is the specific filter element object\n   */\n\n\n  const handleTextComponentEnabled = item => {\n    let textComponentArray = [...textComponentsArray];\n    let index = textComponentArray.findIndex(x => x.name === item.name && x.dataType === item.dataType);\n\n    if (index !== -1) {\n      textComponentArray[index].enabled = !textComponentArray[index].enabled;\n    }\n\n    setTextComponentsArray(textComponentArray);\n    textComponentArray = [];\n    let textComponentValueArray = [...textComponentsValueArray];\n\n    if (textComponentValueArray.length > 0) {\n      let index = textComponentValueArray.findIndex(x => x.name === item.name && x.dataType === item.dataType);\n\n      if (index !== -1) {\n        textComponentValueArray[index].enabled = !textComponentValueArray[index].enabled;\n      }\n    }\n\n    setTextComponentsValueArray(textComponentValueArray);\n    textComponentValueArray = [];\n  };\n  /**\n   * Method To delete the specific element from filter array upon clicking close\n   * @param {*} item is the specific filter element object\n   */\n\n\n  const deleteTextComponentElement = item => {\n    let textComponentArray = [...textComponentsArray];\n    let index = textComponentArray.findIndex(x => x.name === item.name && x.dataType === item.dataType);\n\n    if (index !== -1) {\n      textComponentArray.splice(index, 1);\n    } else {\n      textComponentArray = [];\n    }\n\n    setTextComponentsArray(textComponentArray);\n  };\n  /**\n   * Method To map the applied filters to drawer on clicking the chips\n   * @param {*} item is the specific filter element object\n   */\n\n\n  const addAppliedFilters = item => {\n    let arr = [];\n    FilterData.filter.forEach(fil => {\n      if (fil.types.length) {\n        let index = fil.types.findIndex(x => x.name === item.type && fil.name === item.name);\n\n        if (index !== -1) {\n          arr = fil.types[index].options;\n        }\n      }\n    });\n\n    if (item.dataType === \"AutoComplete\") {\n      let autoCompleteArray = [...autoCompletesArray];\n\n      if (autoCompleteArray.length > 0) {\n        let index = autoCompleteArray.findIndex(x => x.name === item.name && item.type === x.type);\n\n        if (index === -1) {\n          autoCompleteArray.push({\n            name: item.name,\n            dataType: item.dataType,\n            type: item.type,\n            enabled: item.enabled,\n            value: item.value,\n            objectArray: arr\n          });\n        }\n      } else {\n        autoCompleteArray.push({\n          name: item.name,\n          dataType: item.dataType,\n          type: item.type,\n          enabled: item.enabled,\n          value: item.value,\n          objectArray: arr\n        });\n      }\n\n      setAutoCompletesArray(autoCompleteArray);\n    } else if (item.dataType === \"DateTime\") {\n      let dateTimeArray = [...dateTimesArray];\n\n      if (dateTimeArray.length === 0) {\n        dateTimeArray.push({\n          name: item.name,\n          dataType: item.dataType,\n          enabled: item.enabled,\n          field: []\n        });\n        dateTimesValueArray.forEach(item => {\n          if (item.fieldValue) {\n            dateTimeArray.forEach(dt => {\n              dt.field.push({\n                column: item.fieldValue,\n                value: item.value\n              });\n            });\n          }\n        });\n      }\n\n      setDateTimesArray(dateTimeArray);\n    } else if (item.dataType === \"Numeric\") {\n      let conditionArray = [...conditionsArray];\n\n      if (conditionArray.length === 0) {\n        conditionArray.push({\n          name: item.name,\n          dataType: item.dataType,\n          enabled: item.enabled,\n          condition: [],\n          amount: item.amount,\n          value: item.condition\n        });\n        FilterData.filter.forEach(data => {\n          if (data.dataType === \"Numeric\") {\n            data.condition.forEach(values => {\n              conditionArray.forEach(item => {\n                item.condition.push({\n                  value: values.value\n                });\n              });\n            });\n          }\n        });\n      }\n\n      setConditionsArray(conditionArray);\n    } else {\n      let textComponentArray = [...textComponentsArray];\n\n      if (textComponentArray.length > 0) {\n        let index = textComponentArray.findIndex(x => x.name === item.name);\n\n        if (index === -1) {\n          textComponentArray.push({\n            name: item.name,\n            dataType: item.dataType,\n            enabled: item.enabled,\n            value: item.value\n          });\n        }\n      } else {\n        textComponentArray.push({\n          name: item.name,\n          dataType: item.dataType,\n          enabled: item.enabled,\n          value: item.value\n        });\n      }\n\n      setTextComponentsArray(textComponentArray);\n    }\n\n    setApplyFilter(true);\n  };\n  /**\n   * Method To map the saved filters to drawer on clicking the specific saved filter name\n   * @param {*} item is the specific filter element object\n   */\n\n\n  const addSavedFilters = item => {\n    let autoComplete = [];\n    let condition = [];\n    let text = [];\n    let tempArr = [];\n    let savedFilters = [];\n\n    for (let objects in item) {\n      item[objects].forEach(arrays => {\n        for (let array in arrays) {\n          tempArr.push(arrays[array]);\n        }\n      });\n    }\n\n    let arr = [];\n    tempArr.forEach(arrays => {\n      arrays.forEach(array => {\n        savedFilters.push(array);\n      });\n    });\n    savedFilters.forEach(items => {\n      FilterData.filter.forEach(fil => {\n        if (fil.types.length) {\n          let index = fil.types.findIndex(x => x.name === items.type && fil.name === items.name);\n\n          if (index !== -1) {\n            arr = fil.types[index].options;\n          }\n        }\n      });\n\n      if (items.dataType === \"AutoComplete\") {\n        let autoCompleteArray = [...autoComplete];\n\n        if (autoCompleteArray.length > 0) {\n          let index = autoCompleteArray.findIndex(x => x.name === items.name && items.type === x.type);\n\n          if (index === -1) {\n            autoCompleteArray.push({\n              name: items.name,\n              dataType: items.dataType,\n              type: items.type,\n              enabled: items.enabled,\n              value: items.value,\n              objectArray: arr\n            });\n          }\n        } else {\n          autoCompleteArray.push({\n            name: items.name,\n            dataType: items.dataType,\n            type: items.type,\n            enabled: items.enabled,\n            value: items.value,\n            objectArray: arr\n          });\n        }\n\n        autoComplete = autoCompleteArray;\n      }\n    });\n    setAutoCompletesArray(autoComplete);\n    let saveTempDateTimeArray = [];\n    savedFilters.forEach(items => {\n      if (items.dataType === \"DateTime\") {\n        if (saveTempDateTimeArray.length === 0) {\n          saveTempDateTimeArray.push({\n            name: items.name,\n            dataType: items.dataType,\n            enabled: items.enabled,\n            field: []\n          });\n        }\n      }\n    });\n    savedFilters.forEach(saved => {\n      if (saved.dataType === \"DateTime\") {\n        if (saveTempDateTimeArray.length > 0) {\n          saveTempDateTimeArray.forEach(filter => {\n            filter.field.push({\n              column: saved.fieldValue,\n              value: saved.value\n            });\n          });\n        }\n      }\n    });\n    setDateTimesArray(saveTempDateTimeArray);\n    savedFilters.forEach(items => {\n      if (items.dataType === \"Numeric\") {\n        let conditionArray = [...condition];\n\n        if (conditionArray.length === 0) {\n          conditionArray.push({\n            name: items.name,\n            dataType: items.dataType,\n            enabled: items.enabled,\n            condition: [],\n            amount: items.amount,\n            value: items.condition\n          });\n          FilterData.filter.forEach(data => {\n            if (data.dataType === \"Numeric\") {\n              data.condition.forEach(values => {\n                conditionArray.forEach(items => {\n                  items.condition.push({\n                    value: values.value\n                  });\n                });\n              });\n            }\n          });\n        }\n\n        condition = conditionArray;\n      }\n    });\n    setConditionsArray(condition);\n    savedFilters.forEach(items => {\n      if (items.dataType === \"Text\") {\n        let textComponentArray = [...text];\n\n        if (textComponentArray.length > 0) {\n          let index = textComponentArray.findIndex(x => x.name === items.name);\n\n          if (index === -1) {\n            textComponentArray.push({\n              name: items.name,\n              dataType: items.dataType,\n              enabled: items.enabled,\n              value: items.value\n            });\n          }\n        } else {\n          textComponentArray.push({\n            name: items.name,\n            dataType: items.dataType,\n            enabled: items.enabled,\n            value: items.value\n          });\n        }\n\n        text = textComponentArray;\n      }\n    });\n    setTextComponentsArray(text);\n    setApplyFilter(true);\n  };\n  /**\n   * Method To reset the right drawer\n   */\n\n\n  const resetDrawer = () => {\n    deleteAutoCompleteElement({});\n    deleteConditionalElement({});\n    deleteDateTimeElement({});\n    deleteTextComponentElement({});\n    setApplyFilterChip({});\n  };\n\n  const _useComponentVisible = useComponentVisible(true),\n        ref = _useComponentVisible.ref,\n        showApplyFilter = _useComponentVisible.showApplyFilter,\n        setApplyFilter = _useComponentVisible.setApplyFilter;\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: ref,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1265,\n      columnNumber: 5\n    }\n  }, showApplyFilter && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"filter--grid\",\n    ref: ref,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1267,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"filter__wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1268,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"filter__list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1269,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(LeftDrawer, {\n    filterData: FilterData,\n    fromLeftToRight: fromLeftToRight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1270,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"filter__inputwrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1275,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(RightDrawer, {\n    applyFilter: applyFilter,\n    saveFilter: saveFilter,\n    createAutoCompleteArray: createAutoCompleteArray,\n    handleAutoCompleteEnabled: handleAutoCompleteEnabled,\n    deleteAutoCompleteElement: deleteAutoCompleteElement,\n    autoCompleteArray: autoCompletesArray,\n    dateTimesArray: dateTimesArray,\n    deleteDateTimeElement: deleteDateTimeElement,\n    handleDateTimeEnabled: handleDateTimeEnabled,\n    createDateTimeArray: createDateTimeArray,\n    addToday: addToday,\n    addTomorrow: addTomorrow,\n    addThisMonth: addThisMonth,\n    addForteenDays: addForteenDays,\n    addSevenDays: addSevenDays,\n    addThisWeek: addThisWeek,\n    addThirtyDays: addThirtyDays,\n    lastDayChange: lastDayChange,\n    nextDayChange: nextDayChange,\n    conditionsArray: conditionsArray,\n    handleCondionalEnabled: handleCondionalEnabled,\n    createConditionalArray: createConditionalArray,\n    deleteConditionalElement: deleteConditionalElement,\n    textComponentsArray: textComponentsArray,\n    deleteTextComponentElement: deleteTextComponentElement,\n    createTextComponentsArray: createTextComponentsArray,\n    handleTextComponentEnabled: handleTextComponentEnabled,\n    closeDrawer: closeDrawer,\n    resetDrawer: resetDrawer,\n    filterCount: filterCount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1276,\n      columnNumber: 15\n    }\n  })))), /*#__PURE__*/React.createElement(MainFilterPanel, {\n    showDrawer: showDrawer,\n    applyFilterChip: applyFilterChip,\n    addAppliedFilters: addAppliedFilters,\n    addSavedFilters: addSavedFilters,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1313,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/abhilashrj/Documents/iCargoPOC/library/filter/example/src/App.js"],"names":["React","useState","useRef","useEffect","RightDrawer","LeftDrawer","MainFilterPanel","FilterData","dateFormat","require","useComponentVisible","showApplyFilter","setApplyFilter","ref","handleHideDropdown","event","key","handleClickOutside","current","contains","target","document","addEventListener","removeEventListener","App","autoCompletesValueArray","setAutoCompletesValueArray","autoCompletesArray","setAutoCompletesArray","dateTimesArray","setDateTimesArray","dateTimesValueArray","setDateTimesValueArray","conditionsArray","setConditionsArray","conditionsValueArray","setConditionsValueArray","textComponentsArray","setTextComponentsArray","textComponentsValueArray","setTextComponentsValueArray","applyFilterChip","setApplyFilterChip","filterCount","setFilterCount","count","length","showDrawer","closeDrawer","applyFilter","applyFilterArray","tempObj","forEach","item","push","autoComplete","dateTime","conditional","textComponent","console","log","saveFilter","value","savedFilter","filter","savedFilters","localStorage","getItem","JSON","parse","setItem","stringify","fromLeftToRight","name","dataType","enabled","type","field","condition","options","objectArray","autoCompleteArray","index","findIndex","x","dateTimeArray","amount","conditionArray","textComponentArray","createAutoCompleteArray","valueArray","autoCompleteValueArray","deleteAutoCompleteElement","splice","handleAutoCompleteEnabled","deleteDateTimeElement","fieldArray","filters","handleDateTimeEnabled","dateTimeValueArray","tempArray","column","includes","fieldValue","createDateTimeArray","fieldName","addToday","todayDate","Date","dated","addTomorrow","fromDate","toDate","setDate","getDate","arr","addThisMonth","today","getFullYear","getMonth","addForteenDays","addSevenDays","addThisWeek","from","getDay","to","toUTCString","addThirtyDays","nextDayChange","parseInt","lastDayChange","handleCondionalEnabled","conditionValueArray","createConditionalArray","it","deleteConditionalElement","createTextComponentsArray","textComponentValueArray","handleTextComponentEnabled","deleteTextComponentElement","addAppliedFilters","fil","types","dt","data","values","addSavedFilters","text","tempArr","objects","arrays","array","items","saveTempDateTimeArray","saved","resetDrawer"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport RightDrawer from \"./components/drawer/RightDrawer\";\nimport LeftDrawer from \"./components/drawer/LeftDrawer\";\nimport MainFilterPanel from \"./components/panel/MainFilterPanel\";\nimport FilterData from \"../src/data.json\";\nlet dateFormat = require(\"dateformat\");\n\n/**\n * Component handling clock outside close of Drawer\n */\nfunction useComponentVisible() {\n  const [showApplyFilter, setApplyFilter] = useState(false);\n  const ref = useRef(null);\n  /**\n   * Method To sort the rows for a particular column\n   * @param {*} event is the event that is getting passed when an outside click is triggered\n   */\n  const handleHideDropdown = (event) => {\n    if (event.key === \"Escape\") {\n      setApplyFilter(false);\n    }\n  };\n  /**\n   * Method To sort the rows for a particular column\n   * @param {*} event it is the event triggered on the ref div when click happens\n   */\n  const handleClickOutside = (event) => {\n    if (ref.current && !ref.current.contains(event.target)) {\n      setApplyFilter(false);\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener(\"keydown\", handleHideDropdown, true);\n    document.addEventListener(\"click\", handleClickOutside, true);\n    return () => {\n      document.removeEventListener(\"keydown\", handleHideDropdown, true);\n      document.removeEventListener(\"click\", handleClickOutside, true);\n    };\n  });\n\n  return { ref, showApplyFilter, setApplyFilter };\n}\nfunction App() {\n  const [autoCompletesValueArray, setAutoCompletesValueArray] = useState([]);\n  const [autoCompletesArray, setAutoCompletesArray] = useState([]);\n  const [dateTimesArray, setDateTimesArray] = useState([]);\n  const [dateTimesValueArray, setDateTimesValueArray] = useState([]);\n  const [conditionsArray, setConditionsArray] = useState([]);\n  const [conditionsValueArray, setConditionsValueArray] = useState([]);\n  const [textComponentsArray, setTextComponentsArray] = useState([]);\n  const [textComponentsValueArray, setTextComponentsValueArray] = useState([]);\n  const [applyFilterChip, setApplyFilterChip] = useState({});\n  const [filterCount, setFilterCount] = useState(0);\n\n  useEffect(() => {\n    let count = 0;\n    count =\n      autoCompletesArray.length +\n      dateTimesArray.length +\n      conditionsArray.length +\n      textComponentsArray.length;\n    setFilterCount(count);\n  }, [\n    autoCompletesArray,\n    dateTimesArray,\n    conditionsArray,\n    textComponentsArray,\n  ]);\n  /**\n   * Method set the state which shows the drawer when on true condition\n   */\n  const showDrawer = () => {\n    setApplyFilter(true);\n  };\n  /**\n   * Method set the state which closes the drawer when the state is in false condition\n   */\n  const closeDrawer = () => {\n    setApplyFilter(false);\n  };\n  /**\n   * Method which creates the array which contains the elements to be shown in the applied filter chips\n   */\n  const applyFilter = () => {\n    let applyFilter = {\n      applyFilterArray: [],\n    };\n    let tempObj = { applyFilter: [] };\n    if (autoCompletesValueArray.length > 0) {\n      autoCompletesValueArray.forEach((item) => {\n        tempObj.applyFilter.push(item);\n      });\n      applyFilter.applyFilterArray.push({\n        autoComplete: autoCompletesValueArray,\n      });\n    }\n    if (dateTimesValueArray.length > 0) {\n      dateTimesValueArray.forEach((item) => {\n        tempObj.applyFilter.push(item);\n      });\n      applyFilter.applyFilterArray.push({ dateTime: dateTimesValueArray });\n    }\n    if (conditionsValueArray.length > 0) {\n      conditionsValueArray.forEach((item) => {\n        tempObj.applyFilter.push(item);\n      });\n      applyFilter.applyFilterArray.push({ conditional: conditionsValueArray });\n    }\n    if (textComponentsValueArray.length > 0) {\n      textComponentsValueArray.forEach((item) => {\n        tempObj.applyFilter.push(item);\n      });\n      applyFilter.applyFilterArray.push({\n        textComponent: textComponentsValueArray,\n      });\n    }\n    console.log(applyFilter);\n    setApplyFilterChip(tempObj);\n    tempObj = {};\n  };\n  /**\n   * Method To pass the values from saved filter list to the right filter drawer\n   * @param {*} value is saved filter from the saved filter popup list\n   */\n  const saveFilter = (value) => {\n    let savedFilter = {\n      filter: [],\n    };\n    if (autoCompletesValueArray.length > 0) {\n      savedFilter.filter.push({ autoComplete: autoCompletesValueArray });\n    }\n    if (dateTimesValueArray.length > 0) {\n      savedFilter.filter.push({ dateTime: dateTimesValueArray });\n    }\n    if (conditionsValueArray.length > 0) {\n      savedFilter.filter.push({ conditional: conditionsValueArray });\n    }\n    if (textComponentsValueArray.length > 0) {\n      savedFilter.filter.push({ textComponent: textComponentsValueArray });\n    }\n    savedFilter[value] = savedFilter[\"filter\"];\n    delete savedFilter.filter;\n    let savedFilters = localStorage.getItem(\"savedFilters\");\n    savedFilters = savedFilters ? JSON.parse(savedFilters) : [];\n    savedFilters.push(savedFilter);\n    localStorage.setItem(\"savedFilters\", JSON.stringify(savedFilters));\n    console.log(savedFilters);\n  };\n  /**\n   * Method To create the filter arrays for each specific type based on datatype\n   * @param {*} name is the name of the filter\n   * @param {*} dataType is the dataType of the filter\n   * @param {*} enabled is initial enabled status of the filter\n   * @param {*} type is the type array of the filter if present\n   * @param {*} field is the field array of the filter if present\n   * @param {*} condition is the condition array of the filter if present\n   * @param {*} options is the options array of the filter if present\n   */\n  const fromLeftToRight = (\n    name,\n    dataType,\n    enabled,\n    type,\n    field,\n    condition,\n    options\n  ) => {\n    if (dataType === \"AutoComplete\") {\n      let value = {\n        name: name,\n        type: type,\n        dataType: dataType,\n        enabled: enabled,\n        objectArray: options,\n      };\n      let autoCompleteArray = [...autoCompletesArray];\n      if (autoCompleteArray.length > 0) {\n        let index = autoCompleteArray.findIndex(\n          (x) => x.name === value.name && x.type === value.type\n        );\n        if (index === -1) {\n          autoCompleteArray.push({\n            name: name,\n            type: type,\n            dataType: dataType,\n            enabled: enabled,\n            objectArray: options,\n          });\n        }\n      } else {\n        autoCompleteArray.push({\n          name: name,\n          type: type,\n          dataType: dataType,\n          enabled: enabled,\n          objectArray: options,\n        });\n      }\n      setAutoCompletesArray(autoCompleteArray);\n      autoCompleteArray = [];\n    }\n    if (dataType === \"DateTime\") {\n      let value = {\n        name: name,\n        dataType: dataType,\n        enabled: enabled,\n        field: field,\n      };\n      let dateTimeArray = [...dateTimesArray];\n      if (dateTimeArray.length > 0) {\n        let index = dateTimeArray.findIndex(\n          (x) => x.name === value.name && x.field === value.field\n        );\n        if (index === -1) {\n          dateTimeArray.push({\n            name: name,\n            dataType: dataType,\n            enabled: enabled,\n            field: field,\n          });\n        }\n      } else {\n        dateTimeArray.push({\n          name: name,\n          dataType: dataType,\n          enabled: enabled,\n          field: field,\n        });\n      }\n      setDateTimesArray(dateTimeArray);\n      dateTimeArray = [];\n    }\n    if (dataType === \"Numeric\") {\n      let value = {\n        name: name,\n        dataType: dataType,\n        enabled: enabled,\n        condition: condition,\n        amount: \"\",\n      };\n      let conditionArray = [...conditionsArray];\n      if (conditionArray.length > 0) {\n        let index = conditionArray.findIndex(\n          (x) => x.name === value.name && x.condition === value.condition\n        );\n        if (index === -1) {\n          conditionArray.push({\n            name: name,\n            dataType: dataType,\n            enabled: enabled,\n            condition: condition,\n            amount: \"\",\n          });\n        }\n      } else {\n        conditionArray.push({\n          name: name,\n          dataType: dataType,\n          enabled: enabled,\n          condition: condition,\n          amount: \"\",\n        });\n      }\n      setConditionsArray(conditionArray);\n      conditionArray = [];\n    }\n    if (dataType === \"Text\") {\n      let value = {\n        name: name,\n        dataType: dataType,\n        enabled: enabled,\n      };\n      let textComponentArray = [...textComponentsArray];\n      if (textComponentArray.length > 0) {\n        let index = textComponentArray.findIndex(\n          (x) => x.name === value.name && x.dataType === value.dataType\n        );\n        if (index === -1) {\n          textComponentArray.push({\n            name: name,\n            dataType: dataType,\n            enabled: enabled,\n          });\n        }\n      } else {\n        textComponentArray.push({\n          name: name,\n          dataType: dataType,\n          enabled: enabled,\n        });\n      }\n      setTextComponentsArray(textComponentArray);\n      textComponentArray = [];\n    }\n  };\n  /**\n   * Method To create arrays containing values upon change trigger from respective input fields\n   * @param {*} item is the specific filter element object\n   * @param {*} valueArray is the selected multiselect options\n   */\n  const createAutoCompleteArray = (item, valueArray) => {\n    let tempObj = JSON.parse(JSON.stringify(item));\n    tempObj.value = valueArray;\n    let autoCompleteValueArray = [...autoCompletesValueArray];\n    if (autoCompleteValueArray.length > 0) {\n      let index = autoCompleteValueArray.findIndex(\n        (x) => x.name === tempObj.name && x.type === tempObj.type\n      );\n      if (index === -1) {\n        autoCompleteValueArray.push({\n          name: tempObj.name,\n          type: tempObj.type,\n          dataType: tempObj.dataType,\n          enabled: tempObj.enabled,\n          value: tempObj.value,\n        });\n      } else {\n        autoCompleteValueArray[index].value = tempObj.value;\n      }\n    } else {\n      autoCompleteValueArray.push({\n        name: tempObj.name,\n        type: tempObj.type,\n        dataType: tempObj.dataType,\n        enabled: tempObj.enabled,\n        value: tempObj.value,\n      });\n    }\n    setAutoCompletesValueArray(autoCompleteValueArray);\n    autoCompleteValueArray = [];\n  };\n  /**\n   * Method To delete the specific element from filter array upon clicking close\n   * @param {*} item is the specific filter element object\n   */\n  const deleteAutoCompleteElement = (item) => {\n    let autoCompleteArray = [...autoCompletesArray];\n    let index = autoCompleteArray.findIndex(\n      (x) => x.name === item.name && x.type === item.type\n    );\n    if (index !== -1) {\n      autoCompleteArray.splice(index, 1);\n    } else {\n      autoCompleteArray = [];\n    }\n\n    setAutoCompletesArray(autoCompleteArray);\n  };\n  /**\n   * Method To toggle the switch to enable and disable the input fields\n   * @param {*} item is the specific filter element object\n   */\n  const handleAutoCompleteEnabled = (item) => {\n    let autoCompleteArray = [...autoCompletesArray];\n    let index = autoCompleteArray.findIndex(\n      (x) => x.name === item.name && x.type === item.type\n    );\n    if (index !== -1) {\n      autoCompleteArray[index].enabled = !autoCompleteArray[index].enabled;\n    }\n    setAutoCompletesArray(autoCompleteArray);\n    if (autoCompletesValueArray.length > 0) {\n      let autoCompleteValueArray = [...autoCompletesValueArray];\n      let index = autoCompleteValueArray.findIndex(\n        (x) => x.name === item.name && x.type === item.type\n      );\n      autoCompleteValueArray[index].enabled = !autoCompleteValueArray[index]\n        .enabled;\n      setAutoCompletesValueArray(autoCompleteValueArray);\n      autoCompleteValueArray = [];\n    }\n  };\n  /**\n   * Method To delete the specific element from filter array upon clicking close\n   * @param {*} item is the specific filter element object\n   */\n  const deleteDateTimeElement = (item) => {\n    let dateTimeArray = [...dateTimesArray];\n    let index = dateTimeArray.findIndex((x) => x.name === item.name);\n    dateTimeArray.splice(index, 1);\n    dateTimeArray.forEach((item) => {\n      item.field.forEach((fieldArray) => {\n        fieldArray.value = \"\";\n      });\n    });\n    setDateTimesArray(dateTimeArray);\n    dateTimeArray = [];\n    FilterData.filter.forEach((filters) => {\n      if (filters.name === item.name) {\n        item.field.forEach((fieldArray) => {\n          fieldArray.value = \"\";\n        });\n      }\n    });\n    if (item === {}) {\n      setDateTimesValueArray([]);\n    }\n  };\n  /**\n   * Method To toggle the switch to enable and disable the input fields\n   * @param {*} item is the specific filter element object\n   */\n  const handleDateTimeEnabled = (item) => {\n    let dateTimeArray = [...dateTimesArray];\n    let index = dateTimeArray.findIndex(\n      (x) => x.name === item.name && x.field === item.field\n    );\n    if (index !== -1) {\n      dateTimeArray[index].enabled = !dateTimeArray[index].enabled;\n    }\n    setDateTimesArray(dateTimeArray);\n    dateTimeArray = [];\n    if (dateTimesValueArray.length > 0) {\n      let dateTimeValueArray = [...dateTimesValueArray];\n      let tempArray = [];\n      item.field.forEach((item) => {\n        tempArray.push(item.column);\n      });\n      let index = dateTimeValueArray.findIndex(\n        (x) => x.name === item.name && tempArray.includes(x.fieldValue)\n      );\n      if (index !== -1) {\n        dateTimeValueArray.forEach((item) => {\n          item.enabled = !item.enabled;\n        });\n      }\n\n      setDateTimesValueArray(dateTimeValueArray);\n      dateTimeValueArray = [];\n    }\n  };\n  /**\n   * Method To create arrays containing values upon change trigger from respective input fields\n   * @param {*} item is the specific filter element object\n   * @param {*} fieldName is the specific type of field/date in which change is happening\n   * @param {*} value is value of the field\n   */\n  const createDateTimeArray = (item, fieldName, value) => {\n    let tempObj = JSON.parse(JSON.stringify(item));\n    tempObj.fieldValue = fieldName;\n    tempObj.value = value;\n    let dateTimeValueArray = [...dateTimesValueArray];\n    if (dateTimeValueArray.length > 0) {\n      let index = dateTimeValueArray.findIndex(\n        (x) => x.fieldValue === tempObj.fieldValue && x.name === tempObj.name\n      );\n      if (index === -1) {\n        dateTimeValueArray.push({\n          name: tempObj.name,\n          dataType: tempObj.dataType,\n          enabled: tempObj.enabled,\n          fieldValue: tempObj.fieldValue,\n          value: tempObj.value,\n        });\n      } else {\n        dateTimeValueArray[index].value = tempObj.value;\n      }\n    } else {\n      dateTimeValueArray.push({\n        name: tempObj.name,\n        dataType: tempObj.dataType,\n        enabled: tempObj.enabled,\n        fieldValue: tempObj.fieldValue,\n        value: tempObj.value,\n      });\n    }\n    setDateTimesValueArray(dateTimeValueArray);\n    dateTimeValueArray = [];\n    let dateTimeArray = [...dateTimesArray];\n    if (dateTimeArray.length > 0) {\n      dateTimeArray.forEach((item) => {\n        item.field.forEach((fieldArray) => {\n          if (fieldArray.column === fieldName) {\n            fieldArray.value = value;\n          }\n        });\n      });\n      setDateTimesArray(dateTimeArray);\n    }\n    dateTimeArray = [];\n  };\n  /**\n   * Method To set both from date and to date as todays date\n   */\n  const addToday = () => {\n    let todayDate = new Date();\n    let dated = dateFormat(todayDate, \"yyyy-mm-dd\");\n    let dateTimeArray = [...dateTimesArray];\n    let dateTimeValueArray = [...dateTimesValueArray];\n    if (dateTimeArray.length > 0) {\n      dateTimeArray.forEach((item) => {\n        item.field.forEach((fieldArray) => {\n          fieldArray.value = dated;\n          if (dateTimeValueArray.length > 1) {\n            dateTimeValueArray.forEach((item) => {\n              if (item.fieldValue === fieldArray.column) {\n                item.value = dated;\n              }\n            });\n          } else {\n            dateTimeValueArray.push({\n              name: item.name,\n              dataType: item.dataType,\n              enabled: item.enabled,\n              fieldValue: fieldArray.column,\n              value: dated,\n            });\n          }\n        });\n      });\n      setDateTimesArray(dateTimeArray);\n      setDateTimesValueArray(dateTimeValueArray);\n    }\n  };\n  /**\n   * Method To set both from date and to date as tomorrow's date\n   */\n  const addTomorrow = () => {\n    let fromDate = new Date();\n    let toDate = new Date();\n    fromDate.setDate(fromDate.getDate() + 1);\n    toDate.setDate(toDate.getDate() + 1);\n    fromDate = dateFormat(fromDate, \"yyyy-mm-dd\");\n    toDate = dateFormat(toDate, \"yyyy-mm-dd\");\n    let dateTimeArray = [...dateTimesArray];\n    let dateTimeValueArray = [...dateTimesValueArray];\n    if (dateTimeArray.length > 0) {\n      dateTimeArray.forEach((item) => {\n        item.field[0].value = fromDate;\n        item.field[1].value = toDate;\n        item.field.forEach((fieldArray) => {\n          if (dateTimeValueArray.length > 1) {\n            dateTimeValueArray.forEach((arr) => {\n              if (arr.fieldValue === fieldArray.column) {\n                arr.value = fieldArray.value;\n              }\n            });\n          } else {\n            dateTimeValueArray.push({\n              name: item.name,\n              dataType: item.dataType,\n              enabled: item.enabled,\n              fieldValue: fieldArray.column,\n              value: fieldArray.value,\n            });\n          }\n        });\n      });\n\n      setDateTimesArray(dateTimeArray);\n      setDateTimesValueArray(dateTimeValueArray);\n    }\n  };\n  /**\n   * Method To set the date range as this month\n   */\n  const addThisMonth = () => {\n    let today = new Date();\n    let fromDate = new Date(today.getFullYear(), today.getMonth(), 1);\n    let toDate = new Date(today.getFullYear(), today.getMonth() + 1, 0);\n    fromDate = dateFormat(fromDate, \"yyyy-mm-dd\");\n    toDate = dateFormat(toDate, \"yyyy-mm-dd\");\n    let dateTimeArray = [...dateTimesArray];\n    let dateTimeValueArray = [...dateTimesValueArray];\n    if (dateTimeArray.length > 0) {\n      dateTimeArray.forEach((item) => {\n        item.field[0].value = fromDate;\n        item.field[1].value = toDate;\n        item.field.forEach((fieldArray) => {\n          if (dateTimeValueArray.length > 1) {\n            dateTimeValueArray.forEach((arr) => {\n              if (arr.fieldValue === fieldArray.column) {\n                arr.value = fieldArray.value;\n              }\n            });\n          } else {\n            dateTimeValueArray.push({\n              name: item.name,\n              dataType: item.dataType,\n              enabled: item.enabled,\n              fieldValue: fieldArray.column,\n              value: fieldArray.value,\n            });\n          }\n        });\n      });\n\n      setDateTimesArray(dateTimeArray);\n      setDateTimesValueArray(dateTimeValueArray);\n    }\n  };\n  /**\n   * Method To set the date range as next 14 days\n   */\n  const addForteenDays = () => {\n    let fromDate = new Date();\n    let toDate = new Date();\n    fromDate.setDate(fromDate.getDate() + 1);\n    toDate.setDate(toDate.getDate() + 14);\n    fromDate = dateFormat(fromDate, \"yyyy-mm-dd\");\n    toDate = dateFormat(toDate, \"yyyy-mm-dd\");\n    let dateTimeArray = [...dateTimesArray];\n    let dateTimeValueArray = [...dateTimesValueArray];\n    if (dateTimeArray.length > 0) {\n      dateTimeArray.forEach((item) => {\n        item.field[0].value = fromDate;\n        item.field[1].value = toDate;\n        item.field.forEach((fieldArray) => {\n          if (dateTimeValueArray.length > 1) {\n            dateTimeValueArray.forEach((arr) => {\n              if (arr.fieldValue === fieldArray.column) {\n                arr.value = fieldArray.value;\n              }\n            });\n          } else {\n            dateTimeValueArray.push({\n              name: item.name,\n              dataType: item.dataType,\n              enabled: item.enabled,\n              fieldValue: fieldArray.column,\n              value: fieldArray.value,\n            });\n          }\n        });\n      });\n\n      setDateTimesArray(dateTimeArray);\n      setDateTimesValueArray(dateTimeValueArray);\n    }\n  };\n  /**\n   * Method To set the date range as next 7 days\n   */\n  const addSevenDays = () => {\n    let fromDate = new Date();\n    let toDate = new Date();\n    fromDate.setDate(fromDate.getDate() + 1);\n    toDate.setDate(toDate.getDate() + 7);\n    fromDate = dateFormat(fromDate, \"yyyy-mm-dd\");\n    toDate = dateFormat(toDate, \"yyyy-mm-dd\");\n    let dateTimeArray = [...dateTimesArray];\n    let dateTimeValueArray = [...dateTimesValueArray];\n    if (dateTimeArray.length > 0) {\n      dateTimeArray.forEach((item) => {\n        item.field[0].value = fromDate;\n        item.field[1].value = toDate;\n        item.field.forEach((fieldArray) => {\n          if (dateTimeValueArray.length > 1) {\n            dateTimeValueArray.forEach((arr) => {\n              if (arr.fieldValue === fieldArray.column) {\n                arr.value = fieldArray.value;\n              }\n            });\n          } else {\n            dateTimeValueArray.push({\n              name: item.name,\n              dataType: item.dataType,\n              enabled: item.enabled,\n              fieldValue: fieldArray.column,\n              value: fieldArray.value,\n            });\n          }\n        });\n      });\n\n      setDateTimesArray(dateTimeArray);\n      setDateTimesValueArray(dateTimeValueArray);\n    }\n  };\n  /**\n   * Method To set the date range as current week Sunday to Saturday\n   */\n  const addThisWeek = () => {\n    let today = new Date();\n    let from = today.getDate() - today.getDay();\n    let to = from + 6;\n    let fromDate = new Date(today.setDate(from)).toUTCString();\n    let toDate = new Date(today.setDate(to)).toUTCString();\n    fromDate = dateFormat(fromDate, \"yyyy-mm-dd\");\n    toDate = dateFormat(toDate, \"yyyy-mm-dd\");\n    let dateTimeArray = [...dateTimesArray];\n    let dateTimeValueArray = [...dateTimesValueArray];\n    if (dateTimeArray.length > 0) {\n      dateTimeArray.forEach((item) => {\n        item.field[0].value = fromDate;\n        item.field[1].value = toDate;\n        item.field.forEach((fieldArray) => {\n          if (dateTimeValueArray.length > 1) {\n            dateTimeValueArray.forEach((arr) => {\n              if (arr.fieldValue === fieldArray.column) {\n                arr.value = fieldArray.value;\n              }\n            });\n          } else {\n            dateTimeValueArray.push({\n              name: item.name,\n              dataType: item.dataType,\n              enabled: item.enabled,\n              fieldValue: fieldArray.column,\n              value: fieldArray.value,\n            });\n          }\n        });\n      });\n\n      setDateTimesArray(dateTimeArray);\n      setDateTimesValueArray(dateTimeValueArray);\n    }\n  };\n  /**\n   * Method To set the date range as next 30 days\n   */\n  const addThirtyDays = () => {\n    let from = new Date();\n    let to = new Date();\n    from.setDate(from.getDate() + 1);\n    to.setDate(to.getDate() + 30);\n    let fromDate = dateFormat(from, \"yyyy-mm-dd\");\n    let toDate = dateFormat(to, \"yyyy-mm-dd\");\n    let dateTimeArray = [...dateTimesArray];\n    let dateTimeValueArray = [...dateTimesValueArray];\n    if (dateTimeArray.length > 0) {\n      dateTimeArray.forEach((item) => {\n        item.field[0].value = fromDate;\n        item.field[1].value = toDate;\n        item.field.forEach((fieldArray) => {\n          if (dateTimeValueArray.length > 1) {\n            dateTimeValueArray.forEach((arr) => {\n              if (arr.fieldValue === fieldArray.column) {\n                arr.value = fieldArray.value;\n              }\n            });\n          } else {\n            dateTimeValueArray.push({\n              name: item.name,\n              dataType: item.dataType,\n              enabled: item.enabled,\n              fieldValue: fieldArray.column,\n              value: fieldArray.value,\n            });\n          }\n        });\n      });\n\n      setDateTimesArray(dateTimeArray);\n      setDateTimesValueArray(dateTimeValueArray);\n    }\n  };\n  /**\n   * Method To set the date range as next n days\n   * @param {*} value is the no: of days after today\n   */\n  const nextDayChange = (value) => {\n    if (value === \"\") {\n      value = 1;\n    }\n    let fromDate = new Date();\n    let toDate = new Date();\n    if (value !== \"0\") {\n      fromDate.setDate(fromDate.getDate() + 1);\n      toDate.setDate(toDate.getDate() + parseInt(value));\n    }\n    fromDate = dateFormat(fromDate, \"yyyy-mm-dd\");\n    toDate = dateFormat(toDate, \"yyyy-mm-dd\");\n    let dateTimeArray = [...dateTimesArray];\n    let dateTimeValueArray = [...dateTimesValueArray];\n    if (dateTimeArray.length > 0) {\n      dateTimeArray.forEach((item) => {\n        item.field[0].value = fromDate;\n        item.field[1].value = toDate;\n        item.field.forEach((fieldArray) => {\n          if (dateTimeValueArray.length > 1) {\n            dateTimeValueArray.forEach((arr) => {\n              if (arr.fieldValue === fieldArray.column) {\n                arr.value = fieldArray.value;\n              }\n            });\n          } else {\n            dateTimeValueArray.push({\n              name: item.name,\n              dataType: item.dataType,\n              enabled: item.enabled,\n              fieldValue: fieldArray.column,\n              value: fieldArray.value,\n            });\n          }\n        });\n      });\n\n      setDateTimesArray(dateTimeArray);\n      setDateTimesValueArray(dateTimeValueArray);\n    }\n  };\n  /**\n   * Method To set the date range as last n days\n   * @param {*} value is the no: of days before today\n   */\n  const lastDayChange = (value) => {\n    if (value === \"\") {\n      value = 1;\n    }\n    let fromDate = new Date();\n    let toDate = new Date();\n    if (value !== \"0\") {\n      fromDate.setDate(fromDate.getDate() - parseInt(value));\n      toDate.setDate(toDate.getDate() - 1);\n    }\n    fromDate = dateFormat(fromDate, \"yyyy-mm-dd\");\n    toDate = dateFormat(toDate, \"yyyy-mm-dd\");\n    let dateTimeArray = [...dateTimesArray];\n    let dateTimeValueArray = [...dateTimesValueArray];\n    if (dateTimeArray.length > 0) {\n      dateTimeArray.forEach((item) => {\n        item.field[0].value = fromDate;\n        item.field[1].value = toDate;\n        item.field.forEach((fieldArray) => {\n          if (dateTimeValueArray.length > 1) {\n            dateTimeValueArray.forEach((arr) => {\n              if (arr.fieldValue === fieldArray.column) {\n                arr.value = fieldArray.value;\n              }\n            });\n          } else {\n            dateTimeValueArray.push({\n              name: item.name,\n              dataType: item.dataType,\n              enabled: item.enabled,\n              fieldValue: fieldArray.column,\n              value: fieldArray.value,\n            });\n          }\n        });\n      });\n\n      setDateTimesArray(dateTimeArray);\n      setDateTimesValueArray(dateTimeValueArray);\n    }\n  };\n  /**\n   * Method To toggle the switch to enable and disable the input fields\n   * @param {*} item is the specific filter element object\n   */\n  const handleCondionalEnabled = (item) => {\n    let conditionArray = [...conditionsArray];\n    let index = conditionArray.findIndex(\n      (x) => x.name === item.name && x.condition === item.condition\n    );\n    if (index !== -1) {\n      conditionArray[index].enabled = !conditionArray[index].enabled;\n    }\n    setConditionsArray(conditionArray);\n    let conditionValueArray = [];\n    conditionValueArray = [...conditionsValueArray];\n    if (conditionValueArray.length > 0) {\n      let index = conditionValueArray.findIndex(\n        (x) => x.name === item.name && x.dataType === item.dataType\n      );\n      conditionValueArray[index].enabled = !conditionValueArray[index].enabled;\n    }\n    setConditionsValueArray(conditionValueArray);\n    conditionValueArray = [];\n  };\n  /**\n   * Method To create arrays containing values upon change trigger from respective input fields\n   * @param {*} item is the specific filter element object\n   * @param {*} value is value of the input field\n   */\n  const createConditionalArray = (item, value) => {\n    let valueArray = [];\n    item.condition.forEach((it) => {\n      valueArray.push(it.value);\n    });\n    let conditionValueArray = [...conditionsValueArray];\n    if (conditionValueArray.length > 0) {\n      let index = conditionValueArray.findIndex(\n        (x) => x.name === item.name && x.dataType === item.dataType\n      );\n      if (index !== -1) {\n        if (valueArray.includes(value)) {\n          conditionValueArray[index].condition = value;\n        } else {\n          conditionValueArray[index].amount = value;\n        }\n      }\n    } else {\n      if (valueArray.includes(value)) {\n        conditionValueArray.push({\n          name: item.name,\n          dataType: item.dataType,\n          enabled: item.enabled,\n          condition: value,\n        });\n      } else {\n        conditionValueArray.push({\n          name: item.name,\n          dataType: item.dataType,\n          enabled: item.enabled,\n          condition: item.condition[0].value,\n          amount: value,\n        });\n      }\n    }\n    setConditionsValueArray(conditionValueArray);\n    conditionValueArray = [];\n  };\n  /**\n   * Method To delete the specific element from filter array upon clicking close\n   * @param {*} item is the specific filter element object\n   */\n  const deleteConditionalElement = (item) => {\n    let conditionArray = [...conditionsArray];\n    let index = conditionArray.findIndex(\n      (x) => x.name === item.name && x.dataType === item.dataType\n    );\n    if (index !== -1) {\n      conditionArray.splice(index, 1);\n    } else {\n      conditionArray = [];\n    }\n    setConditionsArray(conditionArray);\n  };\n  /**\n   * Method To create arrays containing values upon change trigger from respective input fields\n   * @param {*} item is the specific filter element object\n   * @param {*} value is value of the input field\n   */\n  const createTextComponentsArray = (item, value) => {\n    let textComponentValueArray = [...textComponentsValueArray];\n    if (textComponentValueArray.length > 0) {\n      let index = textComponentValueArray.findIndex(\n        (x) => x.name === item.name && x.dataType === item.dataType\n      );\n      if (index === -1) {\n        textComponentValueArray.push({\n          name: item.name,\n          dataType: item.dataType,\n          enabled: item.enabled,\n          value: value,\n        });\n      } else {\n        textComponentValueArray[index].value = value;\n      }\n    } else {\n      textComponentValueArray.push({\n        name: item.name,\n        dataType: item.dataType,\n        enabled: item.enabled,\n        value: value,\n      });\n    }\n    setTextComponentsValueArray(textComponentValueArray);\n    textComponentValueArray = [];\n  };\n  /**\n   * Method To toggle the switch to enable and disable the input fields\n   * @param {*} item is the specific filter element object\n   */\n  const handleTextComponentEnabled = (item) => {\n    let textComponentArray = [...textComponentsArray];\n    let index = textComponentArray.findIndex(\n      (x) => x.name === item.name && x.dataType === item.dataType\n    );\n    if (index !== -1) {\n      textComponentArray[index].enabled = !textComponentArray[index].enabled;\n    }\n    setTextComponentsArray(textComponentArray);\n    textComponentArray = [];\n    let textComponentValueArray = [...textComponentsValueArray];\n    if (textComponentValueArray.length > 0) {\n      let index = textComponentValueArray.findIndex(\n        (x) => x.name === item.name && x.dataType === item.dataType\n      );\n      if (index !== -1) {\n        textComponentValueArray[index].enabled = !textComponentValueArray[index]\n          .enabled;\n      }\n    }\n    setTextComponentsValueArray(textComponentValueArray);\n    textComponentValueArray = [];\n  };\n  /**\n   * Method To delete the specific element from filter array upon clicking close\n   * @param {*} item is the specific filter element object\n   */\n  const deleteTextComponentElement = (item) => {\n    let textComponentArray = [...textComponentsArray];\n    let index = textComponentArray.findIndex(\n      (x) => x.name === item.name && x.dataType === item.dataType\n    );\n    if (index !== -1) {\n      textComponentArray.splice(index, 1);\n    } else {\n      textComponentArray = [];\n    }\n    setTextComponentsArray(textComponentArray);\n  };\n  /**\n   * Method To map the applied filters to drawer on clicking the chips\n   * @param {*} item is the specific filter element object\n   */\n  const addAppliedFilters = (item) => {\n    let arr = [];\n    FilterData.filter.forEach((fil) => {\n      if (fil.types.length) {\n        let index = fil.types.findIndex(\n          (x) => x.name === item.type && fil.name === item.name\n        );\n        if (index !== -1) {\n          arr = fil.types[index].options;\n        }\n      }\n    });\n    if (item.dataType === \"AutoComplete\") {\n      let autoCompleteArray = [...autoCompletesArray];\n      if (autoCompleteArray.length > 0) {\n        let index = autoCompleteArray.findIndex(\n          (x) => x.name === item.name && item.type === x.type\n        );\n        if (index === -1) {\n          autoCompleteArray.push({\n            name: item.name,\n            dataType: item.dataType,\n            type: item.type,\n            enabled: item.enabled,\n            value: item.value,\n            objectArray: arr,\n          });\n        }\n      } else {\n        autoCompleteArray.push({\n          name: item.name,\n          dataType: item.dataType,\n          type: item.type,\n          enabled: item.enabled,\n          value: item.value,\n          objectArray: arr,\n        });\n      }\n      setAutoCompletesArray(autoCompleteArray);\n    } else if (item.dataType === \"DateTime\") {\n      let dateTimeArray = [...dateTimesArray];\n      if (dateTimeArray.length === 0) {\n        dateTimeArray.push({\n          name: item.name,\n          dataType: item.dataType,\n          enabled: item.enabled,\n          field: [],\n        });\n        dateTimesValueArray.forEach((item) => {\n          if (item.fieldValue) {\n            dateTimeArray.forEach((dt) => {\n              dt.field.push({\n                column: item.fieldValue,\n                value: item.value,\n              });\n            });\n          }\n        });\n      }\n      setDateTimesArray(dateTimeArray);\n    } else if (item.dataType === \"Numeric\") {\n      let conditionArray = [...conditionsArray];\n      if (conditionArray.length === 0) {\n        conditionArray.push({\n          name: item.name,\n          dataType: item.dataType,\n          enabled: item.enabled,\n          condition: [],\n          amount: item.amount,\n          value: item.condition,\n        });\n        FilterData.filter.forEach((data) => {\n          if (data.dataType === \"Numeric\") {\n            data.condition.forEach((values) => {\n              conditionArray.forEach((item) => {\n                item.condition.push({ value: values.value });\n              });\n            });\n          }\n        });\n      }\n      setConditionsArray(conditionArray);\n    } else {\n      let textComponentArray = [...textComponentsArray];\n      if (textComponentArray.length > 0) {\n        let index = textComponentArray.findIndex((x) => x.name === item.name);\n        if (index === -1) {\n          textComponentArray.push({\n            name: item.name,\n            dataType: item.dataType,\n            enabled: item.enabled,\n            value: item.value,\n          });\n        }\n      } else {\n        textComponentArray.push({\n          name: item.name,\n          dataType: item.dataType,\n          enabled: item.enabled,\n          value: item.value,\n        });\n      }\n      setTextComponentsArray(textComponentArray);\n    }\n    setApplyFilter(true);\n  };\n  /**\n   * Method To map the saved filters to drawer on clicking the specific saved filter name\n   * @param {*} item is the specific filter element object\n   */\n  const addSavedFilters = (item) => {\n    let autoComplete = [];\n    let condition = [];\n    let text = [];\n    let tempArr = [];\n    let savedFilters = [];\n    for (let objects in item) {\n      item[objects].forEach((arrays) => {\n        for (let array in arrays) {\n          tempArr.push(arrays[array]);\n        }\n      });\n    }\n    let arr = [];\n    tempArr.forEach((arrays) => {\n      arrays.forEach((array) => {\n        savedFilters.push(array);\n      });\n    });\n    savedFilters.forEach((items) => {\n      FilterData.filter.forEach((fil) => {\n        if (fil.types.length) {\n          let index = fil.types.findIndex(\n            (x) => x.name === items.type && fil.name === items.name\n          );\n          if (index !== -1) {\n            arr = fil.types[index].options;\n          }\n        }\n      });\n      if (items.dataType === \"AutoComplete\") {\n        let autoCompleteArray = [...autoComplete];\n        if (autoCompleteArray.length > 0) {\n          let index = autoCompleteArray.findIndex(\n            (x) => x.name === items.name && items.type === x.type\n          );\n          if (index === -1) {\n            autoCompleteArray.push({\n              name: items.name,\n              dataType: items.dataType,\n              type: items.type,\n              enabled: items.enabled,\n              value: items.value,\n              objectArray: arr,\n            });\n          }\n        } else {\n          autoCompleteArray.push({\n            name: items.name,\n            dataType: items.dataType,\n            type: items.type,\n            enabled: items.enabled,\n            value: items.value,\n            objectArray: arr,\n          });\n        }\n        autoComplete = autoCompleteArray;\n      }\n    });\n    setAutoCompletesArray(autoComplete);\n    let saveTempDateTimeArray = [];\n    savedFilters.forEach((items) => {\n      if (items.dataType === \"DateTime\") {\n        if (saveTempDateTimeArray.length === 0) {\n          saveTempDateTimeArray.push({\n            name: items.name,\n            dataType: items.dataType,\n            enabled: items.enabled,\n            field: [],\n          });\n        }\n      }\n    });\n    savedFilters.forEach((saved) => {\n      if (saved.dataType === \"DateTime\") {\n        if (saveTempDateTimeArray.length > 0) {\n          saveTempDateTimeArray.forEach((filter) => {\n            filter.field.push({\n              column: saved.fieldValue,\n              value: saved.value,\n            });\n          });\n        }\n      }\n    });\n    setDateTimesArray(saveTempDateTimeArray);\n    savedFilters.forEach((items) => {\n      if (items.dataType === \"Numeric\") {\n        let conditionArray = [...condition];\n        if (conditionArray.length === 0) {\n          conditionArray.push({\n            name: items.name,\n            dataType: items.dataType,\n            enabled: items.enabled,\n            condition: [],\n            amount: items.amount,\n            value: items.condition,\n          });\n          FilterData.filter.forEach((data) => {\n            if (data.dataType === \"Numeric\") {\n              data.condition.forEach((values) => {\n                conditionArray.forEach((items) => {\n                  items.condition.push({ value: values.value });\n                });\n              });\n            }\n          });\n        }\n        condition = conditionArray;\n      }\n    });\n    setConditionsArray(condition);\n    savedFilters.forEach((items) => {\n      if (items.dataType === \"Text\") {\n        let textComponentArray = [...text];\n        if (textComponentArray.length > 0) {\n          let index = textComponentArray.findIndex(\n            (x) => x.name === items.name\n          );\n          if (index === -1) {\n            textComponentArray.push({\n              name: items.name,\n              dataType: items.dataType,\n              enabled: items.enabled,\n              value: items.value,\n            });\n          }\n        } else {\n          textComponentArray.push({\n            name: items.name,\n            dataType: items.dataType,\n            enabled: items.enabled,\n            value: items.value,\n          });\n        }\n        text = textComponentArray;\n      }\n    });\n    setTextComponentsArray(text);\n    setApplyFilter(true);\n  };\n  /**\n   * Method To reset the right drawer\n   */\n  const resetDrawer = () => {\n    deleteAutoCompleteElement({});\n    deleteConditionalElement({});\n    deleteDateTimeElement({});\n    deleteTextComponentElement({});\n    setApplyFilterChip({});\n  };\n  const { ref, showApplyFilter, setApplyFilter } = useComponentVisible(true);\n  return (\n    <div ref={ref}>\n      {showApplyFilter && (\n        <div className=\"filter--grid\" ref={ref}>\n          <div className=\"filter__wrap\">\n            <div className=\"filter__list\">\n              <LeftDrawer\n                filterData={FilterData}\n                fromLeftToRight={fromLeftToRight}\n              />\n            </div>\n            <div className=\"filter__inputwrap\">\n              <RightDrawer\n                applyFilter={applyFilter}\n                saveFilter={saveFilter}\n                createAutoCompleteArray={createAutoCompleteArray}\n                handleAutoCompleteEnabled={handleAutoCompleteEnabled}\n                deleteAutoCompleteElement={deleteAutoCompleteElement}\n                autoCompleteArray={autoCompletesArray}\n                dateTimesArray={dateTimesArray}\n                deleteDateTimeElement={deleteDateTimeElement}\n                handleDateTimeEnabled={handleDateTimeEnabled}\n                createDateTimeArray={createDateTimeArray}\n                addToday={addToday}\n                addTomorrow={addTomorrow}\n                addThisMonth={addThisMonth}\n                addForteenDays={addForteenDays}\n                addSevenDays={addSevenDays}\n                addThisWeek={addThisWeek}\n                addThirtyDays={addThirtyDays}\n                lastDayChange={lastDayChange}\n                nextDayChange={nextDayChange}\n                conditionsArray={conditionsArray}\n                handleCondionalEnabled={handleCondionalEnabled}\n                createConditionalArray={createConditionalArray}\n                deleteConditionalElement={deleteConditionalElement}\n                textComponentsArray={textComponentsArray}\n                deleteTextComponentElement={deleteTextComponentElement}\n                createTextComponentsArray={createTextComponentsArray}\n                handleTextComponentEnabled={handleTextComponentEnabled}\n                closeDrawer={closeDrawer}\n                resetDrawer={resetDrawer}\n                filterCount={filterCount}\n              />\n            </div>\n          </div>\n        </div>\n      )}\n\n      <MainFilterPanel\n        showDrawer={showDrawer}\n        applyFilterChip={applyFilterChip}\n        addAppliedFilters={addAppliedFilters}\n        addSavedFilters={addSavedFilters}\n      />\n    </div>\n  );\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}