{"version":3,"file":"index.modern.js","sources":["../src/Utilities/TagsContext.js","../src/Utilities/TagUtilities.js","../src/Functions/CellDisplayAndEditTag.js","../src/Functions/CellDisplayAndEdit.js","../src/Utilities/ColumnsUtilities.js","../src/Functions/AdditionalColumnTag.js","../src/Functions/RowSelector.js","../src/Functions/DefaultColumnFilter.js","../src/Functions/GlobalFilter.js","../src/Images/RowPin.png","../src/Functions/RowOptions.js","../src/Functions/RowEditTag.js","../src/Functions/RowEditOverlay.js","../src/Functions/RowDeleteOverLay.js","../src/Overlays/managecolumns/ItemTypes.js","../src/Overlays/managecolumns/columnItem.js","../src/Overlays/managecolumns/columnsList.js","../src/Overlays/managecolumns/index.js","../src/Overlays/groupsort/ItemTypes.js","../src/Overlays/groupsort/sortingItem.js","../src/Overlays/groupsort/sortingList.js","../src/Overlays/groupsort/index.js","../src/Overlays/exportdata/index.js","../src/Customgrid.js","../src/index.js"],"sourcesContent":["import { createContext } from \"react\";\r\n\r\nexport const CellDisplayAndEditContext = createContext({});\r\n\r\nexport const RowEditContext = createContext({});\r\n\r\nexport const AdditionalColumnContext = createContext({});\r\n","export const checkInnerCells = (column, cellKey) => {\r\n    if (column) {\r\n        const { innerCells } = column;\r\n        if (innerCells) {\r\n            const innerCellData = innerCells.find((cell) => {\r\n                return cell.accessor === cellKey;\r\n            });\r\n            if (innerCellData) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n};\r\n","import React, { useContext, Fragment } from \"react\";\r\nimport { CellDisplayAndEditContext } from \"../Utilities/TagsContext\";\r\nimport { checkInnerCells } from \"../Utilities/TagUtilities\";\r\n\r\nconst CellDisplayAndEditTag = (props) => {\r\n    const contextVallues = useContext(CellDisplayAndEditContext);\r\n    const { column, columns } = contextVallues;\r\n    const { cellKey, columnKey } = props;\r\n\r\n    if (columns && columnKey) {\r\n        const selectedColumn = columns.find(\r\n            (col) => col.accessor === columnKey\r\n        );\r\n        if (checkInnerCells(selectedColumn, cellKey)) {\r\n            return <Fragment> {props.children}</Fragment>;\r\n        }\r\n    } else if (cellKey) {\r\n        if (checkInnerCells(column, cellKey)) {\r\n            return <Fragment> {props.children}</Fragment>;\r\n        }\r\n    }\r\n    return null;\r\n};\r\n\r\nexport default CellDisplayAndEditTag;\r\n","import React, { memo, useState } from \"react\";\r\nimport ClickAwayListener from \"react-click-away-listener\";\r\nimport CellDisplayAndEditTag from \"./CellDisplayAndEditTag\";\r\nimport { CellDisplayAndEditContext } from \"../Utilities/TagsContext\";\r\n\r\nconst CellDisplayAndEdit = memo(({ row, columns, updateRowInGrid }) => {\r\n    const { column } = row;\r\n    if (column && row.row) {\r\n        const [isEditOpen, setIsEditOpen] = useState(false);\r\n        const [editedRowValue, setEditedRowValue] = useState(null);\r\n\r\n        const { id } = column;\r\n\r\n        const closeEdit = () => {\r\n            setIsEditOpen(false);\r\n        };\r\n\r\n        const openEdit = () => {\r\n            setIsEditOpen(true);\r\n        };\r\n\r\n        const getUpdatedRowValue = (value) => {\r\n            if (value) {\r\n                setEditedRowValue(value);\r\n            }\r\n        };\r\n\r\n        const saveEdit = () => {\r\n            if (editedRowValue) {\r\n                updateRowInGrid(row.row.original, editedRowValue);\r\n            }\r\n            closeEdit();\r\n        };\r\n\r\n        const originalRowValue = { ...row.row.original };\r\n        const cellDisplayContent = column.displayCell(\r\n            originalRowValue,\r\n            CellDisplayAndEditTag\r\n        );\r\n        const cellEditContent = column.editCell\r\n            ? column.editCell(\r\n                  originalRowValue,\r\n                  CellDisplayAndEditTag,\r\n                  getUpdatedRowValue\r\n              )\r\n            : null;\r\n        return (\r\n            <CellDisplayAndEditContext.Provider\r\n                value={{ columns: columns, column: column }}\r\n            >\r\n                <ClickAwayListener onClickAway={closeEdit}>\r\n                    <div\r\n                        className={`table-cell--content table-cell--content__${id}`}\r\n                    >\r\n                        {cellEditContent ? (\r\n                            <div className=\"cell-edit\" onClick={openEdit}>\r\n                                <i\r\n                                    className=\"fa fa-pencil\"\r\n                                    aria-hidden=\"true\"\r\n                                ></i>\r\n                            </div>\r\n                        ) : null}\r\n                        {cellDisplayContent}\r\n                        {isEditOpen ? (\r\n                            <div className=\"table-cell--content-edit\">\r\n                                {cellEditContent}\r\n                                <button className=\"ok\" onClick={saveEdit} />\r\n                                <button\r\n                                    className=\"cancel\"\r\n                                    onClick={closeEdit}\r\n                                />\r\n                            </div>\r\n                        ) : null}\r\n                    </div>\r\n                </ClickAwayListener>\r\n            </CellDisplayAndEditContext.Provider>\r\n        );\r\n    }\r\n});\r\n\r\nexport default CellDisplayAndEdit;\r\n","import React from \"react\";\r\nimport CellDisplayAndEdit from \"../Functions/CellDisplayAndEdit\";\r\n\r\nexport const extractColumns = (\r\n    columns,\r\n    searchColumn,\r\n    isDesktop,\r\n    updateRowInGrid\r\n) => {\r\n    //Remove iPad only columns from desktop and vice-versa\r\n    const filteredColumns = columns.filter((column) => {\r\n        return isDesktop ? !column.onlyInTablet : !column.onlyInDesktop;\r\n    });\r\n\r\n    let modifiedColumns = [];\r\n    //Loop through the columns configuration and create required column structure\r\n    filteredColumns.forEach((column, index) => {\r\n        const { innerCells, accessor, sortValue } = column;\r\n        const isInnerCellsPresent = innerCells && innerCells.length > 0;\r\n\r\n        //Add column Id\r\n        column.columnId = `column_${index}`;\r\n\r\n        //Configure Cell function (which is used by react-table component), based on the user defined function displayCell\r\n        if (!column.Cell && column.displayCell) {\r\n            column.Cell = (row) => {\r\n                return (\r\n                    <CellDisplayAndEdit\r\n                        row={row}\r\n                        columns={columns}\r\n                        updateRowInGrid={updateRowInGrid}\r\n                    />\r\n                );\r\n            };\r\n        }\r\n\r\n        //Add logic to sort column if sort is not disabled\r\n        if (!column.disableSortBy) {\r\n            if (isInnerCellsPresent) {\r\n                //If there are inner cells and a sort value specified, do sort on that value\r\n                if (sortValue) {\r\n                    column.sortType = (rowA, rowB) => {\r\n                        return rowA.original[accessor][sortValue] >\r\n                            rowB.original[accessor][sortValue]\r\n                            ? -1\r\n                            : 1;\r\n                    };\r\n                } else {\r\n                    column.disableSortBy = true;\r\n                }\r\n            } else if (!innerCells) {\r\n                //If no inner cells are there, just do sort on column value\r\n                column.sortType = (rowA, rowB) => {\r\n                    return rowA.original[accessor] > rowB.original[accessor]\r\n                        ? -1\r\n                        : 1;\r\n                };\r\n            }\r\n        }\r\n\r\n        //Add logic to filter column if column filter is not disabled\r\n        if (!column.disableFilters) {\r\n            column.filter = (rows, id, filterValue) => {\r\n                const searchText = filterValue ? filterValue.toLowerCase() : \"\";\r\n                return rows.filter((row) => {\r\n                    //Find original data value of each row\r\n                    const { original } = row;\r\n                    //Do search for the column\r\n                    return searchColumn(column, original, searchText);\r\n                });\r\n            };\r\n        }\r\n\r\n        modifiedColumns.push(column);\r\n    });\r\n    return modifiedColumns;\r\n};\r\n\r\nexport const extractAdditionalColumn = (additionalColumn, isDesktop) => {\r\n    const { innerCells } = additionalColumn;\r\n    const isInnerCellsPresent = innerCells && innerCells.length > 0;\r\n\r\n    //Add column Id\r\n    additionalColumn.columnId = `ExpandColumn`;\r\n\r\n    //Remove iPad only columns from desktop and vice-versa\r\n    if (isInnerCellsPresent) {\r\n        additionalColumn.innerCells = innerCells.filter((cell) => {\r\n            return isDesktop ? !cell.onlyInTablet : !cell.onlyInDesktop;\r\n        });\r\n    }\r\n    return additionalColumn;\r\n};\r\n","import React, { useContext, Fragment } from \"react\";\r\nimport { AdditionalColumnContext } from \"../Utilities/TagsContext\";\r\nimport { checkInnerCells } from \"../Utilities/TagUtilities\";\r\n\r\nconst AdditionalColumnTag = (props) => {\r\n    console.log(\"Inside additional tag\");\r\n    const contextVallues = useContext(AdditionalColumnContext);\r\n    const { additionalColumn } = contextVallues;\r\n    const { cellKey } = props;\r\n\r\n    if (additionalColumn && cellKey) {\r\n        if (checkInnerCells(additionalColumn, cellKey)) {\r\n            return <Fragment> {props.children}</Fragment>;\r\n        }\r\n    }\r\n    return null;\r\n};\r\n\r\nexport default AdditionalColumnTag;\r\n","import React, { forwardRef, useRef, useEffect, useState, memo } from \"react\";\r\n\r\nconst RowSelector = memo(\r\n    forwardRef(({ indeterminate, ...rest }, ref) => {\r\n        const [checkValue, setCheckValue] = useState(indeterminate);\r\n        const defaultRef = useRef();\r\n        const resolvedRef = ref || defaultRef;\r\n        const onChange = () => {\r\n            setCheckValue(!indeterminate);\r\n        };\r\n        useEffect(() => {\r\n            resolvedRef.current.indeterminate = indeterminate;\r\n        }, [resolvedRef, indeterminate]);\r\n        return (\r\n            <div className=\"check-wrap\">\r\n                <input\r\n                    type=\"checkbox\"\r\n                    checked={checkValue}\r\n                    onChange={onChange}\r\n                    ref={resolvedRef}\r\n                    {...rest}\r\n                />\r\n            </div>\r\n        );\r\n    })\r\n);\r\n\r\nexport default RowSelector;\r\n","import React, { memo } from \"react\";\r\n\r\nconst DefaultColumnFilter = memo(({ column: { filterValue, setFilter } }) => {\r\n    return (\r\n        <input\r\n            className=\"txt\"\r\n            value={filterValue || \"\"}\r\n            onChange={(e) => {\r\n                setFilter(e.target.value || undefined);\r\n            }}\r\n            placeholder=\"Search\"\r\n        />\r\n    );\r\n});\r\n\r\nexport default DefaultColumnFilter;\r\n","import React, { memo, useState } from \"react\";\r\nimport { useAsyncDebounce } from \"react-table\";\r\nimport IconSearch from \"../Images/icon-search.svg\";\r\n\r\nconst GlobalFilter = memo(({ globalFilter, setGlobalFilter }) => {\r\n    const [value, setValue] = useState(globalFilter);\r\n\r\n    const onChange = useAsyncDebounce((value) => {\r\n        setGlobalFilter(value || undefined);\r\n    }, 200);\r\n\r\n    return (\r\n        <div className=\"txt-wrap\">\r\n            <input\r\n                type=\"text\"\r\n                value={value || \"\"}\r\n                onChange={(e) => {\r\n                    setValue(e.target.value);\r\n                    onChange(e.target.value);\r\n                }}\r\n                className=\"txt\"\r\n                placeholder=\"Search\"\r\n            />\r\n            <i>\r\n                <img src={IconSearch} />\r\n            </i>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default GlobalFilter;\r\n","/* loaded by smart-asset */\nexport default require(\"./RowPin~qQRdvcXq.png\")","import React, { useState, memo } from \"react\";\r\nimport ClickAwayListener from \"react-click-away-listener\";\r\nimport RowDelete from \"../Images/RowDelete.svg\";\r\nimport RowEdit from \"../Images/RowEdit.svg\";\r\nimport RowPin from \"../Images/RowPin.png\";\r\n\r\nconst RowOptions = memo(({ row, bindRowEditOverlay, bindRowDeleteOverlay }) => {\r\n    const { original } = row;\r\n\r\n    const [isRowOptionsOpen, setRowOptionsOpen] = useState(false);\r\n\r\n    const openRowOptionsOverlay = () => {\r\n        setRowOptionsOpen(true);\r\n    };\r\n\r\n    const closeRowOptionsOverlay = () => {\r\n        setRowOptionsOpen(false);\r\n    };\r\n\r\n    const openRowEditOverlay = () => {\r\n        bindRowEditOverlay(original);\r\n        closeRowOptionsOverlay();\r\n    };\r\n\r\n    const openDeleteOverlay = () => {\r\n        bindRowDeleteOverlay(original);\r\n        closeRowOptionsOverlay();\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"row-options-wrap\">\r\n                <span\r\n                    className=\"icon-row-options\"\r\n                    onClick={openRowOptionsOverlay}\r\n                >\r\n                    <i></i>\r\n                    <i></i>\r\n                    <i></i>\r\n                </span>\r\n                {isRowOptionsOpen ? (\r\n                    <ClickAwayListener onClickAway={closeRowOptionsOverlay}>\r\n                        <div className=\"row-options-overlay\">\r\n                            <ul>\r\n                                <li>\r\n                                    <span onClick={openRowEditOverlay}>\r\n                                        <i>\r\n                                            <img src={RowEdit} alt=\"cargo\" />\r\n                                        </i>\r\n                                        <span>Edit</span>\r\n                                    </span>\r\n                                </li>\r\n                                <li>\r\n                                    <span>\r\n                                        <i>\r\n                                            <img\r\n                                                src={RowPin}\r\n                                                alt=\"cargo\"\r\n                                                width=\"15\"\r\n                                                height=\"15\"\r\n                                            />\r\n                                        </i>\r\n                                        <span>Pin This row</span>\r\n                                    </span>\r\n                                </li>\r\n                                <li>\r\n                                    <span onClick={openDeleteOverlay}>\r\n                                        <i>\r\n                                            <img src={RowDelete} alt=\"cargo\" />\r\n                                        </i>\r\n                                        <span>Delete</span>\r\n                                    </span>\r\n                                </li>\r\n                            </ul>\r\n                            <span\r\n                                className=\"close\"\r\n                                onClick={closeRowOptionsOverlay}\r\n                            >\r\n                                <i className=\"fa fa-close\"></i>\r\n                            </span>\r\n                        </div>\r\n                    </ClickAwayListener>\r\n                ) : null}\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default RowOptions;\r\n","import React, { useContext, Fragment } from \"react\";\r\nimport { RowEditContext } from \"../Utilities/TagsContext\";\r\nimport { checkInnerCells } from \"../Utilities/TagUtilities\";\r\n\r\nconst RowEditTag = (props) => {\r\n    const contextVallues = useContext(RowEditContext);\r\n    const { columns, additionalColumn, isRowExpandEnabled } = contextVallues;\r\n    const { cellKey, columnKey } = props;\r\n\r\n    if (columns && columnKey) {\r\n        const selectedColumn = columns.find(\r\n            (col) => col.accessor === columnKey\r\n        );\r\n        if (selectedColumn && cellKey) {\r\n            if (checkInnerCells(selectedColumn, cellKey)) {\r\n                return <Fragment> {props.children}</Fragment>;\r\n            }\r\n        } else if (!selectedColumn && isRowExpandEnabled && additionalColumn) {\r\n            if (checkInnerCells(additionalColumn, columnKey)) {\r\n                return <Fragment> {props.children}</Fragment>;\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n};\r\n\r\nexport default RowEditTag;\r\n","import React, { memo, useState } from \"react\";\r\nimport { RowEditContext } from \"../Utilities/TagsContext\";\r\nimport RowEditTag from \"./RowEditTag\";\r\nimport ClickAwayListener from \"react-click-away-listener\";\r\n\r\nconst RowEditOverLay = memo(\r\n    ({\r\n        row,\r\n        columns,\r\n        isRowExpandEnabled,\r\n        additionalColumn,\r\n        getRowEditOverlay,\r\n        closeRowEditOverlay,\r\n        updateRowInGrid\r\n    }) => {\r\n        const [editedRowValue, setEditedRowValue] = useState(null);\r\n\r\n        const getUpdatedRowValue = (value) => {\r\n            if (value) {\r\n                setEditedRowValue(value);\r\n            }\r\n        };\r\n\r\n        const saveRowEdit = () => {\r\n            if (editedRowValue) {\r\n                updateRowInGrid(row, editedRowValue);\r\n            }\r\n            closeRowEditOverlay();\r\n        };\r\n\r\n        const originalRowValue = { ...row };\r\n        const rowEditContent = getRowEditOverlay(\r\n            originalRowValue,\r\n            RowEditTag,\r\n            getUpdatedRowValue\r\n        );\r\n        return (\r\n            <RowEditContext.Provider\r\n                value={{\r\n                    columns: columns,\r\n                    additionalColumn: additionalColumn,\r\n                    isRowExpandEnabled: isRowExpandEnabled\r\n                }}\r\n            >\r\n                <ClickAwayListener onClickAway={closeRowEditOverlay}>\r\n                    <div className=\"row-option-action-overlay\">\r\n                        {rowEditContent}\r\n                        <div className=\"cancel-save-buttons\">\r\n                            <button\r\n                                className=\"save-Button\"\r\n                                onClick={saveRowEdit}\r\n                            >\r\n                                Save\r\n                            </button>\r\n                            <button\r\n                                className=\"cancel-Button\"\r\n                                onClick={closeRowEditOverlay}\r\n                            >\r\n                                Cancel\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </ClickAwayListener>\r\n            </RowEditContext.Provider>\r\n        );\r\n    }\r\n);\r\n\r\nexport default RowEditOverLay;\r\n","import React, { memo } from \"react\";\r\nimport ClickAwayListener from \"react-click-away-listener\";\r\n\r\nconst RowDeleteOverLay = memo(\r\n    ({ row, closeRowDeleteOverlay, deleteRowFromGrid }) => {\r\n        const deleteRow = () => {\r\n            if (row) {\r\n                deleteRowFromGrid(row);\r\n            }\r\n            closeRowDeleteOverlay();\r\n        };\r\n\r\n        return (\r\n            <ClickAwayListener onClickAway={closeRowDeleteOverlay}>\r\n                <div className=\"row-option-action-overlay delete\">\r\n                    <div className=\"cancel-save-buttons-delete\">\r\n                        <button className=\"delete-Button\" onClick={deleteRow}>\r\n                            Delete\r\n                        </button>\r\n                        <button\r\n                            className=\"cancel-Button\"\r\n                            onClick={closeRowDeleteOverlay}\r\n                        >\r\n                            Cancel\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </ClickAwayListener>\r\n        );\r\n    }\r\n);\r\n\r\nexport default RowDeleteOverLay;\r\n","export const ItemTypes = {\r\n    COLUMN: \"column\"\r\n};\r\n","import React from \"react\";\r\nimport { useDrag, useDrop } from \"react-dnd\";\r\nimport { ItemTypes } from \"./ItemTypes\";\r\n\r\nconst ColumnItem = ({\r\n    id,\r\n    Header,\r\n    moveColumn,\r\n    findColumn,\r\n    originalInnerCells,\r\n    isInnerCellSelected,\r\n    selectInnerCells\r\n}) => {\r\n    const originalIndex = findColumn(id).index;\r\n\r\n    const [{ isDragging }, drag] = useDrag({\r\n        item: { type: ItemTypes.COLUMN, id, originalIndex },\r\n        collect: (monitor) => ({\r\n            isDragging: monitor.isDragging()\r\n        }),\r\n        end: (dropResult, monitor) => {\r\n            const { id: droppedId, originalIndex } = monitor.getItem();\r\n            const didDrop = monitor.didDrop();\r\n            if (!didDrop) {\r\n                moveColumn(droppedId, originalIndex);\r\n            }\r\n        }\r\n    });\r\n\r\n    const [, drop] = useDrop({\r\n        accept: ItemTypes.COLUMN,\r\n        canDrop: () => false,\r\n        hover({ id: draggedId }) {\r\n            if (draggedId !== id) {\r\n                const { index: overIndex } = findColumn(id);\r\n                moveColumn(draggedId, overIndex);\r\n            }\r\n        }\r\n    });\r\n\r\n    const opacity = isDragging ? 0.1 : 1;\r\n\r\n    return (\r\n        <div style={{ opacity }}>\r\n            <div className=\"column__reorder\">\r\n                <div\r\n                    ref={(node) => drag(drop(node))}\r\n                    style={{ cursor: \"move\" }}\r\n                    className=\"\"\r\n                >\r\n                    <i className=\"fa fa-align-justify\" aria-hidden=\"true\"></i>\r\n                </div>\r\n                <div className=\"\">{Header}</div>\r\n                <div className=\"column__innerCells__wrap\">\r\n                    {originalInnerCells && originalInnerCells.length > 0\r\n                        ? originalInnerCells.map((cell, index) => {\r\n                              return (\r\n                                  <div className=\"column__wrap\" key={index}>\r\n                                      <div className=\"column__checkbox\">\r\n                                          <input\r\n                                              type=\"checkbox\"\r\n                                              data-columnheader={Header}\r\n                                              value={cell.Header}\r\n                                              checked={isInnerCellSelected(\r\n                                                  Header,\r\n                                                  cell.Header\r\n                                              )}\r\n                                              onChange={selectInnerCells}\r\n                                          ></input>\r\n                                      </div>\r\n                                      <div className=\"column__txt\">\r\n                                          {cell.Header}\r\n                                      </div>\r\n                                  </div>\r\n                              );\r\n                          })\r\n                        : null}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ColumnItem;\r\n","import React from \"react\";\r\nimport { useDrop } from \"react-dnd\";\r\nimport update from \"immutability-helper\";\r\nimport { ItemTypes } from \"./ItemTypes\";\r\nimport ColumnItem from \"./columnItem\";\r\n\r\nconst ColumnsList = (props) => {\r\n    const {\r\n        updateColumnsInState,\r\n        columnsToManage,\r\n        isInnerCellSelected,\r\n        selectInnerCells\r\n    } = props;\r\n\r\n    const moveColumn = (columnId, atIndex) => {\r\n        const { column, index } = findColumn(columnId);\r\n        updateColumnsInState(\r\n            update(columnsToManage, {\r\n                $splice: [\r\n                    [index, 1],\r\n                    [atIndex, 0, column]\r\n                ]\r\n            })\r\n        );\r\n    };\r\n\r\n    const findColumn = (columnId) => {\r\n        const column = columnsToManage.filter(\r\n            (c) => `${c.columnId}` === columnId\r\n        )[0];\r\n        return {\r\n            column,\r\n            index: columnsToManage.indexOf(column)\r\n        };\r\n    };\r\n\r\n    const [, drop] = useDrop({ accept: ItemTypes.COLUMN });\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div ref={drop} style={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n                {columnsToManage.map((column, index) => {\r\n                    return (\r\n                        <ColumnItem\r\n                            key={index}\r\n                            id={`${column.columnId}`}\r\n                            Header={`${column.Header}`}\r\n                            moveColumn={moveColumn}\r\n                            findColumn={findColumn}\r\n                            originalInnerCells={column.originalInnerCells}\r\n                            isInnerCellSelected={isInnerCellSelected}\r\n                            selectInnerCells={selectInnerCells}\r\n                        />\r\n                    );\r\n                })}\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default ColumnsList;\r\n","import React, { memo, useState } from \"react\";\r\nimport { DndProvider } from \"react-dnd\";\r\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\r\nimport { TouchBackend } from \"react-dnd-touch-backend\";\r\nimport MultiBackend, { TouchTransition } from \"react-dnd-multi-backend\";\r\nimport ClickAwayListener from \"react-click-away-listener\";\r\nimport ColumnsList from \"./columnsList\";\r\n\r\nconst ColumnReordering = memo((props) => {\r\n    const {\r\n        isManageColumnOpen,\r\n        toggleManageColumns,\r\n        originalColumns,\r\n        isExpandContentAvailable,\r\n        additionalColumn\r\n    } = props;\r\n\r\n    const additionalColumnHeader =\r\n        additionalColumn && additionalColumn.length\r\n            ? additionalColumn[0].Header\r\n            : \"\";\r\n    const getRemarksColumnIfAvailable = () => {\r\n        return isExpandContentAvailable ? additionalColumn : [];\r\n    };\r\n\r\n    const concatedOriginalColumns = originalColumns.concat(\r\n        getRemarksColumnIfAvailable()\r\n    );\r\n\r\n    const [managedColumns, setManagedColumns] = useState(originalColumns);\r\n    const [searchedColumns, setSearchedColumns] = useState(\r\n        concatedOriginalColumns\r\n    );\r\n    const [remarksColumnToManage, setRemarksColumnToManage] = useState(\r\n        getRemarksColumnIfAvailable\r\n    );\r\n    const [isErrorDisplayed, setIsErrorDisplayed] = useState(false);\r\n\r\n    const HTML5toTouch = {\r\n        backends: [\r\n            {\r\n                backend: HTML5Backend\r\n            },\r\n            {\r\n                backend: TouchBackend,\r\n                options: { enableMouseEvents: true },\r\n                preview: true,\r\n                transition: TouchTransition\r\n            }\r\n        ]\r\n    };\r\n\r\n    const filterColumnsList = (event) => {\r\n        let { value } = event ? event.target : \"\";\r\n        value = value ? value.toLowerCase() : \"\";\r\n        if (value != \"\") {\r\n            setSearchedColumns(\r\n                originalColumns\r\n                    .filter((column) => {\r\n                        return column.Header.toLowerCase().includes(value);\r\n                    })\r\n                    .concat(\r\n                        getRemarksColumnIfAvailable().filter((column) => {\r\n                            return column.Header.toLowerCase().includes(value);\r\n                        })\r\n                    )\r\n            );\r\n        } else {\r\n            setSearchedColumns(concatedOriginalColumns);\r\n        }\r\n    };\r\n\r\n    const updateColumnsInState = (columns) => {\r\n        setManagedColumns(columns);\r\n    };\r\n\r\n    const findColumn = (columnList, columnHeader) => {\r\n        return columnList.find((column) => {\r\n            return column.Header === columnHeader;\r\n        });\r\n    };\r\n\r\n    const isItemPresentInList = (list, headerValue) => {\r\n        const filteredList = list.filter((item) => {\r\n            return item.Header === headerValue;\r\n        });\r\n        return filteredList && filteredList.length > 0;\r\n    };\r\n\r\n    const isCheckboxSelected = (header) => {\r\n        if (header === additionalColumnHeader) {\r\n            return remarksColumnToManage.length > 0;\r\n        } else if (header === \"Select All\") {\r\n            return (\r\n                searchedColumns.length ===\r\n                managedColumns.length + remarksColumnToManage.length\r\n            );\r\n        } else {\r\n            return isItemPresentInList(managedColumns, header);\r\n        }\r\n    };\r\n\r\n    const isInnerCellSelected = (columnHeader, header) => {\r\n        const columnListToSearch =\r\n            columnHeader === additionalColumnHeader\r\n                ? remarksColumnToManage\r\n                : managedColumns;\r\n        const selectedColumn = findColumn(columnListToSearch, columnHeader);\r\n        return isItemPresentInList(selectedColumn.innerCells, header);\r\n    };\r\n\r\n    const findIndexOfItem = (\r\n        type,\r\n        columnsList,\r\n        indexOfColumnToAdd,\r\n        columnHeader,\r\n        originalInnerCells\r\n    ) => {\r\n        if (type === \"column\") {\r\n            return columnsList.findIndex((column) => {\r\n                return (\r\n                    column.Header === originalColumns[indexOfColumnToAdd].Header\r\n                );\r\n            });\r\n        } else {\r\n            return findColumn(columnsList, columnHeader).innerCells.findIndex(\r\n                (cell) => {\r\n                    return (\r\n                        cell.Header ===\r\n                        originalInnerCells[indexOfColumnToAdd].Header\r\n                    );\r\n                }\r\n            );\r\n        }\r\n    };\r\n\r\n    const selectAllColumns = (event) => {\r\n        if (event.currentTarget.checked) {\r\n            setManagedColumns(originalColumns);\r\n            setRemarksColumnToManage(getRemarksColumnIfAvailable());\r\n        } else {\r\n            setManagedColumns([]);\r\n            setRemarksColumnToManage([]);\r\n        }\r\n    };\r\n\r\n    const selectSingleColumn = (event) => {\r\n        const { currentTarget } = event;\r\n        const { checked, value } = currentTarget;\r\n\r\n        if (value === additionalColumnHeader) {\r\n            if (checked) {\r\n                setRemarksColumnToManage(additionalColumn);\r\n            } else {\r\n                setRemarksColumnToManage([]);\r\n            }\r\n        } else {\r\n            //If column checkbox is checked\r\n            if (checked) {\r\n                //Find the index of selected column from original column array and also find the user selected column\r\n                let indexOfColumnToAdd = originalColumns.findIndex((column) => {\r\n                    return column.Header === value;\r\n                });\r\n                const itemToAdd = originalColumns[indexOfColumnToAdd];\r\n\r\n                //Loop through the managedColumns array to find the position of the column that is present previous to the user selected column\r\n                //Find index of that previous column in original column list and push the new column next to that position\r\n                let prevItemIndex = -1;\r\n                while (indexOfColumnToAdd > 0 && prevItemIndex === -1) {\r\n                    indexOfColumnToAdd = indexOfColumnToAdd - 1;\r\n                    prevItemIndex = findIndexOfItem(\r\n                        \"column\",\r\n                        managedColumns,\r\n                        indexOfColumnToAdd\r\n                    );\r\n                }\r\n\r\n                const newColumnsList = [...managedColumns];\r\n                newColumnsList.splice(prevItemIndex + 1, 0, itemToAdd);\r\n                setManagedColumns(newColumnsList);\r\n            } else {\r\n                setManagedColumns(\r\n                    managedColumns.filter((column) => {\r\n                        return column.Header !== value;\r\n                    })\r\n                );\r\n            }\r\n        }\r\n    };\r\n\r\n    const findAndSelectInnerCells = (\r\n        stateColumnList,\r\n        setStateColumnList,\r\n        event\r\n    ) => {\r\n        const { currentTarget } = event;\r\n        const { checked, dataset, value } = currentTarget;\r\n        const { columnheader } = dataset;\r\n\r\n        //Find the column in which checked/unchecked inner cell is present\r\n        const selectedColumn = findColumn(stateColumnList, columnheader);\r\n        const { originalInnerCells } = selectedColumn;\r\n        if (originalInnerCells && originalInnerCells.length > 0) {\r\n            if (checked) {\r\n                //Find the index of selected column from original column array and also find the user selected column\r\n                let indexOfColumnToAdd = originalInnerCells.findIndex(\r\n                    (column) => {\r\n                        return column.Header === value;\r\n                    }\r\n                );\r\n                const itemToAdd = originalInnerCells[indexOfColumnToAdd];\r\n\r\n                //Loop through the stateColumnList array to find the position of the column that is present previous to the user selected column\r\n                //Find index of that previous column and push the new column to add in that position\r\n                let prevItemIndex = -1;\r\n                while (indexOfColumnToAdd > 0 && prevItemIndex === -1) {\r\n                    indexOfColumnToAdd = indexOfColumnToAdd - 1;\r\n                    prevItemIndex = findIndexOfItem(\r\n                        \"innercell\",\r\n                        stateColumnList,\r\n                        indexOfColumnToAdd,\r\n                        columnheader,\r\n                        originalInnerCells\r\n                    );\r\n                }\r\n\r\n                const newColumnsList = [...stateColumnList];\r\n                findColumn(newColumnsList, columnheader).innerCells.splice(\r\n                    prevItemIndex + 1,\r\n                    0,\r\n                    itemToAdd\r\n                );\r\n                setStateColumnList(newColumnsList);\r\n            } else {\r\n                setStateColumnList(\r\n                    stateColumnList.map((column) => {\r\n                        if (column.Header === columnheader) {\r\n                            column.innerCells = column.innerCells.filter(\r\n                                (cell) => {\r\n                                    return cell.Header !== value;\r\n                                }\r\n                            );\r\n                        }\r\n                        return column;\r\n                    })\r\n                );\r\n            }\r\n        }\r\n    };\r\n\r\n    const selectInnerCells = (event) => {\r\n        findAndSelectInnerCells(managedColumns, setManagedColumns, event);\r\n    };\r\n\r\n    const selectRemarksInnerCells = (event) => {\r\n        findAndSelectInnerCells(\r\n            remarksColumnToManage,\r\n            setRemarksColumnToManage,\r\n            event\r\n        );\r\n    };\r\n\r\n    const doColumnUpdate = () => {\r\n        setIsErrorDisplayed(false);\r\n        if (managedColumns && managedColumns.length > 0) {\r\n            setSearchedColumns(concatedOriginalColumns);\r\n            props.updateColumnStructure(managedColumns, remarksColumnToManage);\r\n            toggleManageColumns();\r\n        } else {\r\n            setIsErrorDisplayed(true);\r\n        }\r\n    };\r\n\r\n    const resetInnerCells = (columnList) => {\r\n        if (columnList && columnList.length) {\r\n            return columnList.map((column) => {\r\n                column.innerCells = column.originalInnerCells;\r\n                return column;\r\n            });\r\n        }\r\n        return columnList;\r\n    };\r\n\r\n    const resetColumnUpdate = () => {\r\n        setManagedColumns(resetInnerCells(originalColumns));\r\n        setSearchedColumns(\r\n            originalColumns.concat(getRemarksColumnIfAvailable())\r\n        );\r\n        setRemarksColumnToManage(\r\n            resetInnerCells(getRemarksColumnIfAvailable())\r\n        );\r\n        setIsErrorDisplayed(false);\r\n        props.updateColumnStructure(\r\n            originalColumns,\r\n            getRemarksColumnIfAvailable()\r\n        );\r\n    };\r\n\r\n    if (isManageColumnOpen) {\r\n        return (\r\n            <ClickAwayListener onClickAway={toggleManageColumns}>\r\n                <div className=\"neo-popover neo-popover--column columns--grid\">\r\n                    <div className=\"neo-popover__column column__grid\">\r\n                        <div className=\"column__chooser\">\r\n                            <div className=\"column__header\">\r\n                                <div className=\"\">\r\n                                    <strong>Column Chooser</strong>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"column__body\">\r\n                                <div>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        placeholder=\"Search column\"\r\n                                        className=\"custom__ctrl\"\r\n                                        onChange={filterColumnsList}\r\n                                    ></input>\r\n                                </div>\r\n                                <div className=\"column__selectAll\">\r\n                                    <div className=\"column__checkbox\">\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            value=\"Select All\"\r\n                                            checked={isCheckboxSelected(\r\n                                                \"Select All\"\r\n                                            )}\r\n                                            onChange={selectAllColumns}\r\n                                        ></input>\r\n                                    </div>\r\n                                    <div className=\"column__selectTxt\">\r\n                                        Select All\r\n                                    </div>\r\n                                </div>\r\n                                {searchedColumns.map((column, index) => {\r\n                                    return (\r\n                                        <div\r\n                                            className=\"column__wrap\"\r\n                                            key={index}\r\n                                        >\r\n                                            <div className=\"column__checkbox\">\r\n                                                <input\r\n                                                    type=\"checkbox\"\r\n                                                    value={column.Header}\r\n                                                    checked={isCheckboxSelected(\r\n                                                        column.Header\r\n                                                    )}\r\n                                                    onChange={\r\n                                                        selectSingleColumn\r\n                                                    }\r\n                                                ></input>\r\n                                            </div>\r\n                                            <div className=\"column__txt\">\r\n                                                {column.Header}\r\n                                            </div>\r\n                                        </div>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"column__settings\">\r\n                            <div className=\"column__header\">\r\n                                <div className=\"column__headerTxt\">\r\n                                    <strong>Column Settings</strong>\r\n                                    {isErrorDisplayed ? (\r\n                                        <strong\r\n                                            style={{\r\n                                                marginLeft: \"10px\",\r\n                                                color: \"red\"\r\n                                            }}\r\n                                        >\r\n                                            Select at least one column (other\r\n                                            than {additionalColumnHeader})\r\n                                        </strong>\r\n                                    ) : null}\r\n                                </div>\r\n                                <div\r\n                                    className=\"column__close\"\r\n                                    onClick={toggleManageColumns}\r\n                                >\r\n                                    <i\r\n                                        className=\"fa fa-times\"\r\n                                        aria-hidden=\"true\"\r\n                                    ></i>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"column__body\">\r\n                                <DndProvider\r\n                                    backend={MultiBackend}\r\n                                    options={HTML5toTouch}\r\n                                >\r\n                                    <ColumnsList\r\n                                        columnsToManage={managedColumns}\r\n                                        updateColumnsInState={\r\n                                            updateColumnsInState\r\n                                        }\r\n                                        isInnerCellSelected={\r\n                                            isInnerCellSelected\r\n                                        }\r\n                                        selectInnerCells={selectInnerCells}\r\n                                    />\r\n                                </DndProvider>\r\n                                {remarksColumnToManage &&\r\n                                remarksColumnToManage.length > 0 ? (\r\n                                    <div className=\"column__reorder full-width\">\r\n                                        <div className=\"\">\r\n                                            {remarksColumnToManage[0].Header}\r\n                                        </div>\r\n                                        <div className=\"column__innerCells__wrap\">\r\n                                            {remarksColumnToManage[0]\r\n                                                .originalInnerCells &&\r\n                                            remarksColumnToManage[0]\r\n                                                .originalInnerCells.length > 0\r\n                                                ? remarksColumnToManage[0].originalInnerCells.map(\r\n                                                      (cell, index) => {\r\n                                                          return (\r\n                                                              <div\r\n                                                                  className=\"column__wrap\"\r\n                                                                  key={index}\r\n                                                              >\r\n                                                                  <div className=\"column__checkbox\">\r\n                                                                      <input\r\n                                                                          type=\"checkbox\"\r\n                                                                          data-columnheader={\r\n                                                                              remarksColumnToManage[0]\r\n                                                                                  .Header\r\n                                                                          }\r\n                                                                          value={\r\n                                                                              cell.Header\r\n                                                                          }\r\n                                                                          checked={isInnerCellSelected(\r\n                                                                              remarksColumnToManage[0]\r\n                                                                                  .Header,\r\n                                                                              cell.Header\r\n                                                                          )}\r\n                                                                          onChange={\r\n                                                                              selectRemarksInnerCells\r\n                                                                          }\r\n                                                                      ></input>\r\n                                                                  </div>\r\n                                                                  <div className=\"column__txt\">\r\n                                                                      {\r\n                                                                          cell.Header\r\n                                                                      }\r\n                                                                  </div>\r\n                                                              </div>\r\n                                                          );\r\n                                                      }\r\n                                                  )\r\n                                                : null}\r\n                                        </div>\r\n                                    </div>\r\n                                ) : null}\r\n                            </div>\r\n                            <div className=\"column__footer\">\r\n                                <div className=\"column__btns\">\r\n                                    <button\r\n                                        className=\"btns\"\r\n                                        onClick={resetColumnUpdate}\r\n                                    >\r\n                                        Reset\r\n                                    </button>\r\n                                    <button\r\n                                        className=\"btns\"\r\n                                        onClick={toggleManageColumns}\r\n                                    >\r\n                                        Cancel\r\n                                    </button>\r\n                                    <button\r\n                                        className=\"btns btns__save\"\r\n                                        onClick={doColumnUpdate}\r\n                                    >\r\n                                        Save\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </ClickAwayListener>\r\n        );\r\n    } else {\r\n        return <div></div>;\r\n    }\r\n});\r\n\r\nexport default ColumnReordering;\r\n","export const ItemTypes = {\n    SORT_ITEM: \"SORT_ITEM\"\n};\n","import React from \"react\";\nimport { useDrag, useDrop } from \"react-dnd\";\nimport { ItemTypes } from \"./ItemTypes\";\nimport SortCopy from \"../../Images/SortCopy.svg\";\nimport SortDelete from \"../../Images/SortDelete.svg\";\n\nconst SortItem = ({\n    id,\n    sortOption,\n    originalColumns,\n    moveSort,\n    findSort,\n    updateSingleSortingOption,\n    copySortOption,\n    deleteSortOption\n}) => {\n    const originalIndex = findSort(id).index;\n\n    const [{ isDragging }, drag] = useDrag({\n        item: { type: ItemTypes.SORT_ITEM, id, originalIndex },\n        collect: (monitor) => ({\n            isDragging: monitor.isDragging()\n        }),\n        end: (dropResult, monitor) => {\n            const { id: droppedId, originalIndex } = monitor.getItem();\n            const didDrop = monitor.didDrop();\n            if (!didDrop) {\n                moveSort(droppedId, originalIndex);\n            }\n        }\n    });\n\n    const [, drop] = useDrop({\n        accept: ItemTypes.SORT_ITEM,\n        canDrop: () => false,\n        hover({ id: draggedId }) {\n            if (draggedId !== id) {\n                const { index: overIndex } = findSort(id);\n                moveSort(draggedId, overIndex);\n            }\n        }\n    });\n\n    const getInncerCellsOfColumn = (columnAccessor) => {\n        return originalColumns.find((column) => {\n            return column.accessor === columnAccessor;\n        }).innerCells;\n    };\n\n    const changeSortByOptions = (event) => {\n        const newSortByValue = event.target.value;\n        const innerCellsList = getInncerCellsOfColumn(newSortByValue);\n        updateSingleSortingOption(\n            id,\n            newSortByValue,\n            innerCellsList && innerCellsList.length > 0\n                ? innerCellsList[0].accessor\n                : \"value\",\n            sortOption.order\n        );\n    };\n\n    const changeSortOnOptions = (event) => {\n        const newSortOnValue = event.target.value;\n        updateSingleSortingOption(\n            id,\n            sortOption.sortBy,\n            newSortOnValue,\n            sortOption.order\n        );\n    };\n\n    const changeSortOrderOptions = (event) => {\n        const newSortOrderValue = event.target.value;\n        updateSingleSortingOption(\n            id,\n            sortOption.sortBy,\n            sortOption.sortOn,\n            newSortOrderValue\n        );\n    };\n\n    const copySort = () => {\n        copySortOption(id);\n    };\n\n    const deleteSort = () => {\n        deleteSortOption(id);\n    };\n\n    const opacity = isDragging ? 0.5 : 1;\n\n    return (\n        <div className=\"sort__bodyContent\" style={{ opacity }}>\n            <div className=\"sort__reorder\">\n                <div\n                    ref={(node) => drag(drop(node))}\n                    style={{ cursor: \"move\" }}\n                    className=\"\"\n                >\n                    <i className=\"fa fa-navicon\"></i>\n                </div>\n            </div>\n\n            <div className=\"sort__reorder\">\n                <div className=\"sort__file\">\n                    <select\n                        className=\"custom__ctrl\"\n                        onChange={changeSortByOptions}\n                        value={sortOption.sortBy}\n                    >\n                        {originalColumns.map((orgItem, index) => (\n                            <option key={index} value={orgItem.accessor}>\n                                {orgItem.Header}\n                            </option>\n                        ))}\n                    </select>\n                </div>\n            </div>\n            <div className=\"sort__reorder\">\n                <div className=\"sort__file\">\n                    <select\n                        className=\"custom__ctrl\"\n                        onChange={changeSortOnOptions}\n                        value={sortOption.sortOn}\n                    >\n                        {getInncerCellsOfColumn(sortOption.sortBy) &&\n                        getInncerCellsOfColumn(sortOption.sortBy).length > 0 ? (\n                            getInncerCellsOfColumn(sortOption.sortBy).map(\n                                (innerCellItem, innerCellIndex) => (\n                                    <option\n                                        key={innerCellIndex}\n                                        value={innerCellItem.accessor}\n                                    >\n                                        {innerCellItem.Header}\n                                    </option>\n                                )\n                            )\n                        ) : (\n                            <option key={0} value=\"value\">\n                                Value\n                            </option>\n                        )}\n                    </select>\n                </div>\n            </div>\n            <div className=\"sort__reorder\">\n                <div className=\"sort__file\">\n                    <select\n                        className=\"custom__ctrl\"\n                        value={sortOption.order}\n                        onChange={changeSortOrderOptions}\n                    >\n                        <option>Ascending</option>\n                        <option>Descending</option>\n                    </select>\n                </div>\n            </div>\n            <div className=\"sort__reorder\">\n                <div className=\"sort__icon\" type={\"button\"} onClick={copySort}>\n                    <i>\n                        <img src={SortCopy} alt=\"copy sort\" />\n                    </i>\n                </div>\n            </div>\n            <div className=\"sort__reorder\">\n                <div\n                    className=\"sort__icon\"\n                    type={\"button\"}\n                    onClick={deleteSort}\n                >\n                    <i>\n                        <img src={SortDelete} alt=\"copy sort\" />\n                    </i>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default SortItem;\n","import React from \"react\";\nimport { useDrop } from \"react-dnd\";\nimport update from \"immutability-helper\";\nimport { ItemTypes } from \"./ItemTypes\";\nimport SortItem from \"./sortingItem\";\n\nconst SortingList = (props) => {\n    const { updateSortingOptions, sortOptions } = props;\n\n    const moveSort = (sortId, atIndex) => {\n        const { sort, index } = findSort(sortId);\n        updateSortingOptions(\n            update(sortOptions, {\n                $splice: [\n                    [index, 1],\n                    [atIndex, 0, sort]\n                ]\n            })\n        );\n    };\n\n    const findSort = (sortId) => {\n        const sort = sortOptions.filter((c, index) => index === sortId)[0];\n        return {\n            sort,\n            index: sortOptions.indexOf(sort)\n        };\n    };\n\n    const [, drop] = useDrop({ accept: ItemTypes.SORT_ITEM });\n\n    return (\n        <React.Fragment>\n            <div ref={drop} style={{ display: \"flex\", flexWrap: \"wrap\" }}>\n                {sortOptions && sortOptions.length > 0 ? (\n                    <ul>\n                        <li>Sort By</li>\n                        <li>Sort On</li>\n                        <li>Order</li>\n                    </ul>\n                ) : null}\n                {sortOptions.map((sortOption, index) => {\n                    return (\n                        <SortItem\n                            id={index}\n                            key={index}\n                            sortOption={sortOption}\n                            originalColumns={props.originalColumns}\n                            moveSort={moveSort}\n                            findSort={findSort}\n                            updateSingleSortingOption={\n                                props.updateSingleSortingOption\n                            }\n                            copySortOption={props.copySortOption}\n                            deleteSortOption={props.deleteSortOption}\n                        />\n                    );\n                })}\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default SortingList;\n","import React, { memo, useState } from \"react\";\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { TouchBackend } from \"react-dnd-touch-backend\";\nimport MultiBackend, { TouchTransition } from \"react-dnd-multi-backend\";\nimport ClickAwayListener from \"react-click-away-listener\";\nimport SortingList from \"./sortingList\";\n\nconst GroupSort = memo((props) => {\n    const {\n        isGroupSortOverLayOpen,\n        toggleGroupSortOverLay,\n        applyGroupSort,\n        originalColumns\n    } = props;\n\n    const sortingOrders = [\"Ascending\", \"Descending\"];\n    const defaultSortingOption = [\n        {\n            sortBy: originalColumns[0].accessor,\n            sortOn: originalColumns[0].innerCells\n                ? originalColumns[0].innerCells[0].accessor\n                : \"value\",\n            order: sortingOrders[0]\n        }\n    ];\n\n    const [sortOptions, setSortOptions] = useState([]);\n    const [isErrorDisplayed, setIsErrorDisplayed] = useState(false);\n\n    const HTML5toTouch = {\n        backends: [\n            {\n                backend: HTML5Backend\n            },\n            {\n                backend: TouchBackend,\n                options: { enableMouseEvents: true },\n                preview: true,\n                transition: TouchTransition\n            }\n        ]\n    };\n\n    const updateSortingOptions = (sortingOptions) => {\n        setSortOptions(sortingOptions);\n    };\n\n    const addSortingOptions = () => {\n        setSortOptions([...sortOptions, ...defaultSortingOption]);\n    };\n\n    const clearSortingOptions = () => {\n        setSortOptions([]);\n        applyGroupSort([]);\n    };\n\n    const updateSingleSortingOption = (\n        sortIndex,\n        sortByValue,\n        sortOnValue,\n        sortOrder\n    ) => {\n        const newOptionsList = sortOptions.slice(0);\n        const newSortingOption = {\n            sortBy: sortByValue,\n            sortOn: sortOnValue,\n            order: sortOrder\n        };\n        const updatedSortOptions = newOptionsList.map((option, index) =>\n            index === sortIndex ? newSortingOption : option\n        );\n        updateSortingOptions(updatedSortOptions);\n    };\n\n    const copySortOption = (sortIndex) => {\n        const newOption = sortOptions.slice(0)[sortIndex];\n        setSortOptions(sortOptions.concat(newOption));\n    };\n\n    const deleteSortOption = (sortIndex) => {\n        setSortOptions(\n            sortOptions.filter((option, index) => {\n                return index !== sortIndex;\n            })\n        );\n    };\n\n    const applySort = () => {\n        let isError = false;\n        sortOptions.map((option, index) => {\n            const { sortBy, sortOn } = option;\n            const optionIndex = index;\n            const duplicateSort = sortOptions.find((opt, optIndex) => {\n                return (\n                    sortBy === opt.sortBy &&\n                    sortOn === opt.sortOn &&\n                    optionIndex !== optIndex\n                );\n            });\n            if (duplicateSort) {\n                isError = true;\n            }\n        });\n        if (!isError) {\n            applyGroupSort(sortOptions);\n            toggleGroupSortOverLay();\n        }\n        setIsErrorDisplayed(isError);\n    };\n\n    if (isGroupSortOverLayOpen) {\n        return (\n            <ClickAwayListener onClickAway={toggleGroupSortOverLay}>\n                <div className=\"neo-popover\">\n                    <div className=\"neo-popover__sort\">\n                        <div className=\"neo-popover__title\">\n                            <h2>Sort</h2>\n                            <div className=\"neo-popover__close\">\n                                <i\n                                    className=\"fa fa-times\"\n                                    aria-hidden=\"true\"\n                                    onClick={toggleGroupSortOverLay}\n                                ></i>\n                            </div>\n                        </div>\n                        <div className=\"neo-popover__content\">\n                            <DndProvider\n                                backend={MultiBackend}\n                                options={HTML5toTouch}\n                            >\n                                <SortingList\n                                    sortOptions={sortOptions}\n                                    originalColumns={originalColumns}\n                                    updateSortingOptions={updateSortingOptions}\n                                    updateSingleSortingOption={\n                                        updateSingleSortingOption\n                                    }\n                                    copySortOption={copySortOption}\n                                    deleteSortOption={deleteSortOption}\n                                />\n                            </DndProvider>\n                        </div>\n                        <div className=\"sort-warning\">\n                            {isErrorDisplayed ? (\n                                <span>Duplicate sort options found.</span>\n                            ) : null}\n                        </div>\n                        <div className=\"sort__new\">\n                            <div\n                                className=\"sort__section\"\n                                type=\"button\"\n                                onClick={addSortingOptions}\n                            >\n                                <span>+</span>\n                                <div className=\"sort__txt\">New Sort</div>\n                            </div>\n                        </div>\n                        <div className=\"sort__footer\">\n                            <div className=\"sort__btns\">\n                                <button\n                                    className=\"btns\"\n                                    onClick={clearSortingOptions}\n                                >\n                                    Clear All\n                                </button>\n                                <button\n                                    className=\"btns btns__save\"\n                                    onClick={applySort}\n                                >\n                                    Ok\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </ClickAwayListener>\n        );\n    } else {\n        return <div></div>;\n    }\n});\n\nexport default GroupSort;\n","import React, { memo, useState } from \"react\";\r\nimport ClickAwayListener from \"react-click-away-listener\";\r\nimport jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\nimport * as FileSaver from \"file-saver\";\r\nimport * as XLSX from \"xlsx\";\r\n\r\nconst ExportData = memo((props) => {\r\n    const {\r\n        isExportOverlayOpen,\r\n        toggleExportDataOverlay,\r\n        rows,\r\n        originalColumns,\r\n        isExpandContentAvailable,\r\n        additionalColumn\r\n    } = props;\r\n\r\n    const getRemarksColumnIfAvailable = () => {\r\n        return isExpandContentAvailable ? additionalColumn : [];\r\n    };\r\n\r\n    const updatedColumns = [...originalColumns].concat(\r\n        getRemarksColumnIfAvailable()\r\n    );\r\n\r\n    const [managedColumns, setManagedColumns] = useState(updatedColumns);\r\n    const [searchedColumns, setSearchedColumns] = useState(updatedColumns);\r\n    const [downloadTypes, setDownloadTypes] = useState([]);\r\n    const [warning, setWarning] = useState(\"\");\r\n\r\n    let isDownload = false;\r\n\r\n    const exportRowData = () => {\r\n        isDownload = true;\r\n        let filteredRow = [];\r\n        let filteredRowValues = [];\r\n        let filteredRowHeader = [];\r\n\r\n        setWarning(\"\");\r\n\r\n        if (managedColumns.length > 0 && downloadTypes.length > 0) {\r\n            const rowLength = rows && rows.length > 0 ? rows.length : 0;\r\n            rows.forEach((rowDetails, index) => {\r\n                let row = rowDetails.original;\r\n                let filteredColumnVal = {};\r\n                let rowFilteredValues = [];\r\n                let rowFilteredHeader = [];\r\n                managedColumns.forEach((columnName) => {\r\n                    const { Header, accessor, innerCells } = columnName;\r\n                    const accessorRowValue = row[accessor];\r\n                    let columnValue = \"\";\r\n                    let columnHeader = \"\";\r\n                    if (accessor) {\r\n                        if (\r\n                            innerCells &&\r\n                            innerCells.length > 0 &&\r\n                            typeof accessorRowValue === \"object\"\r\n                        ) {\r\n                            innerCells.forEach((cell) => {\r\n                                const innerCellAccessor = cell.accessor;\r\n                                const innerCellHeader = cell.Header;\r\n                                const innerCellAccessorValue =\r\n                                    accessorRowValue[innerCellAccessor];\r\n                                if (accessorRowValue.length > 0) {\r\n                                    accessorRowValue.forEach((item, index) => {\r\n                                        columnValue = item[\r\n                                            innerCellAccessor\r\n                                        ].toString();\r\n                                        columnHeader =\r\n                                            Header +\r\n                                            \" - \" +\r\n                                            innerCellHeader +\r\n                                            \"_\" +\r\n                                            index;\r\n                                        filteredColumnVal[\r\n                                            columnHeader\r\n                                        ] = columnValue;\r\n                                        rowFilteredValues.push(columnValue);\r\n                                        rowFilteredHeader.push(columnHeader);\r\n                                    });\r\n                                } else if (innerCellAccessorValue) {\r\n                                    columnValue = innerCellAccessorValue;\r\n                                    columnHeader =\r\n                                        Header + \" - \" + innerCellHeader;\r\n                                    filteredColumnVal[\r\n                                        columnHeader\r\n                                    ] = columnValue;\r\n                                    rowFilteredValues.push(columnValue);\r\n                                    rowFilteredHeader.push(columnHeader);\r\n                                }\r\n                            });\r\n                        } else {\r\n                            columnValue = accessorRowValue;\r\n                            columnHeader = Header;\r\n                            filteredColumnVal[columnHeader] = columnValue;\r\n                            rowFilteredValues.push(columnValue);\r\n                            rowFilteredHeader.push(columnHeader);\r\n                        }\r\n                    }\r\n                });\r\n                filteredRow.push(filteredColumnVal);\r\n                filteredRowValues.push(rowFilteredValues);\r\n                if (rowLength === index + 1)\r\n                    filteredRowHeader.push(rowFilteredHeader);\r\n            });\r\n\r\n            downloadTypes.map((item) => {\r\n                if (item === \"pdf\") {\r\n                    downloadPDF(filteredRowValues, filteredRowHeader);\r\n                } else if (item === \"excel\") {\r\n                    downloadXLSFile(filteredRow);\r\n                } else {\r\n                    downloadCSVFile(filteredRow);\r\n                }\r\n            });\r\n        } else {\r\n            if (managedColumns.length === 0 && downloadTypes.length === 0) {\r\n                setWarning(\"Select at least one column and a file type\");\r\n            } else if (managedColumns.length === 0) {\r\n                setWarning(\"Select at least one column\");\r\n            } else if (downloadTypes.length === 0) {\r\n                setWarning(\"Select at least one file type\");\r\n            }\r\n        }\r\n    };\r\n\r\n    const downloadPDF = (rowFilteredValues, rowFilteredHeader) => {\r\n        const unit = \"pt\";\r\n        const size = \"A4\"; // Use A1, A2, A3 or A4\r\n        const orientation = \"landscape\"; // portrait or landscape\r\n\r\n        const marginLeft = 30;\r\n        const doc = new jsPDF(orientation, unit, size);\r\n\r\n        doc.setFontSize(15);\r\n        const title = \"iCargo Neo Report\";\r\n\r\n        let content = {\r\n            startY: 50,\r\n            head: rowFilteredHeader,\r\n            body: rowFilteredValues,\r\n            tableWidth: \"wrap\", //'auto'|'wrap'|'number'\r\n            headStyles: { fillColor: [102, 102, 255] },\r\n            styles: {\r\n                fontSize: 12,\r\n                overflowX: \"visible\",\r\n                overflowY: \"visible\"\r\n            },\r\n            theme: \"grid\", //'striped'|'grid'|'plain'|'css'\r\n            overflow: \"visible\", //'linebreak'|'ellipsize'|'visible'|'hidden'\r\n            cellWidth: \"auto\",\r\n            margin: { top: 15, right: 30, bottom: 10, left: 30 }\r\n        };\r\n\r\n        doc.text(title, marginLeft, 40);\r\n        doc.autoTable(content);\r\n        doc.save(\"iCargo Neo Report.pdf\");\r\n\r\n        isDownload = false;\r\n    };\r\n\r\n    const downloadCSVFile = (filteredRowValue) => {\r\n        const fileType =\r\n            \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\r\n        const fileExtension = \".csv\";\r\n        const fileName = \"iCargo Neo Report\";\r\n        const ws = XLSX.utils.json_to_sheet(filteredRowValue);\r\n        const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\r\n        const excelBuffer = XLSX.write(wb, { bookType: \"csv\", type: \"array\" });\r\n        const data = new Blob([excelBuffer], { type: fileType });\r\n        FileSaver.saveAs(data, fileName + fileExtension);\r\n    };\r\n\r\n    const downloadXLSFile = (filteredRowValue) => {\r\n        const fileType =\r\n            \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\r\n        const fileExtension = \".xlsx\";\r\n        const fileName = \"iCargo Neo Report\";\r\n        const ws = XLSX.utils.json_to_sheet(filteredRowValue);\r\n        const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\r\n        const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\r\n        const data = new Blob([excelBuffer], { type: fileType });\r\n        FileSaver.saveAs(data, fileName + fileExtension);\r\n    };\r\n\r\n    const filterColumnsList = (event) => {\r\n        let { value } = event ? event.target : \"\";\r\n        value = value ? value.toLowerCase() : \"\";\r\n        if (value != \"\") {\r\n            setSearchedColumns(\r\n                originalColumns\r\n                    .filter((column) => {\r\n                        return column.Header.toLowerCase().includes(value);\r\n                    })\r\n                    .concat(\r\n                        getRemarksColumnIfAvailable().filter((column) => {\r\n                            return column.Header.toLowerCase().includes(value);\r\n                        })\r\n                    )\r\n            );\r\n        } else {\r\n            setSearchedColumns(updatedColumns);\r\n        }\r\n    };\r\n\r\n    const isCheckboxSelected = (header) => {\r\n        if (header === \"Select All\") {\r\n            return managedColumns.length === searchedColumns.length;\r\n        } else {\r\n            const selectedColumn = managedColumns.filter((column) => {\r\n                return column.Header === header;\r\n            });\r\n            return selectedColumn && selectedColumn.length > 0;\r\n        }\r\n    };\r\n\r\n    const selectAllColumns = (event) => {\r\n        if (event.target.checked) {\r\n            setManagedColumns(updatedColumns);\r\n        } else {\r\n            setManagedColumns([]);\r\n        }\r\n    };\r\n\r\n    const selectSingleColumn = (event) => {\r\n        const { currentTarget } = event;\r\n        const { checked, value } = currentTarget;\r\n\r\n        //If column checkbox is checked\r\n        if (checked) {\r\n            //Find the index of selected column from original column array and also find the user selected column\r\n            let indexOfColumnToAdd = updatedColumns.findIndex((column) => {\r\n                return column.Header === value;\r\n            });\r\n            const itemToAdd = updatedColumns[indexOfColumnToAdd];\r\n\r\n            //Loop through the managedColumns array to find the position of the column that is present previous to the user selected column\r\n            //Find index of that previous column and push the new column to add in that position\r\n            let prevItemIndex = -1;\r\n            while (indexOfColumnToAdd > 0 && prevItemIndex === -1) {\r\n                prevItemIndex = managedColumns.findIndex((column) => {\r\n                    return (\r\n                        column.Header ===\r\n                        updatedColumns[indexOfColumnToAdd - 1].Header\r\n                    );\r\n                });\r\n                indexOfColumnToAdd = indexOfColumnToAdd - 1;\r\n            }\r\n\r\n            const newColumnsList = managedColumns.slice(0); //Copying state value\r\n            newColumnsList.splice(prevItemIndex + 1, 0, itemToAdd);\r\n            setManagedColumns(newColumnsList);\r\n        } else {\r\n            setManagedColumns(\r\n                managedColumns.filter((column) => {\r\n                    return column.Header !== value;\r\n                })\r\n            );\r\n        }\r\n    };\r\n\r\n    const changeDownloadType = (event) => {\r\n        const { value, checked } = event ? event.currentTarget : \"\";\r\n        if (checked) {\r\n            setDownloadTypes(downloadTypes.concat([value]));\r\n        } else {\r\n            setDownloadTypes(\r\n                downloadTypes.filter((type) => {\r\n                    return type !== value;\r\n                })\r\n            );\r\n        }\r\n    };\r\n\r\n    if (isExportOverlayOpen) {\r\n        return (\r\n            <ClickAwayListener onClickAway={toggleExportDataOverlay}>\r\n                <div className=\"neo-popover neo-popover--exports exports--grid\">\r\n                    <div className=\"neo-popover__export export__grid\">\r\n                        <div className=\"export__chooser\">\r\n                            <div className=\"export__header\">\r\n                                <div className=\"\">\r\n                                    <strong>Export Data</strong>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"export__body\">\r\n                                <div>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        placeholder=\"Search column\"\r\n                                        className=\"custom__ctrl\"\r\n                                        onChange={filterColumnsList}\r\n                                    ></input>\r\n                                </div>\r\n                                <div className=\"export__wrap export__headertxt\">\r\n                                    <div className=\"export__checkbox\">\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            value=\"Select All\"\r\n                                            checked={isCheckboxSelected(\r\n                                                \"Select All\"\r\n                                            )}\r\n                                            onChange={selectAllColumns}\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"export__txt\">\r\n                                        Select All\r\n                                    </div>\r\n                                </div>\r\n                                {searchedColumns.map((column, index) => {\r\n                                    return (\r\n                                        <div\r\n                                            className=\"export__wrap\"\r\n                                            key={index}\r\n                                        >\r\n                                            <div className=\"export__checkbox\">\r\n                                                <input\r\n                                                    type=\"checkbox\"\r\n                                                    value={column.Header}\r\n                                                    checked={isCheckboxSelected(\r\n                                                        column.Header\r\n                                                    )}\r\n                                                    onChange={\r\n                                                        selectSingleColumn\r\n                                                    }\r\n                                                ></input>\r\n                                            </div>\r\n                                            <div className=\"export__txt\">\r\n                                                {column.Header}\r\n                                            </div>\r\n                                        </div>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"export__settings\">\r\n                            <div className=\"export__header\">\r\n                                <div className=\"export__headerTxt\"></div>\r\n                                <div className=\"export__close\">\r\n                                    <i\r\n                                        className=\"fa fa-times\"\r\n                                        aria-hidden=\"true\"\r\n                                        onClick={toggleExportDataOverlay}\r\n                                    ></i>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"export__as\">Export As</div>\r\n                            <div className=\"export__body\">\r\n                                <div className=\"export__reorder\">\r\n                                    <div className=\"check-wrap\">\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            id=\"chk_pdf\"\r\n                                            value=\"pdf\"\r\n                                            checked={downloadTypes.includes(\r\n                                                \"pdf\"\r\n                                            )}\r\n                                            onChange={changeDownloadType}\r\n                                        ></input>\r\n                                    </div>\r\n                                    <div className=\"export__file\">\r\n                                        <i\r\n                                            className=\"fa fa-file-pdf-o\"\r\n                                            aria-hidden=\"true\"\r\n                                        ></i>\r\n                                        <br />\r\n                                        <strong>PDF</strong>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"export__reorder\">\r\n                                    <div className=\"check-wrap\">\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            id=\"chk_excel\"\r\n                                            value=\"excel\"\r\n                                            checked={downloadTypes.includes(\r\n                                                \"excel\"\r\n                                            )}\r\n                                            onChange={changeDownloadType}\r\n                                        ></input>\r\n                                    </div>\r\n                                    <div className=\"export__file\">\r\n                                        <i\r\n                                            className=\"fa fa-file-excel-o\"\r\n                                            aria-hidden=\"true\"\r\n                                        ></i>\r\n                                        <br />\r\n                                        <strong>Excel</strong>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"export__reorder\">\r\n                                    <div className=\"check-wrap\">\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            id=\"chk_csv\"\r\n                                            value=\"csv\"\r\n                                            checked={downloadTypes.includes(\r\n                                                \"csv\"\r\n                                            )}\r\n                                            onChange={changeDownloadType}\r\n                                        ></input>\r\n                                    </div>\r\n                                    <div className=\"export__file\">\r\n                                        <i\r\n                                            className=\"fa fa-file-text-o\"\r\n                                            aria-hidden=\"true\"\r\n                                        ></i>\r\n                                        <br />\r\n                                        <strong>CSV</strong>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"exportWarning\">\r\n                                    <span className=\"alert alert-danger\">\r\n                                        <strong>{warning}</strong>\r\n                                    </span>\r\n                                </div>\r\n                                <div>\r\n                                    {isDownload ? (\r\n                                        <h2 style={{ textAlign: \"center\" }}>\r\n                                            Loading...\r\n                                        </h2>\r\n                                    ) : null}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"export__footer\">\r\n                                <div className=\"export__btns\">\r\n                                    <button\r\n                                        className=\"btns\"\r\n                                        onClick={toggleExportDataOverlay}\r\n                                    >\r\n                                        Cancel\r\n                                    </button>\r\n                                    <button\r\n                                        className=\"btns btns__save\"\r\n                                        onClick={exportRowData}\r\n                                    >\r\n                                        Export\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </ClickAwayListener>\r\n        );\r\n    } else {\r\n        return <div></div>;\r\n    }\r\n});\r\n\r\nexport default ExportData;\r\n","import React, {\r\n    useCallback,\r\n    useState,\r\n    memo,\r\n    useEffect,\r\n    createRef,\r\n    useMemo\r\n} from \"react\";\r\nimport {\r\n    useTable,\r\n    useResizeColumns,\r\n    useFlexLayout,\r\n    useRowSelect,\r\n    useSortBy,\r\n    useFilters,\r\n    useGlobalFilter,\r\n    useExpanded\r\n} from \"react-table\";\r\nimport { VariableSizeList as List } from \"react-window\";\r\nimport AutoSizer from \"react-virtualized-auto-sizer\";\r\nimport InfiniteLoader from \"react-window-infinite-loader\";\r\nimport RowSelector from \"./Functions/RowSelector\";\r\nimport DefaultColumnFilter from \"./Functions/DefaultColumnFilter\";\r\nimport GlobalFilter from \"./Functions/GlobalFilter\";\r\nimport RowOptions from \"./Functions/RowOptions\";\r\nimport RowEditOverlay from \"./Functions/RowEditOverlay\";\r\nimport RowDeleteOverLay from \"./Functions/RowDeleteOverLay\";\r\nimport ColumnReordering from \"./Overlays/managecolumns\";\r\nimport GroupSort from \"./Overlays/groupsort\";\r\nimport ExportData from \"./Overlays/exportdata\";\r\n\r\nconst listRef = createRef(null);\r\n\r\nconst Customgrid = memo((props) => {\r\n    const {\r\n        title,\r\n        gridHeight,\r\n        gridWidth,\r\n        managableColumns,\r\n        originalColumns,\r\n        additionalColumn,\r\n        data,\r\n        getRowEditOverlay,\r\n        updateRowInGrid,\r\n        deleteRowFromGrid,\r\n        globalSearchLogic,\r\n        selectBulkData,\r\n        calculateRowHeight,\r\n        isExpandContentAvailable,\r\n        displayExpandedContent,\r\n        hasNextPage,\r\n        isNextPageLoading,\r\n        loadNextPage,\r\n        doGroupSort\r\n    } = props;\r\n\r\n    //Local state value for holding columns configuration\r\n    const [columns, setColumns] = useState(managableColumns);\r\n    //Local state value for holding the boolean value to check if row expand is available\r\n    const [isRowExpandEnabled, setIsRowExpandEnabled] = useState(\r\n        isExpandContentAvailable\r\n    );\r\n\r\n    //Variables used for handling infinite loading\r\n    const itemCount = hasNextPage ? data.length + 1 : data.length;\r\n    const loadMoreItems = isNextPageLoading\r\n        ? () => {}\r\n        : loadNextPage\r\n        ? loadNextPage\r\n        : () => {};\r\n    const isItemLoaded = (index) => !hasNextPage || index < data.length;\r\n\r\n    //Local state value for checking if column filter is open/closed\r\n    const [isFilterOpen, setFilterOpen] = useState(false);\r\n    //Toggle column filter state value based on UI clicks\r\n    const toggleColumnFilter = () => {\r\n        setFilterOpen(!isFilterOpen);\r\n    };\r\n\r\n    //Local state value for checking if column filter is open/closed\r\n    const [isRowEditOverlyOpen, setIsRowEditOverlyOpen] = useState(false);\r\n    //Local state value to hold row data that is going to be edited\r\n    const [editedRowData, setEditedRowData] = useState(null);\r\n    //Bind the user defined row edit overlay into Grid\r\n    const bindRowEditOverlay = (rowValue) => {\r\n        setEditedRowData(rowValue);\r\n        setIsRowEditOverlyOpen(true);\r\n    };\r\n    //Close the row edit overlay\r\n    const closeRowEditOverlay = () => {\r\n        setEditedRowData(null);\r\n        setIsRowEditOverlyOpen(false);\r\n    };\r\n\r\n    //Local state value for checking if column filter is open/closed\r\n    const [isRowDeleteOverlyOpen, setIsRowDeleteOverlyOpen] = useState(false);\r\n    //Local state value to hold row data that is going to be deleted\r\n    const [deletedRowData, setDeletedRowData] = useState(null);\r\n    //Bind the user defined row delete overlay into Grid\r\n    const bindRowDeleteOverlay = (rowValue) => {\r\n        setDeletedRowData(rowValue);\r\n        setIsRowDeleteOverlyOpen(true);\r\n    };\r\n    //Close the row edit overlay\r\n    const closeRowDeleteOverlay = () => {\r\n        setDeletedRowData(null);\r\n        setIsRowDeleteOverlyOpen(false);\r\n    };\r\n\r\n    //Local state value for checking if group Sort Overlay is open/closed.\r\n    const [isGroupSortOverLayOpen, setGroupSortOverLay] = useState(false);\r\n\r\n    //Toggle group Sort state value based on UI clicks\r\n    const toggleGroupSortOverLay = () => {\r\n        setGroupSortOverLay(!isGroupSortOverLayOpen);\r\n    };\r\n\r\n    const applyGroupSort = (sortOptions) => {\r\n        doGroupSort(sortOptions);\r\n    };\r\n\r\n    //Local state value for hiding/unhiding column management overlay\r\n    const [isManageColumnOpen, setManageColumnOpen] = useState(false);\r\n\r\n    //Toggle column manage overlay show/hide state value based on UI clicks\r\n    const toggleManageColumns = () => {\r\n        setManageColumnOpen(!isManageColumnOpen);\r\n    };\r\n\r\n    //Callback method from column manage overlay to update the column structure of the grid\r\n    const updateColumnStructure = (newColumnStructure, remarksColumn) => {\r\n        setColumns([...newColumnStructure]);\r\n        setIsRowExpandEnabled(\r\n            remarksColumn && remarksColumn.length > 0 ? true : false\r\n        );\r\n    };\r\n\r\n    //Local state value for hiding/unhiding export data overlay\r\n    const [isExportOverlayOpen, setIsExportOverlayOpen] = useState(false);\r\n\r\n    //Toggle export overlay show/hide state value based on UI clicks\r\n    const toggleExportDataOverlay = () => {\r\n        setIsExportOverlayOpen(!isExportOverlayOpen);\r\n    };\r\n\r\n    //Column filter added for all columns by default\r\n    const defaultColumn = useMemo(\r\n        () => ({\r\n            Filter: DefaultColumnFilter\r\n        }),\r\n        []\r\n    );\r\n\r\n    //Initialize react-table instance with the values received through properties\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        rows,\r\n        prepareRow,\r\n        selectedFlatRows,\r\n        state,\r\n        setGlobalFilter\r\n    } = useTable(\r\n        {\r\n            columns,\r\n            data,\r\n            defaultColumn,\r\n            globalFilter: (rows, columns, filterValue) => {\r\n                //Call global search function defined in application, if it is present\r\n                if (\r\n                    globalSearchLogic &&\r\n                    typeof globalSearchLogic === \"function\"\r\n                ) {\r\n                    return globalSearchLogic(rows, columns, filterValue);\r\n                } else {\r\n                    return rows;\r\n                }\r\n            },\r\n            autoResetFilters: false,\r\n            autoResetGlobalFilter: false,\r\n            autoResetSortBy: false,\r\n            autoResetExpanded: false,\r\n            autoResetSelectedRows: false\r\n        },\r\n        useFilters,\r\n        useGlobalFilter,\r\n        useSortBy,\r\n        useExpanded,\r\n        useRowSelect,\r\n        useFlexLayout,\r\n        useResizeColumns,\r\n        (hooks) => {\r\n            //Add checkbox for all rows in grid, with different properties for header row and body rows\r\n            hooks.allColumns.push((columns) => [\r\n                {\r\n                    id: \"selection\",\r\n                    columnId: \"column_custom_0\",\r\n                    disableResizing: true,\r\n                    disableFilters: true,\r\n                    disableSortBy: true,\r\n                    minWidth: 35,\r\n                    width: 35,\r\n                    maxWidth: 35,\r\n                    Header: ({ getToggleAllRowsSelectedProps }) => (\r\n                        <RowSelector {...getToggleAllRowsSelectedProps()} />\r\n                    ),\r\n                    Cell: ({ row }) => (\r\n                        <RowSelector {...row.getToggleRowSelectedProps()} />\r\n                    )\r\n                },\r\n                ...columns,\r\n                {\r\n                    id: \"custom\",\r\n                    columnId: \"column_custom_1\",\r\n                    disableResizing: true,\r\n                    disableFilters: true,\r\n                    disableSortBy: true,\r\n                    minWidth: 35,\r\n                    width: 35,\r\n                    maxWidth: 35,\r\n                    Cell: ({ row }) => {\r\n                        return (\r\n                            <div className=\"action\">\r\n                                <RowOptions\r\n                                    row={row}\r\n                                    bindRowEditOverlay={bindRowEditOverlay}\r\n                                    bindRowDeleteOverlay={bindRowDeleteOverlay}\r\n                                />\r\n                                {isRowExpandEnabled ? (\r\n                                    <span\r\n                                        className=\"expander\"\r\n                                        {...row.getToggleRowExpandedProps()}\r\n                                    >\r\n                                        {row.isExpanded ? (\r\n                                            <i\r\n                                                className=\"fa fa-angle-up\"\r\n                                                aria-hidden=\"true\"\r\n                                            ></i>\r\n                                        ) : (\r\n                                            <i\r\n                                                className=\"fa fa-angle-down\"\r\n                                                aria-hidden=\"true\"\r\n                                            ></i>\r\n                                        )}\r\n                                    </span>\r\n                                ) : null}\r\n                            </div>\r\n                        );\r\n                    }\r\n                }\r\n            ]);\r\n        }\r\n    );\r\n\r\n    //Export selected row data and pass it to the callback method\r\n    const bulkSelector = () => {\r\n        if (selectBulkData) {\r\n            selectBulkData(selectedFlatRows);\r\n        }\r\n    };\r\n\r\n    //This code is to handle the row height calculation while expanding a row or resizing a column\r\n    useEffect(() => {\r\n        if (listRef && listRef.current) {\r\n            listRef.current.resetAfterIndex(0, true);\r\n        }\r\n    });\r\n\r\n    //Render each row and cells in each row, using attributes from react window list.\r\n    const RenderRow = useCallback(\r\n        ({ index, style }) => {\r\n            if (isItemLoaded(index)) {\r\n                const row = rows[index];\r\n                prepareRow(row);\r\n                return (\r\n                    <div\r\n                        {...row.getRowProps({ style })}\r\n                        className=\"table-row tr\"\r\n                    >\r\n                        <div className=\"table-row-wrap\">\r\n                            {row.cells.map((cell) => {\r\n                                return (\r\n                                    <div\r\n                                        {...cell.getCellProps()}\r\n                                        className=\"table-cell td\"\r\n                                    >\r\n                                        {cell.render(\"Cell\")}\r\n                                    </div>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                        {/*Check if row eapand icon is clicked, and if yes, call function to bind content to the expanded region*/}\r\n                        {isRowExpandEnabled && row.isExpanded ? (\r\n                            <div className=\"expand\">\r\n                                {displayExpandedContent\r\n                                    ? displayExpandedContent(row)\r\n                                    : null}\r\n                            </div>\r\n                        ) : null}\r\n                    </div>\r\n                );\r\n            }\r\n        },\r\n        [prepareRow, rows, displayExpandedContent]\r\n    );\r\n\r\n    //Render table title, global search component, button to show/hide column filter, button to export selected row data & the grid\r\n    //Use properties and methods provided by react-table\r\n    //Autosizer used for calculating grid height (don't consider window width and column resizing value changes)\r\n    //Infinite loader used for lazy loading, with the properties passed here and other values calculated at the top\r\n    //React window list is used for implementing virtualization, specifying the item count in a frame and height of each rows in it.\r\n    return (\r\n        <div\r\n            className=\"table-wrapper\"\r\n            style={{ width: gridWidth ? gridWidth : \"100%\" }}\r\n        >\r\n            <link\r\n                rel=\"stylesheet\"\r\n                href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\"\r\n            />\r\n            <div className=\"neo-grid-header\">\r\n                <div className=\"neo-grid-header__results\">\r\n                    <strong>{rows.length}</strong>\r\n                    <span> {title ? title : \"Rows\"}</span>\r\n                </div>\r\n                <div className=\"neo-grid-header__utilities\">\r\n                    <ColumnReordering\r\n                        isManageColumnOpen={isManageColumnOpen}\r\n                        toggleManageColumns={toggleManageColumns}\r\n                        originalColumns={originalColumns}\r\n                        isExpandContentAvailable={isExpandContentAvailable}\r\n                        additionalColumn={[additionalColumn]}\r\n                        updateColumnStructure={updateColumnStructure}\r\n                    />\r\n                    <GlobalFilter\r\n                        globalFilter={state.globalFilter}\r\n                        setGlobalFilter={setGlobalFilter}\r\n                    />\r\n                    <GroupSort\r\n                        isGroupSortOverLayOpen={isGroupSortOverLayOpen}\r\n                        toggleGroupSortOverLay={toggleGroupSortOverLay}\r\n                        originalColumns={originalColumns}\r\n                        applyGroupSort={applyGroupSort}\r\n                    />\r\n                    <ExportData\r\n                        isExportOverlayOpen={isExportOverlayOpen}\r\n                        toggleExportDataOverlay={toggleExportDataOverlay}\r\n                        rows={rows}\r\n                        originalColumns={originalColumns}\r\n                        isExpandContentAvailable={isExpandContentAvailable}\r\n                        additionalColumn={[additionalColumn]}\r\n                    />\r\n                    <div\r\n                        className=\"utilities-icon keyword-search\"\r\n                        onClick={toggleColumnFilter}\r\n                    >\r\n                        <i className=\"fa fa-filter\" aria-hidden=\"true\"></i>\r\n                    </div>\r\n                    <div\r\n                        className=\"utilities-icon bulk-select\"\r\n                        onClick={bulkSelector}\r\n                    >\r\n                        <i\r\n                            className=\"fa fa-pencil-square-o\"\r\n                            aria-hidden=\"true\"\r\n                        ></i>\r\n                    </div>\r\n                    <div\r\n                        className=\"utilities-icon bulk-select\"\r\n                        onClick={toggleGroupSortOverLay}\r\n                    >\r\n                        <i\r\n                            className=\"fa fa-sort-amount-desc\"\r\n                            aria-hidden=\"true\"\r\n                        ></i>\r\n                    </div>\r\n                    <div\r\n                        className=\"utilities-icon manage-columns\"\r\n                        onClick={toggleManageColumns}\r\n                    >\r\n                        <i className=\"fa fa-columns\" aria-hidden=\"true\"></i>\r\n                    </div>\r\n                    <div\r\n                        className=\"utilities-icon manage-columns\"\r\n                        onClick={toggleExportDataOverlay}\r\n                    >\r\n                        <i className=\"fa fa-share-alt\" aria-hidden=\"true\"></i>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"table-popus\">\r\n                {isRowEditOverlyOpen ? (\r\n                    <RowEditOverlay\r\n                        row={editedRowData}\r\n                        columns={columns}\r\n                        isRowExpandEnabled={isRowExpandEnabled}\r\n                        additionalColumn={additionalColumn}\r\n                        getRowEditOverlay={getRowEditOverlay}\r\n                        closeRowEditOverlay={closeRowEditOverlay}\r\n                        updateRowInGrid={updateRowInGrid}\r\n                    />\r\n                ) : null}\r\n                {isRowDeleteOverlyOpen ? (\r\n                    <RowDeleteOverLay\r\n                        row={deletedRowData}\r\n                        closeRowDeleteOverlay={closeRowDeleteOverlay}\r\n                        deleteRowFromGrid={deleteRowFromGrid}\r\n                    />\r\n                ) : null}\r\n            </div>\r\n\r\n            <div\r\n                className=\"tableContainer table-outer neo-grid\"\r\n                style={{\r\n                    height: gridHeight ? gridHeight : \"50vh\",\r\n                    overflowX: \"auto\",\r\n                    overflowY: \"hidden\"\r\n                }}\r\n            >\r\n                <AutoSizer disableWidth disableResizing>\r\n                    {({ height }) => (\r\n                        <div {...getTableProps()} className=\"table\">\r\n                            <div className=\"thead table-row table-row--head\">\r\n                                {headerGroups.map((headerGroup) => (\r\n                                    <div\r\n                                        {...headerGroup.getHeaderGroupProps()}\r\n                                        className=\"tr\"\r\n                                    >\r\n                                        {headerGroup.headers.map((column) => (\r\n                                            <div\r\n                                                {...column.getHeaderProps()}\r\n                                                className=\"table-cell column-heading th\"\r\n                                            >\r\n                                                <div\r\n                                                    {...column.getSortByToggleProps()}\r\n                                                >\r\n                                                    {column.render(\"Header\")}\r\n                                                    <span>\r\n                                                        {column.isSorted ? (\r\n                                                            column.isSortedDesc ? (\r\n                                                                <i\r\n                                                                    className=\"fa fa-sort-desc\"\r\n                                                                    aria-hidden=\"true\"\r\n                                                                ></i>\r\n                                                            ) : (\r\n                                                                <i\r\n                                                                    className=\"fa fa-sort-asc\"\r\n                                                                    aria-hidden=\"true\"\r\n                                                                ></i>\r\n                                                            )\r\n                                                        ) : (\r\n                                                            \"\"\r\n                                                        )}\r\n                                                    </span>\r\n                                                </div>\r\n                                                <div\r\n                                                    className={`txt-wrap column-filter ${\r\n                                                        isFilterOpen\r\n                                                            ? \"open\"\r\n                                                            : \"\"\r\n                                                    }`}\r\n                                                >\r\n                                                    {!column.disableFilters\r\n                                                        ? column.render(\r\n                                                              \"Filter\"\r\n                                                          )\r\n                                                        : null}\r\n                                                </div>\r\n                                                {column.canResize && (\r\n                                                    <div\r\n                                                        {...column.getResizerProps()}\r\n                                                        className=\"resizer\"\r\n                                                    />\r\n                                                )}\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n                                ))}\r\n                            </div>\r\n                            <div {...getTableBodyProps()} className=\"tbody\">\r\n                                <InfiniteLoader\r\n                                    isItemLoaded={isItemLoaded}\r\n                                    itemCount={itemCount}\r\n                                    loadMoreItems={loadMoreItems}\r\n                                >\r\n                                    {({ onItemsRendered, ref }) => (\r\n                                        <List\r\n                                            ref={(list) => {\r\n                                                ref(list);\r\n                                                listRef.current = list;\r\n                                            }}\r\n                                            style={{ overflowX: \"hidden\" }}\r\n                                            height={height - 60}\r\n                                            itemCount={rows.length}\r\n                                            itemSize={(index) => {\r\n                                                return calculateRowHeight(\r\n                                                    rows[index],\r\n                                                    headerGroups &&\r\n                                                        headerGroups.length\r\n                                                        ? headerGroups[0]\r\n                                                              .headers\r\n                                                        : []\r\n                                                );\r\n                                            }}\r\n                                            onItemsRendered={onItemsRendered}\r\n                                            overscanCount={20}\r\n                                        >\r\n                                            {RenderRow}\r\n                                        </List>\r\n                                    )}\r\n                                </InfiniteLoader>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </AutoSizer>\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Customgrid;\r\n","import React, { memo, useMemo, useState, useEffect } from \"react\";\r\nimport {\r\n    extractColumns,\r\n    extractAdditionalColumn\r\n} from \"./Utilities/ColumnsUtilities\";\r\nimport { AdditionalColumnContext } from \"./Utilities/TagsContext\";\r\nimport AdditionalColumnTag from \"./Functions/AdditionalColumnTag\";\r\nimport Customgrid from \"./Customgrid\";\r\nimport \"!style-loader!css-loader!sass-loader!./Styles/main.scss\";\r\n\r\nconst Grid = memo((props) => {\r\n    const {\r\n        title,\r\n        gridHeight,\r\n        gridWidth,\r\n        columns,\r\n        columnToExpand,\r\n        fetchData,\r\n        getRowEditOverlay,\r\n        updateRowData,\r\n        deleteRowData,\r\n        selectBulkData,\r\n        calculateRowHeight\r\n    } = props;\r\n\r\n    //Check if device is desktop\r\n    const isDesktop = window.innerWidth > 1024;\r\n\r\n    //Set state value for variable to check if there is anext page available\r\n    const [hasNextPage, setHasNextPage] = useState(true);\r\n    //Set state value for variable to check if the loading process is going on\r\n    const [isNextPageLoading, setIsNextPageLoading] = useState(false);\r\n    //Local state value for checking if data is being loaded from API\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    //Set state value for variable to hold grid data\r\n    const [items, setItems] = useState([]);\r\n    //Local state for group sort options\r\n    const [groupSortOptions, setGroupSortOptions] = useState([]);\r\n\r\n    //Logic for searching in each column\r\n    const searchColumn = (column, original, searchText) => {\r\n        //Return value\r\n        let isValuePresent = false;\r\n        //Find the accessor node and inner cells array of each column\r\n        const { accessor, innerCells } = column;\r\n        //Find accessor value of a column\r\n        const rowAccessorValue = original[accessor];\r\n        //Check if inner cells are available and save value to boolean var\r\n        const isInnerCellsPresent = innerCells && innerCells.length > 0;\r\n        //Enter if cell value is object or array\r\n        if (typeof rowAccessorValue === \"object\" && isInnerCellsPresent) {\r\n            //Enter if cell value is array\r\n            if (rowAccessorValue.length > 0) {\r\n                //Loop through cell array value and check if searched text is present\r\n                rowAccessorValue.map((value) => {\r\n                    innerCells.map((cell) => {\r\n                        const dataAccessor = value[cell.accessor];\r\n                        if (\r\n                            dataAccessor &&\r\n                            dataAccessor\r\n                                .toString()\r\n                                .toLowerCase()\r\n                                .includes(searchText)\r\n                        ) {\r\n                            isValuePresent = true;\r\n                        }\r\n                    });\r\n                });\r\n            } else {\r\n                //If cell value is an object, loop through inner cells and check if searched text is present\r\n                innerCells.map((cell) => {\r\n                    const dataAccessor = original[accessor][cell.accessor];\r\n                    if (\r\n                        dataAccessor &&\r\n                        dataAccessor\r\n                            .toString()\r\n                            .toLowerCase()\r\n                            .includes(searchText)\r\n                    ) {\r\n                        isValuePresent = true;\r\n                    }\r\n                });\r\n            }\r\n        } else {\r\n            //If cell value is not an object or array, convert it to text and check if searched text is present\r\n            const dataAccessor = original[accessor];\r\n            if (\r\n                dataAccessor &&\r\n                dataAccessor.toString().toLowerCase().includes(searchText)\r\n            ) {\r\n                isValuePresent = true;\r\n            }\r\n        }\r\n        return isValuePresent;\r\n    };\r\n\r\n    //Gets triggered when one row item is updated\r\n    const updateRowInGrid = (original, updatedRow) => {\r\n        setItems((old) =>\r\n            old.map((row) => {\r\n                if (\r\n                    Object.entries(row).toString() ===\r\n                    Object.entries(original).toString()\r\n                ) {\r\n                    row = updatedRow;\r\n                }\r\n                return row;\r\n            })\r\n        );\r\n        if (updateRowData) {\r\n            updateRowData(updatedRow);\r\n        }\r\n    };\r\n\r\n    //Gets triggered when one row item is deleted\r\n    const deleteRowFromGrid = (original) => {\r\n        setItems((old) =>\r\n            old.filter((row) => {\r\n                return row !== original;\r\n            })\r\n        );\r\n        if (deleteRowData) {\r\n            deleteRowData(original);\r\n        }\r\n    };\r\n\r\n    //Extract/add and modify required data from user configured columns and expand columns\r\n    let processedColumns = extractColumns(\r\n        columns,\r\n        searchColumn,\r\n        isDesktop,\r\n        updateRowInGrid\r\n    );\r\n    let additionalColumn = extractAdditionalColumn(\r\n        columnToExpand,\r\n        isDesktop,\r\n        updateRowInGrid\r\n    );\r\n\r\n    //Create memoized column, to be used by grid component\r\n    const gridColumns = useMemo(() => processedColumns, []);\r\n\r\n    //Local variable for keeping the expanded row rendering method\r\n    let renderExpandedContent = additionalColumn\r\n        ? additionalColumn.displayCell\r\n        : null;\r\n\r\n    //#region - Check if data is hidden or not and display data in rendered section\r\n\r\n    //Process data to be rendered to expanded view and return that data to the render function\r\n    const displayExpandedContent = (row) => {\r\n        const { original } = row;\r\n        if (original) {\r\n            return (\r\n                <AdditionalColumnContext.Provider\r\n                    value={{ additionalColumn: additionalColumn }}\r\n                >\r\n                    {renderExpandedContent(original, AdditionalColumnTag)}\r\n                </AdditionalColumnContext.Provider>\r\n            );\r\n        }\r\n    };\r\n    //#endregion\r\n\r\n    //Add logic for doing global search in the grid\r\n    const globalSearchLogic = (rows, columns, filterValue) => {\r\n        //Enter search logic only if rows and columns are available\r\n        if (filterValue && processedColumns.length > 0) {\r\n            //convert user searched text to lower case\r\n            const searchText = filterValue.toLowerCase();\r\n            //Loop through all rows\r\n            return rows.filter((row) => {\r\n                //Find original data value of each row\r\n                const { original } = row;\r\n                //Return value of the filter method\r\n                let returnValue = false;\r\n                //Loop through all column values for each row\r\n                processedColumns.map((column) => {\r\n                    //Do search for each column\r\n                    returnValue =\r\n                        returnValue ||\r\n                        searchColumn(column, original, searchText);\r\n                });\r\n                return returnValue;\r\n            });\r\n        }\r\n        return rows;\r\n    };\r\n\r\n    //Add logic to calculate height of each row, based on the content of  or more columns\r\n    //This can be used only if developer using the component has not passed a function to calculate row height\r\n    const calculateDefaultRowHeight = (row, gridColumns) => {\r\n        //Minimum height for each row\r\n        let rowHeight = 50;\r\n        if (gridColumns && gridColumns.length > 0 && row) {\r\n            //Get properties of a row\r\n            const { original, isExpanded } = row;\r\n            //Find the column with maximum width configured, from grid columns list\r\n            const columnWithMaxWidth = [...gridColumns].sort((a, b) => {\r\n                return b.width - a.width;\r\n            })[0];\r\n            //Get column properties including the user resized column width (totalFlexWidth)\r\n            const { id, width, totalFlexWidth } = columnWithMaxWidth;\r\n            //Get row value of that column\r\n            const rowValue = original[id];\r\n            if (rowValue) {\r\n                //Find the length of text of data in that column\r\n                const textLength = Object.values(rowValue).join(\",\").length;\r\n                //This is a formula that was created for the test data used.\r\n                rowHeight =\r\n                    rowHeight + Math.ceil((80 * textLength) / totalFlexWidth);\r\n                const widthVariable =\r\n                    totalFlexWidth > width\r\n                        ? totalFlexWidth - width\r\n                        : width - totalFlexWidth;\r\n                rowHeight = rowHeight + widthVariable / 1000;\r\n            }\r\n            //Add logic to increase row height if row is expanded\r\n            if (isExpanded && additionalColumn) {\r\n                //Increase height based on the number of inner cells in additional columns\r\n                rowHeight =\r\n                    rowHeight +\r\n                    (additionalColumn.innerCells &&\r\n                    additionalColumn.innerCells.length > 0\r\n                        ? additionalColumn.innerCells.length * 35\r\n                        : 35);\r\n            }\r\n        }\r\n        return rowHeight;\r\n    };\r\n\r\n    //#region - Group sorting logic\r\n    //Function to return sorting logic based on the user selected order of sort\r\n    const compareValues = (compareOrder, v1, v2) => {\r\n        if (compareOrder === \"Ascending\") {\r\n            return v1 > v2 ? 1 : v1 < v2 ? -1 : 0;\r\n        } else {\r\n            return v1 < v2 ? 1 : v1 > v2 ? -1 : 0;\r\n        }\r\n    };\r\n    //Function to return sorted data\r\n    const getSortedData = (originalData) => {\r\n        return originalData.sort(function (x, y) {\r\n            let compareResult = 0;\r\n            groupSortOptions.forEach((option) => {\r\n                const { sortBy, sortOn, order } = option;\r\n                const newResult =\r\n                    sortOn === \"value\"\r\n                        ? compareValues(order, x[sortBy], y[sortBy])\r\n                        : compareValues(\r\n                              order,\r\n                              x[sortBy][sortOn],\r\n                              y[sortBy][sortOn]\r\n                          );\r\n                compareResult = compareResult || newResult;\r\n            });\r\n            return compareResult;\r\n        });\r\n    };\r\n    //#endregion\r\n\r\n    //Gets called when group sort is applied or cleared\r\n    const doGroupSort = (sortOptions) => {\r\n        setGroupSortOptions(sortOptions);\r\n    };\r\n\r\n    //Gets called when page scroll reaches the bottom of the grid.\r\n    //Fetch the next set of data and append it to the variable holding grid data and update the state value.\r\n    //Also update the hasNextPage state value to False once API response is empty, to avoid unwanted API calls.\r\n    const loadNextPage = (...args) => {\r\n        const newIndex = args && args.length > 0 ? args[0] : -1;\r\n        if (newIndex >= 0 && hasNextPage) {\r\n            setIsLoading(true);\r\n            setIsNextPageLoading(true);\r\n            fetchData(newIndex).then((data) => {\r\n                setIsLoading(false);\r\n                setHasNextPage(data && data.length > 0);\r\n                setIsNextPageLoading(false);\r\n                setItems(items.concat(data));\r\n            });\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        //Add duplicate copy of inner cells to be used for data chooser\r\n        processedColumns.map((column) => {\r\n            if (column.innerCells) {\r\n                column.originalInnerCells = column.innerCells;\r\n            }\r\n            return column;\r\n        });\r\n        if (additionalColumn) {\r\n            const { innerCells } = additionalColumn;\r\n            if (innerCells) {\r\n                additionalColumn.originalInnerCells = innerCells;\r\n            }\r\n        }\r\n\r\n        //Make API call to fetch initial set of data.\r\n        setIsLoading(true);\r\n        fetchData(0).then((data) => {\r\n            setIsLoading(false);\r\n            setItems(data);\r\n        });\r\n    }, []);\r\n\r\n    //Sort the data based on the user selected group sort optipons\r\n    const data = getSortedData([...items]);\r\n\r\n    return (\r\n        <div className=\"grid-component-container\">\r\n            {data &&\r\n            data.length > 0 &&\r\n            processedColumns &&\r\n            processedColumns.length > 0 ? (\r\n                <div>\r\n                    <Customgrid\r\n                        title={title}\r\n                        gridHeight={gridHeight}\r\n                        gridWidth={gridWidth}\r\n                        managableColumns={gridColumns}\r\n                        originalColumns={gridColumns}\r\n                        additionalColumn={additionalColumn}\r\n                        data={data}\r\n                        getRowEditOverlay={getRowEditOverlay}\r\n                        updateRowInGrid={updateRowInGrid}\r\n                        deleteRowFromGrid={deleteRowFromGrid}\r\n                        globalSearchLogic={globalSearchLogic}\r\n                        selectBulkData={selectBulkData}\r\n                        calculateRowHeight={\r\n                            calculateRowHeight &&\r\n                            typeof calculateRowHeight === \"function\"\r\n                                ? calculateRowHeight\r\n                                : calculateDefaultRowHeight\r\n                        }\r\n                        isExpandContentAvailable={\r\n                            typeof renderExpandedContent === \"function\"\r\n                        }\r\n                        displayExpandedContent={displayExpandedContent}\r\n                        hasNextPage={hasNextPage}\r\n                        isNextPageLoading={isNextPageLoading}\r\n                        loadNextPage={loadNextPage}\r\n                        doGroupSort={doGroupSort}\r\n                    />\r\n                    {isNextPageLoading ? (\r\n                        <div id=\"loader\" className=\"background\">\r\n                            <div className=\"dots container\">\r\n                                <span></span>\r\n                                <span></span>\r\n                                <span></span>\r\n                            </div>\r\n                        </div>\r\n                    ) : null}\r\n                </div>\r\n            ) : (\r\n                <h2 style={{ textAlign: \"center\", marginTop: \"70px\" }}>\r\n                    {isLoading\r\n                        ? \"Initializing Grid...\"\r\n                        : \"Invalid Data or Column Configurations\"}\r\n                </h2>\r\n            )}\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Grid;\r\n"],"names":["CellDisplayAndEditContext","createContext","RowEditContext","AdditionalColumnContext","checkInnerCells","column","cellKey","innerCells","innerCellData","find","cell","accessor","CellDisplayAndEditTag","props","contextVallues","useContext","columns","columnKey","selectedColumn","col","React","children","CellDisplayAndEdit","memo","row","updateRowInGrid","isEditOpen","setIsEditOpen","useState","editedRowValue","setEditedRowValue","id","closeEdit","openEdit","getUpdatedRowValue","value","saveEdit","original","originalRowValue","cellDisplayContent","displayCell","cellEditContent","editCell","extractColumns","searchColumn","isDesktop","filteredColumns","filter","onlyInTablet","onlyInDesktop","modifiedColumns","forEach","index","sortValue","isInnerCellsPresent","length","columnId","Cell","disableSortBy","sortType","rowA","rowB","disableFilters","rows","filterValue","searchText","toLowerCase","push","extractAdditionalColumn","additionalColumn","AdditionalColumnTag","console","log","RowSelector","forwardRef","indeterminate","rest","ref","checkValue","setCheckValue","defaultRef","useRef","resolvedRef","onChange","useEffect","current","DefaultColumnFilter","setFilter","e","target","undefined","GlobalFilter","globalFilter","setGlobalFilter","setValue","useAsyncDebounce","IconSearch","require","RowOptions","bindRowEditOverlay","bindRowDeleteOverlay","isRowOptionsOpen","setRowOptionsOpen","openRowOptionsOverlay","closeRowOptionsOverlay","openRowEditOverlay","openDeleteOverlay","RowEdit","RowPin","RowDelete","RowEditTag","isRowExpandEnabled","RowEditOverLay","getRowEditOverlay","closeRowEditOverlay","saveRowEdit","rowEditContent","RowDeleteOverLay","closeRowDeleteOverlay","deleteRowFromGrid","deleteRow","ItemTypes","COLUMN","ColumnItem","Header","moveColumn","findColumn","originalInnerCells","isInnerCellSelected","selectInnerCells","originalIndex","isDragging","drag","useDrag","item","type","collect","monitor","end","dropResult","droppedId","getItem","didDrop","drop","useDrop","accept","canDrop","hover","draggedId","overIndex","opacity","node","cursor","map","ColumnsList","updateColumnsInState","columnsToManage","atIndex","update","$splice","c","indexOf","display","flexWrap","ColumnReordering","isManageColumnOpen","toggleManageColumns","originalColumns","isExpandContentAvailable","additionalColumnHeader","getRemarksColumnIfAvailable","concatedOriginalColumns","concat","managedColumns","setManagedColumns","searchedColumns","setSearchedColumns","remarksColumnToManage","setRemarksColumnToManage","isErrorDisplayed","setIsErrorDisplayed","HTML5toTouch","backends","backend","HTML5Backend","TouchBackend","options","enableMouseEvents","preview","transition","TouchTransition","filterColumnsList","event","includes","columnList","columnHeader","isItemPresentInList","list","headerValue","filteredList","isCheckboxSelected","header","columnListToSearch","findIndexOfItem","columnsList","indexOfColumnToAdd","findIndex","selectAllColumns","currentTarget","checked","selectSingleColumn","itemToAdd","prevItemIndex","newColumnsList","splice","findAndSelectInnerCells","stateColumnList","setStateColumnList","dataset","columnheader","selectRemarksInnerCells","doColumnUpdate","updateColumnStructure","resetInnerCells","resetColumnUpdate","marginLeft","color","MultiBackend","SORT_ITEM","SortItem","sortOption","moveSort","findSort","updateSingleSortingOption","copySortOption","deleteSortOption","getInncerCellsOfColumn","columnAccessor","changeSortByOptions","newSortByValue","innerCellsList","order","changeSortOnOptions","newSortOnValue","sortBy","changeSortOrderOptions","newSortOrderValue","sortOn","copySort","deleteSort","orgItem","innerCellItem","innerCellIndex","SortCopy","SortDelete","SortingList","updateSortingOptions","sortOptions","sortId","sort","GroupSort","isGroupSortOverLayOpen","toggleGroupSortOverLay","applyGroupSort","sortingOrders","defaultSortingOption","setSortOptions","sortingOptions","addSortingOptions","clearSortingOptions","sortIndex","sortByValue","sortOnValue","sortOrder","newOptionsList","slice","newSortingOption","updatedSortOptions","option","newOption","applySort","isError","optionIndex","duplicateSort","opt","optIndex","ExportData","isExportOverlayOpen","toggleExportDataOverlay","updatedColumns","downloadTypes","setDownloadTypes","warning","setWarning","isDownload","exportRowData","filteredRow","filteredRowValues","filteredRowHeader","rowLength","rowDetails","filteredColumnVal","rowFilteredValues","rowFilteredHeader","columnName","accessorRowValue","columnValue","innerCellAccessor","innerCellHeader","innerCellAccessorValue","toString","downloadPDF","downloadXLSFile","downloadCSVFile","unit","size","orientation","doc","jsPDF","setFontSize","title","content","startY","head","body","tableWidth","headStyles","fillColor","styles","fontSize","overflowX","overflowY","theme","overflow","cellWidth","margin","top","right","bottom","left","text","autoTable","save","filteredRowValue","fileType","fileExtension","fileName","ws","XLSX","json_to_sheet","wb","Sheets","data","SheetNames","excelBuffer","bookType","Blob","FileSaver","changeDownloadType","textAlign","listRef","createRef","Customgrid","gridHeight","gridWidth","managableColumns","globalSearchLogic","selectBulkData","calculateRowHeight","displayExpandedContent","hasNextPage","isNextPageLoading","loadNextPage","doGroupSort","setColumns","setIsRowExpandEnabled","itemCount","loadMoreItems","isItemLoaded","isFilterOpen","setFilterOpen","toggleColumnFilter","isRowEditOverlyOpen","setIsRowEditOverlyOpen","editedRowData","setEditedRowData","rowValue","isRowDeleteOverlyOpen","setIsRowDeleteOverlyOpen","deletedRowData","setDeletedRowData","setGroupSortOverLay","setManageColumnOpen","newColumnStructure","remarksColumn","setIsExportOverlayOpen","defaultColumn","useMemo","Filter","getTableProps","getTableBodyProps","headerGroups","prepareRow","selectedFlatRows","state","useTable","autoResetFilters","autoResetGlobalFilter","autoResetSortBy","autoResetExpanded","autoResetSelectedRows","useFilters","useGlobalFilter","useSortBy","useExpanded","useRowSelect","useFlexLayout","useResizeColumns","hooks","allColumns","disableResizing","minWidth","width","maxWidth","getToggleAllRowsSelectedProps","getToggleRowSelectedProps","getToggleRowExpandedProps","isExpanded","bulkSelector","resetAfterIndex","RenderRow","useCallback","style","getRowProps","cells","getCellProps","render","RowEditOverlay","height","headerGroup","getHeaderGroupProps","headers","getHeaderProps","getSortByToggleProps","isSorted","isSortedDesc","canResize","getResizerProps","onItemsRendered","List","Grid","columnToExpand","fetchData","updateRowData","deleteRowData","window","innerWidth","setHasNextPage","setIsNextPageLoading","isLoading","setIsLoading","items","setItems","groupSortOptions","setGroupSortOptions","isValuePresent","rowAccessorValue","dataAccessor","updatedRow","old","Object","entries","processedColumns","gridColumns","renderExpandedContent","returnValue","calculateDefaultRowHeight","rowHeight","columnWithMaxWidth","a","b","totalFlexWidth","textLength","values","join","Math","ceil","widthVariable","compareValues","compareOrder","v1","v2","getSortedData","originalData","x","y","compareResult","newResult","args","newIndex","then","marginTop"],"mappings":"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"}