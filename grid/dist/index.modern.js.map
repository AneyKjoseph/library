{"version":3,"file":"index.modern.js","sources":["../src/Functions/RowSelector.js","../src/Functions/DefaultColumnFilter.js","../src/Functions/GlobalFilter.js","../src/Images/RowDelete.svg","../src/Images/RowEdit.svg","../src/Images/RowPin.png","../src/Functions/RowOptions.js","../src/Overlays/managecolumns/ItemTypes.js","../src/Overlays/managecolumns/columnItem.js","../src/Overlays/managecolumns/columnsList.js","../src/Overlays/managecolumns/index.js","../src/Overlays/groupsort/ItemTypes.js","../src/Overlays/groupsort/sortingItem.js","../src/Overlays/groupsort/sortingList.js","../src/Overlays/groupsort/index.js","../src/Overlays/exportdata/index.js","../src/Customgrid.js","../src/index.js"],"sourcesContent":["import React, { forwardRef, useRef, useEffect, useState, memo } from \"react\";\r\n\r\nconst RowSelector = memo(\r\n    forwardRef(({ indeterminate, ...rest }, ref) => {\r\n        const [checkValue, setCheckValue] = useState(indeterminate);\r\n        const defaultRef = useRef();\r\n        const resolvedRef = ref || defaultRef;\r\n        const onChange = () => {\r\n            setCheckValue(!indeterminate);\r\n        };\r\n        useEffect(() => {\r\n            resolvedRef.current.indeterminate = indeterminate;\r\n        }, [resolvedRef, indeterminate]);\r\n        return (\r\n            <div className=\"check-wrap\">\r\n                <input type=\"checkbox\" checked={checkValue} onChange={onChange} ref={resolvedRef} {...rest} />\r\n            </div>\r\n        );\r\n    })\r\n);\r\n\r\nexport default RowSelector;\r\n","import React, { memo } from \"react\";\r\n\r\nconst DefaultColumnFilter = memo(({ column: { filterValue, setFilter } }) => {\r\n    return (\r\n        <input\r\n            className=\"txt\"\r\n            value={filterValue || \"\"}\r\n            onChange={(e) => {\r\n                setFilter(e.target.value || undefined);\r\n            }}\r\n            placeholder=\"Search\"\r\n        />\r\n    );\r\n});\r\n\r\nexport default DefaultColumnFilter;\r\n","import React, { memo, useState } from \"react\";\r\nimport { useAsyncDebounce } from \"react-table\";\r\n\r\nconst GlobalFilter = memo(({ globalFilter, setGlobalFilter }) => {\r\n    const [value, setValue] = useState(globalFilter);\r\n\r\n    const onChange = useAsyncDebounce((value) => {\r\n        setGlobalFilter(value || undefined);\r\n    }, 200);\r\n\r\n    return (\r\n        <div className=\"txt-wrap\">\r\n            <input\r\n                type=\"text\"\r\n                value={value || \"\"}\r\n                onChange={(e) => {\r\n                    setValue(e.target.value);\r\n                    onChange(e.target.value);\r\n                }}\r\n                className=\"txt\"\r\n                placeholder=\"Search\"\r\n            />\r\n            <i className=\"fa fa-search fa-6\" aria-hidden=\"true\"></i>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default GlobalFilter;\r\n","/* loaded by smart-asset */\nexport default require(\"./RowDelete~RKolkpAF.svg\")","/* loaded by smart-asset */\nexport default require(\"./RowEdit~BuKwAcSl.svg\")","/* loaded by smart-asset */\nexport default require(\"./RowPin~qQRdvcXq.png\")","import React, { useState, memo } from \"react\";\r\nimport ClickAwayListener from \"react-click-away-listener\";\r\nimport RowDelete from \"../Images/RowDelete.svg\";\r\nimport RowEdit from \"../Images/RowEdit.svg\";\r\nimport RowPin from \"../Images/RowPin.png\";\r\n\r\nconst RowOptions = memo((props) => {\r\n    const { row, originalData, DeletePopUpOverLay, deleteRowFromGrid, RowEditOverlay, rowEditData, updateRowInGrid } = props;\r\n    const { index, original } = row;\r\n\r\n    const [isRowOptionsOpen, setRowOptionsOpen] = useState(false);\r\n    const [isRowEditOverlayOpen, setRowEditOverlayOpen] = useState(false);\r\n    const [isDeleteOverlayOpen, setDeleteOverlayOpen] = useState(false);\r\n\r\n    const openRowOptionsOverlay = () => {\r\n        setRowOptionsOpen(true);\r\n    };\r\n\r\n    const closeRowOptionsOverlay = () => {\r\n        setRowOptionsOpen(false);\r\n    };\r\n\r\n    const openRowEditOverlay = () => {\r\n        setRowOptionsOpen(false);\r\n        setRowEditOverlayOpen(true);\r\n    };\r\n\r\n    const closeRowEditOverlay = () => {\r\n        setRowEditOverlayOpen(false);\r\n    };\r\n\r\n    const updateRow = (updatedrow) => {\r\n        const originalDataIndex = originalData.findIndex((data) => {\r\n            return data === original;\r\n        });\r\n        updateRowInGrid(originalDataIndex, updatedrow);\r\n    };\r\n\r\n    const openDeleteOverlay = () => {\r\n        setRowOptionsOpen(false);\r\n        setDeleteOverlayOpen(true);\r\n    };\r\n\r\n    const closeDeleteOverlay = () => {\r\n        setDeleteOverlayOpen(false);\r\n    };\r\n\r\n    const deleteRow = () => {\r\n        const originalDataIndex = originalData.findIndex((data) => {\r\n            return data === original;\r\n        });\r\n        deleteRowFromGrid(originalDataIndex, original);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"row-options-wrap\">\r\n                <span className=\"icon-row-options\" onClick={openRowOptionsOverlay}>\r\n                    <i></i>\r\n                    <i></i>\r\n                    <i></i>\r\n                </span>\r\n                {isRowOptionsOpen ? (\r\n                    <ClickAwayListener onClickAway={closeRowOptionsOverlay}>\r\n                        <div className=\"row-options-overlay\">\r\n                            <ul>\r\n                                <li>\r\n                                    <span onClick={openRowEditOverlay}>\r\n                                        <i>\r\n                                            <img src={RowEdit} alt=\"cargo\" />\r\n                                        </i>\r\n                                        <span>Edit</span>\r\n                                    </span>\r\n                                </li>\r\n                                <li>\r\n                                    <span>\r\n                                        <i>\r\n                                            <img src={RowPin} alt=\"cargo\" width=\"15\" height=\"15\" />\r\n                                        </i>\r\n                                        <span>Pin This row</span>\r\n                                    </span>\r\n                                </li>\r\n                                <li>\r\n                                    <span onClick={openDeleteOverlay}>\r\n                                        <i>\r\n                                            <img src={RowDelete} alt=\"cargo\" />\r\n                                        </i>\r\n                                        <span>Delete</span>\r\n                                    </span>\r\n                                </li>\r\n                            </ul>\r\n                            <span className=\"close\" onClick={closeRowOptionsOverlay}>\r\n                                <i className=\"fa fa-close\"></i>\r\n                            </span>\r\n                        </div>\r\n                    </ClickAwayListener>\r\n                ) : null}\r\n            </div>\r\n            {isRowEditOverlayOpen ? (\r\n                <RowEditOverlay\r\n                    row={original}\r\n                    rowEditData={rowEditData}\r\n                    closeRowEditOverlay={closeRowEditOverlay}\r\n                    updateRow={updateRow}\r\n                />\r\n            ) : null}\r\n            {isDeleteOverlayOpen ? <DeletePopUpOverLay closeDeleteOverlay={closeDeleteOverlay} deleteRow={deleteRow} /> : null}\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default RowOptions;\r\n","export const ItemTypes = {\r\n    COLUMN: \"column\"\r\n};\r\n","import React from \"react\";\r\nimport { useDrag, useDrop } from \"react-dnd\";\r\nimport { ItemTypes } from \"./ItemTypes\";\r\n\r\nconst ColumnItem = ({ id, name, moveColumn, findColumn, innerCells }) => {\r\n    const originalIndex = findColumn(id).index;\r\n\r\n    const [{ isDragging }, drag] = useDrag({\r\n        item: { type: ItemTypes.COLUMN, id, originalIndex },\r\n        collect: (monitor) => ({\r\n            isDragging: monitor.isDragging()\r\n        }),\r\n        end: (dropResult, monitor) => {\r\n            const { id: droppedId, originalIndex } = monitor.getItem();\r\n            const didDrop = monitor.didDrop();\r\n            if (!didDrop) {\r\n                moveColumn(droppedId, originalIndex);\r\n            }\r\n        }\r\n    });\r\n\r\n    const [, drop] = useDrop({\r\n        accept: ItemTypes.COLUMN,\r\n        canDrop: () => false,\r\n        hover({ id: draggedId }) {\r\n            if (draggedId !== id) {\r\n                const { index: overIndex } = findColumn(id);\r\n                moveColumn(draggedId, overIndex);\r\n            }\r\n        }\r\n    });\r\n\r\n    const opacity = isDragging ? 0.1 : 1;\r\n\r\n    return (\r\n        <div style={{ opacity }}>\r\n            <div className=\"column__reorder\">\r\n                <div ref={(node) => drag(drop(node))} style={{ cursor: \"move\" }} className=\"\">\r\n                    <i className=\"fa fa-align-justify\" aria-hidden=\"true\"></i>\r\n                </div>\r\n                <div className=\"\">{name}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ColumnItem;\r\n","import React, { useState } from \"react\";\r\nimport { useDrop } from \"react-dnd\";\r\nimport update from \"immutability-helper\";\r\nimport { ItemTypes } from \"./ItemTypes\";\r\nimport ColumnItem from \"./columnItem\";\r\n\r\nconst ColumnsList = (props) => {\r\n    const { updateColumnsInState, columnsToManage } = props;\r\n\r\n    const moveColumn = (columnId, atIndex) => {\r\n        const { column, index } = findColumn(columnId);\r\n        updateColumnsInState(\r\n            update(columnsToManage, {\r\n                $splice: [\r\n                    [index, 1],\r\n                    [atIndex, 0, column]\r\n                ]\r\n            })\r\n        );\r\n    };\r\n\r\n    const findColumn = (columnId) => {\r\n        const column = columnsToManage.filter((c) => `${c.columnId}` === columnId)[0];\r\n        return {\r\n            column,\r\n            index: columnsToManage.indexOf(column)\r\n        };\r\n    };\r\n\r\n    const [, drop] = useDrop({ accept: ItemTypes.COLUMN });\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div ref={drop} style={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n                {columnsToManage.map((column, index) => {\r\n                    return (\r\n                        <ColumnItem\r\n                            key={index}\r\n                            id={`${column.columnId}`}\r\n                            name={`${column.Header}`}\r\n                            moveColumn={moveColumn}\r\n                            findColumn={findColumn}\r\n                            innerCells={column.innerCells}\r\n                        />\r\n                    );\r\n                })}\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default ColumnsList;\r\n","import React, { memo, useState, useEffect } from \"react\";\r\nimport { DndProvider } from \"react-dnd\";\r\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\r\nimport { TouchBackend } from \"react-dnd-touch-backend\";\r\nimport MultiBackend, { TouchTransition } from \"react-dnd-multi-backend\";\r\nimport ClickAwayListener from \"react-click-away-listener\";\r\nimport ColumnsList from \"./columnsList\";\r\n\r\nconst ColumnReordering = memo((props) => {\r\n    const { isManageColumnOpen, toggleManageColumns, originalColumns } = props;\r\n\r\n    const [managedColumns, setManagedColumns] = useState(originalColumns);\r\n    const [searchedColumns, setSearchedColumns] = useState(originalColumns);\r\n    const [isErrorDisplayed, setIsErrorDisplayed] = useState(false);\r\n\r\n    const HTML5toTouch = {\r\n        backends: [\r\n            {\r\n                backend: HTML5Backend\r\n            },\r\n            {\r\n                backend: TouchBackend,\r\n                options: { enableMouseEvents: true },\r\n                preview: true,\r\n                transition: TouchTransition\r\n            }\r\n        ]\r\n    };\r\n\r\n    const filterColumnsList = (event) => {\r\n        let { value } = event ? event.target : \"\";\r\n        value = value.toLowerCase();\r\n        if (value != \"\") {\r\n            setSearchedColumns(\r\n                originalColumns.filter((column) => {\r\n                    return column.Header.toLowerCase().includes(value);\r\n                })\r\n            );\r\n        } else {\r\n            setSearchedColumns(originalColumns);\r\n        }\r\n    };\r\n\r\n    const updateColumnsInState = (columns) => {\r\n        setManagedColumns(columns);\r\n    };\r\n\r\n    const isCheckboxSelected = (header) => {\r\n        if (header === \"Select All\") {\r\n            return managedColumns.length === searchedColumns.length;\r\n        } else {\r\n            const selectedColumn = managedColumns.filter((column) => {\r\n                return column.Header === header;\r\n            });\r\n            return selectedColumn && selectedColumn.length > 0;\r\n        }\r\n    };\r\n\r\n    const selectAllColumns = (event) => {\r\n        if (event.currentTarget.checked) {\r\n            setManagedColumns(searchedColumns);\r\n        } else {\r\n            setManagedColumns([]);\r\n        }\r\n    };\r\n\r\n    const selectSingleColumn = (event) => {\r\n        const { currentTarget } = event;\r\n        const { checked, value } = currentTarget;\r\n\r\n        //If column checkbox is checked\r\n        if (checked) {\r\n            //Find the index of selected column from original column array and also find the user selected column\r\n            let indexOfColumnToAdd = originalColumns.findIndex((column) => {\r\n                return column.Header == value;\r\n            });\r\n            const itemToAdd = originalColumns[indexOfColumnToAdd];\r\n\r\n            //Loop through the managedColumns array to find the position of the column that is present previous to the user selected column\r\n            //Find index of that previous column and push the new column to add in that position\r\n            let prevItemIndex = -1;\r\n            while (indexOfColumnToAdd > 0 && prevItemIndex === -1) {\r\n                prevItemIndex = managedColumns.findIndex((column) => {\r\n                    return column.Header == originalColumns[indexOfColumnToAdd - 1].Header;\r\n                });\r\n                indexOfColumnToAdd = indexOfColumnToAdd - 1;\r\n            }\r\n\r\n            const newColumnsList = managedColumns.slice(0); //Copying state value\r\n            newColumnsList.splice(prevItemIndex + 1, 0, itemToAdd);\r\n            setManagedColumns(newColumnsList);\r\n        } else {\r\n            setManagedColumns(\r\n                managedColumns.filter((column) => {\r\n                    return column.Header !== value;\r\n                })\r\n            );\r\n        }\r\n    };\r\n\r\n    const doColumnUpdate = () => {\r\n        if (managedColumns && managedColumns.length > 0) {\r\n            setSearchedColumns(originalColumns);\r\n            props.updateColumnStructure(managedColumns);\r\n        } else {\r\n            setIsErrorDisplayed(true);\r\n        }\r\n    };\r\n\r\n    const resetColumnUpdate = () => {\r\n        setManagedColumns(originalColumns);\r\n        setSearchedColumns(originalColumns);\r\n        props.updateColumnStructure(originalColumns);\r\n    };\r\n\r\n    if (isManageColumnOpen) {\r\n        return (\r\n            <ClickAwayListener onClickAway={toggleManageColumns}>\r\n                <div className=\"columns--grid\">\r\n                    <div className=\"column__grid\">\r\n                        <div className=\"column__chooser\">\r\n                            <div className=\"column__header\">\r\n                                <div className=\"\">\r\n                                    <strong>Column Chooser</strong>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"column__body\">\r\n                                <div>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        placeholder=\"Search column\"\r\n                                        className=\"custom__ctrl\"\r\n                                        onChange={filterColumnsList}\r\n                                    ></input>\r\n                                </div>\r\n                                <div className=\"column__selectAll\">\r\n                                    <div className=\"column__checkbox\">\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            value=\"Select All\"\r\n                                            checked={isCheckboxSelected(\"Select All\")}\r\n                                            onChange={selectAllColumns}\r\n                                        ></input>\r\n                                    </div>\r\n                                    <div className=\"column__selectTxt\">Select All</div>\r\n                                </div>\r\n                                {searchedColumns.map((column, index) => {\r\n                                    return (\r\n                                        <div className=\"column__wrap\" key={index}>\r\n                                            <div className=\"column__checkbox\">\r\n                                                <input\r\n                                                    type=\"checkbox\"\r\n                                                    value={column.Header}\r\n                                                    checked={isCheckboxSelected(column.Header)}\r\n                                                    onChange={selectSingleColumn}\r\n                                                ></input>\r\n                                            </div>\r\n                                            <div className=\"column__txt\">{column.Header}</div>\r\n                                        </div>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"column__settings\">\r\n                            <div className=\"column__header\">\r\n                                <div className=\"column__headerTxt\">\r\n                                    <strong>Column Setting</strong>\r\n                                    {isErrorDisplayed ? (\r\n                                        <strong style={{ marginLeft: \"10px\", color: \"red\" }}>Select at least one column</strong>\r\n                                    ) : null}\r\n                                </div>\r\n                                <div className=\"column__close\" onClick={toggleManageColumns}>\r\n                                    <i className=\"fa fa-times\" aria-hidden=\"true\"></i>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"column__body\">\r\n                                <DndProvider backend={MultiBackend} options={HTML5toTouch}>\r\n                                    <ColumnsList columnsToManage={managedColumns} updateColumnsInState={updateColumnsInState} />\r\n                                </DndProvider>\r\n                            </div>\r\n                            <div className=\"column__footer\">\r\n                                <div className=\"column__btns\">\r\n                                    <button className=\"btns\" onClick={resetColumnUpdate}>\r\n                                        Reset\r\n                                    </button>\r\n                                    <button className=\"btns\" onClick={toggleManageColumns}>\r\n                                        Cancel\r\n                                    </button>\r\n                                    <button className=\"btns btns__save\" onClick={doColumnUpdate}>\r\n                                        Save\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </ClickAwayListener>\r\n        );\r\n    } else {\r\n        return <div></div>;\r\n    }\r\n});\r\n\r\nexport default ColumnReordering;\r\n","export const ItemTypes = {\n    SORT_ITEM: \"SORT_ITEM\"\n};\n","import React from \"react\";\nimport { useDrag, useDrop } from \"react-dnd\";\nimport { ItemTypes } from \"./ItemTypes\";\n\nconst SortItem = ({\n    id,\n    sortOption,\n    originalColumns,\n    moveSort,\n    findSort,\n    updateSingleSortingOption,\n    copySortOption,\n    deleteSortOption\n}) => {\n    const originalIndex = findSort(id).index;\n\n    const [{ isDragging }, drag] = useDrag({\n        item: { type: ItemTypes.SORT_ITEM, id, originalIndex },\n        collect: (monitor) => ({\n            isDragging: monitor.isDragging()\n        }),\n        end: (dropResult, monitor) => {\n            const { id: droppedId, originalIndex } = monitor.getItem();\n            const didDrop = monitor.didDrop();\n            if (!didDrop) {\n                moveSort(droppedId, originalIndex);\n            }\n        }\n    });\n\n    const [, drop] = useDrop({\n        accept: ItemTypes.SORT_ITEM,\n        canDrop: () => false,\n        hover({ id: draggedId }) {\n            if (draggedId !== id) {\n                const { index: overIndex } = findSort(id);\n                moveSort(draggedId, overIndex);\n            }\n        }\n    });\n\n    const getInncerCellsOfColumn = (columnAccessor) => {\n        return originalColumns.find((column) => {\n            return column.accessor === columnAccessor;\n        }).innerCells;\n    };\n\n    const changeSortByOptions = (event) => {\n        const newSortByValue = event.target.value;\n        const innerCellsList = getInncerCellsOfColumn(newSortByValue);\n        updateSingleSortingOption(\n            id,\n            newSortByValue,\n            innerCellsList && innerCellsList.length > 0 ? innerCellsList[0].accessor : \"value\",\n            sortOption.order\n        );\n    };\n\n    const changeSortOnOptions = (event) => {\n        const newSortOnValue = event.target.value;\n        updateSingleSortingOption(id, sortOption.sortBy, newSortOnValue, sortOption.order);\n    };\n\n    const changeSortOrderOptions = (event) => {\n        const newSortOrderValue = event.target.value;\n        updateSingleSortingOption(id, sortOption.sortBy, sortOption.sortOn, newSortOrderValue);\n    };\n\n    const copySort = () => {\n        copySortOption(id);\n    };\n\n    const deleteSort = () => {\n        deleteSortOption(id);\n    };\n\n    const opacity = isDragging ? 0.5 : 1;\n\n    return (\n        <div className=\"sort__bodyContent\" style={{ opacity }}>\n            <div className=\"sort__reorder\">\n                <div className=\"\">\n                    <div>&nbsp;</div>\n                </div>\n\n                <div ref={(node) => drag(drop(node))} style={{ cursor: \"move\" }} className=\"\">\n                    <i className=\"fa fa-navicon\"></i>\n                </div>\n            </div>\n\n            <div className=\"sort__reorder\">\n                <div className=\"\">\n                    <div>Sort by</div>\n                </div>\n                <div className=\"sort__file\">\n                    <select className=\"custom__ctrl\" onChange={changeSortByOptions} value={sortOption.sortBy}>\n                        {originalColumns.map((orgItem, index) => (\n                            <option key={index} value={orgItem.accessor}>\n                                {orgItem.Header}\n                            </option>\n                        ))}\n                    </select>\n                </div>\n            </div>\n            <div className=\"sort__reorder\">\n                <div className=\"\">\n                    <div>Sort on</div>\n                </div>\n                <div className=\"sort__file\">\n                    <select className=\"custom__ctrl\" onChange={changeSortOnOptions} value={sortOption.sortOn}>\n                        {getInncerCellsOfColumn(sortOption.sortBy) && getInncerCellsOfColumn(sortOption.sortBy).length > 0 ? (\n                            getInncerCellsOfColumn(sortOption.sortBy).map((innerCellItem, innerCellIndex) => (\n                                <option key={innerCellIndex} value={innerCellItem.accessor}>\n                                    {innerCellItem.Header}\n                                </option>\n                            ))\n                        ) : (\n                            <option key={0} value=\"value\">\n                                Value\n                            </option>\n                        )}\n                    </select>\n                </div>\n            </div>\n            <div className=\"sort__reorder\">\n                <div className=\"\">\n                    <div>Order</div>\n                </div>\n                <div className=\"sort__file\">\n                    <select className=\"custom__ctrl\" value={sortOption.order} onChange={changeSortOrderOptions}>\n                        <option>Ascending</option>\n                        <option>Descending</option>\n                    </select>\n                </div>\n            </div>\n            <div className=\"sort__reorder\">\n                <div className=\"\">\n                    <div>&nbsp;</div>\n                </div>\n\n                <div className=\"sort__icon\" type={\"button\"} onClick={copySort}>\n                    <i className=\"fa fa-clone\"></i>\n                </div>\n            </div>\n            <div className=\"sort__reorder\">\n                <div className=\"\">\n                    <div>&nbsp;</div>\n                </div>\n                <div className=\"sort__icon\" type={\"button\"} onClick={deleteSort}>\n                    <i className=\"fa fa-trash\"></i>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default SortItem;\n","import React from \"react\";\nimport { useDrop } from \"react-dnd\";\nimport update from \"immutability-helper\";\nimport { ItemTypes } from \"./ItemTypes\";\nimport SortItem from \"./sortingItem\";\n\nconst SortingList = (props) => {\n    const { updateSortingOptions, sortOptions } = props;\n\n    const moveSort = (sortId, atIndex) => {\n        const { sort, index } = findSort(sortId);\n        updateSortingOptions(\n            update(sortOptions, {\n                $splice: [\n                    [index, 1],\n                    [atIndex, 0, sort]\n                ]\n            })\n        );\n    };\n\n    const findSort = (sortId) => {\n        const sort = sortOptions.filter((c, index) => index === sortId)[0];\n        return {\n            sort,\n            index: sortOptions.indexOf(sort)\n        };\n    };\n\n    const [, drop] = useDrop({ accept: ItemTypes.SORT_ITEM });\n\n    return (\n        <React.Fragment>\n            <div ref={drop} style={{ display: \"flex\", flexWrap: \"wrap\" }}>\n                {sortOptions.map((sortOption, index) => {\n                    return (\n                        <SortItem\n                            id={index}\n                            key={index}\n                            sortOption={sortOption}\n                            originalColumns={props.originalColumns}\n                            moveSort={moveSort}\n                            findSort={findSort}\n                            updateSingleSortingOption={props.updateSingleSortingOption}\n                            copySortOption={props.copySortOption}\n                            deleteSortOption={props.deleteSortOption}\n                        />\n                    );\n                })}\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default SortingList;\n","import React, { memo, useState } from \"react\";\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { TouchBackend } from \"react-dnd-touch-backend\";\nimport MultiBackend, { TouchTransition } from \"react-dnd-multi-backend\";\nimport ClickAwayListener from \"react-click-away-listener\";\nimport SortingList from \"./sortingList\";\n\nconst GroupSort = memo((props) => {\n    const { isGroupSortOverLayOpen, toggleGroupSortOverLay, applyGroupSort, originalColumns } = props;\n\n    const sortingOrders = [\"Ascending\", \"Descending\"];\n    const defaultSortingOption = [\n        {\n            sortBy: originalColumns[0].accessor,\n            sortOn: originalColumns[0].innerCells ? originalColumns[0].innerCells[0].accessor : \"value\",\n            order: sortingOrders[0]\n        }\n    ];\n\n    const [sortOptions, setSortOptions] = useState([]);\n    const [isErrorDisplayed, setIsErrorDisplayed] = useState(false);\n\n    const HTML5toTouch = {\n        backends: [\n            {\n                backend: HTML5Backend\n            },\n            {\n                backend: TouchBackend,\n                options: { enableMouseEvents: true },\n                preview: true,\n                transition: TouchTransition\n            }\n        ]\n    };\n\n    const updateSortingOptions = (sortingOptions) => {\n        setSortOptions(sortingOptions);\n    };\n\n    const addSortingOptions = () => {\n        setSortOptions([...sortOptions, ...defaultSortingOption]);\n    };\n\n    const clearSortingOptions = () => {\n        setSortOptions([]);\n        applyGroupSort([]);\n        toggleGroupSortOverLay();\n    };\n\n    const updateSingleSortingOption = (sortIndex, sortByValue, sortOnValue, sortOrder) => {\n        const newOptionsList = sortOptions.slice(0);\n        const newSortingOption = {\n            sortBy: sortByValue,\n            sortOn: sortOnValue,\n            order: sortOrder\n        };\n        const updatedSortOptions = newOptionsList.map((option, index) => (index === sortIndex ? newSortingOption : option));\n        updateSortingOptions(updatedSortOptions);\n    };\n\n    const copySortOption = (sortIndex) => {\n        const newOption = sortOptions.slice(0)[sortIndex];\n        setSortOptions(sortOptions.concat(newOption));\n    };\n\n    const deleteSortOption = (sortIndex) => {\n        setSortOptions(\n            sortOptions.filter((option, index) => {\n                return index !== sortIndex;\n            })\n        );\n    };\n\n    const applySort = () => {\n        let isError = false;\n        sortOptions.map((option, index) => {\n            const { sortBy, sortOn } = option;\n            const optionIndex = index;\n            const duplicateSort = sortOptions.find((opt, optIndex) => {\n                return sortBy === opt.sortBy && sortOn === opt.sortOn && optionIndex !== optIndex;\n            });\n            if (duplicateSort) {\n                isError = true;\n            }\n        });\n        if (!isError) {\n            applyGroupSort(sortOptions);\n            toggleGroupSortOverLay();\n        }\n        setIsErrorDisplayed(isError);\n    };\n\n    if (isGroupSortOverLayOpen) {\n        return (\n            <ClickAwayListener onClickAway={toggleGroupSortOverLay}>\n                <div className=\"sorts--grid\">\n                    <div className=\"sort__grid\">\n                        <div className=\"sort__settings\">\n                            <div className=\"sort__header\">\n                                <div className=\"sort__headerTxt\">\n                                    <strong>Sort </strong>\n                                </div>\n\n                                <div className=\"sort__close\">\n                                    <i className=\"fa fa-times\" aria-hidden=\"true\" onClick={toggleGroupSortOverLay}></i>\n                                </div>\n                            </div>\n\n                            <div className=\"sort__body\">\n                                <DndProvider backend={MultiBackend} options={HTML5toTouch}>\n                                    <SortingList\n                                        sortOptions={sortOptions}\n                                        originalColumns={originalColumns}\n                                        updateSortingOptions={updateSortingOptions}\n                                        updateSingleSortingOption={updateSingleSortingOption}\n                                        copySortOption={copySortOption}\n                                        deleteSortOption={deleteSortOption}\n                                    />\n                                </DndProvider>\n                                <div className=\"sort-warning\">\n                                    {isErrorDisplayed ? (\n                                        <span style={{ color: \"red\" }}>Duplicate sort options found.</span>\n                                    ) : null}\n                                </div>\n                            </div>\n                            <div className=\"sort__new\">\n                                <div className=\"sort__section\" type=\"button\" onClick={addSortingOptions}>\n                                    <i className=\"fa fa-plus\" aria-hidden=\"true\"></i>\n                                    <div className=\"sort__txt\">New Sort</div>\n                                </div>\n                            </div>\n                            <div className=\"sort__footer\">\n                                <div className=\"sort__btns\">\n                                    <button className=\"btns\" onClick={clearSortingOptions}>\n                                        Clear All\n                                    </button>\n\n                                    <button className=\"btns btns__save\" onClick={applySort}>\n                                        Ok\n                                    </button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </ClickAwayListener>\n        );\n    } else {\n        return <div></div>;\n    }\n});\n\nexport default GroupSort;\n","import React, { memo, useState } from \"react\";\r\n\r\nimport jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\nimport * as FileSaver from \"file-saver\";\r\nimport * as XLSX from \"xlsx\";\r\n\r\nconst ExportData = memo((props) => {\r\n    const { isExportOverlayOpen, toggleExportDataOverlay, rows, originalColumns } = props;\r\n\r\n    const [managedColumns, setManagedColumns] = useState(originalColumns);\r\n    const [searchedColumns, setSearchedColumns] = useState(originalColumns);\r\n\r\n    const [warning, setWarning] = useState(\"\");\r\n\r\n    let isDownload = false;\r\n\r\n    const exportRowData = () => {\r\n        isDownload = true;\r\n        let filteredRow = [];\r\n        let filteredRowValues = [];\r\n        let downLaodFileType = [];\r\n        let downLaodFileTypeCount = document.getElementsByName(\"fileType[]\").length;\r\n        for (let i = 0; i < downLaodFileTypeCount; i++) {\r\n            if (document.getElementsByName(\"fileType[]\")[i].checked == true) {\r\n                downLaodFileType.push(document.getElementsByName(\"fileType[]\")[i].value);\r\n            }\r\n        }\r\n\r\n        setWarning(\"\");\r\n        if (managedColumns.length > 0 && downLaodFileType.length > 0) {\r\n            rows.forEach((rowDetails) => {\r\n                let row = rowDetails.original;\r\n                const keys = Object.getOwnPropertyNames(row);\r\n                let filteredColumnVal = {};\r\n                let rowFilteredValues = [];\r\n                keys.forEach(function (key) {\r\n                    managedColumns.forEach((columnName) => {\r\n                        if (columnName.accessor === key) {\r\n                            let columnValue = \"\";\r\n                            if (typeof row[key] === \"object\") {\r\n                                if (row[key].length === undefined)\r\n                                    columnValue = Object.values(row[key]).toString().replace(\",\", \" | \");\r\n                                if (row[key].length > 0) {\r\n                                    let arrObj = \"\";\r\n                                    row[key].forEach((item, index) => {\r\n                                        arrObj = index != 0 ? arrObj + \" | \" + Object.values(item) : Object.values(item);\r\n                                    });\r\n                                    columnValue = arrObj;\r\n                                }\r\n                            } else {\r\n                                columnValue = row[key];\r\n                            }\r\n                            filteredColumnVal[key] = columnValue;\r\n                            rowFilteredValues.push(columnValue);\r\n                        }\r\n                    });\r\n                });\r\n                filteredRow.push(filteredColumnVal);\r\n                filteredRowValues.push(rowFilteredValues);\r\n            });\r\n\r\n            downLaodFileType.map((item) => {\r\n                if (item === \"pdf\") downloadPDF(filteredRowValues);\r\n                else if (item === \"excel\") downloadXLSFile(filteredRow);\r\n                else downloadCSVFile(filteredRow);\r\n            });\r\n        } else {\r\n            if (managedColumns.length === 0 && downLaodFileType.length === 0) {\r\n                setWarning(\"You haven't selected File Type & Column\");\r\n            } else if (managedColumns.length === 0) {\r\n                setWarning(\"You haven't selected Column \");\r\n            } else if (downLaodFileType.length === 0) {\r\n                setWarning(\"You haven't selected File Type\");\r\n            }\r\n        }\r\n    };\r\n\r\n    const downloadPDF = (rowFilteredValues) => {\r\n        const unit = \"pt\";\r\n        const size = \"A4\"; // Use A1, A2, A3 or A4\r\n        const orientation = \"landscape\"; // portrait or landscape\r\n\r\n        const marginLeft = 300;\r\n        const doc = new jsPDF(orientation, unit, size);\r\n\r\n        doc.setFontSize(15);\r\n\r\n        const title = \"iCargo Report\";\r\n        const headers = [\r\n            managedColumns.map((column) => {\r\n                return column.Header;\r\n            })\r\n        ];\r\n\r\n        let content = {\r\n            startY: 50,\r\n            head: headers,\r\n            body: rowFilteredValues\r\n        };\r\n\r\n        doc.text(title, marginLeft, 40);\r\n        doc.autoTable(content);\r\n        doc.save(\"report.pdf\");\r\n\r\n        isDownload = false;\r\n    };\r\n\r\n    const downloadCSVFile = (filteredRowValue) => {\r\n        const fileType = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\r\n        const fileExtension = \".csv\";\r\n        const fileName = \"CSVDownload\";\r\n        const ws = XLSX.utils.json_to_sheet(filteredRowValue);\r\n        const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\r\n        const excelBuffer = XLSX.write(wb, { bookType: \"csv\", type: \"array\" });\r\n        const data = new Blob([excelBuffer], { type: fileType });\r\n        FileSaver.saveAs(data, fileName + fileExtension);\r\n    };\r\n\r\n    const downloadXLSFile = (filteredRowValue) => {\r\n        const fileType = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\r\n        const fileExtension = \".xlsx\";\r\n        const fileName = \"XLSXDownload\";\r\n        const ws = XLSX.utils.json_to_sheet(filteredRowValue);\r\n        const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\r\n        const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\r\n        const data = new Blob([excelBuffer], { type: fileType });\r\n        FileSaver.saveAs(data, fileName + fileExtension);\r\n    };\r\n\r\n    const filterColumnsList = (event) => {\r\n        let { value } = event ? event.target : \"\";\r\n        value = value.toLowerCase();\r\n        if (value != \"\") {\r\n            setSearchedColumns(\r\n                originalColumns.filter((column) => {\r\n                    return column.Header.toLowerCase().includes(value);\r\n                })\r\n            );\r\n        } else {\r\n            setSearchedColumns(originalColumns);\r\n        }\r\n    };\r\n\r\n    const isCheckboxSelected = (header) => {\r\n        if (header === \"Select All\") {\r\n            return managedColumns.length === searchedColumns.length;\r\n        } else {\r\n            const selectedColumn = managedColumns.filter((column) => {\r\n                return column.Header === header;\r\n            });\r\n            return selectedColumn && selectedColumn.length > 0;\r\n        }\r\n    };\r\n\r\n    const selectAllColumns = (event) => {\r\n        if (event.target.checked) {\r\n            setManagedColumns(searchedColumns);\r\n        } else {\r\n            setManagedColumns([]);\r\n        }\r\n    };\r\n\r\n    const selectSingleColumn = (event) => {\r\n        const { currentTarget } = event;\r\n        const { checked, value } = currentTarget;\r\n\r\n        //If column checkbox is checked\r\n        if (checked) {\r\n            //Find the index of selected column from original column array and also find the user selected column\r\n            let indexOfColumnToAdd = originalColumns.findIndex((column) => {\r\n                return column.Header == value;\r\n            });\r\n            const itemToAdd = originalColumns[indexOfColumnToAdd];\r\n\r\n            //Loop through the managedColumns array to find the position of the column that is present previous to the user selected column\r\n            //Find index of that previous column and push the new column to add in that position\r\n            let prevItemIndex = -1;\r\n            while (indexOfColumnToAdd > 0 && prevItemIndex === -1) {\r\n                prevItemIndex = managedColumns.findIndex((column) => {\r\n                    return column.Header == originalColumns[indexOfColumnToAdd - 1].Header;\r\n                });\r\n                indexOfColumnToAdd = indexOfColumnToAdd - 1;\r\n            }\r\n\r\n            const newColumnsList = managedColumns.slice(0); //Copying state value\r\n            newColumnsList.splice(prevItemIndex + 1, 0, itemToAdd);\r\n            setManagedColumns(newColumnsList);\r\n        } else {\r\n            setManagedColumns(\r\n                managedColumns.filter((column) => {\r\n                    return column.Header !== value;\r\n                })\r\n            );\r\n        }\r\n    };\r\n\r\n    if (isExportOverlayOpen) {\r\n        return (\r\n            <div className=\"exports--grid\">\r\n                <div className=\"export__grid\">\r\n                    <div className=\"export__chooser\">\r\n                        <div className=\"export__header\">\r\n                            <div className=\"\">\r\n                                <strong>Export Data</strong>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"export__body\">\r\n                            <div>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    placeholder=\"Search export\"\r\n                                    className=\"custom__ctrl\"\r\n                                    onChange={filterColumnsList}\r\n                                ></input>\r\n                            </div>\r\n                            <div className=\"export__wrap export__headertxt\">\r\n                                <div className=\"export__checkbox\">\r\n                                    <input\r\n                                        type=\"checkbox\"\r\n                                        value=\"Select All\"\r\n                                        checked={isCheckboxSelected(\"Select All\")}\r\n                                        onChange={selectAllColumns}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"export__txt\">Select All</div>\r\n                            </div>\r\n                            {searchedColumns.map((column, index) => {\r\n                                return (\r\n                                    <div className=\"export__wrap\" key={index}>\r\n                                        <div className=\"export__checkbox\">\r\n                                            <input\r\n                                                type=\"checkbox\"\r\n                                                value={column.Header}\r\n                                                checked={isCheckboxSelected(column.Header)}\r\n                                                onChange={selectSingleColumn}\r\n                                            ></input>\r\n                                        </div>\r\n                                        <div className=\"export__txt\">{column.Header}</div>\r\n                                    </div>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"export__settings\">\r\n                        <div className=\"export__header\">\r\n                            <div className=\"export__headerTxt\"></div>\r\n                            <div className=\"export__close\">\r\n                                <i className=\"fa fa-times\" aria-hidden=\"true\" onClick={toggleExportDataOverlay}></i>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"export__as\">Export As</div>\r\n                        <div className=\"export__body\">\r\n                            <div className=\"export__reorder\">\r\n                                <div className=\"\">\r\n                                    <input type=\"checkbox\" id=\"fileType[]\" name=\"fileType[]\" value=\"pdf\"></input>\r\n                                </div>\r\n                                <div className=\"export__file\">\r\n                                    <i className=\"fa fa-file-pdf-o\" aria-hidden=\"true\"></i>\r\n                                    <br />\r\n                                    <strong>PDF</strong>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"export__reorder\">\r\n                                <div className=\"\">\r\n                                    <input type=\"checkbox\" id=\"fileType[]\" name=\"fileType[]\" value=\"excel\"></input>\r\n                                </div>\r\n                                <div className=\"export__file\">\r\n                                    <i className=\"fa fa-file-excel-o\" aria-hidden=\"true\"></i>\r\n                                    <br />\r\n                                    <strong>Excel</strong>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"export__reorder\">\r\n                                <div className=\"\">\r\n                                    <input type=\"checkbox\" id=\"fileType[]\" name=\"fileType[]\" value=\"csv\"></input>\r\n                                </div>\r\n                                <div className=\"export__file\">\r\n                                    <i className=\"fa fa-file-text-o\" aria-hidden=\"true\"></i>\r\n                                    <br />\r\n                                    <strong>CSV</strong>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"exportWarning\">\r\n                                <span className=\"alert alert-danger\">\r\n                                    <strong>{warning}</strong>\r\n                                </span>\r\n                            </div>\r\n                            <div>{isDownload ? <h2 style={{ textAlign: \"center\" }}>Loading...</h2> : null}</div>\r\n                        </div>\r\n                        <div className=\"export__footer\">\r\n                            <div className=\"export__btns\">\r\n                                <button className=\"btns\" onClick={toggleExportDataOverlay}>\r\n                                    Cancel\r\n                                </button>\r\n                                <button className=\"btns btns__save\" onClick={exportRowData}>\r\n                                    Export\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    } else {\r\n        return <div></div>;\r\n    }\r\n});\r\n\r\nexport default ExportData;\r\n","import React, { useCallback, useState, memo, useEffect, createRef, useMemo } from \"react\";\r\nimport {\r\n    useTable,\r\n    useResizeColumns,\r\n    useFlexLayout,\r\n    useRowSelect,\r\n    useSortBy,\r\n    useFilters,\r\n    useGlobalFilter,\r\n    useExpanded\r\n} from \"react-table\";\r\nimport { VariableSizeList as List } from \"react-window\";\r\nimport AutoSizer from \"react-virtualized-auto-sizer\";\r\nimport InfiniteLoader from \"react-window-infinite-loader\";\r\nimport RowSelector from \"./Functions/RowSelector\";\r\nimport DefaultColumnFilter from \"./Functions/DefaultColumnFilter\";\r\nimport GlobalFilter from \"./Functions/GlobalFilter\";\r\nimport RowOptions from \"./Functions/RowOptions\";\r\nimport ColumnReordering from \"./Overlays/managecolumns\";\r\nimport GroupSort from \"./Overlays/groupsort\";\r\nimport ExportData from \"./Overlays/exportdata\";\r\n\r\nconst listRef = createRef(null);\r\n\r\nconst Customgrid = memo((props) => {\r\n    const {\r\n        title,\r\n        gridHeight,\r\n        gridWidth,\r\n        managableColumns,\r\n        originalColumns,\r\n        data,\r\n        originalData,\r\n        rowEditOverlay,\r\n        rowEditData,\r\n        updateRowInGrid,\r\n        deletePopUpOverLay,\r\n        deleteRowFromGrid,\r\n        globalSearchLogic,\r\n        selectBulkData,\r\n        calculateRowHeight,\r\n        renderExpandedContent,\r\n        hasNextPage,\r\n        isNextPageLoading,\r\n        loadNextPage,\r\n        doGroupSort\r\n    } = props;\r\n\r\n    //Local state value for holding columns configuration\r\n    const [columns, setColumns] = useState(managableColumns);\r\n\r\n    //Display error message if data or columns configuration is missing.\r\n    if (!(data && data.length > 0) || !(columns && columns.length > 0)) {\r\n        return <h2 style={{ marginTop: \"50px\", textAlign: \"center\" }}>Invalid Data or Columns Configuration</h2>;\r\n    }\r\n\r\n    //Variables used for handling infinite loading\r\n    const itemCount = hasNextPage ? data.length + 1 : data.length;\r\n    const loadMoreItems = isNextPageLoading ? () => {} : loadNextPage ? loadNextPage : () => {};\r\n    const isItemLoaded = (index) => !hasNextPage || index < data.length;\r\n\r\n    //Local state value for checking if column filter is open/closed\r\n    const [isFilterOpen, setFilterOpen] = useState(false);\r\n\r\n    //Toggle column filter state value based on UI clicks\r\n    const toggleColumnFilter = () => {\r\n        setFilterOpen(!isFilterOpen);\r\n    };\r\n\r\n    //Local state value for checking if group Sort Overlay is open/closed.\r\n    const [isGroupSortOverLayOpen, setGroupSortOverLay] = useState(false);\r\n\r\n    //Toggle group Sort state value based on UI clicks\r\n    const toggleGroupSortOverLay = () => {\r\n        setGroupSortOverLay(!isGroupSortOverLayOpen);\r\n    };\r\n\r\n    const applyGroupSort = (sortOptions) => {\r\n        doGroupSort(sortOptions);\r\n    };\r\n\r\n    //Local state value for hiding/unhiding column management overlay\r\n    const [isManageColumnOpen, setManageColumnOpen] = useState(false);\r\n\r\n    //Toggle column manage overlay show/hide state value based on UI clicks\r\n    const toggleManageColumns = () => {\r\n        setManageColumnOpen(!isManageColumnOpen);\r\n    };\r\n\r\n    //Callback method from column manage overlay to update the column structure of the grid\r\n    const updateColumnStructure = (newColumnStructure) => {\r\n        setColumns(newColumnStructure);\r\n        toggleManageColumns();\r\n    };\r\n\r\n    //Local state value for hiding/unhiding export data overlay\r\n    const [isExportOverlayOpen, setIsExportOverlayOpen] = useState(false);\r\n\r\n    //Toggle export overlay show/hide state value based on UI clicks\r\n    const toggleExportDataOverlay = () => {\r\n        setIsExportOverlayOpen(!isExportOverlayOpen);\r\n    };\r\n\r\n    //Column filter added for all columns by default\r\n    const defaultColumn = useMemo(\r\n        () => ({\r\n            Filter: DefaultColumnFilter\r\n        }),\r\n        []\r\n    );\r\n\r\n    //Initialize react-table instance with the values received through properties\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        rows,\r\n        prepareRow,\r\n        selectedFlatRows,\r\n        state,\r\n        setGlobalFilter\r\n    } = useTable(\r\n        {\r\n            columns,\r\n            data,\r\n            defaultColumn,\r\n            globalFilter: (rows, columns, filterValue) => {\r\n                //Call global search function defined in application, if it is present\r\n                if (globalSearchLogic && typeof globalSearchLogic === \"function\") {\r\n                    return globalSearchLogic(rows, columns, filterValue);\r\n                } else {\r\n                    return rows;\r\n                }\r\n            },\r\n            autoResetFilters: false,\r\n            autoResetGlobalFilter: false,\r\n            autoResetSortBy: false,\r\n            autoResetExpanded: false,\r\n            autoResetSelectedRows: false\r\n        },\r\n        useFilters,\r\n        useGlobalFilter,\r\n        useSortBy,\r\n        useExpanded,\r\n        useRowSelect,\r\n        useFlexLayout,\r\n        useResizeColumns,\r\n        (hooks) => {\r\n            //Add checkbox for all rows in grid, with different properties for header row and body rows\r\n            hooks.allColumns.push((columns) => [\r\n                {\r\n                    id: \"selection\",\r\n                    columnId: \"column_custom_0\",\r\n                    disableResizing: true,\r\n                    disableFilters: true,\r\n                    disableSortBy: true,\r\n                    minWidth: 35,\r\n                    width: 35,\r\n                    maxWidth: 35,\r\n                    Header: ({ getToggleAllRowsSelectedProps }) => <RowSelector {...getToggleAllRowsSelectedProps()} />,\r\n                    Cell: ({ row }) => <RowSelector {...row.getToggleRowSelectedProps()} />\r\n                },\r\n                ...columns,\r\n                {\r\n                    id: \"custom\",\r\n                    columnId: \"column_custom_1\",\r\n                    disableResizing: true,\r\n                    disableFilters: true,\r\n                    disableSortBy: true,\r\n                    minWidth: 35,\r\n                    width: 35,\r\n                    maxWidth: 35,\r\n                    Cell: ({ row }) => {\r\n                        return (\r\n                            <div className=\"action\">\r\n                                <RowOptions\r\n                                    row={row}\r\n                                    originalData={originalData}\r\n                                    DeletePopUpOverLay={deletePopUpOverLay}\r\n                                    deleteRowFromGrid={deleteRowFromGrid}\r\n                                    RowEditOverlay={rowEditOverlay}\r\n                                    rowEditData={rowEditData}\r\n                                    updateRowInGrid={updateRowInGrid}\r\n                                />\r\n                                <span className=\"expander\" {...row.getToggleRowExpandedProps()}>\r\n                                    {row.isExpanded ? (\r\n                                        <i className=\"fa fa-angle-up\" aria-hidden=\"true\"></i>\r\n                                    ) : (\r\n                                        <i className=\"fa fa-angle-down\" aria-hidden=\"true\"></i>\r\n                                    )}\r\n                                </span>\r\n                            </div>\r\n                        );\r\n                    }\r\n                }\r\n            ]);\r\n        }\r\n    );\r\n\r\n    //Export selected row data and pass it to the callback method\r\n    const bulkSelector = () => {\r\n        if (selectBulkData) {\r\n            selectBulkData(selectedFlatRows);\r\n        }\r\n    };\r\n\r\n    //This code is to handle the row height calculation while expanding a row or resizing a column\r\n    useEffect(() => {\r\n        if (listRef && listRef.current) {\r\n            listRef.current.resetAfterIndex(0, true);\r\n        }\r\n    });\r\n\r\n    //Render each row and cells in each row, using attributes from react window list.\r\n    const RenderRow = useCallback(\r\n        ({ index, style }) => {\r\n            if (isItemLoaded(index)) {\r\n                const row = rows[index];\r\n                prepareRow(row);\r\n                return (\r\n                    <div {...row.getRowProps({ style })} className=\"table-row tr\">\r\n                        <div className=\"table-row-wrap\">\r\n                            {row.cells.map((cell) => {\r\n                                return (\r\n                                    <div {...cell.getCellProps()} className=\"table-cell td\">\r\n                                        {cell.render(\"Cell\")}\r\n                                    </div>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                        {/*Check if row eapand icon is clicked, and if yes, call function to bind content to the expanded region*/}\r\n                        {row.isExpanded ? (\r\n                            <div className=\"expand\">{renderExpandedContent ? renderExpandedContent(row) : null}</div>\r\n                        ) : null}\r\n                    </div>\r\n                );\r\n            }\r\n        },\r\n        [prepareRow, rows, renderExpandedContent]\r\n    );\r\n\r\n    //Render table title, global search component, button to show/hide column filter, button to export selected row data & the grid\r\n    //Use properties and methods provided by react-table\r\n    //Autosizer used for calculating grid height (don't consider window width and column resizing value changes)\r\n    //Infinite loader used for lazy loading, with the properties passed here and other values calculated at the top\r\n    //React window list is used for implementing virtualization, specifying the item count in a frame and height of each rows in it.\r\n    return (\r\n        <div className=\"wrapper\" style={{ width: gridWidth ? gridWidth : \"100%\" }}>\r\n            <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\" />\r\n            <div className=\"table-filter\">\r\n                <div className=\"results\">\r\n                    <div className=\"name\">\r\n                        <strong>{rows.length}</strong>\r\n                        <span> {title ? title : \"Rows\"}</span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"filter-utilities\">\r\n                    <ColumnReordering\r\n                        isManageColumnOpen={isManageColumnOpen}\r\n                        toggleManageColumns={toggleManageColumns}\r\n                        originalColumns={originalColumns}\r\n                        updateColumnStructure={updateColumnStructure}\r\n                    />\r\n                    <GlobalFilter globalFilter={state.globalFilter} setGlobalFilter={setGlobalFilter} />\r\n                    <GroupSort\r\n                        isGroupSortOverLayOpen={isGroupSortOverLayOpen}\r\n                        toggleGroupSortOverLay={toggleGroupSortOverLay}\r\n                        originalColumns={originalColumns}\r\n                        applyGroupSort={applyGroupSort}\r\n                    />\r\n                    <ExportData\r\n                        isExportOverlayOpen={isExportOverlayOpen}\r\n                        toggleExportDataOverlay={toggleExportDataOverlay}\r\n                        rows={rows}\r\n                        originalColumns={originalColumns}\r\n                    />\r\n                    <div className=\"filter-icon keyword-search\" onClick={toggleColumnFilter}>\r\n                        <i className=\"fa fa-filter\" aria-hidden=\"true\"></i>\r\n                    </div>\r\n                    <div className=\"filter-icon bulk-select\" onClick={bulkSelector}>\r\n                        <i className=\"fa fa-pencil-square-o\" aria-hidden=\"true\"></i>\r\n                    </div>\r\n                    <div className=\"filter-icon bulk-select\" onClick={toggleGroupSortOverLay}>\r\n                        <i className=\"fa fa-sort-amount-desc\" aria-hidden=\"true\"></i>\r\n                    </div>\r\n                    <div className=\"filter-icon manage-columns\" onClick={toggleManageColumns}>\r\n                        <i className=\"fa fa-columns\" aria-hidden=\"true\"></i>\r\n                    </div>\r\n                    <div className=\"filter-icon manage-columns\" onClick={toggleExportDataOverlay}>\r\n                        <i className=\"fa fa-share-alt\" aria-hidden=\"true\"></i>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div\r\n                className=\"tableContainer table-outer\"\r\n                style={{ height: gridHeight ? gridHeight : \"50vh\", overflowX: \"auto\", overflowY: \"hidden\" }}\r\n            >\r\n                <AutoSizer disableWidth disableResizing>\r\n                    {({ height }) => (\r\n                        <div {...getTableProps()} className=\"table\">\r\n                            <div className=\"thead table-row table-row--head\">\r\n                                {headerGroups.map((headerGroup) => (\r\n                                    <div {...headerGroup.getHeaderGroupProps()} className=\"tr\">\r\n                                        {headerGroup.headers.map((column) => (\r\n                                            <div {...column.getHeaderProps()} className=\"table-cell column-heading th\">\r\n                                                <div {...column.getSortByToggleProps()}>\r\n                                                    {column.render(\"Header\")}\r\n                                                    <span>\r\n                                                        {column.isSorted ? (\r\n                                                            column.isSortedDesc ? (\r\n                                                                <i className=\"fa fa-sort-desc\" aria-hidden=\"true\"></i>\r\n                                                            ) : (\r\n                                                                <i className=\"fa fa-sort-asc\" aria-hidden=\"true\"></i>\r\n                                                            )\r\n                                                        ) : (\r\n                                                            \"\"\r\n                                                        )}\r\n                                                    </span>\r\n                                                </div>\r\n                                                <div className={`txt-wrap column-filter ${isFilterOpen ? \"open\" : \"\"}`}>\r\n                                                    {!column.disableFilters ? column.render(\"Filter\") : null}\r\n                                                </div>\r\n                                                {column.canResize && <div {...column.getResizerProps()} className=\"resizer\" />}\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n                                ))}\r\n                            </div>\r\n                            <div {...getTableBodyProps()} className=\"tbody\">\r\n                                <InfiniteLoader isItemLoaded={isItemLoaded} itemCount={itemCount} loadMoreItems={loadMoreItems}>\r\n                                    {({ onItemsRendered, ref }) => (\r\n                                        <List\r\n                                            ref={(list) => {\r\n                                                ref(list);\r\n                                                listRef.current = list;\r\n                                            }}\r\n                                            style={{ overflowX: \"hidden\" }}\r\n                                            height={height - 60}\r\n                                            itemCount={rows.length}\r\n                                            itemSize={(index) => {\r\n                                                if (calculateRowHeight && typeof calculateRowHeight === \"function\") {\r\n                                                    return calculateRowHeight(rows, index, headerGroups);\r\n                                                } else {\r\n                                                    return 70;\r\n                                                }\r\n                                            }}\r\n                                            onItemsRendered={onItemsRendered}\r\n                                            overscanCount={20}\r\n                                        >\r\n                                            {RenderRow}\r\n                                        </List>\r\n                                    )}\r\n                                </InfiniteLoader>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </AutoSizer>\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Customgrid;\r\n","import React, { forwardRef, useImperativeHandle, useMemo, useState, useEffect } from \"react\";\r\nimport Customgrid from \"./Customgrid\";\r\n\r\nconst Grid = forwardRef((props, ref) => {\r\n    const {\r\n        title,\r\n        gridHeight,\r\n        gridWidth,\r\n        columns,\r\n        fetchData,\r\n        rowEditOverlay,\r\n        rowEditData,\r\n        updateRowData,\r\n        deletePopUpOverLay,\r\n        deleteRowData,\r\n        globalSearchLogic,\r\n        selectBulkData,\r\n        calculateRowHeight,\r\n        renderExpandedContent\r\n    } = props;\r\n\r\n    //Set state value for variable to check if there is anext page available\r\n    const [hasNextPage, setHasNextPage] = useState(true);\r\n    //Set state value for variable to check if the loading process is going on\r\n    const [isNextPageLoading, setIsNextPageLoading] = useState(false);\r\n    //Local state value for checking if data is being loaded from API\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    //Set state value for variable to hold grid data\r\n    const [items, setItems] = useState([]);\r\n    //Local state for group sort options\r\n    const [groupSortOptions, setGroupSortOptions] = useState([]);\r\n\r\n    let processedColumns = [];\r\n    columns.forEach((column, index) => {\r\n        const { innerCells, accessor, sortValue } = column;\r\n        const isInnerCellsPresent = innerCells && innerCells.length > 0;\r\n\r\n        //Add column Id\r\n        column.columnId = `column_${index}`;\r\n\r\n        //Add logic to sort column if sort is not disabled\r\n        if (!column.disableSortBy) {\r\n            if (isInnerCellsPresent) {\r\n                //If there are inner cells and a sort value specified, do sort on that value\r\n                if (sortValue) {\r\n                    column.sortType = (rowA, rowB) => {\r\n                        return rowA.original[accessor][sortValue] > rowB.original[accessor][sortValue] ? -1 : 1;\r\n                    };\r\n                } else {\r\n                    column.disableSortBy = true;\r\n                }\r\n            } else if (!innerCells) {\r\n                //If no inner cells are there, just do sort on column value\r\n                column.sortType = (rowA, rowB) => {\r\n                    return rowA.original[accessor] > rowB.original[accessor] ? -1 : 1;\r\n                };\r\n            }\r\n        }\r\n\r\n        //Add logic to filter column if column filter is not disabled\r\n        if (!column.disableFilters) {\r\n            if (isInnerCellsPresent) {\r\n                column.filter = (rows, id, filterValue) => {\r\n                    const filterText = filterValue ? filterValue.toLowerCase() : \"\";\r\n                    return rows.filter((row) => {\r\n                        const rowValue = row.values[id];\r\n                        const filterCols = innerCells.filter((cell) => {\r\n                            const cellValue = rowValue[cell.accessor] ? rowValue[cell.accessor].toString().toLowerCase() : \"\";\r\n                            return cellValue.includes(filterText);\r\n                        });\r\n                        return filterCols && filterCols.length > 0;\r\n                    });\r\n                };\r\n            }\r\n        }\r\n\r\n        processedColumns.push(column);\r\n    });\r\n    const gridColumns = useMemo(() => processedColumns, []);\r\n\r\n    //Function to return sorting logic based on the user selected order of sort\r\n    const compareValues = (compareOrder, v1, v2) => {\r\n        if (compareOrder === \"Ascending\") {\r\n            return v1 > v2 ? 1 : v1 < v2 ? -1 : 0;\r\n        } else {\r\n            return v1 < v2 ? 1 : v1 > v2 ? -1 : 0;\r\n        }\r\n    };\r\n    //Function to return sorted data\r\n    const getSortedData = (originalData) => {\r\n        return originalData.sort(function (x, y) {\r\n            let compareResult = 0;\r\n            groupSortOptions.forEach((option) => {\r\n                const { sortBy, sortOn, order } = option;\r\n                const newResult =\r\n                    sortOn === \"value\"\r\n                        ? compareValues(order, x[sortBy], y[sortBy])\r\n                        : compareValues(order, x[sortBy][sortOn], y[sortBy][sortOn]);\r\n                compareResult = compareResult || newResult;\r\n            });\r\n            return compareResult;\r\n        });\r\n    };\r\n    //Function to find correct index from original data using index from sorted data\r\n    const getOriginalDataIndex = (sortedDataIndex) => {\r\n        const updatedData = getSortedData([...items]).find((item, index) => {\r\n            return index === sortedDataIndex;\r\n        });\r\n        let originalDataIndex = -1;\r\n        originalDataIndex = items.findIndex((item, index) => {\r\n            return item === updatedData;\r\n        });\r\n        return originalDataIndex;\r\n    };\r\n\r\n    //Gets triggered when a cell in grid is updated\r\n    useImperativeHandle(ref, () => ({\r\n        updateCellInGrid(rowIndex, columnId, value) {\r\n            const originalDataIndex = getOriginalDataIndex(rowIndex);\r\n            if (originalDataIndex >= 0) {\r\n                setItems((old) =>\r\n                    old.map((row, index) => {\r\n                        if (index === originalDataIndex) {\r\n                            return {\r\n                                ...old[originalDataIndex],\r\n                                [columnId]: value\r\n                            };\r\n                        }\r\n                        return row;\r\n                    })\r\n                );\r\n            }\r\n        }\r\n    }));\r\n\r\n    //Gets triggered when one row item is updated\r\n    const updateRowInGrid = (rowIndex, updatedRow) => {\r\n        setItems((old) =>\r\n            old.map((row, index) => {\r\n                if (index === rowIndex) {\r\n                    row = updatedRow;\r\n                }\r\n                return row;\r\n            })\r\n        );\r\n        updateRowData(updatedRow);\r\n    };\r\n\r\n    //Gets triggered when one row item is deleted\r\n    const deleteRowFromGrid = (rowIndexToBeDeleted, deletedRow) => {\r\n        setItems((old) =>\r\n            old.filter((row, index) => {\r\n                return index !== rowIndexToBeDeleted;\r\n            })\r\n        );\r\n        deleteRowData(deletedRow);\r\n    };\r\n\r\n    //Gets called when group sort is applied or cleared\r\n    const doGroupSort = (sortOptions) => {\r\n        setGroupSortOptions(sortOptions);\r\n    };\r\n\r\n    //Gets called when page scroll reaches the bottom of the grid.\r\n    //Fetch the next set of data and append it to the variable holding grid data and update the state value.\r\n    //Also update the hasNextPage state value to False once API response is empty, to avoid unwanted API calls.\r\n    const loadNextPage = (...args) => {\r\n        const newIndex = args && args.length > 0 ? args[0] : -1;\r\n        if (newIndex >= 0 && hasNextPage) {\r\n            setIsLoading(true);\r\n            setIsNextPageLoading(true);\r\n            fetchData(newIndex).then((data) => {\r\n                setIsLoading(false);\r\n                setHasNextPage(data && data.length > 0);\r\n                setIsNextPageLoading(false);\r\n                setItems(items.concat(data));\r\n            });\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        //Make API call to fetch initial set of data.\r\n        setIsLoading(true);\r\n        fetchData(0).then((data) => {\r\n            setIsLoading(false);\r\n            setItems(data);\r\n        });\r\n    }, []);\r\n\r\n    //Sort the data based on the user selected group sort optipons\r\n    const data = getSortedData([...items]);\r\n\r\n    if (data && data.length > 0) {\r\n        return (\r\n            <div>\r\n                <Customgrid\r\n                    title={title}\r\n                    gridHeight={gridHeight}\r\n                    gridWidth={gridWidth}\r\n                    managableColumns={gridColumns}\r\n                    originalColumns={gridColumns}\r\n                    data={data}\r\n                    originalData={items}\r\n                    rowEditOverlay={rowEditOverlay}\r\n                    rowEditData={rowEditData}\r\n                    updateRowInGrid={updateRowInGrid}\r\n                    deletePopUpOverLay={deletePopUpOverLay}\r\n                    deleteRowFromGrid={deleteRowFromGrid}\r\n                    globalSearchLogic={globalSearchLogic}\r\n                    selectBulkData={selectBulkData}\r\n                    calculateRowHeight={calculateRowHeight}\r\n                    renderExpandedContent={renderExpandedContent}\r\n                    hasNextPage={hasNextPage}\r\n                    isNextPageLoading={isNextPageLoading}\r\n                    loadNextPage={loadNextPage}\r\n                    doGroupSort={doGroupSort}\r\n                />\r\n                {isNextPageLoading ? <h2 style={{ textAlign: \"center\" }}>Loading...</h2> : null}\r\n            </div>\r\n        );\r\n    } else if (isLoading) {\r\n        return <h2 style={{ textAlign: \"center\", marginTop: \"70px\" }}>Initializing Grid...</h2>;\r\n    } else {\r\n        return <h2 style={{ textAlign: \"center\", marginTop: \"70px\" }}>Invalid Data or Column Configurations</h2>;\r\n    }\r\n});\r\n\r\nexport default Grid;\r\n"],"names":["RowSelector","memo","forwardRef","indeterminate","rest","ref","checkValue","setCheckValue","useState","defaultRef","useRef","resolvedRef","onChange","useEffect","current","DefaultColumnFilter","column","filterValue","setFilter","e","target","value","undefined","GlobalFilter","globalFilter","setGlobalFilter","setValue","useAsyncDebounce","require","RowOptions","props","row","originalData","DeletePopUpOverLay","deleteRowFromGrid","RowEditOverlay","rowEditData","updateRowInGrid","index","original","isRowOptionsOpen","setRowOptionsOpen","isRowEditOverlayOpen","setRowEditOverlayOpen","isDeleteOverlayOpen","setDeleteOverlayOpen","openRowOptionsOverlay","closeRowOptionsOverlay","openRowEditOverlay","closeRowEditOverlay","updateRow","updatedrow","originalDataIndex","findIndex","data","openDeleteOverlay","closeDeleteOverlay","deleteRow","RowEdit","RowPin","RowDelete","ItemTypes","COLUMN","ColumnItem","id","name","moveColumn","findColumn","innerCells","originalIndex","isDragging","drag","useDrag","item","type","collect","monitor","end","dropResult","droppedId","getItem","didDrop","drop","useDrop","accept","canDrop","hover","draggedId","overIndex","opacity","node","cursor","ColumnsList","updateColumnsInState","columnsToManage","columnId","atIndex","update","$splice","filter","c","indexOf","display","flexWrap","map","Header","ColumnReordering","isManageColumnOpen","toggleManageColumns","originalColumns","managedColumns","setManagedColumns","searchedColumns","setSearchedColumns","isErrorDisplayed","setIsErrorDisplayed","HTML5toTouch","backends","backend","HTML5Backend","TouchBackend","options","enableMouseEvents","preview","transition","TouchTransition","filterColumnsList","event","toLowerCase","includes","columns","isCheckboxSelected","header","length","selectedColumn","selectAllColumns","currentTarget","checked","selectSingleColumn","indexOfColumnToAdd","itemToAdd","prevItemIndex","newColumnsList","slice","splice","doColumnUpdate","updateColumnStructure","resetColumnUpdate","marginLeft","color","MultiBackend","SORT_ITEM","SortItem","sortOption","moveSort","findSort","updateSingleSortingOption","copySortOption","deleteSortOption","getInncerCellsOfColumn","columnAccessor","find","accessor","changeSortByOptions","newSortByValue","innerCellsList","order","changeSortOnOptions","newSortOnValue","sortBy","changeSortOrderOptions","newSortOrderValue","sortOn","copySort","deleteSort","orgItem","innerCellItem","innerCellIndex","SortingList","updateSortingOptions","sortOptions","sortId","sort","GroupSort","isGroupSortOverLayOpen","toggleGroupSortOverLay","applyGroupSort","sortingOrders","defaultSortingOption","setSortOptions","sortingOptions","addSortingOptions","clearSortingOptions","sortIndex","sortByValue","sortOnValue","sortOrder","newOptionsList","newSortingOption","updatedSortOptions","option","newOption","concat","applySort","isError","optionIndex","duplicateSort","opt","optIndex","ExportData","isExportOverlayOpen","toggleExportDataOverlay","rows","warning","setWarning","isDownload","exportRowData","filteredRow","filteredRowValues","downLaodFileType","downLaodFileTypeCount","document","getElementsByName","i","push","forEach","rowDetails","keys","Object","getOwnPropertyNames","filteredColumnVal","rowFilteredValues","key","columnName","columnValue","values","toString","replace","arrObj","downloadPDF","downloadXLSFile","downloadCSVFile","unit","size","orientation","doc","jsPDF","setFontSize","title","headers","content","startY","head","body","text","autoTable","save","filteredRowValue","fileType","fileExtension","fileName","ws","XLSX","json_to_sheet","wb","Sheets","SheetNames","excelBuffer","bookType","Blob","FileSaver","textAlign","listRef","createRef","Customgrid","gridHeight","gridWidth","managableColumns","rowEditOverlay","deletePopUpOverLay","globalSearchLogic","selectBulkData","calculateRowHeight","renderExpandedContent","hasNextPage","isNextPageLoading","loadNextPage","doGroupSort","setColumns","marginTop","itemCount","loadMoreItems","isItemLoaded","isFilterOpen","setFilterOpen","toggleColumnFilter","setGroupSortOverLay","setManageColumnOpen","newColumnStructure","setIsExportOverlayOpen","defaultColumn","useMemo","Filter","getTableProps","getTableBodyProps","headerGroups","prepareRow","selectedFlatRows","state","useTable","autoResetFilters","autoResetGlobalFilter","autoResetSortBy","autoResetExpanded","autoResetSelectedRows","useFilters","useGlobalFilter","useSortBy","useExpanded","useRowSelect","useFlexLayout","useResizeColumns","hooks","allColumns","disableResizing","disableFilters","disableSortBy","minWidth","width","maxWidth","getToggleAllRowsSelectedProps","Cell","getToggleRowSelectedProps","getToggleRowExpandedProps","isExpanded","bulkSelector","resetAfterIndex","RenderRow","useCallback","style","getRowProps","cells","cell","getCellProps","render","height","overflowX","overflowY","headerGroup","getHeaderGroupProps","getHeaderProps","getSortByToggleProps","isSorted","isSortedDesc","canResize","getResizerProps","onItemsRendered","List","list","Grid","fetchData","updateRowData","deleteRowData","setHasNextPage","setIsNextPageLoading","isLoading","setIsLoading","items","setItems","groupSortOptions","setGroupSortOptions","processedColumns","sortValue","isInnerCellsPresent","sortType","rowA","rowB","filterText","rowValue","filterCols","cellValue","gridColumns","compareValues","compareOrder","v1","v2","getSortedData","x","y","compareResult","newResult","getOriginalDataIndex","sortedDataIndex","updatedData","useImperativeHandle","updateCellInGrid","rowIndex","old","updatedRow","rowIndexToBeDeleted","deletedRow","args","newIndex","then"],"mappings":"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"}