{"version":3,"file":"index.modern.js","sources":["../src/Functions/RowSelector.js","../src/Functions/DefaultColumnFilter.js","../src/Functions/GlobalFilter.js","../src/Images/RowDelete.svg","../src/Images/RowEdit.svg","../src/Images/RowPin.png","../src/Functions/RowOptions.js","../src/Overlays/managecolumns/ItemTypes.js","../src/Overlays/managecolumns/columnItem.js","../src/Overlays/managecolumns/columnsList.js","../src/Overlays/managecolumns/index.js","../src/Overlays/groupsort/ItemTypes.js","../src/Images/SortCopy.svg","../src/Images/SortDelete.svg","../src/Overlays/groupsort/sortingItem.js","../src/Overlays/groupsort/sortingList.js","../src/Overlays/groupsort/index.js","../src/Overlays/exportdata/index.js","../src/Customgrid.js","../src/index.js"],"sourcesContent":["import React, { forwardRef, useRef, useEffect, useState, memo } from \"react\";\r\n\r\nconst RowSelector = memo(\r\n    forwardRef(({ indeterminate, ...rest }, ref) => {\r\n        const [checkValue, setCheckValue] = useState(indeterminate);\r\n        const defaultRef = useRef();\r\n        const resolvedRef = ref || defaultRef;\r\n        const onChange = () => {\r\n            setCheckValue(!indeterminate);\r\n        };\r\n        useEffect(() => {\r\n            resolvedRef.current.indeterminate = indeterminate;\r\n        }, [resolvedRef, indeterminate]);\r\n        return (\r\n            <div className=\"check-wrap\">\r\n                <input type=\"checkbox\" checked={checkValue} onChange={onChange} ref={resolvedRef} {...rest} />\r\n            </div>\r\n        );\r\n    })\r\n);\r\n\r\nexport default RowSelector;\r\n","import React, { memo } from \"react\";\r\n\r\nconst DefaultColumnFilter = memo(({ column: { filterValue, setFilter } }) => {\r\n    return (\r\n        <input\r\n            className=\"txt\"\r\n            value={filterValue || \"\"}\r\n            onChange={(e) => {\r\n                setFilter(e.target.value || undefined);\r\n            }}\r\n            placeholder=\"Search\"\r\n        />\r\n    );\r\n});\r\n\r\nexport default DefaultColumnFilter;\r\n","import React, { memo, useState } from \"react\";\r\nimport { useAsyncDebounce } from \"react-table\";\r\n\r\nconst GlobalFilter = memo(({ globalFilter, setGlobalFilter }) => {\r\n    const [value, setValue] = useState(globalFilter);\r\n\r\n    const onChange = useAsyncDebounce((value) => {\r\n        setGlobalFilter(value || undefined);\r\n    }, 200);\r\n\r\n    return (\r\n        <div className=\"txt-wrap\">\r\n            <input\r\n                type=\"text\"\r\n                value={value || \"\"}\r\n                onChange={(e) => {\r\n                    setValue(e.target.value);\r\n                    onChange(e.target.value);\r\n                }}\r\n                className=\"txt\"\r\n                placeholder=\"Search\"\r\n            />\r\n            <i className=\"fa fa-search fa-6\" aria-hidden=\"true\"></i>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default GlobalFilter;\r\n","/* loaded by smart-asset */\nexport default require(\"./RowDelete~RKolkpAF.svg\")","/* loaded by smart-asset */\nexport default require(\"./RowEdit~BuKwAcSl.svg\")","/* loaded by smart-asset */\nexport default require(\"./RowPin~qQRdvcXq.png\")","import React, { useState, memo } from \"react\";\r\nimport ClickAwayListener from \"react-click-away-listener\";\r\nimport RowDelete from \"../Images/RowDelete.svg\";\r\nimport RowEdit from \"../Images/RowEdit.svg\";\r\nimport RowPin from \"../Images/RowPin.png\";\r\n\r\nconst RowOptions = memo((props) => {\r\n    const { row, originalData, DeletePopUpOverLay, deleteRowFromGrid, RowEditOverlay, rowEditData, updateRowInGrid } = props;\r\n    const { index, original } = row;\r\n\r\n    const [isRowOptionsOpen, setRowOptionsOpen] = useState(false);\r\n    const [isRowEditOverlayOpen, setRowEditOverlayOpen] = useState(false);\r\n    const [isDeleteOverlayOpen, setDeleteOverlayOpen] = useState(false);\r\n\r\n    const openRowOptionsOverlay = () => {\r\n        setRowOptionsOpen(true);\r\n    };\r\n\r\n    const closeRowOptionsOverlay = () => {\r\n        setRowOptionsOpen(false);\r\n    };\r\n\r\n    const openRowEditOverlay = () => {\r\n        setRowOptionsOpen(false);\r\n        setRowEditOverlayOpen(true);\r\n    };\r\n\r\n    const closeRowEditOverlay = () => {\r\n        setRowEditOverlayOpen(false);\r\n    };\r\n\r\n    const updateRow = (updatedrow) => {\r\n        const originalDataIndex = originalData.findIndex((data) => {\r\n            return data === original;\r\n        });\r\n        updateRowInGrid(originalDataIndex, updatedrow);\r\n    };\r\n\r\n    const openDeleteOverlay = () => {\r\n        setRowOptionsOpen(false);\r\n        setDeleteOverlayOpen(true);\r\n    };\r\n\r\n    const closeDeleteOverlay = () => {\r\n        setDeleteOverlayOpen(false);\r\n    };\r\n\r\n    const deleteRow = () => {\r\n        const originalDataIndex = originalData.findIndex((data) => {\r\n            return data === original;\r\n        });\r\n        deleteRowFromGrid(originalDataIndex, original);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"row-options-wrap\">\r\n                <span className=\"icon-row-options\" onClick={openRowOptionsOverlay}>\r\n                    <i></i>\r\n                    <i></i>\r\n                    <i></i>\r\n                </span>\r\n                {isRowOptionsOpen ? (\r\n                    <ClickAwayListener onClickAway={closeRowOptionsOverlay}>\r\n                        <div className=\"row-options-overlay\">\r\n                            <ul>\r\n                                <li>\r\n                                    <span onClick={openRowEditOverlay}>\r\n                                        <i>\r\n                                            <img src={RowEdit} alt=\"cargo\" />\r\n                                        </i>\r\n                                        <span>Edit</span>\r\n                                    </span>\r\n                                </li>\r\n                                <li>\r\n                                    <span>\r\n                                        <i>\r\n                                            <img src={RowPin} alt=\"cargo\" width=\"15\" height=\"15\" />\r\n                                        </i>\r\n                                        <span>Pin This row</span>\r\n                                    </span>\r\n                                </li>\r\n                                <li>\r\n                                    <span onClick={openDeleteOverlay}>\r\n                                        <i>\r\n                                            <img src={RowDelete} alt=\"cargo\" />\r\n                                        </i>\r\n                                        <span>Delete</span>\r\n                                    </span>\r\n                                </li>\r\n                            </ul>\r\n                            <span className=\"close\" onClick={closeRowOptionsOverlay}>\r\n                                <i className=\"fa fa-close\"></i>\r\n                            </span>\r\n                        </div>\r\n                    </ClickAwayListener>\r\n                ) : null}\r\n            </div>\r\n            {isRowEditOverlayOpen ? (\r\n                <RowEditOverlay\r\n                    row={original}\r\n                    rowEditData={rowEditData}\r\n                    closeRowEditOverlay={closeRowEditOverlay}\r\n                    updateRow={updateRow}\r\n                />\r\n            ) : null}\r\n            {isDeleteOverlayOpen ? <DeletePopUpOverLay closeDeleteOverlay={closeDeleteOverlay} deleteRow={deleteRow} /> : null}\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default RowOptions;\r\n","export const ItemTypes = {\r\n    COLUMN: \"column\"\r\n};\r\n","import React from \"react\";\r\nimport { useDrag, useDrop } from \"react-dnd\";\r\nimport { ItemTypes } from \"./ItemTypes\";\r\n\r\nconst ColumnItem = ({ id, name, moveColumn, findColumn, innerCells }) => {\r\n    const originalIndex = findColumn(id).index;\r\n\r\n    const [{ isDragging }, drag] = useDrag({\r\n        item: { type: ItemTypes.COLUMN, id, originalIndex },\r\n        collect: (monitor) => ({\r\n            isDragging: monitor.isDragging()\r\n        }),\r\n        end: (dropResult, monitor) => {\r\n            const { id: droppedId, originalIndex } = monitor.getItem();\r\n            const didDrop = monitor.didDrop();\r\n            if (!didDrop) {\r\n                moveColumn(droppedId, originalIndex);\r\n            }\r\n        }\r\n    });\r\n\r\n    const [, drop] = useDrop({\r\n        accept: ItemTypes.COLUMN,\r\n        canDrop: () => false,\r\n        hover({ id: draggedId }) {\r\n            if (draggedId !== id) {\r\n                const { index: overIndex } = findColumn(id);\r\n                moveColumn(draggedId, overIndex);\r\n            }\r\n        }\r\n    });\r\n\r\n    const opacity = isDragging ? 0.1 : 1;\r\n\r\n    return (\r\n        <div style={{ opacity }}>\r\n            <div className=\"column__reorder\">\r\n                <div ref={(node) => drag(drop(node))} style={{ cursor: \"move\" }} className=\"\">\r\n                    <i className=\"fa fa-align-justify\" aria-hidden=\"true\"></i>\r\n                </div>\r\n                <div className=\"\">{name}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ColumnItem;\r\n","import React, { useState } from \"react\";\r\nimport { useDrop } from \"react-dnd\";\r\nimport update from \"immutability-helper\";\r\nimport { ItemTypes } from \"./ItemTypes\";\r\nimport ColumnItem from \"./columnItem\";\r\n\r\nconst ColumnsList = (props) => {\r\n    const { updateColumnsInState, columnsToManage } = props;\r\n\r\n    const moveColumn = (columnId, atIndex) => {\r\n        const { column, index } = findColumn(columnId);\r\n        updateColumnsInState(\r\n            update(columnsToManage, {\r\n                $splice: [\r\n                    [index, 1],\r\n                    [atIndex, 0, column]\r\n                ]\r\n            })\r\n        );\r\n    };\r\n\r\n    const findColumn = (columnId) => {\r\n        const column = columnsToManage.filter((c) => `${c.columnId}` === columnId)[0];\r\n        return {\r\n            column,\r\n            index: columnsToManage.indexOf(column)\r\n        };\r\n    };\r\n\r\n    const [, drop] = useDrop({ accept: ItemTypes.COLUMN });\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div ref={drop} style={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n                {columnsToManage.map((column, index) => {\r\n                    return (\r\n                        <ColumnItem\r\n                            key={index}\r\n                            id={`${column.columnId}`}\r\n                            name={`${column.Header}`}\r\n                            moveColumn={moveColumn}\r\n                            findColumn={findColumn}\r\n                            innerCells={column.innerCells}\r\n                        />\r\n                    );\r\n                })}\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default ColumnsList;\r\n","import React, { memo, useState, useEffect } from \"react\";\r\nimport { DndProvider } from \"react-dnd\";\r\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\r\nimport { TouchBackend } from \"react-dnd-touch-backend\";\r\nimport MultiBackend, { TouchTransition } from \"react-dnd-multi-backend\";\r\nimport ClickAwayListener from \"react-click-away-listener\";\r\nimport ColumnsList from \"./columnsList\";\r\n\r\nconst ColumnReordering = memo((props) => {\r\n    const { isManageColumnOpen, toggleManageColumns, originalColumns, isExpandContentAvailable, additionalColumn } = props;\r\n\r\n    const additionalColumnHeader = additionalColumn && additionalColumn.length ? additionalColumn[0].Header : \"\";\r\n    const getRemarksColumnIfAvailable = () => {\r\n        return isExpandContentAvailable ? additionalColumn : [];\r\n    };\r\n\r\n    const [managedColumns, setManagedColumns] = useState(originalColumns);\r\n    const [searchedColumns, setSearchedColumns] = useState([...originalColumns].concat(getRemarksColumnIfAvailable()));\r\n    const [remarksColumnToManage, setRemarksColumnToManage] = useState(getRemarksColumnIfAvailable);\r\n    const [isErrorDisplayed, setIsErrorDisplayed] = useState(false);\r\n\r\n    const HTML5toTouch = {\r\n        backends: [\r\n            {\r\n                backend: HTML5Backend\r\n            },\r\n            {\r\n                backend: TouchBackend,\r\n                options: { enableMouseEvents: true },\r\n                preview: true,\r\n                transition: TouchTransition\r\n            }\r\n        ]\r\n    };\r\n\r\n    const filterColumnsList = (event) => {\r\n        let { value } = event ? event.target : \"\";\r\n        value = value ? value.toLowerCase() : \"\";\r\n        if (value != \"\") {\r\n            setSearchedColumns(\r\n                originalColumns\r\n                    .filter((column) => {\r\n                        return column.Header.toLowerCase().includes(value);\r\n                    })\r\n                    .concat(\r\n                        getRemarksColumnIfAvailable().filter((column) => {\r\n                            return column.Header.toLowerCase().includes(value);\r\n                        })\r\n                    )\r\n            );\r\n        } else {\r\n            setSearchedColumns(originalColumns.concat(getRemarksColumnIfAvailable()));\r\n        }\r\n    };\r\n\r\n    const updateColumnsInState = (columns) => {\r\n        setManagedColumns(columns);\r\n    };\r\n\r\n    const isCheckboxSelected = (header) => {\r\n        if (header === additionalColumnHeader) {\r\n            return remarksColumnToManage.length > 0;\r\n        } else if (header === \"Select All\") {\r\n            return searchedColumns.length === managedColumns.length + remarksColumnToManage.length;\r\n        } else {\r\n            const selectedColumn = managedColumns.filter((column) => {\r\n                return column.Header === header;\r\n            });\r\n            return selectedColumn && selectedColumn.length > 0;\r\n        }\r\n    };\r\n\r\n    const selectAllColumns = (event) => {\r\n        if (event.currentTarget.checked) {\r\n            setManagedColumns(originalColumns);\r\n            setRemarksColumnToManage(getRemarksColumnIfAvailable());\r\n        } else {\r\n            setManagedColumns([]);\r\n            setRemarksColumnToManage([]);\r\n        }\r\n    };\r\n\r\n    const selectSingleColumn = (event) => {\r\n        const { currentTarget } = event;\r\n        const { checked, value } = currentTarget;\r\n\r\n        if (value === additionalColumnHeader) {\r\n            if (checked) {\r\n                setRemarksColumnToManage(additionalColumn);\r\n            } else {\r\n                setRemarksColumnToManage([]);\r\n            }\r\n        } else {\r\n            //If column checkbox is checked\r\n            if (checked) {\r\n                //Find the index of selected column from original column array and also find the user selected column\r\n                let indexOfColumnToAdd = originalColumns.findIndex((column) => {\r\n                    return column.Header == value;\r\n                });\r\n                const itemToAdd = originalColumns[indexOfColumnToAdd];\r\n\r\n                //Loop through the managedColumns array to find the position of the column that is present previous to the user selected column\r\n                //Find index of that previous column and push the new column to add in that position\r\n                let prevItemIndex = -1;\r\n                while (indexOfColumnToAdd > 0 && prevItemIndex === -1) {\r\n                    prevItemIndex = managedColumns.findIndex((column) => {\r\n                        return column.Header == originalColumns[indexOfColumnToAdd - 1].Header;\r\n                    });\r\n                    indexOfColumnToAdd = indexOfColumnToAdd - 1;\r\n                }\r\n\r\n                const newColumnsList = managedColumns.slice(0); //Copying state value\r\n                newColumnsList.splice(prevItemIndex + 1, 0, itemToAdd);\r\n                setManagedColumns(newColumnsList);\r\n            } else {\r\n                setManagedColumns(\r\n                    managedColumns.filter((column) => {\r\n                        return column.Header !== value;\r\n                    })\r\n                );\r\n            }\r\n        }\r\n    };\r\n\r\n    const doColumnUpdate = () => {\r\n        setIsErrorDisplayed(false);\r\n        if (managedColumns && managedColumns.length > 0) {\r\n            setSearchedColumns(originalColumns.concat(getRemarksColumnIfAvailable()));\r\n            props.updateColumnStructure(managedColumns, remarksColumnToManage);\r\n        } else {\r\n            setIsErrorDisplayed(true);\r\n        }\r\n    };\r\n\r\n    const resetColumnUpdate = () => {\r\n        setManagedColumns(originalColumns);\r\n        setSearchedColumns(originalColumns.concat(getRemarksColumnIfAvailable()));\r\n        setRemarksColumnToManage(getRemarksColumnIfAvailable());\r\n        props.updateColumnStructure(originalColumns, getRemarksColumnIfAvailable());\r\n    };\r\n\r\n    if (isManageColumnOpen) {\r\n        return (\r\n            <ClickAwayListener onClickAway={toggleManageColumns}>\r\n                <div className=\"columns--grid\">\r\n                    <div className=\"column__grid\">\r\n                        <div className=\"column__chooser\">\r\n                            <div className=\"column__header\">\r\n                                <div className=\"\">\r\n                                    <strong>Column Chooser</strong>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"column__body\">\r\n                                <div>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        placeholder=\"Search column\"\r\n                                        className=\"custom__ctrl\"\r\n                                        onChange={filterColumnsList}\r\n                                    ></input>\r\n                                </div>\r\n                                <div className=\"column__selectAll\">\r\n                                    <div className=\"column__checkbox\">\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            value=\"Select All\"\r\n                                            checked={isCheckboxSelected(\"Select All\")}\r\n                                            onChange={selectAllColumns}\r\n                                        ></input>\r\n                                    </div>\r\n                                    <div className=\"column__selectTxt\">Select All</div>\r\n                                </div>\r\n                                {searchedColumns.map((column, index) => {\r\n                                    return (\r\n                                        <div className=\"column__wrap\" key={index}>\r\n                                            <div className=\"column__checkbox\">\r\n                                                <input\r\n                                                    type=\"checkbox\"\r\n                                                    value={column.Header}\r\n                                                    checked={isCheckboxSelected(column.Header)}\r\n                                                    onChange={selectSingleColumn}\r\n                                                ></input>\r\n                                            </div>\r\n                                            <div className=\"column__txt\">{column.Header}</div>\r\n                                        </div>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"column__settings\">\r\n                            <div className=\"column__header\">\r\n                                <div className=\"column__headerTxt\">\r\n                                    <strong>Column Settings</strong>\r\n                                    {isErrorDisplayed ? (\r\n                                        <strong style={{ marginLeft: \"10px\", color: \"red\" }}>\r\n                                            Select at least one column (other than {additionalColumnHeader})\r\n                                        </strong>\r\n                                    ) : null}\r\n                                </div>\r\n                                <div className=\"column__close\" onClick={toggleManageColumns}>\r\n                                    <i className=\"fa fa-times\" aria-hidden=\"true\"></i>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"column__body\">\r\n                                <DndProvider backend={MultiBackend} options={HTML5toTouch}>\r\n                                    <ColumnsList columnsToManage={managedColumns} updateColumnsInState={updateColumnsInState} />\r\n                                </DndProvider>\r\n                                {remarksColumnToManage && remarksColumnToManage.length > 0 ? (\r\n                                    <div className=\"column__reorder full-width\">\r\n                                        <div className=\"\">{remarksColumnToManage[0].Header}</div>\r\n                                    </div>\r\n                                ) : null}\r\n                            </div>\r\n                            <div className=\"column__footer\">\r\n                                <div className=\"column__btns\">\r\n                                    <button className=\"btns\" onClick={resetColumnUpdate}>\r\n                                        Reset\r\n                                    </button>\r\n                                    <button className=\"btns\" onClick={toggleManageColumns}>\r\n                                        Cancel\r\n                                    </button>\r\n                                    <button className=\"btns btns__save\" onClick={doColumnUpdate}>\r\n                                        Save\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </ClickAwayListener>\r\n        );\r\n    } else {\r\n        return <div></div>;\r\n    }\r\n});\r\n\r\nexport default ColumnReordering;\r\n","export const ItemTypes = {\n    SORT_ITEM: \"SORT_ITEM\"\n};\n","/* loaded by smart-asset */\nexport default require(\"./SortCopy~IGKyJbDR.svg\")","/* loaded by smart-asset */\nexport default require(\"./SortDelete~MFpZtzWS.svg\")","import React from \"react\";\nimport { useDrag, useDrop } from \"react-dnd\";\nimport { ItemTypes } from \"./ItemTypes\";\nimport SortCopy from \"../../Images/SortCopy.svg\";\nimport SortDelete from \"../../Images/SortDelete.svg\";\n\nconst SortItem = ({\n    id,\n    sortOption,\n    originalColumns,\n    moveSort,\n    findSort,\n    updateSingleSortingOption,\n    copySortOption,\n    deleteSortOption\n}) => {\n    const originalIndex = findSort(id).index;\n\n    const [{ isDragging }, drag] = useDrag({\n        item: { type: ItemTypes.SORT_ITEM, id, originalIndex },\n        collect: (monitor) => ({\n            isDragging: monitor.isDragging()\n        }),\n        end: (dropResult, monitor) => {\n            const { id: droppedId, originalIndex } = monitor.getItem();\n            const didDrop = monitor.didDrop();\n            if (!didDrop) {\n                moveSort(droppedId, originalIndex);\n            }\n        }\n    });\n\n    const [, drop] = useDrop({\n        accept: ItemTypes.SORT_ITEM,\n        canDrop: () => false,\n        hover({ id: draggedId }) {\n            if (draggedId !== id) {\n                const { index: overIndex } = findSort(id);\n                moveSort(draggedId, overIndex);\n            }\n        }\n    });\n\n    const getInncerCellsOfColumn = (columnAccessor) => {\n        return originalColumns.find((column) => {\n            return column.accessor === columnAccessor;\n        }).innerCells;\n    };\n\n    const changeSortByOptions = (event) => {\n        const newSortByValue = event.target.value;\n        const innerCellsList = getInncerCellsOfColumn(newSortByValue);\n        updateSingleSortingOption(\n            id,\n            newSortByValue,\n            innerCellsList && innerCellsList.length > 0 ? innerCellsList[0].accessor : \"value\",\n            sortOption.order\n        );\n    };\n\n    const changeSortOnOptions = (event) => {\n        const newSortOnValue = event.target.value;\n        updateSingleSortingOption(id, sortOption.sortBy, newSortOnValue, sortOption.order);\n    };\n\n    const changeSortOrderOptions = (event) => {\n        const newSortOrderValue = event.target.value;\n        updateSingleSortingOption(id, sortOption.sortBy, sortOption.sortOn, newSortOrderValue);\n    };\n\n    const copySort = () => {\n        copySortOption(id);\n    };\n\n    const deleteSort = () => {\n        deleteSortOption(id);\n    };\n\n    const opacity = isDragging ? 0.5 : 1;\n\n    return (\n        <div className=\"sort__bodyContent\" style={{ opacity }}>\n            <div className=\"sort__reorder\">\n                <div ref={(node) => drag(drop(node))} style={{ cursor: \"move\" }} className=\"\">\n                    <i className=\"fa fa-navicon\"></i>\n                </div>\n            </div>\n\n            <div className=\"sort__reorder\">\n                <div className=\"sort__file\">\n                    <select className=\"custom__ctrl\" onChange={changeSortByOptions} value={sortOption.sortBy}>\n                        {originalColumns.map((orgItem, index) => (\n                            <option key={index} value={orgItem.accessor}>\n                                {orgItem.Header}\n                            </option>\n                        ))}\n                    </select>\n                </div>\n            </div>\n            <div className=\"sort__reorder\">\n                <div className=\"sort__file\">\n                    <select className=\"custom__ctrl\" onChange={changeSortOnOptions} value={sortOption.sortOn}>\n                        {getInncerCellsOfColumn(sortOption.sortBy) && getInncerCellsOfColumn(sortOption.sortBy).length > 0 ? (\n                            getInncerCellsOfColumn(sortOption.sortBy).map((innerCellItem, innerCellIndex) => (\n                                <option key={innerCellIndex} value={innerCellItem.accessor}>\n                                    {innerCellItem.Header}\n                                </option>\n                            ))\n                        ) : (\n                            <option key={0} value=\"value\">\n                                Value\n                            </option>\n                        )}\n                    </select>\n                </div>\n            </div>\n            <div className=\"sort__reorder\">\n                <div className=\"sort__file\">\n                    <select className=\"custom__ctrl\" value={sortOption.order} onChange={changeSortOrderOptions}>\n                        <option>Ascending</option>\n                        <option>Descending</option>\n                    </select>\n                </div>\n            </div>\n            <div className=\"sort__reorder\">\n                <div className=\"sort__icon\" type={\"button\"} onClick={copySort}>\n                    <i>\n                        <img src={SortCopy} alt=\"copy sort\" />\n                    </i>\n                </div>\n            </div>\n            <div className=\"sort__reorder\">\n                <div className=\"sort__icon\" type={\"button\"} onClick={deleteSort}>\n                    <i>\n                        <img src={SortDelete} alt=\"copy sort\" />\n                    </i>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default SortItem;\n","import React from \"react\";\nimport { useDrop } from \"react-dnd\";\nimport update from \"immutability-helper\";\nimport { ItemTypes } from \"./ItemTypes\";\nimport SortItem from \"./sortingItem\";\n\nconst SortingList = (props) => {\n    const { updateSortingOptions, sortOptions } = props;\n\n    const moveSort = (sortId, atIndex) => {\n        const { sort, index } = findSort(sortId);\n        updateSortingOptions(\n            update(sortOptions, {\n                $splice: [\n                    [index, 1],\n                    [atIndex, 0, sort]\n                ]\n            })\n        );\n    };\n\n    const findSort = (sortId) => {\n        const sort = sortOptions.filter((c, index) => index === sortId)[0];\n        return {\n            sort,\n            index: sortOptions.indexOf(sort)\n        };\n    };\n\n    const [, drop] = useDrop({ accept: ItemTypes.SORT_ITEM });\n\n    return (\n        <React.Fragment>\n            <div ref={drop} style={{ display: \"flex\", flexWrap: \"wrap\" }}>\n                {sortOptions && sortOptions.length > 0 ? (\n                    <ul>\n                        <li>Sort By</li>\n                        <li>Sort On</li>\n                        <li>Order</li>\n                    </ul>\n                ) : null}\n                {sortOptions.map((sortOption, index) => {\n                    return (\n                        <SortItem\n                            id={index}\n                            key={index}\n                            sortOption={sortOption}\n                            originalColumns={props.originalColumns}\n                            moveSort={moveSort}\n                            findSort={findSort}\n                            updateSingleSortingOption={props.updateSingleSortingOption}\n                            copySortOption={props.copySortOption}\n                            deleteSortOption={props.deleteSortOption}\n                        />\n                    );\n                })}\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default SortingList;\n","import React, { memo, useState } from \"react\";\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { TouchBackend } from \"react-dnd-touch-backend\";\nimport MultiBackend, { TouchTransition } from \"react-dnd-multi-backend\";\nimport ClickAwayListener from \"react-click-away-listener\";\nimport SortingList from \"./sortingList\";\n\nconst GroupSort = memo((props) => {\n    const { isGroupSortOverLayOpen, toggleGroupSortOverLay, applyGroupSort, originalColumns } = props;\n\n    const sortingOrders = [\"Ascending\", \"Descending\"];\n    const defaultSortingOption = [\n        {\n            sortBy: originalColumns[0].accessor,\n            sortOn: originalColumns[0].innerCells ? originalColumns[0].innerCells[0].accessor : \"value\",\n            order: sortingOrders[0]\n        }\n    ];\n\n    const [sortOptions, setSortOptions] = useState([]);\n    const [isErrorDisplayed, setIsErrorDisplayed] = useState(false);\n\n    const HTML5toTouch = {\n        backends: [\n            {\n                backend: HTML5Backend\n            },\n            {\n                backend: TouchBackend,\n                options: { enableMouseEvents: true },\n                preview: true,\n                transition: TouchTransition\n            }\n        ]\n    };\n\n    const updateSortingOptions = (sortingOptions) => {\n        setSortOptions(sortingOptions);\n    };\n\n    const addSortingOptions = () => {\n        setSortOptions([...sortOptions, ...defaultSortingOption]);\n    };\n\n    const clearSortingOptions = () => {\n        setSortOptions([]);\n        applyGroupSort([]);\n        toggleGroupSortOverLay();\n    };\n\n    const updateSingleSortingOption = (sortIndex, sortByValue, sortOnValue, sortOrder) => {\n        const newOptionsList = sortOptions.slice(0);\n        const newSortingOption = {\n            sortBy: sortByValue,\n            sortOn: sortOnValue,\n            order: sortOrder\n        };\n        const updatedSortOptions = newOptionsList.map((option, index) => (index === sortIndex ? newSortingOption : option));\n        updateSortingOptions(updatedSortOptions);\n    };\n\n    const copySortOption = (sortIndex) => {\n        const newOption = sortOptions.slice(0)[sortIndex];\n        setSortOptions(sortOptions.concat(newOption));\n    };\n\n    const deleteSortOption = (sortIndex) => {\n        setSortOptions(\n            sortOptions.filter((option, index) => {\n                return index !== sortIndex;\n            })\n        );\n    };\n\n    const applySort = () => {\n        let isError = false;\n        sortOptions.map((option, index) => {\n            const { sortBy, sortOn } = option;\n            const optionIndex = index;\n            const duplicateSort = sortOptions.find((opt, optIndex) => {\n                return sortBy === opt.sortBy && sortOn === opt.sortOn && optionIndex !== optIndex;\n            });\n            if (duplicateSort) {\n                isError = true;\n            }\n        });\n        if (!isError) {\n            applyGroupSort(sortOptions);\n            toggleGroupSortOverLay();\n        }\n        setIsErrorDisplayed(isError);\n    };\n\n    if (isGroupSortOverLayOpen) {\n        return (\n            <ClickAwayListener onClickAway={toggleGroupSortOverLay}>\n                <div className=\"sorts--grid\">\n                    <div className=\"sort__grid\">\n                        <div className=\"sort__settings\">\n                            <div className=\"sort__header\">\n                                <div className=\"sort__headerTxt\">Sort</div>\n                                <div className=\"sort__close\">\n                                    <i className=\"fa fa-times\" aria-hidden=\"true\" onClick={toggleGroupSortOverLay}></i>\n                                </div>\n                            </div>\n                            <div className=\"sort__body\">\n                                <DndProvider backend={MultiBackend} options={HTML5toTouch}>\n                                    <SortingList\n                                        sortOptions={sortOptions}\n                                        originalColumns={originalColumns}\n                                        updateSortingOptions={updateSortingOptions}\n                                        updateSingleSortingOption={updateSingleSortingOption}\n                                        copySortOption={copySortOption}\n                                        deleteSortOption={deleteSortOption}\n                                    />\n                                </DndProvider>\n                            </div>\n                            <div className=\"sort-warning\">\n                                {isErrorDisplayed ? <span>Duplicate sort options found.</span> : null}\n                            </div>\n                            <div className=\"sort__new\">\n                                <div className=\"sort__section\" type=\"button\" onClick={addSortingOptions}>\n                                    <span>+</span>\n                                    <div className=\"sort__txt\">New Sort</div>\n                                </div>\n                            </div>\n                            <div className=\"sort__footer\">\n                                <div className=\"sort__btns\">\n                                    <button className=\"btns\" onClick={clearSortingOptions}>\n                                        Clear All\n                                    </button>\n                                    <button className=\"btns btns__save\" onClick={applySort}>\n                                        Ok\n                                    </button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </ClickAwayListener>\n        );\n    } else {\n        return <div></div>;\n    }\n});\n\nexport default GroupSort;\n","import React, { memo, useState } from \"react\";\r\nimport ClickAwayListener from \"react-click-away-listener\";\r\nimport jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\nimport * as FileSaver from \"file-saver\";\r\nimport * as XLSX from \"xlsx\";\r\n\r\nconst ExportData = memo((props) => {\r\n    const {\r\n        isExportOverlayOpen,\r\n        toggleExportDataOverlay,\r\n        rows,\r\n        originalColumns,\r\n        isExpandContentAvailable,\r\n        additionalColumn\r\n    } = props;\r\n\r\n    const getRemarksColumnIfAvailable = () => {\r\n        return isExpandContentAvailable ? additionalColumn : [];\r\n    };\r\n\r\n    const updatedColumns = [...originalColumns].concat(getRemarksColumnIfAvailable());\r\n\r\n    const [managedColumns, setManagedColumns] = useState(updatedColumns);\r\n    const [searchedColumns, setSearchedColumns] = useState(updatedColumns);\r\n    const [downloadTypes, setDownloadTypes] = useState([]);\r\n    const [warning, setWarning] = useState(\"\");\r\n\r\n    let isDownload = false;\r\n\r\n    const exportRowData = () => {\r\n        isDownload = true;\r\n        let filteredRow = [];\r\n        let filteredRowValues = [];\r\n\r\n        setWarning(\"\");\r\n\r\n        if (managedColumns.length > 0 && downloadTypes.length > 0) {\r\n            rows.forEach((rowDetails) => {\r\n                let row = rowDetails.original;\r\n                const keys = Object.getOwnPropertyNames(row);\r\n                let filteredColumnVal = {};\r\n                let rowFilteredValues = [];\r\n                keys.forEach(function (key) {\r\n                    managedColumns.forEach((columnName) => {\r\n                        if (\r\n                            columnName.accessor === key ||\r\n                            (columnName.innerCells && columnName.innerCells.length && columnName.innerCells.includes(key))\r\n                        ) {\r\n                            let columnValue = \"\";\r\n                            if (typeof row[key] === \"object\") {\r\n                                if (row[key].length === undefined)\r\n                                    columnValue = Object.values(row[key]).toString().replace(\",\", \" | \");\r\n                                if (row[key].length > 0) {\r\n                                    let arrObj = \"\";\r\n                                    row[key].forEach((item, index) => {\r\n                                        arrObj = index != 0 ? arrObj + \" | \" + Object.values(item) : Object.values(item);\r\n                                    });\r\n                                    columnValue = arrObj;\r\n                                }\r\n                            } else {\r\n                                columnValue = row[key];\r\n                            }\r\n                            filteredColumnVal[key] = columnValue;\r\n                            rowFilteredValues.push(columnValue);\r\n                        }\r\n                    });\r\n                });\r\n                filteredRow.push(filteredColumnVal);\r\n                filteredRowValues.push(rowFilteredValues);\r\n            });\r\n\r\n            downloadTypes.map((item) => {\r\n                if (item === \"pdf\") {\r\n                    downloadPDF(filteredRowValues);\r\n                } else if (item === \"excel\") {\r\n                    downloadXLSFile(filteredRow);\r\n                } else {\r\n                    downloadCSVFile(filteredRow);\r\n                }\r\n            });\r\n        } else {\r\n            if (managedColumns.length === 0 && downloadTypes.length === 0) {\r\n                setWarning(\"Select at least one column and a file type\");\r\n            } else if (managedColumns.length === 0) {\r\n                setWarning(\"Select at least one column\");\r\n            } else if (downloadTypes.length === 0) {\r\n                setWarning(\"Select at least one file type\");\r\n            }\r\n        }\r\n    };\r\n\r\n    const downloadPDF = (rowFilteredValues) => {\r\n        const unit = \"pt\";\r\n        const size = \"A4\"; // Use A1, A2, A3 or A4\r\n        const orientation = \"landscape\"; // portrait or landscape\r\n\r\n        const marginLeft = 300;\r\n        const doc = new jsPDF(orientation, unit, size);\r\n\r\n        doc.setFontSize(15);\r\n\r\n        const title = \"iCargo Neo Report\";\r\n        const headers = [\r\n            managedColumns.map((column) => {\r\n                return column.Header;\r\n            })\r\n        ];\r\n\r\n        let content = {\r\n            startY: 50,\r\n            head: headers,\r\n            body: rowFilteredValues\r\n        };\r\n\r\n        doc.text(title, marginLeft, 40);\r\n        doc.autoTable(content);\r\n        doc.save(\"iCargo Neo Report.pdf\");\r\n\r\n        isDownload = false;\r\n    };\r\n\r\n    const downloadCSVFile = (filteredRowValue) => {\r\n        const fileType = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\r\n        const fileExtension = \".csv\";\r\n        const fileName = \"iCargo Neo Report\";\r\n        const ws = XLSX.utils.json_to_sheet(filteredRowValue);\r\n        const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\r\n        const excelBuffer = XLSX.write(wb, { bookType: \"csv\", type: \"array\" });\r\n        const data = new Blob([excelBuffer], { type: fileType });\r\n        FileSaver.saveAs(data, fileName + fileExtension);\r\n    };\r\n\r\n    const downloadXLSFile = (filteredRowValue) => {\r\n        const fileType = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\r\n        const fileExtension = \".xlsx\";\r\n        const fileName = \"iCargo Neo Report\";\r\n        const ws = XLSX.utils.json_to_sheet(filteredRowValue);\r\n        const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\r\n        const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\r\n        const data = new Blob([excelBuffer], { type: fileType });\r\n        FileSaver.saveAs(data, fileName + fileExtension);\r\n    };\r\n\r\n    const filterColumnsList = (event) => {\r\n        let { value } = event ? event.target : \"\";\r\n        value = value ? value.toLowerCase() : \"\";\r\n        if (value != \"\") {\r\n            setSearchedColumns(\r\n                originalColumns\r\n                    .filter((column) => {\r\n                        return column.Header.toLowerCase().includes(value);\r\n                    })\r\n                    .concat(\r\n                        getRemarksColumnIfAvailable().filter((column) => {\r\n                            return column.Header.toLowerCase().includes(value);\r\n                        })\r\n                    )\r\n            );\r\n        } else {\r\n            setSearchedColumns(updatedColumns);\r\n        }\r\n    };\r\n\r\n    const isCheckboxSelected = (header) => {\r\n        if (header === \"Select All\") {\r\n            return managedColumns.length === searchedColumns.length;\r\n        } else {\r\n            const selectedColumn = managedColumns.filter((column) => {\r\n                return column.Header === header;\r\n            });\r\n            return selectedColumn && selectedColumn.length > 0;\r\n        }\r\n    };\r\n\r\n    const selectAllColumns = (event) => {\r\n        if (event.target.checked) {\r\n            setManagedColumns(updatedColumns);\r\n        } else {\r\n            setManagedColumns([]);\r\n        }\r\n    };\r\n\r\n    const selectSingleColumn = (event) => {\r\n        const { currentTarget } = event;\r\n        const { checked, value } = currentTarget;\r\n\r\n        //If column checkbox is checked\r\n        if (checked) {\r\n            //Find the index of selected column from original column array and also find the user selected column\r\n            let indexOfColumnToAdd = updatedColumns.findIndex((column) => {\r\n                return column.Header == value;\r\n            });\r\n            const itemToAdd = updatedColumns[indexOfColumnToAdd];\r\n\r\n            //Loop through the managedColumns array to find the position of the column that is present previous to the user selected column\r\n            //Find index of that previous column and push the new column to add in that position\r\n            let prevItemIndex = -1;\r\n            while (indexOfColumnToAdd > 0 && prevItemIndex === -1) {\r\n                prevItemIndex = managedColumns.findIndex((column) => {\r\n                    return column.Header == updatedColumns[indexOfColumnToAdd - 1].Header;\r\n                });\r\n                indexOfColumnToAdd = indexOfColumnToAdd - 1;\r\n            }\r\n\r\n            const newColumnsList = managedColumns.slice(0); //Copying state value\r\n            newColumnsList.splice(prevItemIndex + 1, 0, itemToAdd);\r\n            setManagedColumns(newColumnsList);\r\n        } else {\r\n            setManagedColumns(\r\n                managedColumns.filter((column) => {\r\n                    return column.Header !== value;\r\n                })\r\n            );\r\n        }\r\n    };\r\n\r\n    const changeDownloadType = (event) => {\r\n        const { value, checked } = event ? event.currentTarget : \"\";\r\n        if (checked) {\r\n            setDownloadTypes(downloadTypes.concat([value]));\r\n        } else {\r\n            setDownloadTypes(\r\n                downloadTypes.filter((type) => {\r\n                    return type !== value;\r\n                })\r\n            );\r\n        }\r\n    };\r\n\r\n    if (isExportOverlayOpen) {\r\n        return (\r\n            <ClickAwayListener onClickAway={toggleExportDataOverlay}>\r\n                <div className=\"exports--grid\">\r\n                    <div className=\"export__grid\">\r\n                        <div className=\"export__chooser\">\r\n                            <div className=\"export__header\">\r\n                                <div className=\"\">\r\n                                    <strong>Export Data</strong>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"export__body\">\r\n                                <div>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        placeholder=\"Search column\"\r\n                                        className=\"custom__ctrl\"\r\n                                        onChange={filterColumnsList}\r\n                                    ></input>\r\n                                </div>\r\n                                <div className=\"export__wrap export__headertxt\">\r\n                                    <div className=\"export__checkbox\">\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            value=\"Select All\"\r\n                                            checked={isCheckboxSelected(\"Select All\")}\r\n                                            onChange={selectAllColumns}\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"export__txt\">Select All</div>\r\n                                </div>\r\n                                {searchedColumns.map((column, index) => {\r\n                                    return (\r\n                                        <div className=\"export__wrap\" key={index}>\r\n                                            <div className=\"export__checkbox\">\r\n                                                <input\r\n                                                    type=\"checkbox\"\r\n                                                    value={column.Header}\r\n                                                    checked={isCheckboxSelected(column.Header)}\r\n                                                    onChange={selectSingleColumn}\r\n                                                ></input>\r\n                                            </div>\r\n                                            <div className=\"export__txt\">{column.Header}</div>\r\n                                        </div>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"export__settings\">\r\n                            <div className=\"export__header\">\r\n                                <div className=\"export__headerTxt\"></div>\r\n                                <div className=\"export__close\">\r\n                                    <i className=\"fa fa-times\" aria-hidden=\"true\" onClick={toggleExportDataOverlay}></i>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"export__as\">Export As</div>\r\n                            <div className=\"export__body\">\r\n                                <div className=\"export__reorder\">\r\n                                    <div className=\"check-wrap\">\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            id=\"chk_pdf\"\r\n                                            value=\"pdf\"\r\n                                            checked={downloadTypes.includes(\"pdf\")}\r\n                                            onChange={changeDownloadType}\r\n                                        ></input>\r\n                                    </div>\r\n                                    <div className=\"export__file\">\r\n                                        <i className=\"fa fa-file-pdf-o\" aria-hidden=\"true\"></i>\r\n                                        <br />\r\n                                        <strong>PDF</strong>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"export__reorder\">\r\n                                    <div className=\"check-wrap\">\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            id=\"chk_excel\"\r\n                                            value=\"excel\"\r\n                                            checked={downloadTypes.includes(\"excel\")}\r\n                                            onChange={changeDownloadType}\r\n                                        ></input>\r\n                                    </div>\r\n                                    <div className=\"export__file\">\r\n                                        <i className=\"fa fa-file-excel-o\" aria-hidden=\"true\"></i>\r\n                                        <br />\r\n                                        <strong>Excel</strong>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"export__reorder\">\r\n                                    <div className=\"check-wrap\">\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            id=\"chk_csv\"\r\n                                            value=\"csv\"\r\n                                            checked={downloadTypes.includes(\"csv\")}\r\n                                            onChange={changeDownloadType}\r\n                                        ></input>\r\n                                    </div>\r\n                                    <div className=\"export__file\">\r\n                                        <i className=\"fa fa-file-text-o\" aria-hidden=\"true\"></i>\r\n                                        <br />\r\n                                        <strong>CSV</strong>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"exportWarning\">\r\n                                    <span className=\"alert alert-danger\">\r\n                                        <strong>{warning}</strong>\r\n                                    </span>\r\n                                </div>\r\n                                <div>{isDownload ? <h2 style={{ textAlign: \"center\" }}>Loading...</h2> : null}</div>\r\n                            </div>\r\n                            <div className=\"export__footer\">\r\n                                <div className=\"export__btns\">\r\n                                    <button className=\"btns\" onClick={toggleExportDataOverlay}>\r\n                                        Cancel\r\n                                    </button>\r\n                                    <button className=\"btns btns__save\" onClick={exportRowData}>\r\n                                        Export\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </ClickAwayListener>\r\n        );\r\n    } else {\r\n        return <div></div>;\r\n    }\r\n});\r\n\r\nexport default ExportData;\r\n","import React, { useCallback, useState, memo, useEffect, createRef, useMemo } from \"react\";\r\nimport {\r\n    useTable,\r\n    useResizeColumns,\r\n    useFlexLayout,\r\n    useRowSelect,\r\n    useSortBy,\r\n    useFilters,\r\n    useGlobalFilter,\r\n    useExpanded\r\n} from \"react-table\";\r\nimport { VariableSizeList as List } from \"react-window\";\r\nimport AutoSizer from \"react-virtualized-auto-sizer\";\r\nimport InfiniteLoader from \"react-window-infinite-loader\";\r\nimport RowSelector from \"./Functions/RowSelector\";\r\nimport DefaultColumnFilter from \"./Functions/DefaultColumnFilter\";\r\nimport GlobalFilter from \"./Functions/GlobalFilter\";\r\nimport RowOptions from \"./Functions/RowOptions\";\r\nimport ColumnReordering from \"./Overlays/managecolumns\";\r\nimport GroupSort from \"./Overlays/groupsort\";\r\nimport ExportData from \"./Overlays/exportdata\";\r\n\r\nconst listRef = createRef(null);\r\n\r\nconst Customgrid = memo((props) => {\r\n    const {\r\n        title,\r\n        gridHeight,\r\n        gridWidth,\r\n        managableColumns,\r\n        originalColumns,\r\n        additionalColumn,\r\n        data,\r\n        originalData,\r\n        rowEditOverlay,\r\n        rowEditData,\r\n        updateRowInGrid,\r\n        deletePopUpOverLay,\r\n        deleteRowFromGrid,\r\n        globalSearchLogic,\r\n        selectBulkData,\r\n        calculateRowHeight,\r\n        isExpandContentAvailable,\r\n        renderExpandedContent,\r\n        hasNextPage,\r\n        isNextPageLoading,\r\n        loadNextPage,\r\n        doGroupSort\r\n    } = props;\r\n\r\n    //Local state value for holding columns configuration\r\n    const [columns, setColumns] = useState(managableColumns);\r\n    //Local state value for holding the boolean value to check if row expand is available\r\n    const [isRowExpandEnabled, setIsRowExpandEnabled] = useState(isExpandContentAvailable);\r\n\r\n    //Display error message if data or columns configuration is missing.\r\n    if (!(data && data.length > 0) || !(columns && columns.length > 0)) {\r\n        return <h2 style={{ marginTop: \"50px\", textAlign: \"center\" }}>Invalid Data or Columns Configuration</h2>;\r\n    }\r\n\r\n    //Variables used for handling infinite loading\r\n    const itemCount = hasNextPage ? data.length + 1 : data.length;\r\n    const loadMoreItems = isNextPageLoading ? () => {} : loadNextPage ? loadNextPage : () => {};\r\n    const isItemLoaded = (index) => !hasNextPage || index < data.length;\r\n\r\n    //Local state value for checking if column filter is open/closed\r\n    const [isFilterOpen, setFilterOpen] = useState(false);\r\n\r\n    //Toggle column filter state value based on UI clicks\r\n    const toggleColumnFilter = () => {\r\n        setFilterOpen(!isFilterOpen);\r\n    };\r\n\r\n    //Local state value for checking if group Sort Overlay is open/closed.\r\n    const [isGroupSortOverLayOpen, setGroupSortOverLay] = useState(false);\r\n\r\n    //Toggle group Sort state value based on UI clicks\r\n    const toggleGroupSortOverLay = () => {\r\n        setGroupSortOverLay(!isGroupSortOverLayOpen);\r\n    };\r\n\r\n    const applyGroupSort = (sortOptions) => {\r\n        doGroupSort(sortOptions);\r\n    };\r\n\r\n    //Local state value for hiding/unhiding column management overlay\r\n    const [isManageColumnOpen, setManageColumnOpen] = useState(false);\r\n\r\n    //Toggle column manage overlay show/hide state value based on UI clicks\r\n    const toggleManageColumns = () => {\r\n        setManageColumnOpen(!isManageColumnOpen);\r\n    };\r\n\r\n    //Callback method from column manage overlay to update the column structure of the grid\r\n    const updateColumnStructure = (newColumnStructure, remarksColumn) => {\r\n        setColumns([...newColumnStructure]);\r\n        setIsRowExpandEnabled(remarksColumn && remarksColumn.length > 0 ? true : false);\r\n        toggleManageColumns();\r\n    };\r\n\r\n    //Local state value for hiding/unhiding export data overlay\r\n    const [isExportOverlayOpen, setIsExportOverlayOpen] = useState(false);\r\n\r\n    //Toggle export overlay show/hide state value based on UI clicks\r\n    const toggleExportDataOverlay = () => {\r\n        setIsExportOverlayOpen(!isExportOverlayOpen);\r\n    };\r\n\r\n    //Column filter added for all columns by default\r\n    const defaultColumn = useMemo(\r\n        () => ({\r\n            Filter: DefaultColumnFilter\r\n        }),\r\n        []\r\n    );\r\n\r\n    //Initialize react-table instance with the values received through properties\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        rows,\r\n        prepareRow,\r\n        selectedFlatRows,\r\n        state,\r\n        setGlobalFilter\r\n    } = useTable(\r\n        {\r\n            columns,\r\n            data,\r\n            defaultColumn,\r\n            globalFilter: (rows, columns, filterValue) => {\r\n                //Call global search function defined in application, if it is present\r\n                if (globalSearchLogic && typeof globalSearchLogic === \"function\") {\r\n                    return globalSearchLogic(rows, columns, filterValue);\r\n                } else {\r\n                    return rows;\r\n                }\r\n            },\r\n            autoResetFilters: false,\r\n            autoResetGlobalFilter: false,\r\n            autoResetSortBy: false,\r\n            autoResetExpanded: false,\r\n            autoResetSelectedRows: false\r\n        },\r\n        useFilters,\r\n        useGlobalFilter,\r\n        useSortBy,\r\n        useExpanded,\r\n        useRowSelect,\r\n        useFlexLayout,\r\n        useResizeColumns,\r\n        (hooks) => {\r\n            //Add checkbox for all rows in grid, with different properties for header row and body rows\r\n            hooks.allColumns.push((columns) => [\r\n                {\r\n                    id: \"selection\",\r\n                    columnId: \"column_custom_0\",\r\n                    disableResizing: true,\r\n                    disableFilters: true,\r\n                    disableSortBy: true,\r\n                    minWidth: 35,\r\n                    width: 35,\r\n                    maxWidth: 35,\r\n                    Header: ({ getToggleAllRowsSelectedProps }) => <RowSelector {...getToggleAllRowsSelectedProps()} />,\r\n                    Cell: ({ row }) => <RowSelector {...row.getToggleRowSelectedProps()} />\r\n                },\r\n                ...columns,\r\n                {\r\n                    id: \"custom\",\r\n                    columnId: \"column_custom_1\",\r\n                    disableResizing: true,\r\n                    disableFilters: true,\r\n                    disableSortBy: true,\r\n                    minWidth: 35,\r\n                    width: 35,\r\n                    maxWidth: 35,\r\n                    Cell: ({ row }) => {\r\n                        return (\r\n                            <div className=\"action\">\r\n                                <RowOptions\r\n                                    row={row}\r\n                                    originalData={originalData}\r\n                                    DeletePopUpOverLay={deletePopUpOverLay}\r\n                                    deleteRowFromGrid={deleteRowFromGrid}\r\n                                    RowEditOverlay={rowEditOverlay}\r\n                                    rowEditData={rowEditData}\r\n                                    updateRowInGrid={updateRowInGrid}\r\n                                />\r\n                                {isRowExpandEnabled ? (\r\n                                    <span className=\"expander\" {...row.getToggleRowExpandedProps()}>\r\n                                        {row.isExpanded ? (\r\n                                            <i className=\"fa fa-angle-up\" aria-hidden=\"true\"></i>\r\n                                        ) : (\r\n                                            <i className=\"fa fa-angle-down\" aria-hidden=\"true\"></i>\r\n                                        )}\r\n                                    </span>\r\n                                ) : null}\r\n                            </div>\r\n                        );\r\n                    }\r\n                }\r\n            ]);\r\n        }\r\n    );\r\n\r\n    //Export selected row data and pass it to the callback method\r\n    const bulkSelector = () => {\r\n        if (selectBulkData) {\r\n            selectBulkData(selectedFlatRows);\r\n        }\r\n    };\r\n\r\n    //This code is to handle the row height calculation while expanding a row or resizing a column\r\n    useEffect(() => {\r\n        if (listRef && listRef.current) {\r\n            listRef.current.resetAfterIndex(0, true);\r\n        }\r\n    });\r\n\r\n    //Render each row and cells in each row, using attributes from react window list.\r\n    const RenderRow = useCallback(\r\n        ({ index, style }) => {\r\n            if (isItemLoaded(index)) {\r\n                const row = rows[index];\r\n                prepareRow(row);\r\n                return (\r\n                    <div {...row.getRowProps({ style })} className=\"table-row tr\">\r\n                        <div className=\"table-row-wrap\">\r\n                            {row.cells.map((cell) => {\r\n                                return (\r\n                                    <div {...cell.getCellProps()} className=\"table-cell td\">\r\n                                        {cell.render(\"Cell\")}\r\n                                    </div>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                        {/*Check if row eapand icon is clicked, and if yes, call function to bind content to the expanded region*/}\r\n                        {isRowExpandEnabled && row.isExpanded ? (\r\n                            <div className=\"expand\">{renderExpandedContent ? renderExpandedContent(row) : null}</div>\r\n                        ) : null}\r\n                    </div>\r\n                );\r\n            }\r\n        },\r\n        [prepareRow, rows, renderExpandedContent]\r\n    );\r\n\r\n    //Render table title, global search component, button to show/hide column filter, button to export selected row data & the grid\r\n    //Use properties and methods provided by react-table\r\n    //Autosizer used for calculating grid height (don't consider window width and column resizing value changes)\r\n    //Infinite loader used for lazy loading, with the properties passed here and other values calculated at the top\r\n    //React window list is used for implementing virtualization, specifying the item count in a frame and height of each rows in it.\r\n    return (\r\n        <div className=\"wrapper\" style={{ width: gridWidth ? gridWidth : \"100%\" }}>\r\n            <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\" />\r\n            <div className=\"table-filter\">\r\n                <div className=\"results\">\r\n                    <div className=\"name\">\r\n                        <strong>{rows.length}</strong>\r\n                        <span> {title ? title : \"Rows\"}</span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"filter-utilities\">\r\n                    <ColumnReordering\r\n                        isManageColumnOpen={isManageColumnOpen}\r\n                        toggleManageColumns={toggleManageColumns}\r\n                        originalColumns={originalColumns}\r\n                        isExpandContentAvailable={isExpandContentAvailable}\r\n                        additionalColumn={[additionalColumn]}\r\n                        updateColumnStructure={updateColumnStructure}\r\n                    />\r\n                    <GlobalFilter globalFilter={state.globalFilter} setGlobalFilter={setGlobalFilter} />\r\n                    <GroupSort\r\n                        isGroupSortOverLayOpen={isGroupSortOverLayOpen}\r\n                        toggleGroupSortOverLay={toggleGroupSortOverLay}\r\n                        originalColumns={originalColumns}\r\n                        applyGroupSort={applyGroupSort}\r\n                    />\r\n                    <ExportData\r\n                        isExportOverlayOpen={isExportOverlayOpen}\r\n                        toggleExportDataOverlay={toggleExportDataOverlay}\r\n                        rows={rows}\r\n                        originalColumns={originalColumns}\r\n                        isExpandContentAvailable={isExpandContentAvailable}\r\n                        additionalColumn={[additionalColumn]}\r\n                    />\r\n                    <div className=\"filter-icon keyword-search\" onClick={toggleColumnFilter}>\r\n                        <i className=\"fa fa-filter\" aria-hidden=\"true\"></i>\r\n                    </div>\r\n                    <div className=\"filter-icon bulk-select\" onClick={bulkSelector}>\r\n                        <i className=\"fa fa-pencil-square-o\" aria-hidden=\"true\"></i>\r\n                    </div>\r\n                    <div className=\"filter-icon bulk-select\" onClick={toggleGroupSortOverLay}>\r\n                        <i className=\"fa fa-sort-amount-desc\" aria-hidden=\"true\"></i>\r\n                    </div>\r\n                    <div className=\"filter-icon manage-columns\" onClick={toggleManageColumns}>\r\n                        <i className=\"fa fa-columns\" aria-hidden=\"true\"></i>\r\n                    </div>\r\n                    <div className=\"filter-icon manage-columns\" onClick={toggleExportDataOverlay}>\r\n                        <i className=\"fa fa-share-alt\" aria-hidden=\"true\"></i>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div\r\n                className=\"tableContainer table-outer\"\r\n                style={{ height: gridHeight ? gridHeight : \"50vh\", overflowX: \"auto\", overflowY: \"hidden\" }}\r\n            >\r\n                <AutoSizer disableWidth disableResizing>\r\n                    {({ height }) => (\r\n                        <div {...getTableProps()} className=\"table\">\r\n                            <div className=\"thead table-row table-row--head\">\r\n                                {headerGroups.map((headerGroup) => (\r\n                                    <div {...headerGroup.getHeaderGroupProps()} className=\"tr\">\r\n                                        {headerGroup.headers.map((column) => (\r\n                                            <div {...column.getHeaderProps()} className=\"table-cell column-heading th\">\r\n                                                <div {...column.getSortByToggleProps()}>\r\n                                                    {column.render(\"Header\")}\r\n                                                    <span>\r\n                                                        {column.isSorted ? (\r\n                                                            column.isSortedDesc ? (\r\n                                                                <i className=\"fa fa-sort-desc\" aria-hidden=\"true\"></i>\r\n                                                            ) : (\r\n                                                                <i className=\"fa fa-sort-asc\" aria-hidden=\"true\"></i>\r\n                                                            )\r\n                                                        ) : (\r\n                                                            \"\"\r\n                                                        )}\r\n                                                    </span>\r\n                                                </div>\r\n                                                <div className={`txt-wrap column-filter ${isFilterOpen ? \"open\" : \"\"}`}>\r\n                                                    {!column.disableFilters ? column.render(\"Filter\") : null}\r\n                                                </div>\r\n                                                {column.canResize && <div {...column.getResizerProps()} className=\"resizer\" />}\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n                                ))}\r\n                            </div>\r\n                            <div {...getTableBodyProps()} className=\"tbody\">\r\n                                <InfiniteLoader isItemLoaded={isItemLoaded} itemCount={itemCount} loadMoreItems={loadMoreItems}>\r\n                                    {({ onItemsRendered, ref }) => (\r\n                                        <List\r\n                                            ref={(list) => {\r\n                                                ref(list);\r\n                                                listRef.current = list;\r\n                                            }}\r\n                                            style={{ overflowX: \"hidden\" }}\r\n                                            height={height - 60}\r\n                                            itemCount={rows.length}\r\n                                            itemSize={(index) => {\r\n                                                if (calculateRowHeight && typeof calculateRowHeight === \"function\") {\r\n                                                    return calculateRowHeight(rows, index, headerGroups);\r\n                                                } else {\r\n                                                    return 70;\r\n                                                }\r\n                                            }}\r\n                                            onItemsRendered={onItemsRendered}\r\n                                            overscanCount={20}\r\n                                        >\r\n                                            {RenderRow}\r\n                                        </List>\r\n                                    )}\r\n                                </InfiniteLoader>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </AutoSizer>\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Customgrid;\r\n","import React, { forwardRef, useImperativeHandle, useMemo, useState, useEffect } from \"react\";\r\nimport Customgrid from \"./Customgrid\";\r\n\r\nconst Grid = forwardRef((props, ref) => {\r\n    const {\r\n        title,\r\n        gridHeight,\r\n        gridWidth,\r\n        columns,\r\n        additionalColumn,\r\n        fetchData,\r\n        rowEditOverlay,\r\n        rowEditData,\r\n        updateRowData,\r\n        deletePopUpOverLay,\r\n        deleteRowData,\r\n        globalSearchLogic,\r\n        selectBulkData,\r\n        calculateRowHeight\r\n    } = props;\r\n\r\n    //Set state value for variable to check if there is anext page available\r\n    const [hasNextPage, setHasNextPage] = useState(true);\r\n    //Set state value for variable to check if the loading process is going on\r\n    const [isNextPageLoading, setIsNextPageLoading] = useState(false);\r\n    //Local state value for checking if data is being loaded from API\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    //Set state value for variable to hold grid data\r\n    const [items, setItems] = useState([]);\r\n    //Local state for group sort options\r\n    const [groupSortOptions, setGroupSortOptions] = useState([]);\r\n\r\n    let processedColumns = [];\r\n    columns.forEach((column, index) => {\r\n        const { innerCells, accessor, sortValue } = column;\r\n        const isInnerCellsPresent = innerCells && innerCells.length > 0;\r\n\r\n        //Add column Id\r\n        column.columnId = `column_${index}`;\r\n\r\n        //Add logic to sort column if sort is not disabled\r\n        if (!column.disableSortBy) {\r\n            if (isInnerCellsPresent) {\r\n                //If there are inner cells and a sort value specified, do sort on that value\r\n                if (sortValue) {\r\n                    column.sortType = (rowA, rowB) => {\r\n                        return rowA.original[accessor][sortValue] > rowB.original[accessor][sortValue] ? -1 : 1;\r\n                    };\r\n                } else {\r\n                    column.disableSortBy = true;\r\n                }\r\n            } else if (!innerCells) {\r\n                //If no inner cells are there, just do sort on column value\r\n                column.sortType = (rowA, rowB) => {\r\n                    return rowA.original[accessor] > rowB.original[accessor] ? -1 : 1;\r\n                };\r\n            }\r\n        }\r\n\r\n        //Add logic to filter column if column filter is not disabled\r\n        if (!column.disableFilters) {\r\n            if (isInnerCellsPresent) {\r\n                column.filter = (rows, id, filterValue) => {\r\n                    const filterText = filterValue ? filterValue.toLowerCase() : \"\";\r\n                    return rows.filter((row) => {\r\n                        const rowValue = row.values[id];\r\n                        const filterCols = innerCells.filter((cell) => {\r\n                            const cellValue = rowValue[cell.accessor] ? rowValue[cell.accessor].toString().toLowerCase() : \"\";\r\n                            return cellValue.includes(filterText);\r\n                        });\r\n                        return filterCols && filterCols.length > 0;\r\n                    });\r\n                };\r\n            }\r\n        }\r\n\r\n        processedColumns.push(column);\r\n    });\r\n\r\n    const renderExpandedContent = additionalColumn ? additionalColumn.Cell : null;\r\n\r\n    const gridColumns = useMemo(() => processedColumns, []);\r\n\r\n    //Function to return sorting logic based on the user selected order of sort\r\n    const compareValues = (compareOrder, v1, v2) => {\r\n        if (compareOrder === \"Ascending\") {\r\n            return v1 > v2 ? 1 : v1 < v2 ? -1 : 0;\r\n        } else {\r\n            return v1 < v2 ? 1 : v1 > v2 ? -1 : 0;\r\n        }\r\n    };\r\n    //Function to return sorted data\r\n    const getSortedData = (originalData) => {\r\n        return originalData.sort(function (x, y) {\r\n            let compareResult = 0;\r\n            groupSortOptions.forEach((option) => {\r\n                const { sortBy, sortOn, order } = option;\r\n                const newResult =\r\n                    sortOn === \"value\"\r\n                        ? compareValues(order, x[sortBy], y[sortBy])\r\n                        : compareValues(order, x[sortBy][sortOn], y[sortBy][sortOn]);\r\n                compareResult = compareResult || newResult;\r\n            });\r\n            return compareResult;\r\n        });\r\n    };\r\n    //Function to find correct index from original data using index from sorted data\r\n    const getOriginalDataIndex = (sortedDataIndex) => {\r\n        const updatedData = getSortedData([...items]).find((item, index) => {\r\n            return index === sortedDataIndex;\r\n        });\r\n        let originalDataIndex = -1;\r\n        originalDataIndex = items.findIndex((item, index) => {\r\n            return item === updatedData;\r\n        });\r\n        return originalDataIndex;\r\n    };\r\n\r\n    //Gets triggered when a cell in grid is updated\r\n    useImperativeHandle(ref, () => ({\r\n        updateCellInGrid(rowIndex, columnId, value) {\r\n            const originalDataIndex = getOriginalDataIndex(rowIndex);\r\n            if (originalDataIndex >= 0) {\r\n                setItems((old) =>\r\n                    old.map((row, index) => {\r\n                        if (index === originalDataIndex) {\r\n                            return {\r\n                                ...old[originalDataIndex],\r\n                                [columnId]: value\r\n                            };\r\n                        }\r\n                        return row;\r\n                    })\r\n                );\r\n            }\r\n        }\r\n    }));\r\n\r\n    //Gets triggered when one row item is updated\r\n    const updateRowInGrid = (rowIndex, updatedRow) => {\r\n        setItems((old) =>\r\n            old.map((row, index) => {\r\n                if (index === rowIndex) {\r\n                    row = updatedRow;\r\n                }\r\n                return row;\r\n            })\r\n        );\r\n        updateRowData(updatedRow);\r\n    };\r\n\r\n    //Gets triggered when one row item is deleted\r\n    const deleteRowFromGrid = (rowIndexToBeDeleted, deletedRow) => {\r\n        setItems((old) =>\r\n            old.filter((row, index) => {\r\n                return index !== rowIndexToBeDeleted;\r\n            })\r\n        );\r\n        deleteRowData(deletedRow);\r\n    };\r\n\r\n    //Gets called when group sort is applied or cleared\r\n    const doGroupSort = (sortOptions) => {\r\n        setGroupSortOptions(sortOptions);\r\n    };\r\n\r\n    //Gets called when page scroll reaches the bottom of the grid.\r\n    //Fetch the next set of data and append it to the variable holding grid data and update the state value.\r\n    //Also update the hasNextPage state value to False once API response is empty, to avoid unwanted API calls.\r\n    const loadNextPage = (...args) => {\r\n        const newIndex = args && args.length > 0 ? args[0] : -1;\r\n        if (newIndex >= 0 && hasNextPage) {\r\n            setIsLoading(true);\r\n            setIsNextPageLoading(true);\r\n            fetchData(newIndex).then((data) => {\r\n                setIsLoading(false);\r\n                setHasNextPage(data && data.length > 0);\r\n                setIsNextPageLoading(false);\r\n                setItems(items.concat(data));\r\n            });\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        //Make API call to fetch initial set of data.\r\n        setIsLoading(true);\r\n        fetchData(0).then((data) => {\r\n            setIsLoading(false);\r\n            setItems(data);\r\n        });\r\n    }, []);\r\n\r\n    //Sort the data based on the user selected group sort optipons\r\n    const data = getSortedData([...items]);\r\n\r\n    if (data && data.length > 0) {\r\n        return (\r\n            <div>\r\n                <Customgrid\r\n                    title={title}\r\n                    gridHeight={gridHeight}\r\n                    gridWidth={gridWidth}\r\n                    managableColumns={gridColumns}\r\n                    originalColumns={gridColumns}\r\n                    additionalColumn={additionalColumn}\r\n                    data={data}\r\n                    originalData={items}\r\n                    rowEditOverlay={rowEditOverlay}\r\n                    rowEditData={rowEditData}\r\n                    updateRowInGrid={updateRowInGrid}\r\n                    deletePopUpOverLay={deletePopUpOverLay}\r\n                    deleteRowFromGrid={deleteRowFromGrid}\r\n                    globalSearchLogic={globalSearchLogic}\r\n                    selectBulkData={selectBulkData}\r\n                    calculateRowHeight={calculateRowHeight}\r\n                    isExpandContentAvailable={typeof renderExpandedContent === \"function\"}\r\n                    renderExpandedContent={renderExpandedContent}\r\n                    hasNextPage={hasNextPage}\r\n                    isNextPageLoading={isNextPageLoading}\r\n                    loadNextPage={loadNextPage}\r\n                    doGroupSort={doGroupSort}\r\n                />\r\n                {isNextPageLoading ? <h2 style={{ textAlign: \"center\" }}>Loading...</h2> : null}\r\n            </div>\r\n        );\r\n    } else if (isLoading) {\r\n        return <h2 style={{ textAlign: \"center\", marginTop: \"70px\" }}>Initializing Grid...</h2>;\r\n    } else {\r\n        return <h2 style={{ textAlign: \"center\", marginTop: \"70px\" }}>Invalid Data or Column Configurations</h2>;\r\n    }\r\n});\r\n\r\nexport default Grid;\r\n"],"names":["RowSelector","memo","forwardRef","indeterminate","rest","ref","checkValue","setCheckValue","useState","defaultRef","useRef","resolvedRef","onChange","useEffect","current","DefaultColumnFilter","column","filterValue","setFilter","e","target","value","undefined","GlobalFilter","globalFilter","setGlobalFilter","setValue","useAsyncDebounce","require","RowOptions","props","row","originalData","DeletePopUpOverLay","deleteRowFromGrid","RowEditOverlay","rowEditData","updateRowInGrid","index","original","isRowOptionsOpen","setRowOptionsOpen","isRowEditOverlayOpen","setRowEditOverlayOpen","isDeleteOverlayOpen","setDeleteOverlayOpen","openRowOptionsOverlay","closeRowOptionsOverlay","openRowEditOverlay","closeRowEditOverlay","updateRow","updatedrow","originalDataIndex","findIndex","data","openDeleteOverlay","closeDeleteOverlay","deleteRow","RowEdit","RowPin","RowDelete","ItemTypes","COLUMN","ColumnItem","id","name","moveColumn","findColumn","innerCells","originalIndex","isDragging","drag","useDrag","item","type","collect","monitor","end","dropResult","droppedId","getItem","didDrop","drop","useDrop","accept","canDrop","hover","draggedId","overIndex","opacity","node","cursor","ColumnsList","updateColumnsInState","columnsToManage","columnId","atIndex","update","$splice","filter","c","indexOf","display","flexWrap","map","Header","ColumnReordering","isManageColumnOpen","toggleManageColumns","originalColumns","isExpandContentAvailable","additionalColumn","additionalColumnHeader","length","getRemarksColumnIfAvailable","managedColumns","setManagedColumns","searchedColumns","setSearchedColumns","concat","remarksColumnToManage","setRemarksColumnToManage","isErrorDisplayed","setIsErrorDisplayed","HTML5toTouch","backends","backend","HTML5Backend","TouchBackend","options","enableMouseEvents","preview","transition","TouchTransition","filterColumnsList","event","toLowerCase","includes","columns","isCheckboxSelected","header","selectedColumn","selectAllColumns","currentTarget","checked","selectSingleColumn","indexOfColumnToAdd","itemToAdd","prevItemIndex","newColumnsList","slice","splice","doColumnUpdate","updateColumnStructure","resetColumnUpdate","marginLeft","color","MultiBackend","SORT_ITEM","SortItem","sortOption","moveSort","findSort","updateSingleSortingOption","copySortOption","deleteSortOption","getInncerCellsOfColumn","columnAccessor","find","accessor","changeSortByOptions","newSortByValue","innerCellsList","order","changeSortOnOptions","newSortOnValue","sortBy","changeSortOrderOptions","newSortOrderValue","sortOn","copySort","deleteSort","orgItem","innerCellItem","innerCellIndex","SortCopy","SortDelete","SortingList","updateSortingOptions","sortOptions","sortId","sort","GroupSort","isGroupSortOverLayOpen","toggleGroupSortOverLay","applyGroupSort","sortingOrders","defaultSortingOption","setSortOptions","sortingOptions","addSortingOptions","clearSortingOptions","sortIndex","sortByValue","sortOnValue","sortOrder","newOptionsList","newSortingOption","updatedSortOptions","option","newOption","applySort","isError","optionIndex","duplicateSort","opt","optIndex","ExportData","isExportOverlayOpen","toggleExportDataOverlay","rows","updatedColumns","downloadTypes","setDownloadTypes","warning","setWarning","isDownload","exportRowData","filteredRow","filteredRowValues","forEach","rowDetails","keys","Object","getOwnPropertyNames","filteredColumnVal","rowFilteredValues","key","columnName","columnValue","values","toString","replace","arrObj","push","downloadPDF","downloadXLSFile","downloadCSVFile","unit","size","orientation","doc","jsPDF","setFontSize","title","headers","content","startY","head","body","text","autoTable","save","filteredRowValue","fileType","fileExtension","fileName","ws","XLSX","json_to_sheet","wb","Sheets","SheetNames","excelBuffer","bookType","Blob","FileSaver","changeDownloadType","textAlign","listRef","createRef","Customgrid","gridHeight","gridWidth","managableColumns","rowEditOverlay","deletePopUpOverLay","globalSearchLogic","selectBulkData","calculateRowHeight","renderExpandedContent","hasNextPage","isNextPageLoading","loadNextPage","doGroupSort","setColumns","isRowExpandEnabled","setIsRowExpandEnabled","marginTop","itemCount","loadMoreItems","isItemLoaded","isFilterOpen","setFilterOpen","toggleColumnFilter","setGroupSortOverLay","setManageColumnOpen","newColumnStructure","remarksColumn","setIsExportOverlayOpen","defaultColumn","useMemo","Filter","getTableProps","getTableBodyProps","headerGroups","prepareRow","selectedFlatRows","state","useTable","autoResetFilters","autoResetGlobalFilter","autoResetSortBy","autoResetExpanded","autoResetSelectedRows","useFilters","useGlobalFilter","useSortBy","useExpanded","useRowSelect","useFlexLayout","useResizeColumns","hooks","allColumns","disableResizing","disableFilters","disableSortBy","minWidth","width","maxWidth","getToggleAllRowsSelectedProps","Cell","getToggleRowSelectedProps","getToggleRowExpandedProps","isExpanded","bulkSelector","resetAfterIndex","RenderRow","useCallback","style","getRowProps","cells","cell","getCellProps","render","height","overflowX","overflowY","headerGroup","getHeaderGroupProps","getHeaderProps","getSortByToggleProps","isSorted","isSortedDesc","canResize","getResizerProps","onItemsRendered","List","list","Grid","fetchData","updateRowData","deleteRowData","setHasNextPage","setIsNextPageLoading","isLoading","setIsLoading","items","setItems","groupSortOptions","setGroupSortOptions","processedColumns","sortValue","isInnerCellsPresent","sortType","rowA","rowB","filterText","rowValue","filterCols","cellValue","gridColumns","compareValues","compareOrder","v1","v2","getSortedData","x","y","compareResult","newResult","getOriginalDataIndex","sortedDataIndex","updatedData","useImperativeHandle","updateCellInGrid","rowIndex","old","updatedRow","rowIndexToBeDeleted","deletedRow","args","newIndex","then"],"mappings":"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"}