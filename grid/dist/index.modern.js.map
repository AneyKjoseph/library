{"version":3,"file":"index.modern.js","sources":["../src/Functions/RowSelector.js","../src/Functions/DefaultColumnFilter.js","../src/Functions/GlobalFilter.js","../src/index.js"],"sourcesContent":["import React, { forwardRef, useRef, useEffect, useState, memo } from \"react\";\r\n\r\nconst RowSelector = memo(\r\n    forwardRef(({ indeterminate, ...rest }, ref) => {\r\n        const [checkValue, setCheckValue] = useState(indeterminate);\r\n        const defaultRef = useRef();\r\n        const resolvedRef = ref || defaultRef;\r\n        const onChange = () => {\r\n            setCheckValue(!indeterminate);\r\n        };\r\n        useEffect(() => {\r\n            resolvedRef.current.indeterminate = indeterminate;\r\n        }, [resolvedRef, indeterminate]);\r\n        return (\r\n            <div className=\"check-wrap\">\r\n                <input type=\"checkbox\" checked={checkValue} onChange={onChange} ref={resolvedRef} {...rest} />\r\n            </div>\r\n        );\r\n    })\r\n);\r\n\r\nexport default RowSelector;\r\n","import React, { memo } from \"react\";\r\n\r\nconst DefaultColumnFilter = memo(({ column: { filterValue, setFilter } }) => {\r\n    return (\r\n        <input\r\n            className=\"txt\"\r\n            value={filterValue || \"\"}\r\n            onChange={(e) => {\r\n                setFilter(e.target.value || undefined);\r\n            }}\r\n            placeholder=\"Search\"\r\n        />\r\n    );\r\n});\r\n\r\nexport default DefaultColumnFilter;\r\n","import React, { memo, useState } from \"react\";\r\nimport { useAsyncDebounce } from \"react-table\";\r\n\r\nconst GlobalFilter = memo(({ globalFilter, setGlobalFilter }) => {\r\n    const [value, setValue] = useState(globalFilter);\r\n\r\n    const onChange = useAsyncDebounce((value) => {\r\n        setGlobalFilter(value || undefined);\r\n    }, 200);\r\n\r\n    return (\r\n        <div className=\"txt-wrap\">\r\n            <input\r\n                type=\"text\"\r\n                value={value || \"\"}\r\n                onChange={(e) => {\r\n                    setValue(e.target.value);\r\n                    onChange(e.target.value);\r\n                }}\r\n                className=\"txt\"\r\n                placeholder=\"Search\"\r\n            />\r\n            <i className=\"fa fa-search fa-6\" aria-hidden=\"true\"></i>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default GlobalFilter;\r\n","import React, { useCallback, useState, memo, useEffect, createRef, useMemo } from \"react\";\r\nimport {\r\n    useTable,\r\n    useResizeColumns,\r\n    useFlexLayout,\r\n    useRowSelect,\r\n    useSortBy,\r\n    useFilters,\r\n    useGlobalFilter,\r\n    useExpanded\r\n} from \"react-table\";\r\nimport { VariableSizeList as List } from \"react-window\";\r\nimport AutoSizer from \"react-virtualized-auto-sizer\";\r\nimport InfiniteLoader from \"react-window-infinite-loader\";\r\nimport RowSelector from \"./Functions/RowSelector\";\r\nimport DefaultColumnFilter from \"./Functions/DefaultColumnFilter\";\r\nimport GlobalFilter from \"./Functions/GlobalFilter\";\r\n\r\nconst listRef = createRef(null);\r\n\r\nconst Grid = memo((props) => {\r\n    const {\r\n        title,\r\n        gridHeight,\r\n        columns,\r\n        data,\r\n        globalSearchLogic,\r\n        updateCellData,\r\n        selectBulkData,\r\n        calculateRowHeight,\r\n        renderExpandedContent,\r\n        hasNextPage,\r\n        isNextPageLoading,\r\n        loadNextPage\r\n    } = props;\r\n\r\n    //Display error message if data or columns configuration is missing.\r\n    if (!(data && data.length > 0) || !(columns && columns.length > 0)) {\r\n        return <h2 style={{ marginTop: \"50px\", textAlign: \"center\" }}>Invalid Data or Columns Configuration</h2>;\r\n    }\r\n\r\n    //Variables used for handling infinite loading\r\n    const itemCount = hasNextPage ? data.length + 1 : data.length;\r\n    const loadMoreItems = isNextPageLoading ? () => {} : loadNextPage ? loadNextPage : () => {};\r\n    const isItemLoaded = (index) => !hasNextPage || index < data.length;\r\n\r\n    //Local state value for checking if column filter is open/closed\r\n    const [isFilterOpen, setFilterOpen] = useState(false);\r\n\r\n    //Toggle column filter state value based on UI clicks\r\n    const toggleColumnFilter = () => {\r\n        setFilterOpen(!isFilterOpen);\r\n    };\r\n\r\n    //Column filter added for all columns by default\r\n    const defaultColumn = useMemo(\r\n        () => ({\r\n            Filter: DefaultColumnFilter\r\n        }),\r\n        []\r\n    );\r\n\r\n    //Initialize react-table instance with the values received through properties\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        rows,\r\n        prepareRow,\r\n        selectedFlatRows,\r\n        state,\r\n        setGlobalFilter\r\n    } = useTable(\r\n        {\r\n            columns,\r\n            data,\r\n            defaultColumn,\r\n            updateCellData,\r\n            globalFilter: (rows, columns, filterValue) => {\r\n                //Call global search function defined in application, if it is present\r\n                if (globalSearchLogic && typeof globalSearchLogic === \"function\") {\r\n                    return globalSearchLogic(rows, columns, filterValue);\r\n                } else {\r\n                    return rows;\r\n                }\r\n            },\r\n            autoResetSelectedRows: false,\r\n            autoResetSortBy: false,\r\n            autoResetFilters: false\r\n        },\r\n        useFilters,\r\n        useGlobalFilter,\r\n        useSortBy,\r\n        useRowSelect,\r\n        useFlexLayout,\r\n        useResizeColumns,\r\n        useExpanded,\r\n        (hooks) => {\r\n            //Add checkbox for all rows in grid, with different properties for header row and body rows\r\n            hooks.allColumns.push((columns) => [\r\n                {\r\n                    id: \"selection\",\r\n                    disableResizing: true,\r\n                    disableFilters: true,\r\n                    disableSortBy: true,\r\n                    minWidth: 35,\r\n                    width: 35,\r\n                    maxWidth: 35,\r\n                    Header: ({ getToggleAllRowsSelectedProps }) => <RowSelector {...getToggleAllRowsSelectedProps()} />,\r\n                    Cell: ({ row }) => <RowSelector {...row.getToggleRowSelectedProps()} />\r\n                },\r\n                ...columns\r\n            ]);\r\n        }\r\n    );\r\n\r\n    //Render each row and cells in each row, using attributes from react window list.\r\n    const RenderRow = useCallback(\r\n        ({ index, style }) => {\r\n            if (isItemLoaded(index)) {\r\n                const row = rows[index];\r\n                prepareRow(row);\r\n                return (\r\n                    <div {...row.getRowProps({ style })} className=\"table-row tr\">\r\n                        <div className=\"table-row-wrap\">\r\n                            {row.cells.map((cell) => {\r\n                                return (\r\n                                    <div {...cell.getCellProps()} className=\"table-cell td\">\r\n                                        {cell.render(\"Cell\")}\r\n                                    </div>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                        {/*Check if row eapand icon is clicked, and if yes, call function to bind content to the expanded region*/}\r\n                        {row.isExpanded ? (\r\n                            <div className=\"expand\">{renderExpandedContent ? renderExpandedContent(row) : null}</div>\r\n                        ) : null}\r\n                    </div>\r\n                );\r\n            }\r\n        },\r\n        [prepareRow, rows, renderExpandedContent]\r\n    );\r\n\r\n    //Export selected row data and pass it to the callback method\r\n    const bulkSelector = () => {\r\n        if (selectBulkData) {\r\n            selectBulkData(selectedFlatRows);\r\n        }\r\n    };\r\n\r\n    //This code is to handle the row height calculation while expanding a row or resizing a column\r\n    useEffect(() => {\r\n        if (listRef && listRef.current) {\r\n            listRef.current.resetAfterIndex(0, true);\r\n        }\r\n    });\r\n\r\n    //Render table title, global search component, button to show/hide column filter, button to export selected row data & the grid\r\n    //Use properties and methods provided by react-table\r\n    //Autosizer used for calculating grid height (don't consider window width and column resizing value changes)\r\n    //Infinite loader used for lazy loading, with the properties passed here and other values calculated at the top\r\n    //React window list is used for implementing virtualization, specifying the item count in a frame and height of each rows in it.\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <div className=\"table-filter\">\r\n                <div className=\"results\">\r\n                    <div className=\"name\">\r\n                        <strong>{rows.length}</strong>\r\n                        <span> {title ? title : \"Rows\"}</span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"filter-utilities\">\r\n                    <GlobalFilter globalFilter={state.globalFilter} setGlobalFilter={setGlobalFilter} />\r\n                    <div className=\"filter-icon keyword-search\" onClick={toggleColumnFilter}>\r\n                        <i className=\"fa fa-filter\" aria-hidden=\"true\"></i>\r\n                    </div>\r\n                    <div className=\"filter-icon bulk-select\" onClick={bulkSelector}>\r\n                        <i className=\"fa fa-pencil-square-o\"></i>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div\r\n                className=\"tableContainer table-outer\"\r\n                style={{ height: gridHeight ? gridHeight : \"50vh\", overflowX: \"auto\", overflowY: \"hidden\" }}\r\n            >\r\n                <AutoSizer disableWidth disableResizing>\r\n                    {({ height }) => (\r\n                        <div {...getTableProps()} className=\"table\">\r\n                            <div className=\"thead table-row table-row--head\">\r\n                                {headerGroups.map((headerGroup) => (\r\n                                    <div {...headerGroup.getHeaderGroupProps()} className=\"tr\">\r\n                                        {headerGroup.headers.map((column) => (\r\n                                            <div {...column.getHeaderProps()} className=\"table-cell column-heading th\">\r\n                                                <div {...column.getSortByToggleProps()}>\r\n                                                    {column.render(\"Header\")}\r\n                                                    <span>\r\n                                                        {column.isSorted ? (\r\n                                                            column.isSortedDesc ? (\r\n                                                                <i className=\"fa fa-sort-desc\" aria-hidden=\"true\"></i>\r\n                                                            ) : (\r\n                                                                <i className=\"fa fa-sort-asc\" aria-hidden=\"true\"></i>\r\n                                                            )\r\n                                                        ) : (\r\n                                                            \"\"\r\n                                                        )}\r\n                                                    </span>\r\n                                                </div>\r\n                                                <div className={`txt-wrap column-filter ${isFilterOpen ? \"open\" : \"\"}`}>\r\n                                                    {!column.disableFilters ? column.render(\"Filter\") : null}\r\n                                                </div>\r\n                                                {column.canResize && <div {...column.getResizerProps()} className=\"resizer\" />}\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n                                ))}\r\n                            </div>\r\n                            <div {...getTableBodyProps()} className=\"tbody\">\r\n                                <InfiniteLoader isItemLoaded={isItemLoaded} itemCount={itemCount} loadMoreItems={loadMoreItems}>\r\n                                    {({ onItemsRendered, ref }) => (\r\n                                        <List\r\n                                            ref={(list) => {\r\n                                                ref(list);\r\n                                                listRef.current = list;\r\n                                            }}\r\n                                            style={{ overflowX: \"hidden\" }}\r\n                                            height={height - 50}\r\n                                            itemCount={rows.length}\r\n                                            itemSize={(index) => {\r\n                                                if (calculateRowHeight && typeof calculateRowHeight === \"function\") {\r\n                                                    return calculateRowHeight(rows, index, headerGroups);\r\n                                                } else {\r\n                                                    return 70;\r\n                                                }\r\n                                            }}\r\n                                            onItemsRendered={onItemsRendered}\r\n                                            overscanCount={20}\r\n                                        >\r\n                                            {RenderRow}\r\n                                        </List>\r\n                                    )}\r\n                                </InfiniteLoader>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </AutoSizer>\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Grid;\r\n"],"names":["RowSelector","memo","forwardRef","indeterminate","rest","ref","checkValue","setCheckValue","useState","defaultRef","useRef","resolvedRef","onChange","useEffect","current","DefaultColumnFilter","column","filterValue","setFilter","e","target","value","undefined","GlobalFilter","globalFilter","setGlobalFilter","setValue","useAsyncDebounce","listRef","createRef","Grid","props","title","gridHeight","columns","data","globalSearchLogic","updateCellData","selectBulkData","calculateRowHeight","renderExpandedContent","hasNextPage","isNextPageLoading","loadNextPage","length","marginTop","textAlign","itemCount","loadMoreItems","isItemLoaded","index","isFilterOpen","setFilterOpen","toggleColumnFilter","defaultColumn","useMemo","Filter","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","selectedFlatRows","state","useTable","autoResetSelectedRows","autoResetSortBy","autoResetFilters","useFilters","useGlobalFilter","useSortBy","useRowSelect","useFlexLayout","useResizeColumns","useExpanded","hooks","allColumns","push","id","disableResizing","disableFilters","disableSortBy","minWidth","width","maxWidth","Header","getToggleAllRowsSelectedProps","Cell","row","getToggleRowSelectedProps","RenderRow","useCallback","style","getRowProps","cells","map","cell","getCellProps","render","isExpanded","bulkSelector","resetAfterIndex","height","overflowX","overflowY","headerGroup","getHeaderGroupProps","headers","getHeaderProps","getSortByToggleProps","isSorted","isSortedDesc","canResize","getResizerProps","onItemsRendered","List","list"],"mappings":"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"}