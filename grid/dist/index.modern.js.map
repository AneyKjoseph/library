{"version":3,"file":"index.modern.js","sources":["../src/Functions/CellDisplayAndEdit.js","../src/Utilities/Columns.js","../src/Functions/RowSelector.js","../src/Functions/DefaultColumnFilter.js","../src/Functions/GlobalFilter.js","../src/Images/RowDelete.svg","../src/Images/RowEdit.svg","../src/Images/RowPin.png","../src/Functions/RowOptions.js","../src/Functions/RowEditOverlay.js","../src/Functions/RowDeleteOverLay.js","../src/Overlays/managecolumns/ItemTypes.js","../src/Overlays/managecolumns/columnItem.js","../src/Overlays/managecolumns/columnsList.js","../src/Overlays/managecolumns/index.js","../src/Overlays/groupsort/ItemTypes.js","../src/Images/SortCopy.svg","../src/Images/SortDelete.svg","../src/Overlays/groupsort/sortingItem.js","../src/Overlays/groupsort/sortingList.js","../src/Overlays/groupsort/index.js","../src/Overlays/exportdata/index.js","../src/Customgrid.js","../src/index.js"],"sourcesContent":["import React, { memo, useState } from \"react\";\r\nimport ClickAwayListener from \"react-click-away-listener\";\r\n\r\nconst CellDisplayAndEdit = memo(({ row, updateRowInGrid }) => {\r\n    const { column } = row;\r\n    if (column && row.row) {\r\n        const [isEditOpen, setIsEditOpen] = useState(false);\r\n        const [editedRowValue, setEditedRowValue] = useState(null);\r\n\r\n        const closeEdit = () => {\r\n            setIsEditOpen(false);\r\n        };\r\n\r\n        const openEdit = () => {\r\n            setIsEditOpen(true);\r\n        };\r\n\r\n        const getUpdatedRowValue = (value) => {\r\n            if (value) {\r\n                setEditedRowValue(value);\r\n            }\r\n        };\r\n\r\n        const saveEdit = () => {\r\n            if (editedRowValue) {\r\n                updateRowInGrid(row.row.original, editedRowValue);\r\n            }\r\n            closeEdit();\r\n        };\r\n\r\n        const originalRowValue = { ...row.row.original };\r\n        const { id, innerCells, originalInnerCells } = column;\r\n\r\n        //Remove inncer cell data from row value if it is hidden from column chooser overlay.\r\n        if (\r\n            originalRowValue &&\r\n            originalInnerCells &&\r\n            originalInnerCells.length &&\r\n            innerCells &&\r\n            innerCells.length &&\r\n            innerCells.length < originalInnerCells.length\r\n        ) {\r\n            const columnValue = originalRowValue[id];\r\n            if (typeof columnValue === \"object\") {\r\n                if (columnValue.length > 0) {\r\n                    const newcolumnValue = columnValue.map((value) => {\r\n                        let params = {};\r\n                        innerCells.forEach((cell) => {\r\n                            const cellAccessor = cell.accessor;\r\n                            params[cellAccessor] = value[cellAccessor];\r\n                        });\r\n                        value = params;\r\n                        return value;\r\n                    });\r\n                    originalRowValue[id] = newcolumnValue;\r\n                } else {\r\n                    let params = {};\r\n                    innerCells.forEach((cell) => {\r\n                        const cellAccessor = cell.accessor;\r\n                        params[cellAccessor] = row.value[cellAccessor];\r\n                    });\r\n                    originalRowValue[id] = params;\r\n                }\r\n            }\r\n        }\r\n\r\n        const cellDisplayContent = column.displayCell(originalRowValue);\r\n        const cellEditContent = column.editCell ? column.editCell(originalRowValue, getUpdatedRowValue) : null;\r\n        return (\r\n            <ClickAwayListener onClickAway={closeEdit}>\r\n                <div className={`table-cell--content table-cell--content__${id}`}>\r\n                    {cellEditContent ? (\r\n                        <div className=\"cell-edit\" onClick={openEdit}>\r\n                            <i className=\"fa fa-pencil\" aria-hidden=\"true\"></i>\r\n                        </div>\r\n                    ) : null}\r\n                    {cellDisplayContent}\r\n                    {isEditOpen ? (\r\n                        <div className=\"table-cell--content-edit\">\r\n                            {cellEditContent}\r\n                            <button className=\"ok\" onClick={saveEdit} />\r\n                            <button className=\"cancel\" onClick={closeEdit} />\r\n                        </div>\r\n                    ) : null}\r\n                </div>\r\n            </ClickAwayListener>\r\n        );\r\n    }\r\n});\r\n\r\nexport default CellDisplayAndEdit;\r\n","import React from \"react\";\r\nimport CellDisplayAndEdit from \"../Functions/CellDisplayAndEdit\";\r\n\r\nexport const extractColumns = (columns, searchColumn, isDesktop, updateRowInGrid) => {\r\n    //Remove iPad only columns from desktop and vice-versa\r\n    const filteredColumns = columns.filter((column) => {\r\n        return isDesktop ? !column.onlyInIpad : !column.onlyInDesktop;\r\n    });\r\n\r\n    let modifiedColumns = [];\r\n    //Loop through the columns configuration and create required column structure\r\n    filteredColumns.forEach((column, index) => {\r\n        const { innerCells, accessor, sortValue } = column;\r\n        const isInnerCellsPresent = innerCells && innerCells.length > 0;\r\n\r\n        //Add column Id\r\n        column.columnId = `column_${index}`;\r\n\r\n        //Configure Cell function (which is used by react-table component), based on the user defined function displayCell\r\n        if (!column.Cell && column.displayCell) {\r\n            column.Cell = (row) => {\r\n                return <CellDisplayAndEdit row={row} updateRowInGrid={updateRowInGrid} />;\r\n            };\r\n        }\r\n\r\n        //Add logic to sort column if sort is not disabled\r\n        if (!column.disableSortBy) {\r\n            if (isInnerCellsPresent) {\r\n                //If there are inner cells and a sort value specified, do sort on that value\r\n                if (sortValue) {\r\n                    column.sortType = (rowA, rowB) => {\r\n                        return rowA.original[accessor][sortValue] > rowB.original[accessor][sortValue] ? -1 : 1;\r\n                    };\r\n                } else {\r\n                    column.disableSortBy = true;\r\n                }\r\n            } else if (!innerCells) {\r\n                //If no inner cells are there, just do sort on column value\r\n                column.sortType = (rowA, rowB) => {\r\n                    return rowA.original[accessor] > rowB.original[accessor] ? -1 : 1;\r\n                };\r\n            }\r\n        }\r\n\r\n        //Add logic to filter column if column filter is not disabled\r\n        if (!column.disableFilters) {\r\n            column.filter = (rows, id, filterValue) => {\r\n                const searchText = filterValue ? filterValue.toLowerCase() : \"\";\r\n                return rows.filter((row) => {\r\n                    //Find original data value of each row\r\n                    const { original } = row;\r\n                    //Do search for the column\r\n                    return searchColumn(column, original, searchText);\r\n                });\r\n            };\r\n        }\r\n\r\n        modifiedColumns.push(column);\r\n    });\r\n    return modifiedColumns;\r\n};\r\n\r\nexport const extractAdditionalColumn = (additionalColumn, isDesktop) => {\r\n    const { innerCells } = additionalColumn;\r\n    const isInnerCellsPresent = innerCells && innerCells.length > 0;\r\n\r\n    //Add column Id\r\n    additionalColumn.columnId = `ExpandColumn`;\r\n\r\n    //Remove iPad only columns from desktop and vice-versa\r\n    if (isInnerCellsPresent) {\r\n        additionalColumn.innerCells = innerCells.filter((cell) => {\r\n            return isDesktop ? !cell.onlyInIpad : !cell.onlyInDesktop;\r\n        });\r\n    }\r\n    return additionalColumn;\r\n};\r\n","import React, { forwardRef, useRef, useEffect, useState, memo } from \"react\";\r\n\r\nconst RowSelector = memo(\r\n    forwardRef(({ indeterminate, ...rest }, ref) => {\r\n        const [checkValue, setCheckValue] = useState(indeterminate);\r\n        const defaultRef = useRef();\r\n        const resolvedRef = ref || defaultRef;\r\n        const onChange = () => {\r\n            setCheckValue(!indeterminate);\r\n        };\r\n        useEffect(() => {\r\n            resolvedRef.current.indeterminate = indeterminate;\r\n        }, [resolvedRef, indeterminate]);\r\n        return (\r\n            <div className=\"check-wrap\">\r\n                <input type=\"checkbox\" checked={checkValue} onChange={onChange} ref={resolvedRef} {...rest} />\r\n            </div>\r\n        );\r\n    })\r\n);\r\n\r\nexport default RowSelector;\r\n","import React, { memo } from \"react\";\r\n\r\nconst DefaultColumnFilter = memo(({ column: { filterValue, setFilter } }) => {\r\n    return (\r\n        <input\r\n            className=\"txt\"\r\n            value={filterValue || \"\"}\r\n            onChange={(e) => {\r\n                setFilter(e.target.value || undefined);\r\n            }}\r\n            placeholder=\"Search\"\r\n        />\r\n    );\r\n});\r\n\r\nexport default DefaultColumnFilter;\r\n","import React, { memo, useState } from \"react\";\r\nimport { useAsyncDebounce } from \"react-table\";\r\n\r\nconst GlobalFilter = memo(({ globalFilter, setGlobalFilter }) => {\r\n    const [value, setValue] = useState(globalFilter);\r\n\r\n    const onChange = useAsyncDebounce((value) => {\r\n        setGlobalFilter(value || undefined);\r\n    }, 200);\r\n\r\n    return (\r\n        <div className=\"txt-wrap\">\r\n            <input\r\n                type=\"text\"\r\n                value={value || \"\"}\r\n                onChange={(e) => {\r\n                    setValue(e.target.value);\r\n                    onChange(e.target.value);\r\n                }}\r\n                className=\"txt\"\r\n                placeholder=\"Search\"\r\n            />\r\n            <i className=\"fa fa-search fa-6\" aria-hidden=\"true\"></i>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default GlobalFilter;\r\n","/* loaded by smart-asset */\nexport default require(\"./RowDelete~RKolkpAF.svg\")","/* loaded by smart-asset */\nexport default require(\"./RowEdit~BuKwAcSl.svg\")","/* loaded by smart-asset */\nexport default require(\"./RowPin~qQRdvcXq.png\")","import React, { useState, memo } from \"react\";\r\nimport ClickAwayListener from \"react-click-away-listener\";\r\nimport RowDelete from \"../Images/RowDelete.svg\";\r\nimport RowEdit from \"../Images/RowEdit.svg\";\r\nimport RowPin from \"../Images/RowPin.png\";\r\n\r\nconst RowOptions = memo(({ row, bindRowEditOverlay, bindRowDeleteOverlay }) => {\r\n    const { original } = row;\r\n\r\n    const [isRowOptionsOpen, setRowOptionsOpen] = useState(false);\r\n\r\n    const openRowOptionsOverlay = () => {\r\n        setRowOptionsOpen(true);\r\n    };\r\n\r\n    const closeRowOptionsOverlay = () => {\r\n        setRowOptionsOpen(false);\r\n    };\r\n\r\n    const openRowEditOverlay = () => {\r\n        bindRowEditOverlay(original);\r\n        closeRowOptionsOverlay();\r\n    };\r\n\r\n    const openDeleteOverlay = () => {\r\n        bindRowDeleteOverlay(original);\r\n        closeRowOptionsOverlay();\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"row-options-wrap\">\r\n                <span className=\"icon-row-options\" onClick={openRowOptionsOverlay}>\r\n                    <i></i>\r\n                    <i></i>\r\n                    <i></i>\r\n                </span>\r\n                {isRowOptionsOpen ? (\r\n                    <ClickAwayListener onClickAway={closeRowOptionsOverlay}>\r\n                        <div className=\"row-options-overlay\">\r\n                            <ul>\r\n                                <li>\r\n                                    <span onClick={openRowEditOverlay}>\r\n                                        <i>\r\n                                            <img src={RowEdit} alt=\"cargo\" />\r\n                                        </i>\r\n                                        <span>Edit</span>\r\n                                    </span>\r\n                                </li>\r\n                                <li>\r\n                                    <span>\r\n                                        <i>\r\n                                            <img src={RowPin} alt=\"cargo\" width=\"15\" height=\"15\" />\r\n                                        </i>\r\n                                        <span>Pin This row</span>\r\n                                    </span>\r\n                                </li>\r\n                                <li>\r\n                                    <span onClick={openDeleteOverlay}>\r\n                                        <i>\r\n                                            <img src={RowDelete} alt=\"cargo\" />\r\n                                        </i>\r\n                                        <span>Delete</span>\r\n                                    </span>\r\n                                </li>\r\n                            </ul>\r\n                            <span className=\"close\" onClick={closeRowOptionsOverlay}>\r\n                                <i className=\"fa fa-close\"></i>\r\n                            </span>\r\n                        </div>\r\n                    </ClickAwayListener>\r\n                ) : null}\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default RowOptions;\r\n","import React, { memo, useState } from \"react\";\r\nimport ClickAwayListener from \"react-click-away-listener\";\r\n\r\nconst RowEditOverLay = memo(({ row, getRowEditOverlay, closeRowEditOverlay, updateRowInGrid }) => {\r\n    const [editedRowValue, setEditedRowValue] = useState(null);\r\n\r\n    const getUpdatedRowValue = (value) => {\r\n        if (value) {\r\n            setEditedRowValue(value);\r\n        }\r\n    };\r\n\r\n    const saveRowEdit = () => {\r\n        if (editedRowValue) {\r\n            updateRowInGrid(row, editedRowValue);\r\n        }\r\n        closeRowEditOverlay();\r\n    };\r\n\r\n    const rowEditContent = getRowEditOverlay(row, getUpdatedRowValue);\r\n    return (\r\n        <ClickAwayListener onClickAway={closeRowEditOverlay}>\r\n            <div className=\"row-option-action-overlay\">\r\n                {rowEditContent}\r\n                <div className=\"cancel-save-buttons\">\r\n                    <button className=\"save-Button\" onClick={saveRowEdit}>\r\n                        Save\r\n                    </button>\r\n                    <button className=\"cancel-Button\" onClick={closeRowEditOverlay}>\r\n                        Cancel\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </ClickAwayListener>\r\n    );\r\n});\r\n\r\nexport default RowEditOverLay;\r\n","import React, { memo } from \"react\";\r\nimport ClickAwayListener from \"react-click-away-listener\";\r\n\r\nconst RowDeleteOverLay = memo(({ row, closeRowDeleteOverlay, deleteRowFromGrid }) => {\r\n    const deleteRow = () => {\r\n        if (row) {\r\n            deleteRowFromGrid(row);\r\n        }\r\n        closeRowDeleteOverlay();\r\n    };\r\n\r\n    return (\r\n        <ClickAwayListener onClickAway={closeRowDeleteOverlay}>\r\n            <div className=\"row-option-action-overlay delete\">\r\n                <div className=\"cancel-save-buttons-delete\">\r\n                    <button className=\"delete-Button\" onClick={deleteRow}>\r\n                        Delete\r\n                    </button>\r\n                    <button className=\"cancel-Button\" onClick={closeRowDeleteOverlay}>\r\n                        Cancel\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </ClickAwayListener>\r\n    );\r\n});\r\n\r\nexport default RowDeleteOverLay;\r\n","export const ItemTypes = {\r\n    COLUMN: \"column\"\r\n};\r\n","import React from \"react\";\r\nimport { useDrag, useDrop } from \"react-dnd\";\r\nimport { ItemTypes } from \"./ItemTypes\";\r\n\r\nconst ColumnItem = ({ id, Header, moveColumn, findColumn, originalInnerCells, isInnerCellSelected, selectInnerCells }) => {\r\n    const originalIndex = findColumn(id).index;\r\n\r\n    const [{ isDragging }, drag] = useDrag({\r\n        item: { type: ItemTypes.COLUMN, id, originalIndex },\r\n        collect: (monitor) => ({\r\n            isDragging: monitor.isDragging()\r\n        }),\r\n        end: (dropResult, monitor) => {\r\n            const { id: droppedId, originalIndex } = monitor.getItem();\r\n            const didDrop = monitor.didDrop();\r\n            if (!didDrop) {\r\n                moveColumn(droppedId, originalIndex);\r\n            }\r\n        }\r\n    });\r\n\r\n    const [, drop] = useDrop({\r\n        accept: ItemTypes.COLUMN,\r\n        canDrop: () => false,\r\n        hover({ id: draggedId }) {\r\n            if (draggedId !== id) {\r\n                const { index: overIndex } = findColumn(id);\r\n                moveColumn(draggedId, overIndex);\r\n            }\r\n        }\r\n    });\r\n\r\n    const opacity = isDragging ? 0.1 : 1;\r\n\r\n    return (\r\n        <div style={{ opacity }}>\r\n            <div className=\"column__reorder\">\r\n                <div ref={(node) => drag(drop(node))} style={{ cursor: \"move\" }} className=\"\">\r\n                    <i className=\"fa fa-align-justify\" aria-hidden=\"true\"></i>\r\n                </div>\r\n                <div className=\"\">{Header}</div>\r\n                <div className=\"column__innerCells__wrap\">\r\n                    {originalInnerCells && originalInnerCells.length > 0\r\n                        ? originalInnerCells.map((cell, index) => {\r\n                              return (\r\n                                  <div className=\"column__wrap\" key={index}>\r\n                                      <div className=\"column__checkbox\">\r\n                                          <input\r\n                                              type=\"checkbox\"\r\n                                              data-columnheader={Header}\r\n                                              value={cell.Header}\r\n                                              checked={isInnerCellSelected(Header, cell.Header)}\r\n                                              onChange={selectInnerCells}\r\n                                          ></input>\r\n                                      </div>\r\n                                      <div className=\"column__txt\">{cell.Header}</div>\r\n                                  </div>\r\n                              );\r\n                          })\r\n                        : null}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ColumnItem;\r\n","import React from \"react\";\r\nimport { useDrop } from \"react-dnd\";\r\nimport update from \"immutability-helper\";\r\nimport { ItemTypes } from \"./ItemTypes\";\r\nimport ColumnItem from \"./columnItem\";\r\n\r\nconst ColumnsList = (props) => {\r\n    const { updateColumnsInState, columnsToManage, isInnerCellSelected, selectInnerCells } = props;\r\n\r\n    const moveColumn = (columnId, atIndex) => {\r\n        const { column, index } = findColumn(columnId);\r\n        updateColumnsInState(\r\n            update(columnsToManage, {\r\n                $splice: [\r\n                    [index, 1],\r\n                    [atIndex, 0, column]\r\n                ]\r\n            })\r\n        );\r\n    };\r\n\r\n    const findColumn = (columnId) => {\r\n        const column = columnsToManage.filter((c) => `${c.columnId}` === columnId)[0];\r\n        return {\r\n            column,\r\n            index: columnsToManage.indexOf(column)\r\n        };\r\n    };\r\n\r\n    const [, drop] = useDrop({ accept: ItemTypes.COLUMN });\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div ref={drop} style={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n                {columnsToManage.map((column, index) => {\r\n                    return (\r\n                        <ColumnItem\r\n                            key={index}\r\n                            id={`${column.columnId}`}\r\n                            Header={`${column.Header}`}\r\n                            moveColumn={moveColumn}\r\n                            findColumn={findColumn}\r\n                            originalInnerCells={column.originalInnerCells}\r\n                            isInnerCellSelected={isInnerCellSelected}\r\n                            selectInnerCells={selectInnerCells}\r\n                        />\r\n                    );\r\n                })}\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default ColumnsList;\r\n","import React, { memo, useState } from \"react\";\r\nimport { DndProvider } from \"react-dnd\";\r\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\r\nimport { TouchBackend } from \"react-dnd-touch-backend\";\r\nimport MultiBackend, { TouchTransition } from \"react-dnd-multi-backend\";\r\nimport ClickAwayListener from \"react-click-away-listener\";\r\nimport ColumnsList from \"./columnsList\";\r\n\r\nconst ColumnReordering = memo((props) => {\r\n    const { isManageColumnOpen, toggleManageColumns, originalColumns, isExpandContentAvailable, additionalColumn } = props;\r\n\r\n    const additionalColumnHeader = additionalColumn && additionalColumn.length ? additionalColumn[0].Header : \"\";\r\n    const getRemarksColumnIfAvailable = () => {\r\n        return isExpandContentAvailable ? additionalColumn : [];\r\n    };\r\n\r\n    const concatedOriginalColumns = originalColumns.concat(getRemarksColumnIfAvailable());\r\n\r\n    const [managedColumns, setManagedColumns] = useState(originalColumns);\r\n    const [searchedColumns, setSearchedColumns] = useState(concatedOriginalColumns);\r\n    const [remarksColumnToManage, setRemarksColumnToManage] = useState(getRemarksColumnIfAvailable);\r\n    const [isErrorDisplayed, setIsErrorDisplayed] = useState(false);\r\n\r\n    const HTML5toTouch = {\r\n        backends: [\r\n            {\r\n                backend: HTML5Backend\r\n            },\r\n            {\r\n                backend: TouchBackend,\r\n                options: { enableMouseEvents: true },\r\n                preview: true,\r\n                transition: TouchTransition\r\n            }\r\n        ]\r\n    };\r\n\r\n    const filterColumnsList = (event) => {\r\n        let { value } = event ? event.target : \"\";\r\n        value = value ? value.toLowerCase() : \"\";\r\n        if (value != \"\") {\r\n            setSearchedColumns(\r\n                originalColumns\r\n                    .filter((column) => {\r\n                        return column.Header.toLowerCase().includes(value);\r\n                    })\r\n                    .concat(\r\n                        getRemarksColumnIfAvailable().filter((column) => {\r\n                            return column.Header.toLowerCase().includes(value);\r\n                        })\r\n                    )\r\n            );\r\n        } else {\r\n            setSearchedColumns(concatedOriginalColumns);\r\n        }\r\n    };\r\n\r\n    const updateColumnsInState = (columns) => {\r\n        setManagedColumns(columns);\r\n    };\r\n\r\n    const findColumn = (columnList, columnHeader) => {\r\n        return columnList.find((column) => {\r\n            return column.Header === columnHeader;\r\n        });\r\n    };\r\n\r\n    const isItemPresentInList = (list, headerValue) => {\r\n        const filteredList = list.filter((item) => {\r\n            return item.Header === headerValue;\r\n        });\r\n        return filteredList && filteredList.length > 0;\r\n    };\r\n\r\n    const isCheckboxSelected = (header) => {\r\n        if (header === additionalColumnHeader) {\r\n            return remarksColumnToManage.length > 0;\r\n        } else if (header === \"Select All\") {\r\n            return searchedColumns.length === managedColumns.length + remarksColumnToManage.length;\r\n        } else {\r\n            return isItemPresentInList(managedColumns, header);\r\n        }\r\n    };\r\n\r\n    const isInnerCellSelected = (columnHeader, header) => {\r\n        const columnListToSearch = columnHeader === additionalColumnHeader ? remarksColumnToManage : managedColumns;\r\n        const selectedColumn = findColumn(columnListToSearch, columnHeader);\r\n        return isItemPresentInList(selectedColumn.innerCells, header);\r\n    };\r\n\r\n    const findIndexOfItem = (type, columnsList, indexOfColumnToAdd, columnHeader, originalInnerCells) => {\r\n        if (type === \"column\") {\r\n            return columnsList.findIndex((column) => {\r\n                return column.Header === originalColumns[indexOfColumnToAdd].Header;\r\n            });\r\n        } else {\r\n            return findColumn(columnsList, columnHeader).innerCells.findIndex((cell) => {\r\n                return cell.Header === originalInnerCells[indexOfColumnToAdd].Header;\r\n            });\r\n        }\r\n    };\r\n\r\n    const selectAllColumns = (event) => {\r\n        if (event.currentTarget.checked) {\r\n            setManagedColumns(originalColumns);\r\n            setRemarksColumnToManage(getRemarksColumnIfAvailable());\r\n        } else {\r\n            setManagedColumns([]);\r\n            setRemarksColumnToManage([]);\r\n        }\r\n    };\r\n\r\n    const selectSingleColumn = (event) => {\r\n        const { currentTarget } = event;\r\n        const { checked, value } = currentTarget;\r\n\r\n        if (value === additionalColumnHeader) {\r\n            if (checked) {\r\n                setRemarksColumnToManage(additionalColumn);\r\n            } else {\r\n                setRemarksColumnToManage([]);\r\n            }\r\n        } else {\r\n            //If column checkbox is checked\r\n            if (checked) {\r\n                //Find the index of selected column from original column array and also find the user selected column\r\n                let indexOfColumnToAdd = originalColumns.findIndex((column) => {\r\n                    return column.Header === value;\r\n                });\r\n                const itemToAdd = originalColumns[indexOfColumnToAdd];\r\n\r\n                //Loop through the managedColumns array to find the position of the column that is present previous to the user selected column\r\n                //Find index of that previous column in original column list and push the new column next to that position\r\n                let prevItemIndex = -1;\r\n                while (indexOfColumnToAdd > 0 && prevItemIndex === -1) {\r\n                    indexOfColumnToAdd = indexOfColumnToAdd - 1;\r\n                    prevItemIndex = findIndexOfItem(\"column\", managedColumns, indexOfColumnToAdd);\r\n                }\r\n\r\n                const newColumnsList = [...managedColumns];\r\n                newColumnsList.splice(prevItemIndex + 1, 0, itemToAdd);\r\n                setManagedColumns(newColumnsList);\r\n            } else {\r\n                setManagedColumns(\r\n                    managedColumns.filter((column) => {\r\n                        return column.Header !== value;\r\n                    })\r\n                );\r\n            }\r\n        }\r\n    };\r\n\r\n    const findAndSelectInnerCells = (stateColumnList, setStateColumnList, event) => {\r\n        const { currentTarget } = event;\r\n        const { checked, dataset, value } = currentTarget;\r\n        const { columnheader } = dataset;\r\n\r\n        //Find the column in which checked/unchecked inner cell is present\r\n        const selectedColumn = findColumn(stateColumnList, columnheader);\r\n        const { originalInnerCells } = selectedColumn;\r\n        if (originalInnerCells && originalInnerCells.length > 0) {\r\n            if (checked) {\r\n                //Find the index of selected column from original column array and also find the user selected column\r\n                let indexOfColumnToAdd = originalInnerCells.findIndex((column) => {\r\n                    return column.Header === value;\r\n                });\r\n                const itemToAdd = originalInnerCells[indexOfColumnToAdd];\r\n\r\n                //Loop through the stateColumnList array to find the position of the column that is present previous to the user selected column\r\n                //Find index of that previous column and push the new column to add in that position\r\n                let prevItemIndex = -1;\r\n                while (indexOfColumnToAdd > 0 && prevItemIndex === -1) {\r\n                    indexOfColumnToAdd = indexOfColumnToAdd - 1;\r\n                    prevItemIndex = findIndexOfItem(\r\n                        \"innercell\",\r\n                        stateColumnList,\r\n                        indexOfColumnToAdd,\r\n                        columnheader,\r\n                        originalInnerCells\r\n                    );\r\n                }\r\n\r\n                const newColumnsList = [...stateColumnList];\r\n                findColumn(newColumnsList, columnheader).innerCells.splice(prevItemIndex + 1, 0, itemToAdd);\r\n                setStateColumnList(newColumnsList);\r\n            } else {\r\n                setStateColumnList(\r\n                    stateColumnList.map((column) => {\r\n                        if (column.Header === columnheader) {\r\n                            column.innerCells = column.innerCells.filter((cell) => {\r\n                                return cell.Header !== value;\r\n                            });\r\n                        }\r\n                        return column;\r\n                    })\r\n                );\r\n            }\r\n        }\r\n    };\r\n\r\n    const selectInnerCells = (event) => {\r\n        findAndSelectInnerCells(managedColumns, setManagedColumns, event);\r\n    };\r\n\r\n    const selectRemarksInnerCells = (event) => {\r\n        findAndSelectInnerCells(remarksColumnToManage, setRemarksColumnToManage, event);\r\n    };\r\n\r\n    const doColumnUpdate = () => {\r\n        setIsErrorDisplayed(false);\r\n        if (managedColumns && managedColumns.length > 0) {\r\n            setSearchedColumns(concatedOriginalColumns);\r\n            props.updateColumnStructure(managedColumns, remarksColumnToManage);\r\n        } else {\r\n            setIsErrorDisplayed(true);\r\n        }\r\n        toggleManageColumns();\r\n    };\r\n\r\n    const resetInnerCells = (columnList) => {\r\n        if (columnList && columnList.length) {\r\n            return columnList.map((column) => {\r\n                column.innerCells = column.originalInnerCells;\r\n                return column;\r\n            });\r\n        }\r\n        return columnList;\r\n    };\r\n\r\n    const resetColumnUpdate = () => {\r\n        setManagedColumns(resetInnerCells(originalColumns));\r\n        setSearchedColumns(originalColumns.concat(getRemarksColumnIfAvailable()));\r\n        setRemarksColumnToManage(resetInnerCells(getRemarksColumnIfAvailable()));\r\n        props.updateColumnStructure(originalColumns, getRemarksColumnIfAvailable());\r\n    };\r\n\r\n    if (isManageColumnOpen) {\r\n        return (\r\n            <ClickAwayListener onClickAway={toggleManageColumns}>\r\n                <div className=\"columns--grid\">\r\n                    <div className=\"column__grid\">\r\n                        <div className=\"column__chooser\">\r\n                            <div className=\"column__header\">\r\n                                <div className=\"\">\r\n                                    <strong>Column Chooser</strong>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"column__body\">\r\n                                <div>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        placeholder=\"Search column\"\r\n                                        className=\"custom__ctrl\"\r\n                                        onChange={filterColumnsList}\r\n                                    ></input>\r\n                                </div>\r\n                                <div className=\"column__selectAll\">\r\n                                    <div className=\"column__checkbox\">\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            value=\"Select All\"\r\n                                            checked={isCheckboxSelected(\"Select All\")}\r\n                                            onChange={selectAllColumns}\r\n                                        ></input>\r\n                                    </div>\r\n                                    <div className=\"column__selectTxt\">Select All</div>\r\n                                </div>\r\n                                {searchedColumns.map((column, index) => {\r\n                                    return (\r\n                                        <div className=\"column__wrap\" key={index}>\r\n                                            <div className=\"column__checkbox\">\r\n                                                <input\r\n                                                    type=\"checkbox\"\r\n                                                    value={column.Header}\r\n                                                    checked={isCheckboxSelected(column.Header)}\r\n                                                    onChange={selectSingleColumn}\r\n                                                ></input>\r\n                                            </div>\r\n                                            <div className=\"column__txt\">{column.Header}</div>\r\n                                        </div>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"column__settings\">\r\n                            <div className=\"column__header\">\r\n                                <div className=\"column__headerTxt\">\r\n                                    <strong>Column Settings</strong>\r\n                                    {isErrorDisplayed ? (\r\n                                        <strong style={{ marginLeft: \"10px\", color: \"red\" }}>\r\n                                            Select at least one column (other than {additionalColumnHeader})\r\n                                        </strong>\r\n                                    ) : null}\r\n                                </div>\r\n                                <div className=\"column__close\" onClick={toggleManageColumns}>\r\n                                    <i className=\"fa fa-times\" aria-hidden=\"true\"></i>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"column__body\">\r\n                                <DndProvider backend={MultiBackend} options={HTML5toTouch}>\r\n                                    <ColumnsList\r\n                                        columnsToManage={managedColumns}\r\n                                        updateColumnsInState={updateColumnsInState}\r\n                                        isInnerCellSelected={isInnerCellSelected}\r\n                                        selectInnerCells={selectInnerCells}\r\n                                    />\r\n                                </DndProvider>\r\n                                {remarksColumnToManage && remarksColumnToManage.length > 0 ? (\r\n                                    <div className=\"column__reorder full-width\">\r\n                                        <div className=\"\">{remarksColumnToManage[0].Header}</div>\r\n                                        <div className=\"column__innerCells__wrap\">\r\n                                            {remarksColumnToManage[0].originalInnerCells &&\r\n                                            remarksColumnToManage[0].originalInnerCells.length > 0\r\n                                                ? remarksColumnToManage[0].originalInnerCells.map((cell, index) => {\r\n                                                      return (\r\n                                                          <div className=\"column__wrap\" key={index}>\r\n                                                              <div className=\"column__checkbox\">\r\n                                                                  <input\r\n                                                                      type=\"checkbox\"\r\n                                                                      data-columnheader={remarksColumnToManage[0].Header}\r\n                                                                      value={cell.Header}\r\n                                                                      checked={isInnerCellSelected(\r\n                                                                          remarksColumnToManage[0].Header,\r\n                                                                          cell.Header\r\n                                                                      )}\r\n                                                                      onChange={selectRemarksInnerCells}\r\n                                                                  ></input>\r\n                                                              </div>\r\n                                                              <div className=\"column__txt\">{cell.Header}</div>\r\n                                                          </div>\r\n                                                      );\r\n                                                  })\r\n                                                : null}\r\n                                        </div>\r\n                                    </div>\r\n                                ) : null}\r\n                            </div>\r\n                            <div className=\"column__footer\">\r\n                                <div className=\"column__btns\">\r\n                                    <button className=\"btns\" onClick={resetColumnUpdate}>\r\n                                        Reset\r\n                                    </button>\r\n                                    <button className=\"btns\" onClick={toggleManageColumns}>\r\n                                        Cancel\r\n                                    </button>\r\n                                    <button className=\"btns btns__save\" onClick={doColumnUpdate}>\r\n                                        Save\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </ClickAwayListener>\r\n        );\r\n    } else {\r\n        return <div></div>;\r\n    }\r\n});\r\n\r\nexport default ColumnReordering;\r\n","export const ItemTypes = {\n    SORT_ITEM: \"SORT_ITEM\"\n};\n","/* loaded by smart-asset */\nexport default require(\"./SortCopy~IGKyJbDR.svg\")","/* loaded by smart-asset */\nexport default require(\"./SortDelete~MFpZtzWS.svg\")","import React from \"react\";\nimport { useDrag, useDrop } from \"react-dnd\";\nimport { ItemTypes } from \"./ItemTypes\";\nimport SortCopy from \"../../Images/SortCopy.svg\";\nimport SortDelete from \"../../Images/SortDelete.svg\";\n\nconst SortItem = ({\n    id,\n    sortOption,\n    originalColumns,\n    moveSort,\n    findSort,\n    updateSingleSortingOption,\n    copySortOption,\n    deleteSortOption\n}) => {\n    const originalIndex = findSort(id).index;\n\n    const [{ isDragging }, drag] = useDrag({\n        item: { type: ItemTypes.SORT_ITEM, id, originalIndex },\n        collect: (monitor) => ({\n            isDragging: monitor.isDragging()\n        }),\n        end: (dropResult, monitor) => {\n            const { id: droppedId, originalIndex } = monitor.getItem();\n            const didDrop = monitor.didDrop();\n            if (!didDrop) {\n                moveSort(droppedId, originalIndex);\n            }\n        }\n    });\n\n    const [, drop] = useDrop({\n        accept: ItemTypes.SORT_ITEM,\n        canDrop: () => false,\n        hover({ id: draggedId }) {\n            if (draggedId !== id) {\n                const { index: overIndex } = findSort(id);\n                moveSort(draggedId, overIndex);\n            }\n        }\n    });\n\n    const getInncerCellsOfColumn = (columnAccessor) => {\n        return originalColumns.find((column) => {\n            return column.accessor === columnAccessor;\n        }).innerCells;\n    };\n\n    const changeSortByOptions = (event) => {\n        const newSortByValue = event.target.value;\n        const innerCellsList = getInncerCellsOfColumn(newSortByValue);\n        updateSingleSortingOption(\n            id,\n            newSortByValue,\n            innerCellsList && innerCellsList.length > 0 ? innerCellsList[0].accessor : \"value\",\n            sortOption.order\n        );\n    };\n\n    const changeSortOnOptions = (event) => {\n        const newSortOnValue = event.target.value;\n        updateSingleSortingOption(id, sortOption.sortBy, newSortOnValue, sortOption.order);\n    };\n\n    const changeSortOrderOptions = (event) => {\n        const newSortOrderValue = event.target.value;\n        updateSingleSortingOption(id, sortOption.sortBy, sortOption.sortOn, newSortOrderValue);\n    };\n\n    const copySort = () => {\n        copySortOption(id);\n    };\n\n    const deleteSort = () => {\n        deleteSortOption(id);\n    };\n\n    const opacity = isDragging ? 0.5 : 1;\n\n    return (\n        <div className=\"sort__bodyContent\" style={{ opacity }}>\n            <div className=\"sort__reorder\">\n                <div ref={(node) => drag(drop(node))} style={{ cursor: \"move\" }} className=\"\">\n                    <i className=\"fa fa-navicon\"></i>\n                </div>\n            </div>\n\n            <div className=\"sort__reorder\">\n                <div className=\"sort__file\">\n                    <select className=\"custom__ctrl\" onChange={changeSortByOptions} value={sortOption.sortBy}>\n                        {originalColumns.map((orgItem, index) => (\n                            <option key={index} value={orgItem.accessor}>\n                                {orgItem.Header}\n                            </option>\n                        ))}\n                    </select>\n                </div>\n            </div>\n            <div className=\"sort__reorder\">\n                <div className=\"sort__file\">\n                    <select className=\"custom__ctrl\" onChange={changeSortOnOptions} value={sortOption.sortOn}>\n                        {getInncerCellsOfColumn(sortOption.sortBy) && getInncerCellsOfColumn(sortOption.sortBy).length > 0 ? (\n                            getInncerCellsOfColumn(sortOption.sortBy).map((innerCellItem, innerCellIndex) => (\n                                <option key={innerCellIndex} value={innerCellItem.accessor}>\n                                    {innerCellItem.Header}\n                                </option>\n                            ))\n                        ) : (\n                            <option key={0} value=\"value\">\n                                Value\n                            </option>\n                        )}\n                    </select>\n                </div>\n            </div>\n            <div className=\"sort__reorder\">\n                <div className=\"sort__file\">\n                    <select className=\"custom__ctrl\" value={sortOption.order} onChange={changeSortOrderOptions}>\n                        <option>Ascending</option>\n                        <option>Descending</option>\n                    </select>\n                </div>\n            </div>\n            <div className=\"sort__reorder\">\n                <div className=\"sort__icon\" type={\"button\"} onClick={copySort}>\n                    <i>\n                        <img src={SortCopy} alt=\"copy sort\" />\n                    </i>\n                </div>\n            </div>\n            <div className=\"sort__reorder\">\n                <div className=\"sort__icon\" type={\"button\"} onClick={deleteSort}>\n                    <i>\n                        <img src={SortDelete} alt=\"copy sort\" />\n                    </i>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default SortItem;\n","import React from \"react\";\nimport { useDrop } from \"react-dnd\";\nimport update from \"immutability-helper\";\nimport { ItemTypes } from \"./ItemTypes\";\nimport SortItem from \"./sortingItem\";\n\nconst SortingList = (props) => {\n    const { updateSortingOptions, sortOptions } = props;\n\n    const moveSort = (sortId, atIndex) => {\n        const { sort, index } = findSort(sortId);\n        updateSortingOptions(\n            update(sortOptions, {\n                $splice: [\n                    [index, 1],\n                    [atIndex, 0, sort]\n                ]\n            })\n        );\n    };\n\n    const findSort = (sortId) => {\n        const sort = sortOptions.filter((c, index) => index === sortId)[0];\n        return {\n            sort,\n            index: sortOptions.indexOf(sort)\n        };\n    };\n\n    const [, drop] = useDrop({ accept: ItemTypes.SORT_ITEM });\n\n    return (\n        <React.Fragment>\n            <div ref={drop} style={{ display: \"flex\", flexWrap: \"wrap\" }}>\n                {sortOptions && sortOptions.length > 0 ? (\n                    <ul>\n                        <li>Sort By</li>\n                        <li>Sort On</li>\n                        <li>Order</li>\n                    </ul>\n                ) : null}\n                {sortOptions.map((sortOption, index) => {\n                    return (\n                        <SortItem\n                            id={index}\n                            key={index}\n                            sortOption={sortOption}\n                            originalColumns={props.originalColumns}\n                            moveSort={moveSort}\n                            findSort={findSort}\n                            updateSingleSortingOption={props.updateSingleSortingOption}\n                            copySortOption={props.copySortOption}\n                            deleteSortOption={props.deleteSortOption}\n                        />\n                    );\n                })}\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default SortingList;\n","import React, { memo, useState } from \"react\";\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { TouchBackend } from \"react-dnd-touch-backend\";\nimport MultiBackend, { TouchTransition } from \"react-dnd-multi-backend\";\nimport ClickAwayListener from \"react-click-away-listener\";\nimport SortingList from \"./sortingList\";\n\nconst GroupSort = memo((props) => {\n    const { isGroupSortOverLayOpen, toggleGroupSortOverLay, applyGroupSort, originalColumns } = props;\n\n    const sortingOrders = [\"Ascending\", \"Descending\"];\n    const defaultSortingOption = [\n        {\n            sortBy: originalColumns[0].accessor,\n            sortOn: originalColumns[0].innerCells ? originalColumns[0].innerCells[0].accessor : \"value\",\n            order: sortingOrders[0]\n        }\n    ];\n\n    const [sortOptions, setSortOptions] = useState([]);\n    const [isErrorDisplayed, setIsErrorDisplayed] = useState(false);\n\n    const HTML5toTouch = {\n        backends: [\n            {\n                backend: HTML5Backend\n            },\n            {\n                backend: TouchBackend,\n                options: { enableMouseEvents: true },\n                preview: true,\n                transition: TouchTransition\n            }\n        ]\n    };\n\n    const updateSortingOptions = (sortingOptions) => {\n        setSortOptions(sortingOptions);\n    };\n\n    const addSortingOptions = () => {\n        setSortOptions([...sortOptions, ...defaultSortingOption]);\n    };\n\n    const clearSortingOptions = () => {\n        setSortOptions([]);\n        applyGroupSort([]);\n    };\n\n    const updateSingleSortingOption = (sortIndex, sortByValue, sortOnValue, sortOrder) => {\n        const newOptionsList = sortOptions.slice(0);\n        const newSortingOption = {\n            sortBy: sortByValue,\n            sortOn: sortOnValue,\n            order: sortOrder\n        };\n        const updatedSortOptions = newOptionsList.map((option, index) => (index === sortIndex ? newSortingOption : option));\n        updateSortingOptions(updatedSortOptions);\n    };\n\n    const copySortOption = (sortIndex) => {\n        const newOption = sortOptions.slice(0)[sortIndex];\n        setSortOptions(sortOptions.concat(newOption));\n    };\n\n    const deleteSortOption = (sortIndex) => {\n        setSortOptions(\n            sortOptions.filter((option, index) => {\n                return index !== sortIndex;\n            })\n        );\n    };\n\n    const applySort = () => {\n        let isError = false;\n        sortOptions.map((option, index) => {\n            const { sortBy, sortOn } = option;\n            const optionIndex = index;\n            const duplicateSort = sortOptions.find((opt, optIndex) => {\n                return sortBy === opt.sortBy && sortOn === opt.sortOn && optionIndex !== optIndex;\n            });\n            if (duplicateSort) {\n                isError = true;\n            }\n        });\n        if (!isError) {\n            applyGroupSort(sortOptions);\n            toggleGroupSortOverLay();\n        }\n        setIsErrorDisplayed(isError);\n    };\n\n    if (isGroupSortOverLayOpen) {\n        return (\n            <ClickAwayListener onClickAway={toggleGroupSortOverLay}>\n                <div className=\"sorts--grid\">\n                    <div className=\"sort__grid\">\n                        <div className=\"sort__settings\">\n                            <div className=\"sort__header\">\n                                <div className=\"sort__headerTxt\">Sort</div>\n                                <div className=\"sort__close\">\n                                    <i className=\"fa fa-times\" aria-hidden=\"true\" onClick={toggleGroupSortOverLay}></i>\n                                </div>\n                            </div>\n                            <div className=\"sort__body\">\n                                <DndProvider backend={MultiBackend} options={HTML5toTouch}>\n                                    <SortingList\n                                        sortOptions={sortOptions}\n                                        originalColumns={originalColumns}\n                                        updateSortingOptions={updateSortingOptions}\n                                        updateSingleSortingOption={updateSingleSortingOption}\n                                        copySortOption={copySortOption}\n                                        deleteSortOption={deleteSortOption}\n                                    />\n                                </DndProvider>\n                            </div>\n                            <div className=\"sort-warning\">\n                                {isErrorDisplayed ? <span>Duplicate sort options found.</span> : null}\n                            </div>\n                            <div className=\"sort__new\">\n                                <div className=\"sort__section\" type=\"button\" onClick={addSortingOptions}>\n                                    <span>+</span>\n                                    <div className=\"sort__txt\">New Sort</div>\n                                </div>\n                            </div>\n                            <div className=\"sort__footer\">\n                                <div className=\"sort__btns\">\n                                    <button className=\"btns\" onClick={clearSortingOptions}>\n                                        Clear All\n                                    </button>\n                                    <button className=\"btns btns__save\" onClick={applySort}>\n                                        Ok\n                                    </button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </ClickAwayListener>\n        );\n    } else {\n        return <div></div>;\n    }\n});\n\nexport default GroupSort;\n","import React, { memo, useState } from \"react\";\r\nimport ClickAwayListener from \"react-click-away-listener\";\r\nimport jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\nimport * as FileSaver from \"file-saver\";\r\nimport * as XLSX from \"xlsx\";\r\n\r\nconst ExportData = memo((props) => {\r\n    const {\r\n        isExportOverlayOpen,\r\n        toggleExportDataOverlay,\r\n        rows,\r\n        originalColumns,\r\n        isExpandContentAvailable,\r\n        additionalColumn\r\n    } = props;\r\n\r\n    const getRemarksColumnIfAvailable = () => {\r\n        return isExpandContentAvailable ? additionalColumn : [];\r\n    };\r\n\r\n    const updatedColumns = [...originalColumns].concat(getRemarksColumnIfAvailable());\r\n\r\n    const [managedColumns, setManagedColumns] = useState(updatedColumns);\r\n    const [searchedColumns, setSearchedColumns] = useState(updatedColumns);\r\n    const [downloadTypes, setDownloadTypes] = useState([]);\r\n    const [warning, setWarning] = useState(\"\");\r\n\r\n    let isDownload = false;\r\n\r\n    const exportRowData = () => {\r\n        isDownload = true;\r\n        let filteredRow = [];\r\n        let filteredRowValues = [];\r\n\r\n        setWarning(\"\");\r\n\r\n        if (managedColumns.length > 0 && downloadTypes.length > 0) {\r\n            rows.forEach((rowDetails) => {\r\n                let row = rowDetails.original;\r\n                const keys = Object.getOwnPropertyNames(row);\r\n                let filteredColumnVal = {};\r\n                let rowFilteredValues = [];\r\n                keys.forEach(function (key) {\r\n                    managedColumns.forEach((columnName) => {\r\n                        if (\r\n                            columnName.accessor === key ||\r\n                            (columnName.innerCells && columnName.innerCells.length && columnName.innerCells.includes(key))\r\n                        ) {\r\n                            let columnValue = \"\";\r\n                            if (typeof row[key] === \"object\") {\r\n                                if (row[key].length === undefined)\r\n                                    columnValue = Object.values(row[key]).toString().replace(\",\", \" | \");\r\n                                if (row[key].length > 0) {\r\n                                    let arrObj = \"\";\r\n                                    row[key].forEach((item, index) => {\r\n                                        arrObj = index != 0 ? arrObj + \" | \" + Object.values(item) : Object.values(item);\r\n                                    });\r\n                                    columnValue = arrObj;\r\n                                }\r\n                            } else {\r\n                                columnValue = row[key];\r\n                            }\r\n                            filteredColumnVal[key] = columnValue;\r\n                            rowFilteredValues.push(columnValue);\r\n                        }\r\n                    });\r\n                });\r\n                filteredRow.push(filteredColumnVal);\r\n                filteredRowValues.push(rowFilteredValues);\r\n            });\r\n\r\n            downloadTypes.map((item) => {\r\n                if (item === \"pdf\") {\r\n                    downloadPDF(filteredRowValues);\r\n                } else if (item === \"excel\") {\r\n                    downloadXLSFile(filteredRow);\r\n                } else {\r\n                    downloadCSVFile(filteredRow);\r\n                }\r\n            });\r\n        } else {\r\n            if (managedColumns.length === 0 && downloadTypes.length === 0) {\r\n                setWarning(\"Select at least one column and a file type\");\r\n            } else if (managedColumns.length === 0) {\r\n                setWarning(\"Select at least one column\");\r\n            } else if (downloadTypes.length === 0) {\r\n                setWarning(\"Select at least one file type\");\r\n            }\r\n        }\r\n    };\r\n\r\n    const downloadPDF = (rowFilteredValues) => {\r\n        const unit = \"pt\";\r\n        const size = \"A4\"; // Use A1, A2, A3 or A4\r\n        const orientation = \"landscape\"; // portrait or landscape\r\n\r\n        const marginLeft = 300;\r\n        const doc = new jsPDF(orientation, unit, size);\r\n\r\n        doc.setFontSize(15);\r\n\r\n        const title = \"iCargo Neo Report\";\r\n        const headers = [\r\n            managedColumns.map((column) => {\r\n                return column.Header;\r\n            })\r\n        ];\r\n\r\n        let content = {\r\n            startY: 50,\r\n            head: headers,\r\n            body: rowFilteredValues\r\n        };\r\n\r\n        doc.text(title, marginLeft, 40);\r\n        doc.autoTable(content);\r\n        doc.save(\"iCargo Neo Report.pdf\");\r\n\r\n        isDownload = false;\r\n    };\r\n\r\n    const downloadCSVFile = (filteredRowValue) => {\r\n        const fileType = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\r\n        const fileExtension = \".csv\";\r\n        const fileName = \"iCargo Neo Report\";\r\n        const ws = XLSX.utils.json_to_sheet(filteredRowValue);\r\n        const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\r\n        const excelBuffer = XLSX.write(wb, { bookType: \"csv\", type: \"array\" });\r\n        const data = new Blob([excelBuffer], { type: fileType });\r\n        FileSaver.saveAs(data, fileName + fileExtension);\r\n    };\r\n\r\n    const downloadXLSFile = (filteredRowValue) => {\r\n        const fileType = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\r\n        const fileExtension = \".xlsx\";\r\n        const fileName = \"iCargo Neo Report\";\r\n        const ws = XLSX.utils.json_to_sheet(filteredRowValue);\r\n        const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\r\n        const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\r\n        const data = new Blob([excelBuffer], { type: fileType });\r\n        FileSaver.saveAs(data, fileName + fileExtension);\r\n    };\r\n\r\n    const filterColumnsList = (event) => {\r\n        let { value } = event ? event.target : \"\";\r\n        value = value ? value.toLowerCase() : \"\";\r\n        if (value != \"\") {\r\n            setSearchedColumns(\r\n                originalColumns\r\n                    .filter((column) => {\r\n                        return column.Header.toLowerCase().includes(value);\r\n                    })\r\n                    .concat(\r\n                        getRemarksColumnIfAvailable().filter((column) => {\r\n                            return column.Header.toLowerCase().includes(value);\r\n                        })\r\n                    )\r\n            );\r\n        } else {\r\n            setSearchedColumns(updatedColumns);\r\n        }\r\n    };\r\n\r\n    const isCheckboxSelected = (header) => {\r\n        if (header === \"Select All\") {\r\n            return managedColumns.length === searchedColumns.length;\r\n        } else {\r\n            const selectedColumn = managedColumns.filter((column) => {\r\n                return column.Header === header;\r\n            });\r\n            return selectedColumn && selectedColumn.length > 0;\r\n        }\r\n    };\r\n\r\n    const selectAllColumns = (event) => {\r\n        if (event.target.checked) {\r\n            setManagedColumns(updatedColumns);\r\n        } else {\r\n            setManagedColumns([]);\r\n        }\r\n    };\r\n\r\n    const selectSingleColumn = (event) => {\r\n        const { currentTarget } = event;\r\n        const { checked, value } = currentTarget;\r\n\r\n        //If column checkbox is checked\r\n        if (checked) {\r\n            //Find the index of selected column from original column array and also find the user selected column\r\n            let indexOfColumnToAdd = updatedColumns.findIndex((column) => {\r\n                return column.Header === value;\r\n            });\r\n            const itemToAdd = updatedColumns[indexOfColumnToAdd];\r\n\r\n            //Loop through the managedColumns array to find the position of the column that is present previous to the user selected column\r\n            //Find index of that previous column and push the new column to add in that position\r\n            let prevItemIndex = -1;\r\n            while (indexOfColumnToAdd > 0 && prevItemIndex === -1) {\r\n                prevItemIndex = managedColumns.findIndex((column) => {\r\n                    return column.Header === updatedColumns[indexOfColumnToAdd - 1].Header;\r\n                });\r\n                indexOfColumnToAdd = indexOfColumnToAdd - 1;\r\n            }\r\n\r\n            const newColumnsList = managedColumns.slice(0); //Copying state value\r\n            newColumnsList.splice(prevItemIndex + 1, 0, itemToAdd);\r\n            setManagedColumns(newColumnsList);\r\n        } else {\r\n            setManagedColumns(\r\n                managedColumns.filter((column) => {\r\n                    return column.Header !== value;\r\n                })\r\n            );\r\n        }\r\n    };\r\n\r\n    const changeDownloadType = (event) => {\r\n        const { value, checked } = event ? event.currentTarget : \"\";\r\n        if (checked) {\r\n            setDownloadTypes(downloadTypes.concat([value]));\r\n        } else {\r\n            setDownloadTypes(\r\n                downloadTypes.filter((type) => {\r\n                    return type !== value;\r\n                })\r\n            );\r\n        }\r\n    };\r\n\r\n    if (isExportOverlayOpen) {\r\n        return (\r\n            <ClickAwayListener onClickAway={toggleExportDataOverlay}>\r\n                <div className=\"exports--grid\">\r\n                    <div className=\"export__grid\">\r\n                        <div className=\"export__chooser\">\r\n                            <div className=\"export__header\">\r\n                                <div className=\"\">\r\n                                    <strong>Export Data</strong>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"export__body\">\r\n                                <div>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        placeholder=\"Search column\"\r\n                                        className=\"custom__ctrl\"\r\n                                        onChange={filterColumnsList}\r\n                                    ></input>\r\n                                </div>\r\n                                <div className=\"export__wrap export__headertxt\">\r\n                                    <div className=\"export__checkbox\">\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            value=\"Select All\"\r\n                                            checked={isCheckboxSelected(\"Select All\")}\r\n                                            onChange={selectAllColumns}\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"export__txt\">Select All</div>\r\n                                </div>\r\n                                {searchedColumns.map((column, index) => {\r\n                                    return (\r\n                                        <div className=\"export__wrap\" key={index}>\r\n                                            <div className=\"export__checkbox\">\r\n                                                <input\r\n                                                    type=\"checkbox\"\r\n                                                    value={column.Header}\r\n                                                    checked={isCheckboxSelected(column.Header)}\r\n                                                    onChange={selectSingleColumn}\r\n                                                ></input>\r\n                                            </div>\r\n                                            <div className=\"export__txt\">{column.Header}</div>\r\n                                        </div>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"export__settings\">\r\n                            <div className=\"export__header\">\r\n                                <div className=\"export__headerTxt\"></div>\r\n                                <div className=\"export__close\">\r\n                                    <i className=\"fa fa-times\" aria-hidden=\"true\" onClick={toggleExportDataOverlay}></i>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"export__as\">Export As</div>\r\n                            <div className=\"export__body\">\r\n                                <div className=\"export__reorder\">\r\n                                    <div className=\"check-wrap\">\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            id=\"chk_pdf\"\r\n                                            value=\"pdf\"\r\n                                            checked={downloadTypes.includes(\"pdf\")}\r\n                                            onChange={changeDownloadType}\r\n                                        ></input>\r\n                                    </div>\r\n                                    <div className=\"export__file\">\r\n                                        <i className=\"fa fa-file-pdf-o\" aria-hidden=\"true\"></i>\r\n                                        <br />\r\n                                        <strong>PDF</strong>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"export__reorder\">\r\n                                    <div className=\"check-wrap\">\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            id=\"chk_excel\"\r\n                                            value=\"excel\"\r\n                                            checked={downloadTypes.includes(\"excel\")}\r\n                                            onChange={changeDownloadType}\r\n                                        ></input>\r\n                                    </div>\r\n                                    <div className=\"export__file\">\r\n                                        <i className=\"fa fa-file-excel-o\" aria-hidden=\"true\"></i>\r\n                                        <br />\r\n                                        <strong>Excel</strong>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"export__reorder\">\r\n                                    <div className=\"check-wrap\">\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            id=\"chk_csv\"\r\n                                            value=\"csv\"\r\n                                            checked={downloadTypes.includes(\"csv\")}\r\n                                            onChange={changeDownloadType}\r\n                                        ></input>\r\n                                    </div>\r\n                                    <div className=\"export__file\">\r\n                                        <i className=\"fa fa-file-text-o\" aria-hidden=\"true\"></i>\r\n                                        <br />\r\n                                        <strong>CSV</strong>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"exportWarning\">\r\n                                    <span className=\"alert alert-danger\">\r\n                                        <strong>{warning}</strong>\r\n                                    </span>\r\n                                </div>\r\n                                <div>{isDownload ? <h2 style={{ textAlign: \"center\" }}>Loading...</h2> : null}</div>\r\n                            </div>\r\n                            <div className=\"export__footer\">\r\n                                <div className=\"export__btns\">\r\n                                    <button className=\"btns\" onClick={toggleExportDataOverlay}>\r\n                                        Cancel\r\n                                    </button>\r\n                                    <button className=\"btns btns__save\" onClick={exportRowData}>\r\n                                        Export\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </ClickAwayListener>\r\n        );\r\n    } else {\r\n        return <div></div>;\r\n    }\r\n});\r\n\r\nexport default ExportData;\r\n","import React, { useCallback, useState, memo, useEffect, createRef, useMemo } from \"react\";\r\nimport {\r\n    useTable,\r\n    useResizeColumns,\r\n    useFlexLayout,\r\n    useRowSelect,\r\n    useSortBy,\r\n    useFilters,\r\n    useGlobalFilter,\r\n    useExpanded\r\n} from \"react-table\";\r\nimport { VariableSizeList as List } from \"react-window\";\r\nimport AutoSizer from \"react-virtualized-auto-sizer\";\r\nimport InfiniteLoader from \"react-window-infinite-loader\";\r\nimport RowSelector from \"./Functions/RowSelector\";\r\nimport DefaultColumnFilter from \"./Functions/DefaultColumnFilter\";\r\nimport GlobalFilter from \"./Functions/GlobalFilter\";\r\nimport RowOptions from \"./Functions/RowOptions\";\r\nimport RowEditOverlay from \"./Functions/RowEditOverlay\";\r\nimport RowDeleteOverLay from \"./Functions/RowDeleteOverLay\";\r\nimport ColumnReordering from \"./Overlays/managecolumns\";\r\nimport GroupSort from \"./Overlays/groupsort\";\r\nimport ExportData from \"./Overlays/exportdata\";\r\n\r\nconst listRef = createRef(null);\r\n\r\nconst Customgrid = memo((props) => {\r\n    const {\r\n        title,\r\n        gridHeight,\r\n        gridWidth,\r\n        managableColumns,\r\n        originalColumns,\r\n        additionalColumn,\r\n        data,\r\n        getRowEditOverlay,\r\n        updateRowInGrid,\r\n        deleteRowFromGrid,\r\n        globalSearchLogic,\r\n        selectBulkData,\r\n        calculateRowHeight,\r\n        isExpandContentAvailable,\r\n        displayExpandedContent,\r\n        hasNextPage,\r\n        isNextPageLoading,\r\n        loadNextPage,\r\n        doGroupSort\r\n    } = props;\r\n\r\n    //Local state value for holding columns configuration\r\n    const [columns, setColumns] = useState(managableColumns);\r\n    //Local state value for holding the boolean value to check if row expand is available\r\n    const [isRowExpandEnabled, setIsRowExpandEnabled] = useState(isExpandContentAvailable);\r\n\r\n    //Variables used for handling infinite loading\r\n    const itemCount = hasNextPage ? data.length + 1 : data.length;\r\n    const loadMoreItems = isNextPageLoading ? () => {} : loadNextPage ? loadNextPage : () => {};\r\n    const isItemLoaded = (index) => !hasNextPage || index < data.length;\r\n\r\n    //Local state value for checking if column filter is open/closed\r\n    const [isFilterOpen, setFilterOpen] = useState(false);\r\n    //Toggle column filter state value based on UI clicks\r\n    const toggleColumnFilter = () => {\r\n        setFilterOpen(!isFilterOpen);\r\n    };\r\n\r\n    //Local state value for checking if column filter is open/closed\r\n    const [isRowEditOverlyOpen, setIsRowEditOverlyOpen] = useState(false);\r\n    //Local state value to hold row data that is going to be edited\r\n    const [editedRowData, setEditedRowData] = useState(null);\r\n    //Bind the user defined row edit overlay into Grid\r\n    const bindRowEditOverlay = (rowValue) => {\r\n        setEditedRowData(rowValue);\r\n        setIsRowEditOverlyOpen(true);\r\n    };\r\n    //Close the row edit overlay\r\n    const closeRowEditOverlay = () => {\r\n        setEditedRowData(null);\r\n        setIsRowEditOverlyOpen(false);\r\n    };\r\n\r\n    //Local state value for checking if column filter is open/closed\r\n    const [isRowDeleteOverlyOpen, setIsRowDeleteOverlyOpen] = useState(false);\r\n    //Local state value to hold row data that is going to be deleted\r\n    const [deletedRowData, setDeletedRowData] = useState(null);\r\n    //Bind the user defined row delete overlay into Grid\r\n    const bindRowDeleteOverlay = (rowValue) => {\r\n        setDeletedRowData(rowValue);\r\n        setIsRowDeleteOverlyOpen(true);\r\n    };\r\n    //Close the row edit overlay\r\n    const closeRowDeleteOverlay = () => {\r\n        setDeletedRowData(null);\r\n        setIsRowDeleteOverlyOpen(false);\r\n    };\r\n\r\n    //Local state value for checking if group Sort Overlay is open/closed.\r\n    const [isGroupSortOverLayOpen, setGroupSortOverLay] = useState(false);\r\n\r\n    //Toggle group Sort state value based on UI clicks\r\n    const toggleGroupSortOverLay = () => {\r\n        setGroupSortOverLay(!isGroupSortOverLayOpen);\r\n    };\r\n\r\n    const applyGroupSort = (sortOptions) => {\r\n        doGroupSort(sortOptions);\r\n    };\r\n\r\n    //Local state value for hiding/unhiding column management overlay\r\n    const [isManageColumnOpen, setManageColumnOpen] = useState(false);\r\n\r\n    //Toggle column manage overlay show/hide state value based on UI clicks\r\n    const toggleManageColumns = () => {\r\n        setManageColumnOpen(!isManageColumnOpen);\r\n    };\r\n\r\n    //Callback method from column manage overlay to update the column structure of the grid\r\n    const updateColumnStructure = (newColumnStructure, remarksColumn) => {\r\n        setColumns([...newColumnStructure]);\r\n        setIsRowExpandEnabled(remarksColumn && remarksColumn.length > 0 ? true : false);\r\n    };\r\n\r\n    //Local state value for hiding/unhiding export data overlay\r\n    const [isExportOverlayOpen, setIsExportOverlayOpen] = useState(false);\r\n\r\n    //Toggle export overlay show/hide state value based on UI clicks\r\n    const toggleExportDataOverlay = () => {\r\n        setIsExportOverlayOpen(!isExportOverlayOpen);\r\n    };\r\n\r\n    //Column filter added for all columns by default\r\n    const defaultColumn = useMemo(\r\n        () => ({\r\n            Filter: DefaultColumnFilter\r\n        }),\r\n        []\r\n    );\r\n\r\n    //Initialize react-table instance with the values received through properties\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        rows,\r\n        prepareRow,\r\n        selectedFlatRows,\r\n        state,\r\n        setGlobalFilter\r\n    } = useTable(\r\n        {\r\n            columns,\r\n            data,\r\n            defaultColumn,\r\n            globalFilter: (rows, columns, filterValue) => {\r\n                //Call global search function defined in application, if it is present\r\n                if (globalSearchLogic && typeof globalSearchLogic === \"function\") {\r\n                    return globalSearchLogic(rows, columns, filterValue);\r\n                } else {\r\n                    return rows;\r\n                }\r\n            },\r\n            autoResetFilters: false,\r\n            autoResetGlobalFilter: false,\r\n            autoResetSortBy: false,\r\n            autoResetExpanded: false,\r\n            autoResetSelectedRows: false\r\n        },\r\n        useFilters,\r\n        useGlobalFilter,\r\n        useSortBy,\r\n        useExpanded,\r\n        useRowSelect,\r\n        useFlexLayout,\r\n        useResizeColumns,\r\n        (hooks) => {\r\n            //Add checkbox for all rows in grid, with different properties for header row and body rows\r\n            hooks.allColumns.push((columns) => [\r\n                {\r\n                    id: \"selection\",\r\n                    columnId: \"column_custom_0\",\r\n                    disableResizing: true,\r\n                    disableFilters: true,\r\n                    disableSortBy: true,\r\n                    minWidth: 35,\r\n                    width: 35,\r\n                    maxWidth: 35,\r\n                    Header: ({ getToggleAllRowsSelectedProps }) => <RowSelector {...getToggleAllRowsSelectedProps()} />,\r\n                    Cell: ({ row }) => <RowSelector {...row.getToggleRowSelectedProps()} />\r\n                },\r\n                ...columns,\r\n                {\r\n                    id: \"custom\",\r\n                    columnId: \"column_custom_1\",\r\n                    disableResizing: true,\r\n                    disableFilters: true,\r\n                    disableSortBy: true,\r\n                    minWidth: 35,\r\n                    width: 35,\r\n                    maxWidth: 35,\r\n                    Cell: ({ row }) => {\r\n                        return (\r\n                            <div className=\"action\">\r\n                                <RowOptions\r\n                                    row={row}\r\n                                    bindRowEditOverlay={bindRowEditOverlay}\r\n                                    bindRowDeleteOverlay={bindRowDeleteOverlay}\r\n                                />\r\n                                {isRowExpandEnabled ? (\r\n                                    <span className=\"expander\" {...row.getToggleRowExpandedProps()}>\r\n                                        {row.isExpanded ? (\r\n                                            <i className=\"fa fa-angle-up\" aria-hidden=\"true\"></i>\r\n                                        ) : (\r\n                                            <i className=\"fa fa-angle-down\" aria-hidden=\"true\"></i>\r\n                                        )}\r\n                                    </span>\r\n                                ) : null}\r\n                            </div>\r\n                        );\r\n                    }\r\n                }\r\n            ]);\r\n        }\r\n    );\r\n\r\n    //Export selected row data and pass it to the callback method\r\n    const bulkSelector = () => {\r\n        if (selectBulkData) {\r\n            selectBulkData(selectedFlatRows);\r\n        }\r\n    };\r\n\r\n    //This code is to handle the row height calculation while expanding a row or resizing a column\r\n    useEffect(() => {\r\n        if (listRef && listRef.current) {\r\n            listRef.current.resetAfterIndex(0, true);\r\n        }\r\n    });\r\n\r\n    //Render each row and cells in each row, using attributes from react window list.\r\n    const RenderRow = useCallback(\r\n        ({ index, style }) => {\r\n            if (isItemLoaded(index)) {\r\n                const row = rows[index];\r\n                prepareRow(row);\r\n                return (\r\n                    <div {...row.getRowProps({ style })} className=\"table-row tr\">\r\n                        <div className=\"table-row-wrap\">\r\n                            {row.cells.map((cell) => {\r\n                                return (\r\n                                    <div {...cell.getCellProps()} className=\"table-cell td\">\r\n                                        {cell.render(\"Cell\")}\r\n                                    </div>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                        {/*Check if row eapand icon is clicked, and if yes, call function to bind content to the expanded region*/}\r\n                        {isRowExpandEnabled && row.isExpanded ? (\r\n                            <div className=\"expand\">\r\n                                {displayExpandedContent ? displayExpandedContent(row, additionalColumn) : null}\r\n                            </div>\r\n                        ) : null}\r\n                    </div>\r\n                );\r\n            }\r\n        },\r\n        [prepareRow, rows, displayExpandedContent]\r\n    );\r\n\r\n    //Render table title, global search component, button to show/hide column filter, button to export selected row data & the grid\r\n    //Use properties and methods provided by react-table\r\n    //Autosizer used for calculating grid height (don't consider window width and column resizing value changes)\r\n    //Infinite loader used for lazy loading, with the properties passed here and other values calculated at the top\r\n    //React window list is used for implementing virtualization, specifying the item count in a frame and height of each rows in it.\r\n    return (\r\n        <div className=\"wrapper\" style={{ width: gridWidth ? gridWidth : \"100%\" }}>\r\n            <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\" />\r\n            <div className=\"table-filter\">\r\n                <div className=\"results\">\r\n                    <div className=\"name\">\r\n                        <strong>{rows.length}</strong>\r\n                        <span> {title ? title : \"Rows\"}</span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"filter-utilities\">\r\n                    <ColumnReordering\r\n                        isManageColumnOpen={isManageColumnOpen}\r\n                        toggleManageColumns={toggleManageColumns}\r\n                        originalColumns={originalColumns}\r\n                        isExpandContentAvailable={isExpandContentAvailable}\r\n                        additionalColumn={[additionalColumn]}\r\n                        updateColumnStructure={updateColumnStructure}\r\n                    />\r\n                    <GlobalFilter globalFilter={state.globalFilter} setGlobalFilter={setGlobalFilter} />\r\n                    <GroupSort\r\n                        isGroupSortOverLayOpen={isGroupSortOverLayOpen}\r\n                        toggleGroupSortOverLay={toggleGroupSortOverLay}\r\n                        originalColumns={originalColumns}\r\n                        applyGroupSort={applyGroupSort}\r\n                    />\r\n                    <ExportData\r\n                        isExportOverlayOpen={isExportOverlayOpen}\r\n                        toggleExportDataOverlay={toggleExportDataOverlay}\r\n                        rows={rows}\r\n                        originalColumns={originalColumns}\r\n                        isExpandContentAvailable={isExpandContentAvailable}\r\n                        additionalColumn={[additionalColumn]}\r\n                    />\r\n                    <div className=\"filter-icon keyword-search\" onClick={toggleColumnFilter}>\r\n                        <i className=\"fa fa-filter\" aria-hidden=\"true\"></i>\r\n                    </div>\r\n                    <div className=\"filter-icon bulk-select\" onClick={bulkSelector}>\r\n                        <i className=\"fa fa-pencil-square-o\" aria-hidden=\"true\"></i>\r\n                    </div>\r\n                    <div className=\"filter-icon bulk-select\" onClick={toggleGroupSortOverLay}>\r\n                        <i className=\"fa fa-sort-amount-desc\" aria-hidden=\"true\"></i>\r\n                    </div>\r\n                    <div className=\"filter-icon manage-columns\" onClick={toggleManageColumns}>\r\n                        <i className=\"fa fa-columns\" aria-hidden=\"true\"></i>\r\n                    </div>\r\n                    <div className=\"filter-icon manage-columns\" onClick={toggleExportDataOverlay}>\r\n                        <i className=\"fa fa-share-alt\" aria-hidden=\"true\"></i>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"table-popus\">\r\n                {isRowEditOverlyOpen ? (\r\n                    <RowEditOverlay\r\n                        row={editedRowData}\r\n                        getRowEditOverlay={getRowEditOverlay}\r\n                        closeRowEditOverlay={closeRowEditOverlay}\r\n                        updateRowInGrid={updateRowInGrid}\r\n                    />\r\n                ) : null}\r\n                {isRowDeleteOverlyOpen ? (\r\n                    <RowDeleteOverLay\r\n                        row={deletedRowData}\r\n                        closeRowDeleteOverlay={closeRowDeleteOverlay}\r\n                        deleteRowFromGrid={deleteRowFromGrid}\r\n                    />\r\n                ) : null}\r\n            </div>\r\n\r\n            <div\r\n                className=\"tableContainer table-outer\"\r\n                style={{ height: gridHeight ? gridHeight : \"50vh\", overflowX: \"auto\", overflowY: \"hidden\" }}\r\n            >\r\n                <AutoSizer disableWidth disableResizing>\r\n                    {({ height }) => (\r\n                        <div {...getTableProps()} className=\"table\">\r\n                            <div className=\"thead table-row table-row--head\">\r\n                                {headerGroups.map((headerGroup) => (\r\n                                    <div {...headerGroup.getHeaderGroupProps()} className=\"tr\">\r\n                                        {headerGroup.headers.map((column) => (\r\n                                            <div {...column.getHeaderProps()} className=\"table-cell column-heading th\">\r\n                                                <div {...column.getSortByToggleProps()}>\r\n                                                    {column.render(\"Header\")}\r\n                                                    <span>\r\n                                                        {column.isSorted ? (\r\n                                                            column.isSortedDesc ? (\r\n                                                                <i className=\"fa fa-sort-desc\" aria-hidden=\"true\"></i>\r\n                                                            ) : (\r\n                                                                <i className=\"fa fa-sort-asc\" aria-hidden=\"true\"></i>\r\n                                                            )\r\n                                                        ) : (\r\n                                                            \"\"\r\n                                                        )}\r\n                                                    </span>\r\n                                                </div>\r\n                                                <div className={`txt-wrap column-filter ${isFilterOpen ? \"open\" : \"\"}`}>\r\n                                                    {!column.disableFilters ? column.render(\"Filter\") : null}\r\n                                                </div>\r\n                                                {column.canResize && <div {...column.getResizerProps()} className=\"resizer\" />}\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n                                ))}\r\n                            </div>\r\n                            <div {...getTableBodyProps()} className=\"tbody\">\r\n                                <InfiniteLoader isItemLoaded={isItemLoaded} itemCount={itemCount} loadMoreItems={loadMoreItems}>\r\n                                    {({ onItemsRendered, ref }) => (\r\n                                        <List\r\n                                            ref={(list) => {\r\n                                                ref(list);\r\n                                                listRef.current = list;\r\n                                            }}\r\n                                            style={{ overflowX: \"hidden\" }}\r\n                                            height={height - 60}\r\n                                            itemCount={rows.length}\r\n                                            itemSize={(index) => {\r\n                                                return calculateRowHeight(\r\n                                                    rows[index],\r\n                                                    headerGroups && headerGroups.length ? headerGroups[0].headers : []\r\n                                                );\r\n                                            }}\r\n                                            onItemsRendered={onItemsRendered}\r\n                                            overscanCount={20}\r\n                                        >\r\n                                            {RenderRow}\r\n                                        </List>\r\n                                    )}\r\n                                </InfiniteLoader>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </AutoSizer>\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Customgrid;\r\n","import React, { memo, useMemo, useState, useEffect } from \"react\";\r\nimport { extractColumns, extractAdditionalColumn } from \"./Utilities/Columns\";\r\nimport Customgrid from \"./Customgrid\";\r\n\r\nconst Grid = memo((props) => {\r\n    const {\r\n        title,\r\n        gridHeight,\r\n        gridWidth,\r\n        columns,\r\n        columnToExpand,\r\n        fetchData,\r\n        getRowEditOverlay,\r\n        updateRowData,\r\n        deleteRowData,\r\n        selectBulkData,\r\n        calculateRowHeight\r\n    } = props;\r\n\r\n    //Check if device is desktop\r\n    const isDesktop = window.innerWidth > 1024;\r\n\r\n    //Set state value for variable to check if there is anext page available\r\n    const [hasNextPage, setHasNextPage] = useState(true);\r\n    //Set state value for variable to check if the loading process is going on\r\n    const [isNextPageLoading, setIsNextPageLoading] = useState(false);\r\n    //Local state value for checking if data is being loaded from API\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    //Set state value for variable to hold grid data\r\n    const [items, setItems] = useState([]);\r\n    //Local state for group sort options\r\n    const [groupSortOptions, setGroupSortOptions] = useState([]);\r\n\r\n    //Logic for searching in each column\r\n    const searchColumn = (column, original, searchText) => {\r\n        //Return value\r\n        let isValuePresent = false;\r\n        //Find the accessor node and inner cells array of each column\r\n        const { accessor, innerCells } = column;\r\n        //Find accessor value of a column\r\n        const rowAccessorValue = original[accessor];\r\n        //Check if inner cells are available and save value to boolean var\r\n        const isInnerCellsPresent = innerCells && innerCells.length > 0;\r\n        //Enter if cell value is object or array\r\n        if (typeof rowAccessorValue === \"object\" && isInnerCellsPresent) {\r\n            //Enter if cell value is array\r\n            if (rowAccessorValue.length > 0) {\r\n                //Loop through cell array value and check if searched text is present\r\n                rowAccessorValue.map((value) => {\r\n                    innerCells.map((cell) => {\r\n                        const dataAccessor = value[cell.accessor];\r\n                        if (dataAccessor && dataAccessor.toString().toLowerCase().includes(searchText)) {\r\n                            isValuePresent = true;\r\n                        }\r\n                    });\r\n                });\r\n            } else {\r\n                //If cell value is an object, loop through inner cells and check if searched text is present\r\n                innerCells.map((cell) => {\r\n                    const dataAccessor = original[accessor][cell.accessor];\r\n                    if (dataAccessor && dataAccessor.toString().toLowerCase().includes(searchText)) {\r\n                        isValuePresent = true;\r\n                    }\r\n                });\r\n            }\r\n        } else {\r\n            //If cell value is not an object or array, convert it to text and check if searched text is present\r\n            const dataAccessor = original[accessor];\r\n            if (dataAccessor && dataAccessor.toString().toLowerCase().includes(searchText)) {\r\n                isValuePresent = true;\r\n            }\r\n        }\r\n        return isValuePresent;\r\n    };\r\n\r\n    //Gets triggered when one row item is updated\r\n    const updateRowInGrid = (original, updatedRow) => {\r\n        setItems((old) =>\r\n            old.map((row) => {\r\n                if (Object.entries(row).toString() === Object.entries(original).toString()) {\r\n                    row = updatedRow;\r\n                }\r\n                return row;\r\n            })\r\n        );\r\n        if (updateRowData) {\r\n            updateRowData(updatedRow);\r\n        }\r\n    };\r\n\r\n    //Gets triggered when one row item is deleted\r\n    const deleteRowFromGrid = (original) => {\r\n        setItems((old) =>\r\n            old.filter((row) => {\r\n                return row !== original;\r\n            })\r\n        );\r\n        if (deleteRowData) {\r\n            deleteRowData(original);\r\n        }\r\n    };\r\n\r\n    //Extract/add and modify required data from user configured columns and expand columns\r\n    let processedColumns = extractColumns(columns, searchColumn, isDesktop, updateRowInGrid);\r\n    let additionalColumn = extractAdditionalColumn(columnToExpand, isDesktop, updateRowInGrid);\r\n\r\n    //Create memoized column, to be used by grid component\r\n    const gridColumns = useMemo(() => processedColumns, []);\r\n\r\n    //Local variable for keeping the expanded row rendering method\r\n    let renderExpandedContent = additionalColumn ? additionalColumn.displayCell : null;\r\n\r\n    //Process data to be rendered to expanded view and return that data to the render function\r\n    const displayExpandedContent = (row, additionalColumn) => {\r\n        if (row && additionalColumn) {\r\n            const { innerCells } = additionalColumn;\r\n            const { original } = row;\r\n            if (original && innerCells && innerCells.length > 0) {\r\n                const expandedRowContent = {};\r\n                innerCells.forEach((cell) => {\r\n                    const { accessor } = cell;\r\n                    expandedRowContent[accessor] = original[accessor];\r\n                });\r\n                return renderExpandedContent(expandedRowContent);\r\n            }\r\n        }\r\n    };\r\n\r\n    //Add logic for doing global search in the grid\r\n    const globalSearchLogic = (rows, columns, filterValue) => {\r\n        //Enter search logic only if rows and columns are available\r\n        if (filterValue && processedColumns.length > 0) {\r\n            //convert user searched text to lower case\r\n            const searchText = filterValue.toLowerCase();\r\n            //Loop through all rows\r\n            return rows.filter((row) => {\r\n                //Find original data value of each row\r\n                const { original } = row;\r\n                //Return value of the filter method\r\n                let returnValue = false;\r\n                //Loop through all column values for each row\r\n                processedColumns.map((column) => {\r\n                    //Do search for each column\r\n                    returnValue = returnValue || searchColumn(column, original, searchText);\r\n                });\r\n                return returnValue;\r\n            });\r\n        }\r\n        return rows;\r\n    };\r\n\r\n    //Add logic to calculate height of each row, based on the content of  or more columns\r\n    //This can be used only if developer using the component has not passed a function to calculate row height\r\n    const calculateDefaultRowHeight = (row, gridColumns) => {\r\n        //Minimum height for each row\r\n        let rowHeight = 50;\r\n        if (gridColumns && gridColumns.length > 0 && row) {\r\n            //Get properties of a row\r\n            const { original, isExpanded } = row;\r\n            //Find the column with maximum width configured, from grid columns list\r\n            const columnWithMaxWidth = [...gridColumns].sort((a, b) => {\r\n                return b.width - a.width;\r\n            })[0];\r\n            //Get column properties including the user resized column width (totalFlexWidth)\r\n            const { id, width, totalFlexWidth } = columnWithMaxWidth;\r\n            //Get row value of that column\r\n            const rowValue = original[id];\r\n            if (rowValue) {\r\n                //Find the length of text of data in that column\r\n                const textLength = Object.values(rowValue).join(\",\").length;\r\n                //This is a formula that was created for the test data used.\r\n                rowHeight = rowHeight + Math.ceil((80 * textLength) / totalFlexWidth);\r\n                const widthVariable = totalFlexWidth > width ? totalFlexWidth - width : width - totalFlexWidth;\r\n                rowHeight = rowHeight + widthVariable / 1000;\r\n            }\r\n            //Add logic to increase row height if row is expanded\r\n            if (isExpanded && additionalColumn) {\r\n                //Increase height based on the number of inner cells in additional columns\r\n                rowHeight =\r\n                    rowHeight +\r\n                    (additionalColumn.innerCells && additionalColumn.innerCells.length > 0\r\n                        ? additionalColumn.innerCells.length * 35\r\n                        : 35);\r\n            }\r\n        }\r\n        return rowHeight;\r\n    };\r\n\r\n    //#region - Group sorting logic\r\n    //Function to return sorting logic based on the user selected order of sort\r\n    const compareValues = (compareOrder, v1, v2) => {\r\n        if (compareOrder === \"Ascending\") {\r\n            return v1 > v2 ? 1 : v1 < v2 ? -1 : 0;\r\n        } else {\r\n            return v1 < v2 ? 1 : v1 > v2 ? -1 : 0;\r\n        }\r\n    };\r\n    //Function to return sorted data\r\n    const getSortedData = (originalData) => {\r\n        return originalData.sort(function (x, y) {\r\n            let compareResult = 0;\r\n            groupSortOptions.forEach((option) => {\r\n                const { sortBy, sortOn, order } = option;\r\n                const newResult =\r\n                    sortOn === \"value\"\r\n                        ? compareValues(order, x[sortBy], y[sortBy])\r\n                        : compareValues(order, x[sortBy][sortOn], y[sortBy][sortOn]);\r\n                compareResult = compareResult || newResult;\r\n            });\r\n            return compareResult;\r\n        });\r\n    };\r\n    //#endregion\r\n\r\n    //Gets called when group sort is applied or cleared\r\n    const doGroupSort = (sortOptions) => {\r\n        setGroupSortOptions(sortOptions);\r\n    };\r\n\r\n    //Gets called when page scroll reaches the bottom of the grid.\r\n    //Fetch the next set of data and append it to the variable holding grid data and update the state value.\r\n    //Also update the hasNextPage state value to False once API response is empty, to avoid unwanted API calls.\r\n    const loadNextPage = (...args) => {\r\n        const newIndex = args && args.length > 0 ? args[0] : -1;\r\n        if (newIndex >= 0 && hasNextPage) {\r\n            setIsLoading(true);\r\n            setIsNextPageLoading(true);\r\n            fetchData(newIndex).then((data) => {\r\n                setIsLoading(false);\r\n                setHasNextPage(data && data.length > 0);\r\n                setIsNextPageLoading(false);\r\n                setItems(items.concat(data));\r\n            });\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        //Add duplicate copy of inner cells to be used for data chooser\r\n        processedColumns.map((column) => {\r\n            if (column.innerCells) {\r\n                column.originalInnerCells = column.innerCells;\r\n            }\r\n            return column;\r\n        });\r\n        if (additionalColumn) {\r\n            const { innerCells } = additionalColumn;\r\n            if (innerCells) {\r\n                additionalColumn.originalInnerCells = innerCells;\r\n            }\r\n        }\r\n\r\n        //Make API call to fetch initial set of data.\r\n        setIsLoading(true);\r\n        fetchData(0).then((data) => {\r\n            setIsLoading(false);\r\n            setItems(data);\r\n        });\r\n    }, []);\r\n\r\n    //Sort the data based on the user selected group sort optipons\r\n    const data = getSortedData([...items]);\r\n\r\n    if (data && data.length > 0 && processedColumns && processedColumns.length > 0) {\r\n        return (\r\n            <div>\r\n                <Customgrid\r\n                    title={title}\r\n                    gridHeight={gridHeight}\r\n                    gridWidth={gridWidth}\r\n                    managableColumns={gridColumns}\r\n                    originalColumns={gridColumns}\r\n                    additionalColumn={additionalColumn}\r\n                    data={data}\r\n                    getRowEditOverlay={getRowEditOverlay}\r\n                    updateRowInGrid={updateRowInGrid}\r\n                    deleteRowFromGrid={deleteRowFromGrid}\r\n                    globalSearchLogic={globalSearchLogic}\r\n                    selectBulkData={selectBulkData}\r\n                    calculateRowHeight={\r\n                        calculateRowHeight && typeof calculateRowHeight === \"function\"\r\n                            ? calculateRowHeight\r\n                            : calculateDefaultRowHeight\r\n                    }\r\n                    isExpandContentAvailable={typeof renderExpandedContent === \"function\"}\r\n                    displayExpandedContent={displayExpandedContent}\r\n                    hasNextPage={hasNextPage}\r\n                    isNextPageLoading={isNextPageLoading}\r\n                    loadNextPage={loadNextPage}\r\n                    doGroupSort={doGroupSort}\r\n                />\r\n                {isNextPageLoading ? (\r\n                    <div id=\"loader\" className=\"background\">\r\n                        <div className=\"dots container\">\r\n                            <span></span>\r\n                            <span></span>\r\n                            <span></span>\r\n                        </div>\r\n                    </div>\r\n                ) : null}\r\n            </div>\r\n        );\r\n    } else if (isLoading) {\r\n        return <h2 style={{ textAlign: \"center\", marginTop: \"70px\" }}>Initializing Grid...</h2>;\r\n    } else {\r\n        return <h2 style={{ textAlign: \"center\", marginTop: \"70px\" }}>Invalid Data or Column Configurations</h2>;\r\n    }\r\n});\r\n\r\nexport default Grid;\r\n"],"names":["CellDisplayAndEdit","memo","row","updateRowInGrid","column","isEditOpen","setIsEditOpen","useState","editedRowValue","setEditedRowValue","closeEdit","openEdit","getUpdatedRowValue","value","saveEdit","original","originalRowValue","id","innerCells","originalInnerCells","length","columnValue","newcolumnValue","map","params","forEach","cell","cellAccessor","accessor","cellDisplayContent","displayCell","cellEditContent","editCell","extractColumns","columns","searchColumn","isDesktop","filteredColumns","filter","onlyInIpad","onlyInDesktop","modifiedColumns","index","sortValue","isInnerCellsPresent","columnId","Cell","disableSortBy","sortType","rowA","rowB","disableFilters","rows","filterValue","searchText","toLowerCase","push","extractAdditionalColumn","additionalColumn","RowSelector","forwardRef","indeterminate","rest","ref","checkValue","setCheckValue","defaultRef","useRef","resolvedRef","onChange","useEffect","current","DefaultColumnFilter","setFilter","e","target","undefined","GlobalFilter","globalFilter","setGlobalFilter","setValue","useAsyncDebounce","require","RowOptions","bindRowEditOverlay","bindRowDeleteOverlay","isRowOptionsOpen","setRowOptionsOpen","openRowOptionsOverlay","closeRowOptionsOverlay","openRowEditOverlay","openDeleteOverlay","RowEdit","RowPin","RowDelete","RowEditOverLay","getRowEditOverlay","closeRowEditOverlay","saveRowEdit","rowEditContent","RowDeleteOverLay","closeRowDeleteOverlay","deleteRowFromGrid","deleteRow","ItemTypes","COLUMN","ColumnItem","Header","moveColumn","findColumn","isInnerCellSelected","selectInnerCells","originalIndex","isDragging","drag","useDrag","item","type","collect","monitor","end","dropResult","droppedId","getItem","didDrop","drop","useDrop","accept","canDrop","hover","draggedId","overIndex","opacity","node","cursor","ColumnsList","props","updateColumnsInState","columnsToManage","atIndex","update","$splice","c","indexOf","display","flexWrap","ColumnReordering","isManageColumnOpen","toggleManageColumns","originalColumns","isExpandContentAvailable","additionalColumnHeader","getRemarksColumnIfAvailable","concatedOriginalColumns","concat","managedColumns","setManagedColumns","searchedColumns","setSearchedColumns","remarksColumnToManage","setRemarksColumnToManage","isErrorDisplayed","setIsErrorDisplayed","HTML5toTouch","backends","backend","HTML5Backend","TouchBackend","options","enableMouseEvents","preview","transition","TouchTransition","filterColumnsList","event","includes","columnList","columnHeader","find","isItemPresentInList","list","headerValue","filteredList","isCheckboxSelected","header","columnListToSearch","selectedColumn","findIndexOfItem","columnsList","indexOfColumnToAdd","findIndex","selectAllColumns","currentTarget","checked","selectSingleColumn","itemToAdd","prevItemIndex","newColumnsList","splice","findAndSelectInnerCells","stateColumnList","setStateColumnList","dataset","columnheader","selectRemarksInnerCells","doColumnUpdate","updateColumnStructure","resetInnerCells","resetColumnUpdate","marginLeft","color","MultiBackend","SORT_ITEM","SortItem","sortOption","moveSort","findSort","updateSingleSortingOption","copySortOption","deleteSortOption","getInncerCellsOfColumn","columnAccessor","changeSortByOptions","newSortByValue","innerCellsList","order","changeSortOnOptions","newSortOnValue","sortBy","changeSortOrderOptions","newSortOrderValue","sortOn","copySort","deleteSort","orgItem","innerCellItem","innerCellIndex","SortCopy","SortDelete","SortingList","updateSortingOptions","sortOptions","sortId","sort","GroupSort","isGroupSortOverLayOpen","toggleGroupSortOverLay","applyGroupSort","sortingOrders","defaultSortingOption","setSortOptions","sortingOptions","addSortingOptions","clearSortingOptions","sortIndex","sortByValue","sortOnValue","sortOrder","newOptionsList","slice","newSortingOption","updatedSortOptions","option","newOption","applySort","isError","optionIndex","duplicateSort","opt","optIndex","ExportData","isExportOverlayOpen","toggleExportDataOverlay","updatedColumns","downloadTypes","setDownloadTypes","warning","setWarning","isDownload","exportRowData","filteredRow","filteredRowValues","rowDetails","keys","Object","getOwnPropertyNames","filteredColumnVal","rowFilteredValues","key","columnName","values","toString","replace","arrObj","downloadPDF","downloadXLSFile","downloadCSVFile","unit","size","orientation","doc","jsPDF","setFontSize","title","headers","content","startY","head","body","text","autoTable","save","filteredRowValue","fileType","fileExtension","fileName","ws","XLSX","json_to_sheet","wb","Sheets","data","SheetNames","excelBuffer","bookType","Blob","FileSaver","changeDownloadType","textAlign","listRef","createRef","Customgrid","gridHeight","gridWidth","managableColumns","globalSearchLogic","selectBulkData","calculateRowHeight","displayExpandedContent","hasNextPage","isNextPageLoading","loadNextPage","doGroupSort","setColumns","isRowExpandEnabled","setIsRowExpandEnabled","itemCount","loadMoreItems","isItemLoaded","isFilterOpen","setFilterOpen","toggleColumnFilter","isRowEditOverlyOpen","setIsRowEditOverlyOpen","editedRowData","setEditedRowData","rowValue","isRowDeleteOverlyOpen","setIsRowDeleteOverlyOpen","deletedRowData","setDeletedRowData","setGroupSortOverLay","setManageColumnOpen","newColumnStructure","remarksColumn","setIsExportOverlayOpen","defaultColumn","useMemo","Filter","getTableProps","getTableBodyProps","headerGroups","prepareRow","selectedFlatRows","state","useTable","autoResetFilters","autoResetGlobalFilter","autoResetSortBy","autoResetExpanded","autoResetSelectedRows","useFilters","useGlobalFilter","useSortBy","useExpanded","useRowSelect","useFlexLayout","useResizeColumns","hooks","allColumns","disableResizing","minWidth","width","maxWidth","getToggleAllRowsSelectedProps","getToggleRowSelectedProps","getToggleRowExpandedProps","isExpanded","bulkSelector","resetAfterIndex","RenderRow","useCallback","style","getRowProps","cells","getCellProps","render","RowEditOverlay","height","overflowX","overflowY","headerGroup","getHeaderGroupProps","getHeaderProps","getSortByToggleProps","isSorted","isSortedDesc","canResize","getResizerProps","onItemsRendered","List","Grid","columnToExpand","fetchData","updateRowData","deleteRowData","window","innerWidth","setHasNextPage","setIsNextPageLoading","isLoading","setIsLoading","items","setItems","groupSortOptions","setGroupSortOptions","isValuePresent","rowAccessorValue","dataAccessor","updatedRow","old","entries","processedColumns","gridColumns","renderExpandedContent","expandedRowContent","returnValue","calculateDefaultRowHeight","rowHeight","columnWithMaxWidth","a","b","totalFlexWidth","textLength","join","Math","ceil","widthVariable","compareValues","compareOrder","v1","v2","getSortedData","originalData","x","y","compareResult","newResult","args","newIndex","then","marginTop"],"mappings":"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"}