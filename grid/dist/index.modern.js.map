{"version":3,"file":"index.modern.js","sources":["../src/Functions/RowSelector.js","../src/Functions/DefaultColumnFilter.js","../src/Functions/GlobalFilter.js","../src/index.js"],"sourcesContent":["import React, { forwardRef, useRef, useEffect, useState, memo } from \"react\";\r\n\r\nconst RowSelector = memo(\r\n    forwardRef(({ indeterminate, ...rest }, ref) => {\r\n        const [checkValue, setCheckValue] = useState(indeterminate);\r\n        const defaultRef = useRef();\r\n        const resolvedRef = ref || defaultRef;\r\n        const onChange = () => {\r\n            setCheckValue(!indeterminate);\r\n        };\r\n        useEffect(() => {\r\n            resolvedRef.current.indeterminate = indeterminate;\r\n        }, [resolvedRef, indeterminate]);\r\n        return (\r\n            <div className=\"check-wrap\">\r\n                <input type=\"checkbox\" checked={checkValue} onChange={onChange} ref={resolvedRef} {...rest} />\r\n            </div>\r\n        );\r\n    })\r\n);\r\n\r\nexport default RowSelector;\r\n","import React, { memo } from \"react\";\r\n\r\nconst DefaultColumnFilter = memo(({ column: { filterValue, setFilter } }) => {\r\n    return (\r\n        <input\r\n            className=\"txt\"\r\n            value={filterValue || \"\"}\r\n            onChange={(e) => {\r\n                setFilter(e.target.value || undefined);\r\n            }}\r\n            placeholder=\"Search\"\r\n        />\r\n    );\r\n});\r\n\r\nexport default DefaultColumnFilter;\r\n","import React, { memo, useState } from \"react\";\r\nimport { useAsyncDebounce } from \"react-table\";\r\n\r\nconst GlobalFilter = memo(({ globalFilter, setGlobalFilter }) => {\r\n    const [value, setValue] = useState(globalFilter);\r\n\r\n    const onChange = useAsyncDebounce((value) => {\r\n        setGlobalFilter(value || undefined);\r\n    }, 200);\r\n\r\n    return (\r\n        <div className=\"txt-wrap\">\r\n            <input\r\n                type=\"text\"\r\n                value={value || \"\"}\r\n                onChange={(e) => {\r\n                    setValue(e.target.value);\r\n                    onChange(e.target.value);\r\n                }}\r\n                className=\"txt\"\r\n                placeholder=\"Search\"\r\n            />\r\n            <i className=\"fa fa-search fa-6\" aria-hidden=\"true\"></i>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default GlobalFilter;\r\n","import React, { useCallback, useState, memo, useEffect, createRef, useMemo } from \"react\";\r\nimport {\r\n    useTable,\r\n    useResizeColumns,\r\n    useFlexLayout,\r\n    useRowSelect,\r\n    useSortBy,\r\n    useFilters,\r\n    useGlobalFilter,\r\n    useExpanded\r\n} from \"react-table\";\r\nimport { VariableSizeList as List } from \"react-window\";\r\nimport AutoSizer from \"react-virtualized-auto-sizer\";\r\nimport RowSelector from \"./Functions/RowSelector\";\r\nimport DefaultColumnFilter from \"./Functions/DefaultColumnFilter\";\r\nimport GlobalFilter from \"./Functions/GlobalFilter\";\r\nimport \"./tablestyles.css\";\r\n\r\nconst listRef = createRef();\r\n\r\nconst Grid = memo((props) => {\r\n    const {\r\n        title,\r\n        gridHeight,\r\n        columns,\r\n        data,\r\n        globalSearchLogic,\r\n        updateCellData,\r\n        updateRowData,\r\n        selectBulkData,\r\n        calculateRowHeight,\r\n        renderExpandedContent\r\n    } = props;\r\n    const [isFilterOpen, setFilterOpen] = useState(false);\r\n\r\n    const toggleColumnFilter = () => {\r\n        setFilterOpen(!isFilterOpen);\r\n    };\r\n\r\n    const defaultColumn = useMemo(\r\n        () => ({\r\n            Filter: DefaultColumnFilter\r\n        }),\r\n        []\r\n    );\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        rows,\r\n        prepareRow,\r\n        selectedFlatRows,\r\n        state,\r\n        setGlobalFilter\r\n    } = useTable(\r\n        {\r\n            columns,\r\n            data,\r\n            defaultColumn,\r\n            updateCellData,\r\n            updateRowData,\r\n            globalFilter: (rows, columns, filterValue) => globalSearchLogic(rows, columns, filterValue)\r\n        },\r\n        useFilters,\r\n        useGlobalFilter,\r\n        useSortBy,\r\n        useRowSelect,\r\n        useFlexLayout,\r\n        useResizeColumns,\r\n        useExpanded,\r\n        (hooks) => {\r\n            hooks.allColumns.push((columns) => [\r\n                {\r\n                    id: \"selection\",\r\n                    disableResizing: true,\r\n                    disableFilters: true,\r\n                    disableSortBy: true,\r\n                    minWidth: 35,\r\n                    width: 35,\r\n                    maxWidth: 35,\r\n                    Header: ({ getToggleAllRowsSelectedProps }) => <RowSelector {...getToggleAllRowsSelectedProps()} />,\r\n                    Cell: ({ row }) => <RowSelector {...row.getToggleRowSelectedProps()} />\r\n                },\r\n                ...columns\r\n            ]);\r\n        }\r\n    );\r\n\r\n    const RenderRow = useCallback(\r\n        ({ index, style }) => {\r\n            const row = rows[index];\r\n            prepareRow(row);\r\n            return (\r\n                <div {...row.getRowProps({ style })} className=\"table-row tr\">\r\n                    <div className=\"table-row-wrap\">\r\n                        {row.cells.map((cell) => {\r\n                            return (\r\n                                <div {...cell.getCellProps()} className=\"table-cell td\">\r\n                                    {cell.render(\"Cell\")}\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                    {row.isExpanded ? <div className=\"expand\">{renderExpandedContent(row)}</div> : null}\r\n                </div>\r\n            );\r\n        },\r\n        [prepareRow, rows, renderExpandedContent]\r\n    );\r\n\r\n    const bulkSelector = () => {\r\n        selectBulkData(selectedFlatRows);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (listRef && listRef.current) {\r\n            listRef.current.resetAfterIndex(0, true);\r\n        }\r\n    });\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <div className=\"table-filter\">\r\n                <div className=\"results\">\r\n                    <div className=\"name\">\r\n                        <strong>{rows.length}</strong>\r\n                        <span> {title ? title : \"Rows\"}</span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"filter-utilities\">\r\n                    <GlobalFilter globalFilter={state.globalFilter} setGlobalFilter={setGlobalFilter} />\r\n                    <div className=\"filter-icon keyword-search\" onClick={toggleColumnFilter}>\r\n                        <i className=\"fa fa-filter\" aria-hidden=\"true\"></i>\r\n                    </div>\r\n                    <div className=\"filter-icon bulk-select\" onClick={bulkSelector}>\r\n                        <i className=\"fa fa-pencil-square-o\"></i>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"tableContainer table-outer\" style={{ height: gridHeight }}>\r\n                <AutoSizer disableWidth disableResizing>\r\n                    {({ height }) => (\r\n                        <div {...getTableProps()} className=\"table\">\r\n                            <div className=\"thead table-row table-row--head\">\r\n                                {headerGroups.map((headerGroup) => (\r\n                                    <div {...headerGroup.getHeaderGroupProps()} className=\"tr\">\r\n                                        {headerGroup.headers.map((column) => (\r\n                                            <div {...column.getHeaderProps()} className=\"table-cell column-heading th\">\r\n                                                <div {...column.getSortByToggleProps()}>\r\n                                                    {column.render(\"Header\")}\r\n                                                    <span>\r\n                                                        {column.isSorted ? (\r\n                                                            column.isSortedDesc ? (\r\n                                                                <i className=\"fa fa-sort-desc\" aria-hidden=\"true\"></i>\r\n                                                            ) : (\r\n                                                                <i className=\"fa fa-sort-asc\" aria-hidden=\"true\"></i>\r\n                                                            )\r\n                                                        ) : (\r\n                                                            \"\"\r\n                                                        )}\r\n                                                    </span>\r\n                                                </div>\r\n                                                <div className={`txt-wrap column-filter ${isFilterOpen ? \"open\" : \"\"}`}>\r\n                                                    {!column.disableFilters ? column.render(\"Filter\") : null}\r\n                                                </div>\r\n                                                {column.canResize && <div {...column.getResizerProps()} className=\"resizer\" />}\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n                                ))}\r\n                            </div>\r\n                            <div {...getTableBodyProps()} className=\"tbody\">\r\n                                <List\r\n                                    ref={listRef}\r\n                                    className=\"table-list\"\r\n                                    height={height}\r\n                                    itemCount={rows.length}\r\n                                    itemSize={(index) => calculateRowHeight(rows, index, headerGroups)}\r\n                                    overscanCount={20}\r\n                                >\r\n                                    {RenderRow}\r\n                                </List>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </AutoSizer>\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Grid;\r\n"],"names":["RowSelector","memo","forwardRef","indeterminate","rest","ref","checkValue","setCheckValue","useState","defaultRef","useRef","resolvedRef","onChange","useEffect","current","DefaultColumnFilter","column","filterValue","setFilter","e","target","value","undefined","GlobalFilter","globalFilter","setGlobalFilter","setValue","useAsyncDebounce","listRef","createRef","Grid","props","title","gridHeight","columns","data","globalSearchLogic","updateCellData","updateRowData","selectBulkData","calculateRowHeight","renderExpandedContent","isFilterOpen","setFilterOpen","toggleColumnFilter","defaultColumn","useMemo","Filter","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","selectedFlatRows","state","useTable","useFilters","useGlobalFilter","useSortBy","useRowSelect","useFlexLayout","useResizeColumns","useExpanded","hooks","allColumns","push","id","disableResizing","disableFilters","disableSortBy","minWidth","width","maxWidth","Header","getToggleAllRowsSelectedProps","Cell","row","getToggleRowSelectedProps","RenderRow","useCallback","index","style","getRowProps","cells","map","cell","getCellProps","render","isExpanded","bulkSelector","resetAfterIndex","length","height","headerGroup","getHeaderGroupProps","headers","getHeaderProps","getSortByToggleProps","isSorted","isSortedDesc","canResize","getResizerProps","List"],"mappings":"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"}