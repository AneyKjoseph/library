{"version":3,"file":"index.js","sources":["../src/Functions/CellDisplayAndEdit.js","../src/Utilities/Columns.js","../src/Functions/RowSelector.js","../src/Functions/DefaultColumnFilter.js","../src/Functions/GlobalFilter.js","../src/Images/RowDelete.svg","../src/Images/RowEdit.svg","../src/Images/RowPin.png","../src/Functions/RowOptions.js","../src/Functions/RowEditOverlay.js","../src/Functions/RowDeleteOverLay.js","../src/Overlays/managecolumns/ItemTypes.js","../src/Overlays/managecolumns/columnItem.js","../src/Overlays/managecolumns/columnsList.js","../src/Overlays/managecolumns/index.js","../src/Overlays/groupsort/ItemTypes.js","../src/Images/SortCopy.svg","../src/Images/SortDelete.svg","../src/Overlays/groupsort/sortingItem.js","../src/Overlays/groupsort/sortingList.js","../src/Overlays/groupsort/index.js","../src/Overlays/exportdata/index.js","../src/Customgrid.js","../src/index.js"],"sourcesContent":["import React, { memo, useState } from \"react\";\r\nimport ClickAwayListener from \"react-click-away-listener\";\r\n\r\nconst CellDisplayAndEdit = memo(({ row, updateRowInGrid }) => {\r\n    const { column } = row;\r\n    if (column && row.row) {\r\n        const [isEditOpen, setIsEditOpen] = useState(false);\r\n        const [editedRowValue, setEditedRowValue] = useState(null);\r\n\r\n        const closeEdit = () => {\r\n            setIsEditOpen(false);\r\n        };\r\n\r\n        const openEdit = () => {\r\n            setIsEditOpen(true);\r\n        };\r\n\r\n        const getUpdatedRowValue = (value) => {\r\n            if (value) {\r\n                setEditedRowValue(value);\r\n            }\r\n        };\r\n\r\n        const saveEdit = () => {\r\n            if (editedRowValue) {\r\n                updateRowInGrid(row.row.original, editedRowValue);\r\n            }\r\n            closeEdit();\r\n        };\r\n\r\n        const originalRowValue = { ...row.row.original };\r\n        const { id, innerCells, originalInnerCells } = column;\r\n\r\n        //Remove inncer cell data from row value if it is hidden from column chooser overlay.\r\n        if (\r\n            originalRowValue &&\r\n            originalInnerCells &&\r\n            originalInnerCells.length &&\r\n            innerCells &&\r\n            innerCells.length &&\r\n            innerCells.length < originalInnerCells.length\r\n        ) {\r\n            const columnValue = originalRowValue[id];\r\n            if (typeof columnValue === \"object\") {\r\n                if (columnValue.length > 0) {\r\n                    const newcolumnValue = columnValue.map((value) => {\r\n                        let params = {};\r\n                        innerCells.forEach((cell) => {\r\n                            const cellAccessor = cell.accessor;\r\n                            params[cellAccessor] = value[cellAccessor];\r\n                        });\r\n                        value = params;\r\n                        return value;\r\n                    });\r\n                    originalRowValue[id] = newcolumnValue;\r\n                } else {\r\n                    let params = {};\r\n                    innerCells.forEach((cell) => {\r\n                        const cellAccessor = cell.accessor;\r\n                        params[cellAccessor] = row.value[cellAccessor];\r\n                    });\r\n                    originalRowValue[id] = params;\r\n                }\r\n            }\r\n        }\r\n\r\n        const cellDisplayContent = column.displayCell(originalRowValue);\r\n        const cellEditContent = column.editCell ? column.editCell(originalRowValue, getUpdatedRowValue) : null;\r\n        return (\r\n            <ClickAwayListener onClickAway={closeEdit}>\r\n                <div className={`table-cell--content table-cell--content__${id}`}>\r\n                    {cellEditContent ? (\r\n                        <div className=\"cell-edit\" onClick={openEdit}>\r\n                            <i className=\"fa fa-pencil\" aria-hidden=\"true\"></i>\r\n                        </div>\r\n                    ) : null}\r\n                    {cellDisplayContent}\r\n                    {isEditOpen ? (\r\n                        <div className=\"table-cell--content-edit\">\r\n                            {cellEditContent}\r\n                            <button className=\"ok\" onClick={saveEdit} />\r\n                            <button className=\"cancel\" onClick={closeEdit} />\r\n                        </div>\r\n                    ) : null}\r\n                </div>\r\n            </ClickAwayListener>\r\n        );\r\n    }\r\n});\r\n\r\nexport default CellDisplayAndEdit;\r\n","import React from \"react\";\r\nimport CellDisplayAndEdit from \"../Functions/CellDisplayAndEdit\";\r\n\r\nexport const extractColumns = (columns, searchColumn, isDesktop, updateRowInGrid) => {\r\n    //Remove iPad only columns from desktop and vice-versa\r\n    const filteredColumns = columns.filter((column) => {\r\n        return isDesktop ? !column.onlyInIpad : !column.onlyInDesktop;\r\n    });\r\n\r\n    let modifiedColumns = [];\r\n    //Loop through the columns configuration and create required column structure\r\n    filteredColumns.forEach((column, index) => {\r\n        const { innerCells, accessor, sortValue } = column;\r\n        const isInnerCellsPresent = innerCells && innerCells.length > 0;\r\n\r\n        //Add column Id\r\n        column.columnId = `column_${index}`;\r\n\r\n        //Configure Cell function (which is used by react-table component), based on the user defined function displayCell\r\n        if (!column.Cell && column.displayCell) {\r\n            column.Cell = (row) => {\r\n                return <CellDisplayAndEdit row={row} updateRowInGrid={updateRowInGrid} />;\r\n            };\r\n        }\r\n\r\n        //Add logic to sort column if sort is not disabled\r\n        if (!column.disableSortBy) {\r\n            if (isInnerCellsPresent) {\r\n                //If there are inner cells and a sort value specified, do sort on that value\r\n                if (sortValue) {\r\n                    column.sortType = (rowA, rowB) => {\r\n                        return rowA.original[accessor][sortValue] > rowB.original[accessor][sortValue] ? -1 : 1;\r\n                    };\r\n                } else {\r\n                    column.disableSortBy = true;\r\n                }\r\n            } else if (!innerCells) {\r\n                //If no inner cells are there, just do sort on column value\r\n                column.sortType = (rowA, rowB) => {\r\n                    return rowA.original[accessor] > rowB.original[accessor] ? -1 : 1;\r\n                };\r\n            }\r\n        }\r\n\r\n        //Add logic to filter column if column filter is not disabled\r\n        if (!column.disableFilters) {\r\n            column.filter = (rows, id, filterValue) => {\r\n                const searchText = filterValue ? filterValue.toLowerCase() : \"\";\r\n                return rows.filter((row) => {\r\n                    //Find original data value of each row\r\n                    const { original } = row;\r\n                    //Do search for the column\r\n                    return searchColumn(column, original, searchText);\r\n                });\r\n            };\r\n        }\r\n\r\n        modifiedColumns.push(column);\r\n    });\r\n    return modifiedColumns;\r\n};\r\n\r\nexport const extractAdditionalColumn = (additionalColumn, isDesktop) => {\r\n    const { innerCells } = additionalColumn;\r\n    const isInnerCellsPresent = innerCells && innerCells.length > 0;\r\n\r\n    //Add column Id\r\n    additionalColumn.columnId = `ExpandColumn`;\r\n\r\n    //Remove iPad only columns from desktop and vice-versa\r\n    if (isInnerCellsPresent) {\r\n        additionalColumn.innerCells = innerCells.filter((cell) => {\r\n            return isDesktop ? !cell.onlyInIpad : !cell.onlyInDesktop;\r\n        });\r\n    }\r\n    return additionalColumn;\r\n};\r\n","import React, { forwardRef, useRef, useEffect, useState, memo } from \"react\";\r\n\r\nconst RowSelector = memo(\r\n    forwardRef(({ indeterminate, ...rest }, ref) => {\r\n        const [checkValue, setCheckValue] = useState(indeterminate);\r\n        const defaultRef = useRef();\r\n        const resolvedRef = ref || defaultRef;\r\n        const onChange = () => {\r\n            setCheckValue(!indeterminate);\r\n        };\r\n        useEffect(() => {\r\n            resolvedRef.current.indeterminate = indeterminate;\r\n        }, [resolvedRef, indeterminate]);\r\n        return (\r\n            <div className=\"check-wrap\">\r\n                <input type=\"checkbox\" checked={checkValue} onChange={onChange} ref={resolvedRef} {...rest} />\r\n            </div>\r\n        );\r\n    })\r\n);\r\n\r\nexport default RowSelector;\r\n","import React, { memo } from \"react\";\r\n\r\nconst DefaultColumnFilter = memo(({ column: { filterValue, setFilter } }) => {\r\n    return (\r\n        <input\r\n            className=\"txt\"\r\n            value={filterValue || \"\"}\r\n            onChange={(e) => {\r\n                setFilter(e.target.value || undefined);\r\n            }}\r\n            placeholder=\"Search\"\r\n        />\r\n    );\r\n});\r\n\r\nexport default DefaultColumnFilter;\r\n","import React, { memo, useState } from \"react\";\r\nimport { useAsyncDebounce } from \"react-table\";\r\n\r\nconst GlobalFilter = memo(({ globalFilter, setGlobalFilter }) => {\r\n    const [value, setValue] = useState(globalFilter);\r\n\r\n    const onChange = useAsyncDebounce((value) => {\r\n        setGlobalFilter(value || undefined);\r\n    }, 200);\r\n\r\n    return (\r\n        <div className=\"txt-wrap\">\r\n            <input\r\n                type=\"text\"\r\n                value={value || \"\"}\r\n                onChange={(e) => {\r\n                    setValue(e.target.value);\r\n                    onChange(e.target.value);\r\n                }}\r\n                className=\"txt\"\r\n                placeholder=\"Search\"\r\n            />\r\n            <i className=\"fa fa-search fa-6\" aria-hidden=\"true\"></i>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default GlobalFilter;\r\n","/* loaded by smart-asset */\nexport default require(\"./RowDelete~RKolkpAF.svg\")","/* loaded by smart-asset */\nexport default require(\"./RowEdit~BuKwAcSl.svg\")","/* loaded by smart-asset */\nexport default require(\"./RowPin~qQRdvcXq.png\")","import React, { useState, memo } from \"react\";\r\nimport ClickAwayListener from \"react-click-away-listener\";\r\nimport RowDelete from \"../Images/RowDelete.svg\";\r\nimport RowEdit from \"../Images/RowEdit.svg\";\r\nimport RowPin from \"../Images/RowPin.png\";\r\n\r\nconst RowOptions = memo(({ row, bindRowEditOverlay, bindRowDeleteOverlay }) => {\r\n    const { original } = row;\r\n\r\n    const [isRowOptionsOpen, setRowOptionsOpen] = useState(false);\r\n\r\n    const openRowOptionsOverlay = () => {\r\n        setRowOptionsOpen(true);\r\n    };\r\n\r\n    const closeRowOptionsOverlay = () => {\r\n        setRowOptionsOpen(false);\r\n    };\r\n\r\n    const openRowEditOverlay = () => {\r\n        bindRowEditOverlay(original);\r\n        closeRowOptionsOverlay();\r\n    };\r\n\r\n    const openDeleteOverlay = () => {\r\n        bindRowDeleteOverlay(original);\r\n        closeRowOptionsOverlay();\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"row-options-wrap\">\r\n                <span className=\"icon-row-options\" onClick={openRowOptionsOverlay}>\r\n                    <i></i>\r\n                    <i></i>\r\n                    <i></i>\r\n                </span>\r\n                {isRowOptionsOpen ? (\r\n                    <ClickAwayListener onClickAway={closeRowOptionsOverlay}>\r\n                        <div className=\"row-options-overlay\">\r\n                            <ul>\r\n                                <li>\r\n                                    <span onClick={openRowEditOverlay}>\r\n                                        <i>\r\n                                            <img src={RowEdit} alt=\"cargo\" />\r\n                                        </i>\r\n                                        <span>Edit</span>\r\n                                    </span>\r\n                                </li>\r\n                                <li>\r\n                                    <span>\r\n                                        <i>\r\n                                            <img src={RowPin} alt=\"cargo\" width=\"15\" height=\"15\" />\r\n                                        </i>\r\n                                        <span>Pin This row</span>\r\n                                    </span>\r\n                                </li>\r\n                                <li>\r\n                                    <span onClick={openDeleteOverlay}>\r\n                                        <i>\r\n                                            <img src={RowDelete} alt=\"cargo\" />\r\n                                        </i>\r\n                                        <span>Delete</span>\r\n                                    </span>\r\n                                </li>\r\n                            </ul>\r\n                            <span className=\"close\" onClick={closeRowOptionsOverlay}>\r\n                                <i className=\"fa fa-close\"></i>\r\n                            </span>\r\n                        </div>\r\n                    </ClickAwayListener>\r\n                ) : null}\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default RowOptions;\r\n","import React, { memo, useState } from \"react\";\r\nimport ClickAwayListener from \"react-click-away-listener\";\r\n\r\nconst RowEditOverLay = memo(({ row, getRowEditOverlay, closeRowEditOverlay, updateRowInGrid }) => {\r\n    const [editedRowValue, setEditedRowValue] = useState(null);\r\n\r\n    const getUpdatedRowValue = (value) => {\r\n        if (value) {\r\n            setEditedRowValue(value);\r\n        }\r\n    };\r\n\r\n    const saveRowEdit = () => {\r\n        if (editedRowValue) {\r\n            updateRowInGrid(row, editedRowValue);\r\n        }\r\n        closeRowEditOverlay();\r\n    };\r\n\r\n    const rowEditContent = getRowEditOverlay(row, getUpdatedRowValue);\r\n    return (\r\n        <ClickAwayListener onClickAway={closeRowEditOverlay}>\r\n            <div className=\"row-option-action-overlay\">\r\n                {rowEditContent}\r\n                <div className=\"cancel-save-buttons\">\r\n                    <button className=\"save-Button\" onClick={saveRowEdit}>\r\n                        Save\r\n                    </button>\r\n                    <button className=\"cancel-Button\" onClick={closeRowEditOverlay}>\r\n                        Cancel\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </ClickAwayListener>\r\n    );\r\n});\r\n\r\nexport default RowEditOverLay;\r\n","import React, { memo } from \"react\";\r\nimport ClickAwayListener from \"react-click-away-listener\";\r\n\r\nconst RowDeleteOverLay = memo(({ row, closeRowDeleteOverlay, deleteRowFromGrid }) => {\r\n    const deleteRow = () => {\r\n        if (row) {\r\n            deleteRowFromGrid(row);\r\n        }\r\n        closeRowDeleteOverlay();\r\n    };\r\n\r\n    return (\r\n        <ClickAwayListener onClickAway={closeRowDeleteOverlay}>\r\n            <div className=\"row-option-action-overlay delete\">\r\n                <div className=\"cancel-save-buttons-delete\">\r\n                    <button className=\"delete-Button\" onClick={deleteRow}>\r\n                        Delete\r\n                    </button>\r\n                    <button className=\"cancel-Button\" onClick={closeRowDeleteOverlay}>\r\n                        Cancel\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </ClickAwayListener>\r\n    );\r\n});\r\n\r\nexport default RowDeleteOverLay;\r\n","export const ItemTypes = {\r\n    COLUMN: \"column\"\r\n};\r\n","import React from \"react\";\r\nimport { useDrag, useDrop } from \"react-dnd\";\r\nimport { ItemTypes } from \"./ItemTypes\";\r\n\r\nconst ColumnItem = ({ id, Header, moveColumn, findColumn, originalInnerCells, isInnerCellSelected, selectInnerCells }) => {\r\n    const originalIndex = findColumn(id).index;\r\n\r\n    const [{ isDragging }, drag] = useDrag({\r\n        item: { type: ItemTypes.COLUMN, id, originalIndex },\r\n        collect: (monitor) => ({\r\n            isDragging: monitor.isDragging()\r\n        }),\r\n        end: (dropResult, monitor) => {\r\n            const { id: droppedId, originalIndex } = monitor.getItem();\r\n            const didDrop = monitor.didDrop();\r\n            if (!didDrop) {\r\n                moveColumn(droppedId, originalIndex);\r\n            }\r\n        }\r\n    });\r\n\r\n    const [, drop] = useDrop({\r\n        accept: ItemTypes.COLUMN,\r\n        canDrop: () => false,\r\n        hover({ id: draggedId }) {\r\n            if (draggedId !== id) {\r\n                const { index: overIndex } = findColumn(id);\r\n                moveColumn(draggedId, overIndex);\r\n            }\r\n        }\r\n    });\r\n\r\n    const opacity = isDragging ? 0.1 : 1;\r\n\r\n    return (\r\n        <div style={{ opacity }}>\r\n            <div className=\"column__reorder\">\r\n                <div ref={(node) => drag(drop(node))} style={{ cursor: \"move\" }} className=\"\">\r\n                    <i className=\"fa fa-align-justify\" aria-hidden=\"true\"></i>\r\n                </div>\r\n                <div className=\"\">{Header}</div>\r\n                <div className=\"column__innerCells__wrap\">\r\n                    {originalInnerCells && originalInnerCells.length > 0\r\n                        ? originalInnerCells.map((cell, index) => {\r\n                              return (\r\n                                  <div className=\"column__wrap\" key={index}>\r\n                                      <div className=\"column__checkbox\">\r\n                                          <input\r\n                                              type=\"checkbox\"\r\n                                              data-columnheader={Header}\r\n                                              value={cell.Header}\r\n                                              checked={isInnerCellSelected(Header, cell.Header)}\r\n                                              onChange={selectInnerCells}\r\n                                          ></input>\r\n                                      </div>\r\n                                      <div className=\"column__txt\">{cell.Header}</div>\r\n                                  </div>\r\n                              );\r\n                          })\r\n                        : null}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ColumnItem;\r\n","import React from \"react\";\r\nimport { useDrop } from \"react-dnd\";\r\nimport update from \"immutability-helper\";\r\nimport { ItemTypes } from \"./ItemTypes\";\r\nimport ColumnItem from \"./columnItem\";\r\n\r\nconst ColumnsList = (props) => {\r\n    const { updateColumnsInState, columnsToManage, isInnerCellSelected, selectInnerCells } = props;\r\n\r\n    const moveColumn = (columnId, atIndex) => {\r\n        const { column, index } = findColumn(columnId);\r\n        updateColumnsInState(\r\n            update(columnsToManage, {\r\n                $splice: [\r\n                    [index, 1],\r\n                    [atIndex, 0, column]\r\n                ]\r\n            })\r\n        );\r\n    };\r\n\r\n    const findColumn = (columnId) => {\r\n        const column = columnsToManage.filter((c) => `${c.columnId}` === columnId)[0];\r\n        return {\r\n            column,\r\n            index: columnsToManage.indexOf(column)\r\n        };\r\n    };\r\n\r\n    const [, drop] = useDrop({ accept: ItemTypes.COLUMN });\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div ref={drop} style={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n                {columnsToManage.map((column, index) => {\r\n                    return (\r\n                        <ColumnItem\r\n                            key={index}\r\n                            id={`${column.columnId}`}\r\n                            Header={`${column.Header}`}\r\n                            moveColumn={moveColumn}\r\n                            findColumn={findColumn}\r\n                            originalInnerCells={column.originalInnerCells}\r\n                            isInnerCellSelected={isInnerCellSelected}\r\n                            selectInnerCells={selectInnerCells}\r\n                        />\r\n                    );\r\n                })}\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default ColumnsList;\r\n","import React, { memo, useState } from \"react\";\r\nimport { DndProvider } from \"react-dnd\";\r\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\r\nimport { TouchBackend } from \"react-dnd-touch-backend\";\r\nimport MultiBackend, { TouchTransition } from \"react-dnd-multi-backend\";\r\nimport ClickAwayListener from \"react-click-away-listener\";\r\nimport ColumnsList from \"./columnsList\";\r\n\r\nconst ColumnReordering = memo((props) => {\r\n    const { isManageColumnOpen, toggleManageColumns, originalColumns, isExpandContentAvailable, additionalColumn } = props;\r\n\r\n    const additionalColumnHeader = additionalColumn && additionalColumn.length ? additionalColumn[0].Header : \"\";\r\n    const getRemarksColumnIfAvailable = () => {\r\n        return isExpandContentAvailable ? additionalColumn : [];\r\n    };\r\n\r\n    const concatedOriginalColumns = originalColumns.concat(getRemarksColumnIfAvailable());\r\n\r\n    const [managedColumns, setManagedColumns] = useState(originalColumns);\r\n    const [searchedColumns, setSearchedColumns] = useState(concatedOriginalColumns);\r\n    const [remarksColumnToManage, setRemarksColumnToManage] = useState(getRemarksColumnIfAvailable);\r\n    const [isErrorDisplayed, setIsErrorDisplayed] = useState(false);\r\n\r\n    const HTML5toTouch = {\r\n        backends: [\r\n            {\r\n                backend: HTML5Backend\r\n            },\r\n            {\r\n                backend: TouchBackend,\r\n                options: { enableMouseEvents: true },\r\n                preview: true,\r\n                transition: TouchTransition\r\n            }\r\n        ]\r\n    };\r\n\r\n    const filterColumnsList = (event) => {\r\n        let { value } = event ? event.target : \"\";\r\n        value = value ? value.toLowerCase() : \"\";\r\n        if (value != \"\") {\r\n            setSearchedColumns(\r\n                originalColumns\r\n                    .filter((column) => {\r\n                        return column.Header.toLowerCase().includes(value);\r\n                    })\r\n                    .concat(\r\n                        getRemarksColumnIfAvailable().filter((column) => {\r\n                            return column.Header.toLowerCase().includes(value);\r\n                        })\r\n                    )\r\n            );\r\n        } else {\r\n            setSearchedColumns(concatedOriginalColumns);\r\n        }\r\n    };\r\n\r\n    const updateColumnsInState = (columns) => {\r\n        setManagedColumns(columns);\r\n    };\r\n\r\n    const findColumn = (columnList, columnHeader) => {\r\n        return columnList.find((column) => {\r\n            return column.Header === columnHeader;\r\n        });\r\n    };\r\n\r\n    const isItemPresentInList = (list, headerValue) => {\r\n        const filteredList = list.filter((item) => {\r\n            return item.Header === headerValue;\r\n        });\r\n        return filteredList && filteredList.length > 0;\r\n    };\r\n\r\n    const isCheckboxSelected = (header) => {\r\n        if (header === additionalColumnHeader) {\r\n            return remarksColumnToManage.length > 0;\r\n        } else if (header === \"Select All\") {\r\n            return searchedColumns.length === managedColumns.length + remarksColumnToManage.length;\r\n        } else {\r\n            return isItemPresentInList(managedColumns, header);\r\n        }\r\n    };\r\n\r\n    const isInnerCellSelected = (columnHeader, header) => {\r\n        const columnListToSearch = columnHeader === additionalColumnHeader ? remarksColumnToManage : managedColumns;\r\n        const selectedColumn = findColumn(columnListToSearch, columnHeader);\r\n        return isItemPresentInList(selectedColumn.innerCells, header);\r\n    };\r\n\r\n    const findIndexOfItem = (type, columnsList, indexOfColumnToAdd, columnHeader, originalInnerCells) => {\r\n        if (type === \"column\") {\r\n            return columnsList.findIndex((column) => {\r\n                return column.Header === originalColumns[indexOfColumnToAdd].Header;\r\n            });\r\n        } else {\r\n            return findColumn(columnsList, columnHeader).innerCells.findIndex((cell) => {\r\n                return cell.Header === originalInnerCells[indexOfColumnToAdd].Header;\r\n            });\r\n        }\r\n    };\r\n\r\n    const selectAllColumns = (event) => {\r\n        if (event.currentTarget.checked) {\r\n            setManagedColumns(originalColumns);\r\n            setRemarksColumnToManage(getRemarksColumnIfAvailable());\r\n        } else {\r\n            setManagedColumns([]);\r\n            setRemarksColumnToManage([]);\r\n        }\r\n    };\r\n\r\n    const selectSingleColumn = (event) => {\r\n        const { currentTarget } = event;\r\n        const { checked, value } = currentTarget;\r\n\r\n        if (value === additionalColumnHeader) {\r\n            if (checked) {\r\n                setRemarksColumnToManage(additionalColumn);\r\n            } else {\r\n                setRemarksColumnToManage([]);\r\n            }\r\n        } else {\r\n            //If column checkbox is checked\r\n            if (checked) {\r\n                //Find the index of selected column from original column array and also find the user selected column\r\n                let indexOfColumnToAdd = originalColumns.findIndex((column) => {\r\n                    return column.Header === value;\r\n                });\r\n                const itemToAdd = originalColumns[indexOfColumnToAdd];\r\n\r\n                //Loop through the managedColumns array to find the position of the column that is present previous to the user selected column\r\n                //Find index of that previous column in original column list and push the new column next to that position\r\n                let prevItemIndex = -1;\r\n                while (indexOfColumnToAdd > 0 && prevItemIndex === -1) {\r\n                    indexOfColumnToAdd = indexOfColumnToAdd - 1;\r\n                    prevItemIndex = findIndexOfItem(\"column\", managedColumns, indexOfColumnToAdd);\r\n                }\r\n\r\n                const newColumnsList = [...managedColumns];\r\n                newColumnsList.splice(prevItemIndex + 1, 0, itemToAdd);\r\n                setManagedColumns(newColumnsList);\r\n            } else {\r\n                setManagedColumns(\r\n                    managedColumns.filter((column) => {\r\n                        return column.Header !== value;\r\n                    })\r\n                );\r\n            }\r\n        }\r\n    };\r\n\r\n    const findAndSelectInnerCells = (stateColumnList, setStateColumnList, event) => {\r\n        const { currentTarget } = event;\r\n        const { checked, dataset, value } = currentTarget;\r\n        const { columnheader } = dataset;\r\n\r\n        //Find the column in which checked/unchecked inner cell is present\r\n        const selectedColumn = findColumn(stateColumnList, columnheader);\r\n        const { originalInnerCells } = selectedColumn;\r\n        if (originalInnerCells && originalInnerCells.length > 0) {\r\n            if (checked) {\r\n                //Find the index of selected column from original column array and also find the user selected column\r\n                let indexOfColumnToAdd = originalInnerCells.findIndex((column) => {\r\n                    return column.Header === value;\r\n                });\r\n                const itemToAdd = originalInnerCells[indexOfColumnToAdd];\r\n\r\n                //Loop through the stateColumnList array to find the position of the column that is present previous to the user selected column\r\n                //Find index of that previous column and push the new column to add in that position\r\n                let prevItemIndex = -1;\r\n                while (indexOfColumnToAdd > 0 && prevItemIndex === -1) {\r\n                    indexOfColumnToAdd = indexOfColumnToAdd - 1;\r\n                    prevItemIndex = findIndexOfItem(\r\n                        \"innercell\",\r\n                        stateColumnList,\r\n                        indexOfColumnToAdd,\r\n                        columnheader,\r\n                        originalInnerCells\r\n                    );\r\n                }\r\n\r\n                const newColumnsList = [...stateColumnList];\r\n                findColumn(newColumnsList, columnheader).innerCells.splice(prevItemIndex + 1, 0, itemToAdd);\r\n                setStateColumnList(newColumnsList);\r\n            } else {\r\n                setStateColumnList(\r\n                    stateColumnList.map((column) => {\r\n                        if (column.Header === columnheader) {\r\n                            column.innerCells = column.innerCells.filter((cell) => {\r\n                                return cell.Header !== value;\r\n                            });\r\n                        }\r\n                        return column;\r\n                    })\r\n                );\r\n            }\r\n        }\r\n    };\r\n\r\n    const selectInnerCells = (event) => {\r\n        findAndSelectInnerCells(managedColumns, setManagedColumns, event);\r\n    };\r\n\r\n    const selectRemarksInnerCells = (event) => {\r\n        findAndSelectInnerCells(remarksColumnToManage, setRemarksColumnToManage, event);\r\n    };\r\n\r\n    const doColumnUpdate = () => {\r\n        setIsErrorDisplayed(false);\r\n        if (managedColumns && managedColumns.length > 0) {\r\n            setSearchedColumns(concatedOriginalColumns);\r\n            props.updateColumnStructure(managedColumns, remarksColumnToManage);\r\n        } else {\r\n            setIsErrorDisplayed(true);\r\n        }\r\n        toggleManageColumns();\r\n    };\r\n\r\n    const resetInnerCells = (columnList) => {\r\n        if (columnList && columnList.length) {\r\n            return columnList.map((column) => {\r\n                column.innerCells = column.originalInnerCells;\r\n                return column;\r\n            });\r\n        }\r\n        return columnList;\r\n    };\r\n\r\n    const resetColumnUpdate = () => {\r\n        setManagedColumns(resetInnerCells(originalColumns));\r\n        setSearchedColumns(originalColumns.concat(getRemarksColumnIfAvailable()));\r\n        setRemarksColumnToManage(resetInnerCells(getRemarksColumnIfAvailable()));\r\n        props.updateColumnStructure(originalColumns, getRemarksColumnIfAvailable());\r\n    };\r\n\r\n    if (isManageColumnOpen) {\r\n        return (\r\n            <ClickAwayListener onClickAway={toggleManageColumns}>\r\n                <div className=\"columns--grid\">\r\n                    <div className=\"column__grid\">\r\n                        <div className=\"column__chooser\">\r\n                            <div className=\"column__header\">\r\n                                <div className=\"\">\r\n                                    <strong>Column Chooser</strong>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"column__body\">\r\n                                <div>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        placeholder=\"Search column\"\r\n                                        className=\"custom__ctrl\"\r\n                                        onChange={filterColumnsList}\r\n                                    ></input>\r\n                                </div>\r\n                                <div className=\"column__selectAll\">\r\n                                    <div className=\"column__checkbox\">\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            value=\"Select All\"\r\n                                            checked={isCheckboxSelected(\"Select All\")}\r\n                                            onChange={selectAllColumns}\r\n                                        ></input>\r\n                                    </div>\r\n                                    <div className=\"column__selectTxt\">Select All</div>\r\n                                </div>\r\n                                {searchedColumns.map((column, index) => {\r\n                                    return (\r\n                                        <div className=\"column__wrap\" key={index}>\r\n                                            <div className=\"column__checkbox\">\r\n                                                <input\r\n                                                    type=\"checkbox\"\r\n                                                    value={column.Header}\r\n                                                    checked={isCheckboxSelected(column.Header)}\r\n                                                    onChange={selectSingleColumn}\r\n                                                ></input>\r\n                                            </div>\r\n                                            <div className=\"column__txt\">{column.Header}</div>\r\n                                        </div>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"column__settings\">\r\n                            <div className=\"column__header\">\r\n                                <div className=\"column__headerTxt\">\r\n                                    <strong>Column Settings</strong>\r\n                                    {isErrorDisplayed ? (\r\n                                        <strong style={{ marginLeft: \"10px\", color: \"red\" }}>\r\n                                            Select at least one column (other than {additionalColumnHeader})\r\n                                        </strong>\r\n                                    ) : null}\r\n                                </div>\r\n                                <div className=\"column__close\" onClick={toggleManageColumns}>\r\n                                    <i className=\"fa fa-times\" aria-hidden=\"true\"></i>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"column__body\">\r\n                                <DndProvider backend={MultiBackend} options={HTML5toTouch}>\r\n                                    <ColumnsList\r\n                                        columnsToManage={managedColumns}\r\n                                        updateColumnsInState={updateColumnsInState}\r\n                                        isInnerCellSelected={isInnerCellSelected}\r\n                                        selectInnerCells={selectInnerCells}\r\n                                    />\r\n                                </DndProvider>\r\n                                {remarksColumnToManage && remarksColumnToManage.length > 0 ? (\r\n                                    <div className=\"column__reorder full-width\">\r\n                                        <div className=\"\">{remarksColumnToManage[0].Header}</div>\r\n                                        <div className=\"column__innerCells__wrap\">\r\n                                            {remarksColumnToManage[0].originalInnerCells &&\r\n                                            remarksColumnToManage[0].originalInnerCells.length > 0\r\n                                                ? remarksColumnToManage[0].originalInnerCells.map((cell, index) => {\r\n                                                      return (\r\n                                                          <div className=\"column__wrap\" key={index}>\r\n                                                              <div className=\"column__checkbox\">\r\n                                                                  <input\r\n                                                                      type=\"checkbox\"\r\n                                                                      data-columnheader={remarksColumnToManage[0].Header}\r\n                                                                      value={cell.Header}\r\n                                                                      checked={isInnerCellSelected(\r\n                                                                          remarksColumnToManage[0].Header,\r\n                                                                          cell.Header\r\n                                                                      )}\r\n                                                                      onChange={selectRemarksInnerCells}\r\n                                                                  ></input>\r\n                                                              </div>\r\n                                                              <div className=\"column__txt\">{cell.Header}</div>\r\n                                                          </div>\r\n                                                      );\r\n                                                  })\r\n                                                : null}\r\n                                        </div>\r\n                                    </div>\r\n                                ) : null}\r\n                            </div>\r\n                            <div className=\"column__footer\">\r\n                                <div className=\"column__btns\">\r\n                                    <button className=\"btns\" onClick={resetColumnUpdate}>\r\n                                        Reset\r\n                                    </button>\r\n                                    <button className=\"btns\" onClick={toggleManageColumns}>\r\n                                        Cancel\r\n                                    </button>\r\n                                    <button className=\"btns btns__save\" onClick={doColumnUpdate}>\r\n                                        Save\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </ClickAwayListener>\r\n        );\r\n    } else {\r\n        return <div></div>;\r\n    }\r\n});\r\n\r\nexport default ColumnReordering;\r\n","export const ItemTypes = {\n    SORT_ITEM: \"SORT_ITEM\"\n};\n","/* loaded by smart-asset */\nexport default require(\"./SortCopy~IGKyJbDR.svg\")","/* loaded by smart-asset */\nexport default require(\"./SortDelete~MFpZtzWS.svg\")","import React from \"react\";\nimport { useDrag, useDrop } from \"react-dnd\";\nimport { ItemTypes } from \"./ItemTypes\";\nimport SortCopy from \"../../Images/SortCopy.svg\";\nimport SortDelete from \"../../Images/SortDelete.svg\";\n\nconst SortItem = ({\n    id,\n    sortOption,\n    originalColumns,\n    moveSort,\n    findSort,\n    updateSingleSortingOption,\n    copySortOption,\n    deleteSortOption\n}) => {\n    const originalIndex = findSort(id).index;\n\n    const [{ isDragging }, drag] = useDrag({\n        item: { type: ItemTypes.SORT_ITEM, id, originalIndex },\n        collect: (monitor) => ({\n            isDragging: monitor.isDragging()\n        }),\n        end: (dropResult, monitor) => {\n            const { id: droppedId, originalIndex } = monitor.getItem();\n            const didDrop = monitor.didDrop();\n            if (!didDrop) {\n                moveSort(droppedId, originalIndex);\n            }\n        }\n    });\n\n    const [, drop] = useDrop({\n        accept: ItemTypes.SORT_ITEM,\n        canDrop: () => false,\n        hover({ id: draggedId }) {\n            if (draggedId !== id) {\n                const { index: overIndex } = findSort(id);\n                moveSort(draggedId, overIndex);\n            }\n        }\n    });\n\n    const getInncerCellsOfColumn = (columnAccessor) => {\n        return originalColumns.find((column) => {\n            return column.accessor === columnAccessor;\n        }).innerCells;\n    };\n\n    const changeSortByOptions = (event) => {\n        const newSortByValue = event.target.value;\n        const innerCellsList = getInncerCellsOfColumn(newSortByValue);\n        updateSingleSortingOption(\n            id,\n            newSortByValue,\n            innerCellsList && innerCellsList.length > 0 ? innerCellsList[0].accessor : \"value\",\n            sortOption.order\n        );\n    };\n\n    const changeSortOnOptions = (event) => {\n        const newSortOnValue = event.target.value;\n        updateSingleSortingOption(id, sortOption.sortBy, newSortOnValue, sortOption.order);\n    };\n\n    const changeSortOrderOptions = (event) => {\n        const newSortOrderValue = event.target.value;\n        updateSingleSortingOption(id, sortOption.sortBy, sortOption.sortOn, newSortOrderValue);\n    };\n\n    const copySort = () => {\n        copySortOption(id);\n    };\n\n    const deleteSort = () => {\n        deleteSortOption(id);\n    };\n\n    const opacity = isDragging ? 0.5 : 1;\n\n    return (\n        <div className=\"sort__bodyContent\" style={{ opacity }}>\n            <div className=\"sort__reorder\">\n                <div ref={(node) => drag(drop(node))} style={{ cursor: \"move\" }} className=\"\">\n                    <i className=\"fa fa-navicon\"></i>\n                </div>\n            </div>\n\n            <div className=\"sort__reorder\">\n                <div className=\"sort__file\">\n                    <select className=\"custom__ctrl\" onChange={changeSortByOptions} value={sortOption.sortBy}>\n                        {originalColumns.map((orgItem, index) => (\n                            <option key={index} value={orgItem.accessor}>\n                                {orgItem.Header}\n                            </option>\n                        ))}\n                    </select>\n                </div>\n            </div>\n            <div className=\"sort__reorder\">\n                <div className=\"sort__file\">\n                    <select className=\"custom__ctrl\" onChange={changeSortOnOptions} value={sortOption.sortOn}>\n                        {getInncerCellsOfColumn(sortOption.sortBy) && getInncerCellsOfColumn(sortOption.sortBy).length > 0 ? (\n                            getInncerCellsOfColumn(sortOption.sortBy).map((innerCellItem, innerCellIndex) => (\n                                <option key={innerCellIndex} value={innerCellItem.accessor}>\n                                    {innerCellItem.Header}\n                                </option>\n                            ))\n                        ) : (\n                            <option key={0} value=\"value\">\n                                Value\n                            </option>\n                        )}\n                    </select>\n                </div>\n            </div>\n            <div className=\"sort__reorder\">\n                <div className=\"sort__file\">\n                    <select className=\"custom__ctrl\" value={sortOption.order} onChange={changeSortOrderOptions}>\n                        <option>Ascending</option>\n                        <option>Descending</option>\n                    </select>\n                </div>\n            </div>\n            <div className=\"sort__reorder\">\n                <div className=\"sort__icon\" type={\"button\"} onClick={copySort}>\n                    <i>\n                        <img src={SortCopy} alt=\"copy sort\" />\n                    </i>\n                </div>\n            </div>\n            <div className=\"sort__reorder\">\n                <div className=\"sort__icon\" type={\"button\"} onClick={deleteSort}>\n                    <i>\n                        <img src={SortDelete} alt=\"copy sort\" />\n                    </i>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default SortItem;\n","import React from \"react\";\nimport { useDrop } from \"react-dnd\";\nimport update from \"immutability-helper\";\nimport { ItemTypes } from \"./ItemTypes\";\nimport SortItem from \"./sortingItem\";\n\nconst SortingList = (props) => {\n    const { updateSortingOptions, sortOptions } = props;\n\n    const moveSort = (sortId, atIndex) => {\n        const { sort, index } = findSort(sortId);\n        updateSortingOptions(\n            update(sortOptions, {\n                $splice: [\n                    [index, 1],\n                    [atIndex, 0, sort]\n                ]\n            })\n        );\n    };\n\n    const findSort = (sortId) => {\n        const sort = sortOptions.filter((c, index) => index === sortId)[0];\n        return {\n            sort,\n            index: sortOptions.indexOf(sort)\n        };\n    };\n\n    const [, drop] = useDrop({ accept: ItemTypes.SORT_ITEM });\n\n    return (\n        <React.Fragment>\n            <div ref={drop} style={{ display: \"flex\", flexWrap: \"wrap\" }}>\n                {sortOptions && sortOptions.length > 0 ? (\n                    <ul>\n                        <li>Sort By</li>\n                        <li>Sort On</li>\n                        <li>Order</li>\n                    </ul>\n                ) : null}\n                {sortOptions.map((sortOption, index) => {\n                    return (\n                        <SortItem\n                            id={index}\n                            key={index}\n                            sortOption={sortOption}\n                            originalColumns={props.originalColumns}\n                            moveSort={moveSort}\n                            findSort={findSort}\n                            updateSingleSortingOption={props.updateSingleSortingOption}\n                            copySortOption={props.copySortOption}\n                            deleteSortOption={props.deleteSortOption}\n                        />\n                    );\n                })}\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default SortingList;\n","import React, { memo, useState } from \"react\";\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { TouchBackend } from \"react-dnd-touch-backend\";\nimport MultiBackend, { TouchTransition } from \"react-dnd-multi-backend\";\nimport ClickAwayListener from \"react-click-away-listener\";\nimport SortingList from \"./sortingList\";\n\nconst GroupSort = memo((props) => {\n    const { isGroupSortOverLayOpen, toggleGroupSortOverLay, applyGroupSort, originalColumns } = props;\n\n    const sortingOrders = [\"Ascending\", \"Descending\"];\n    const defaultSortingOption = [\n        {\n            sortBy: originalColumns[0].accessor,\n            sortOn: originalColumns[0].innerCells ? originalColumns[0].innerCells[0].accessor : \"value\",\n            order: sortingOrders[0]\n        }\n    ];\n\n    const [sortOptions, setSortOptions] = useState([]);\n    const [isErrorDisplayed, setIsErrorDisplayed] = useState(false);\n\n    const HTML5toTouch = {\n        backends: [\n            {\n                backend: HTML5Backend\n            },\n            {\n                backend: TouchBackend,\n                options: { enableMouseEvents: true },\n                preview: true,\n                transition: TouchTransition\n            }\n        ]\n    };\n\n    const updateSortingOptions = (sortingOptions) => {\n        setSortOptions(sortingOptions);\n    };\n\n    const addSortingOptions = () => {\n        setSortOptions([...sortOptions, ...defaultSortingOption]);\n    };\n\n    const clearSortingOptions = () => {\n        setSortOptions([]);\n        applyGroupSort([]);\n    };\n\n    const updateSingleSortingOption = (sortIndex, sortByValue, sortOnValue, sortOrder) => {\n        const newOptionsList = sortOptions.slice(0);\n        const newSortingOption = {\n            sortBy: sortByValue,\n            sortOn: sortOnValue,\n            order: sortOrder\n        };\n        const updatedSortOptions = newOptionsList.map((option, index) => (index === sortIndex ? newSortingOption : option));\n        updateSortingOptions(updatedSortOptions);\n    };\n\n    const copySortOption = (sortIndex) => {\n        const newOption = sortOptions.slice(0)[sortIndex];\n        setSortOptions(sortOptions.concat(newOption));\n    };\n\n    const deleteSortOption = (sortIndex) => {\n        setSortOptions(\n            sortOptions.filter((option, index) => {\n                return index !== sortIndex;\n            })\n        );\n    };\n\n    const applySort = () => {\n        let isError = false;\n        sortOptions.map((option, index) => {\n            const { sortBy, sortOn } = option;\n            const optionIndex = index;\n            const duplicateSort = sortOptions.find((opt, optIndex) => {\n                return sortBy === opt.sortBy && sortOn === opt.sortOn && optionIndex !== optIndex;\n            });\n            if (duplicateSort) {\n                isError = true;\n            }\n        });\n        if (!isError) {\n            applyGroupSort(sortOptions);\n            toggleGroupSortOverLay();\n        }\n        setIsErrorDisplayed(isError);\n    };\n\n    if (isGroupSortOverLayOpen) {\n        return (\n            <ClickAwayListener onClickAway={toggleGroupSortOverLay}>\n                <div className=\"sorts--grid\">\n                    <div className=\"sort__grid\">\n                        <div className=\"sort__settings\">\n                            <div className=\"sort__header\">\n                                <div className=\"sort__headerTxt\">Sort</div>\n                                <div className=\"sort__close\">\n                                    <i className=\"fa fa-times\" aria-hidden=\"true\" onClick={toggleGroupSortOverLay}></i>\n                                </div>\n                            </div>\n                            <div className=\"sort__body\">\n                                <DndProvider backend={MultiBackend} options={HTML5toTouch}>\n                                    <SortingList\n                                        sortOptions={sortOptions}\n                                        originalColumns={originalColumns}\n                                        updateSortingOptions={updateSortingOptions}\n                                        updateSingleSortingOption={updateSingleSortingOption}\n                                        copySortOption={copySortOption}\n                                        deleteSortOption={deleteSortOption}\n                                    />\n                                </DndProvider>\n                            </div>\n                            <div className=\"sort-warning\">\n                                {isErrorDisplayed ? <span>Duplicate sort options found.</span> : null}\n                            </div>\n                            <div className=\"sort__new\">\n                                <div className=\"sort__section\" type=\"button\" onClick={addSortingOptions}>\n                                    <span>+</span>\n                                    <div className=\"sort__txt\">New Sort</div>\n                                </div>\n                            </div>\n                            <div className=\"sort__footer\">\n                                <div className=\"sort__btns\">\n                                    <button className=\"btns\" onClick={clearSortingOptions}>\n                                        Clear All\n                                    </button>\n                                    <button className=\"btns btns__save\" onClick={applySort}>\n                                        Ok\n                                    </button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </ClickAwayListener>\n        );\n    } else {\n        return <div></div>;\n    }\n});\n\nexport default GroupSort;\n","import React, { memo, useState } from \"react\";\r\nimport ClickAwayListener from \"react-click-away-listener\";\r\nimport jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\nimport * as FileSaver from \"file-saver\";\r\nimport * as XLSX from \"xlsx\";\r\n\r\nconst ExportData = memo((props) => {\r\n    const {\r\n        isExportOverlayOpen,\r\n        toggleExportDataOverlay,\r\n        rows,\r\n        originalColumns,\r\n        isExpandContentAvailable,\r\n        additionalColumn\r\n    } = props;\r\n\r\n    const getRemarksColumnIfAvailable = () => {\r\n        return isExpandContentAvailable ? additionalColumn : [];\r\n    };\r\n\r\n    const updatedColumns = [...originalColumns].concat(getRemarksColumnIfAvailable());\r\n\r\n    const [managedColumns, setManagedColumns] = useState(updatedColumns);\r\n    const [searchedColumns, setSearchedColumns] = useState(updatedColumns);\r\n    const [downloadTypes, setDownloadTypes] = useState([]);\r\n    const [warning, setWarning] = useState(\"\");\r\n\r\n    let isDownload = false;\r\n\r\n    const exportRowData = () => {\r\n        isDownload = true;\r\n        let filteredRow = [];\r\n        let filteredRowValues = [];\r\n\r\n        setWarning(\"\");\r\n\r\n        if (managedColumns.length > 0 && downloadTypes.length > 0) {\r\n            rows.forEach((rowDetails) => {\r\n                let row = rowDetails.original;\r\n                const keys = Object.getOwnPropertyNames(row);\r\n                let filteredColumnVal = {};\r\n                let rowFilteredValues = [];\r\n                keys.forEach(function (key) {\r\n                    managedColumns.forEach((columnName) => {\r\n                        if (\r\n                            columnName.accessor === key ||\r\n                            (columnName.innerCells && columnName.innerCells.length && columnName.innerCells.includes(key))\r\n                        ) {\r\n                            let columnValue = \"\";\r\n                            if (typeof row[key] === \"object\") {\r\n                                if (row[key].length === undefined)\r\n                                    columnValue = Object.values(row[key]).toString().replace(\",\", \" | \");\r\n                                if (row[key].length > 0) {\r\n                                    let arrObj = \"\";\r\n                                    row[key].forEach((item, index) => {\r\n                                        arrObj = index != 0 ? arrObj + \" | \" + Object.values(item) : Object.values(item);\r\n                                    });\r\n                                    columnValue = arrObj;\r\n                                }\r\n                            } else {\r\n                                columnValue = row[key];\r\n                            }\r\n                            filteredColumnVal[key] = columnValue;\r\n                            rowFilteredValues.push(columnValue);\r\n                        }\r\n                    });\r\n                });\r\n                filteredRow.push(filteredColumnVal);\r\n                filteredRowValues.push(rowFilteredValues);\r\n            });\r\n\r\n            downloadTypes.map((item) => {\r\n                if (item === \"pdf\") {\r\n                    downloadPDF(filteredRowValues);\r\n                } else if (item === \"excel\") {\r\n                    downloadXLSFile(filteredRow);\r\n                } else {\r\n                    downloadCSVFile(filteredRow);\r\n                }\r\n            });\r\n        } else {\r\n            if (managedColumns.length === 0 && downloadTypes.length === 0) {\r\n                setWarning(\"Select at least one column and a file type\");\r\n            } else if (managedColumns.length === 0) {\r\n                setWarning(\"Select at least one column\");\r\n            } else if (downloadTypes.length === 0) {\r\n                setWarning(\"Select at least one file type\");\r\n            }\r\n        }\r\n    };\r\n\r\n    const downloadPDF = (rowFilteredValues) => {\r\n        const unit = \"pt\";\r\n        const size = \"A4\"; // Use A1, A2, A3 or A4\r\n        const orientation = \"landscape\"; // portrait or landscape\r\n\r\n        const marginLeft = 300;\r\n        const doc = new jsPDF(orientation, unit, size);\r\n\r\n        doc.setFontSize(15);\r\n\r\n        const title = \"iCargo Neo Report\";\r\n        const headers = [\r\n            managedColumns.map((column) => {\r\n                return column.Header;\r\n            })\r\n        ];\r\n\r\n        let content = {\r\n            startY: 50,\r\n            head: headers,\r\n            body: rowFilteredValues\r\n        };\r\n\r\n        doc.text(title, marginLeft, 40);\r\n        doc.autoTable(content);\r\n        doc.save(\"iCargo Neo Report.pdf\");\r\n\r\n        isDownload = false;\r\n    };\r\n\r\n    const downloadCSVFile = (filteredRowValue) => {\r\n        const fileType = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\r\n        const fileExtension = \".csv\";\r\n        const fileName = \"iCargo Neo Report\";\r\n        const ws = XLSX.utils.json_to_sheet(filteredRowValue);\r\n        const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\r\n        const excelBuffer = XLSX.write(wb, { bookType: \"csv\", type: \"array\" });\r\n        const data = new Blob([excelBuffer], { type: fileType });\r\n        FileSaver.saveAs(data, fileName + fileExtension);\r\n    };\r\n\r\n    const downloadXLSFile = (filteredRowValue) => {\r\n        const fileType = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\r\n        const fileExtension = \".xlsx\";\r\n        const fileName = \"iCargo Neo Report\";\r\n        const ws = XLSX.utils.json_to_sheet(filteredRowValue);\r\n        const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\r\n        const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\r\n        const data = new Blob([excelBuffer], { type: fileType });\r\n        FileSaver.saveAs(data, fileName + fileExtension);\r\n    };\r\n\r\n    const filterColumnsList = (event) => {\r\n        let { value } = event ? event.target : \"\";\r\n        value = value ? value.toLowerCase() : \"\";\r\n        if (value != \"\") {\r\n            setSearchedColumns(\r\n                originalColumns\r\n                    .filter((column) => {\r\n                        return column.Header.toLowerCase().includes(value);\r\n                    })\r\n                    .concat(\r\n                        getRemarksColumnIfAvailable().filter((column) => {\r\n                            return column.Header.toLowerCase().includes(value);\r\n                        })\r\n                    )\r\n            );\r\n        } else {\r\n            setSearchedColumns(updatedColumns);\r\n        }\r\n    };\r\n\r\n    const isCheckboxSelected = (header) => {\r\n        if (header === \"Select All\") {\r\n            return managedColumns.length === searchedColumns.length;\r\n        } else {\r\n            const selectedColumn = managedColumns.filter((column) => {\r\n                return column.Header === header;\r\n            });\r\n            return selectedColumn && selectedColumn.length > 0;\r\n        }\r\n    };\r\n\r\n    const selectAllColumns = (event) => {\r\n        if (event.target.checked) {\r\n            setManagedColumns(updatedColumns);\r\n        } else {\r\n            setManagedColumns([]);\r\n        }\r\n    };\r\n\r\n    const selectSingleColumn = (event) => {\r\n        const { currentTarget } = event;\r\n        const { checked, value } = currentTarget;\r\n\r\n        //If column checkbox is checked\r\n        if (checked) {\r\n            //Find the index of selected column from original column array and also find the user selected column\r\n            let indexOfColumnToAdd = updatedColumns.findIndex((column) => {\r\n                return column.Header === value;\r\n            });\r\n            const itemToAdd = updatedColumns[indexOfColumnToAdd];\r\n\r\n            //Loop through the managedColumns array to find the position of the column that is present previous to the user selected column\r\n            //Find index of that previous column and push the new column to add in that position\r\n            let prevItemIndex = -1;\r\n            while (indexOfColumnToAdd > 0 && prevItemIndex === -1) {\r\n                prevItemIndex = managedColumns.findIndex((column) => {\r\n                    return column.Header === updatedColumns[indexOfColumnToAdd - 1].Header;\r\n                });\r\n                indexOfColumnToAdd = indexOfColumnToAdd - 1;\r\n            }\r\n\r\n            const newColumnsList = managedColumns.slice(0); //Copying state value\r\n            newColumnsList.splice(prevItemIndex + 1, 0, itemToAdd);\r\n            setManagedColumns(newColumnsList);\r\n        } else {\r\n            setManagedColumns(\r\n                managedColumns.filter((column) => {\r\n                    return column.Header !== value;\r\n                })\r\n            );\r\n        }\r\n    };\r\n\r\n    const changeDownloadType = (event) => {\r\n        const { value, checked } = event ? event.currentTarget : \"\";\r\n        if (checked) {\r\n            setDownloadTypes(downloadTypes.concat([value]));\r\n        } else {\r\n            setDownloadTypes(\r\n                downloadTypes.filter((type) => {\r\n                    return type !== value;\r\n                })\r\n            );\r\n        }\r\n    };\r\n\r\n    if (isExportOverlayOpen) {\r\n        return (\r\n            <ClickAwayListener onClickAway={toggleExportDataOverlay}>\r\n                <div className=\"exports--grid\">\r\n                    <div className=\"export__grid\">\r\n                        <div className=\"export__chooser\">\r\n                            <div className=\"export__header\">\r\n                                <div className=\"\">\r\n                                    <strong>Export Data</strong>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"export__body\">\r\n                                <div>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        placeholder=\"Search column\"\r\n                                        className=\"custom__ctrl\"\r\n                                        onChange={filterColumnsList}\r\n                                    ></input>\r\n                                </div>\r\n                                <div className=\"export__wrap export__headertxt\">\r\n                                    <div className=\"export__checkbox\">\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            value=\"Select All\"\r\n                                            checked={isCheckboxSelected(\"Select All\")}\r\n                                            onChange={selectAllColumns}\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"export__txt\">Select All</div>\r\n                                </div>\r\n                                {searchedColumns.map((column, index) => {\r\n                                    return (\r\n                                        <div className=\"export__wrap\" key={index}>\r\n                                            <div className=\"export__checkbox\">\r\n                                                <input\r\n                                                    type=\"checkbox\"\r\n                                                    value={column.Header}\r\n                                                    checked={isCheckboxSelected(column.Header)}\r\n                                                    onChange={selectSingleColumn}\r\n                                                ></input>\r\n                                            </div>\r\n                                            <div className=\"export__txt\">{column.Header}</div>\r\n                                        </div>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"export__settings\">\r\n                            <div className=\"export__header\">\r\n                                <div className=\"export__headerTxt\"></div>\r\n                                <div className=\"export__close\">\r\n                                    <i className=\"fa fa-times\" aria-hidden=\"true\" onClick={toggleExportDataOverlay}></i>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"export__as\">Export As</div>\r\n                            <div className=\"export__body\">\r\n                                <div className=\"export__reorder\">\r\n                                    <div className=\"check-wrap\">\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            id=\"chk_pdf\"\r\n                                            value=\"pdf\"\r\n                                            checked={downloadTypes.includes(\"pdf\")}\r\n                                            onChange={changeDownloadType}\r\n                                        ></input>\r\n                                    </div>\r\n                                    <div className=\"export__file\">\r\n                                        <i className=\"fa fa-file-pdf-o\" aria-hidden=\"true\"></i>\r\n                                        <br />\r\n                                        <strong>PDF</strong>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"export__reorder\">\r\n                                    <div className=\"check-wrap\">\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            id=\"chk_excel\"\r\n                                            value=\"excel\"\r\n                                            checked={downloadTypes.includes(\"excel\")}\r\n                                            onChange={changeDownloadType}\r\n                                        ></input>\r\n                                    </div>\r\n                                    <div className=\"export__file\">\r\n                                        <i className=\"fa fa-file-excel-o\" aria-hidden=\"true\"></i>\r\n                                        <br />\r\n                                        <strong>Excel</strong>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"export__reorder\">\r\n                                    <div className=\"check-wrap\">\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            id=\"chk_csv\"\r\n                                            value=\"csv\"\r\n                                            checked={downloadTypes.includes(\"csv\")}\r\n                                            onChange={changeDownloadType}\r\n                                        ></input>\r\n                                    </div>\r\n                                    <div className=\"export__file\">\r\n                                        <i className=\"fa fa-file-text-o\" aria-hidden=\"true\"></i>\r\n                                        <br />\r\n                                        <strong>CSV</strong>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"exportWarning\">\r\n                                    <span className=\"alert alert-danger\">\r\n                                        <strong>{warning}</strong>\r\n                                    </span>\r\n                                </div>\r\n                                <div>{isDownload ? <h2 style={{ textAlign: \"center\" }}>Loading...</h2> : null}</div>\r\n                            </div>\r\n                            <div className=\"export__footer\">\r\n                                <div className=\"export__btns\">\r\n                                    <button className=\"btns\" onClick={toggleExportDataOverlay}>\r\n                                        Cancel\r\n                                    </button>\r\n                                    <button className=\"btns btns__save\" onClick={exportRowData}>\r\n                                        Export\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </ClickAwayListener>\r\n        );\r\n    } else {\r\n        return <div></div>;\r\n    }\r\n});\r\n\r\nexport default ExportData;\r\n","import React, { useCallback, useState, memo, useEffect, createRef, useMemo } from \"react\";\r\nimport {\r\n    useTable,\r\n    useResizeColumns,\r\n    useFlexLayout,\r\n    useRowSelect,\r\n    useSortBy,\r\n    useFilters,\r\n    useGlobalFilter,\r\n    useExpanded\r\n} from \"react-table\";\r\nimport { VariableSizeList as List } from \"react-window\";\r\nimport AutoSizer from \"react-virtualized-auto-sizer\";\r\nimport InfiniteLoader from \"react-window-infinite-loader\";\r\nimport RowSelector from \"./Functions/RowSelector\";\r\nimport DefaultColumnFilter from \"./Functions/DefaultColumnFilter\";\r\nimport GlobalFilter from \"./Functions/GlobalFilter\";\r\nimport RowOptions from \"./Functions/RowOptions\";\r\nimport RowEditOverlay from \"./Functions/RowEditOverlay\";\r\nimport RowDeleteOverLay from \"./Functions/RowDeleteOverLay\";\r\nimport ColumnReordering from \"./Overlays/managecolumns\";\r\nimport GroupSort from \"./Overlays/groupsort\";\r\nimport ExportData from \"./Overlays/exportdata\";\r\n\r\nconst listRef = createRef(null);\r\n\r\nconst Customgrid = memo((props) => {\r\n    const {\r\n        title,\r\n        gridHeight,\r\n        gridWidth,\r\n        managableColumns,\r\n        originalColumns,\r\n        additionalColumn,\r\n        data,\r\n        getRowEditOverlay,\r\n        updateRowInGrid,\r\n        deleteRowFromGrid,\r\n        globalSearchLogic,\r\n        selectBulkData,\r\n        calculateRowHeight,\r\n        isExpandContentAvailable,\r\n        displayExpandedContent,\r\n        hasNextPage,\r\n        isNextPageLoading,\r\n        loadNextPage,\r\n        doGroupSort\r\n    } = props;\r\n\r\n    //Local state value for holding columns configuration\r\n    const [columns, setColumns] = useState(managableColumns);\r\n    //Local state value for holding the boolean value to check if row expand is available\r\n    const [isRowExpandEnabled, setIsRowExpandEnabled] = useState(isExpandContentAvailable);\r\n\r\n    //Variables used for handling infinite loading\r\n    const itemCount = hasNextPage ? data.length + 1 : data.length;\r\n    const loadMoreItems = isNextPageLoading ? () => {} : loadNextPage ? loadNextPage : () => {};\r\n    const isItemLoaded = (index) => !hasNextPage || index < data.length;\r\n\r\n    //Local state value for checking if column filter is open/closed\r\n    const [isFilterOpen, setFilterOpen] = useState(false);\r\n    //Toggle column filter state value based on UI clicks\r\n    const toggleColumnFilter = () => {\r\n        setFilterOpen(!isFilterOpen);\r\n    };\r\n\r\n    //Local state value for checking if column filter is open/closed\r\n    const [isRowEditOverlyOpen, setIsRowEditOverlyOpen] = useState(false);\r\n    //Local state value to hold row data that is going to be edited\r\n    const [editedRowData, setEditedRowData] = useState(null);\r\n    //Bind the user defined row edit overlay into Grid\r\n    const bindRowEditOverlay = (rowValue) => {\r\n        setEditedRowData(rowValue);\r\n        setIsRowEditOverlyOpen(true);\r\n    };\r\n    //Close the row edit overlay\r\n    const closeRowEditOverlay = () => {\r\n        setEditedRowData(null);\r\n        setIsRowEditOverlyOpen(false);\r\n    };\r\n\r\n    //Local state value for checking if column filter is open/closed\r\n    const [isRowDeleteOverlyOpen, setIsRowDeleteOverlyOpen] = useState(false);\r\n    //Local state value to hold row data that is going to be deleted\r\n    const [deletedRowData, setDeletedRowData] = useState(null);\r\n    //Bind the user defined row delete overlay into Grid\r\n    const bindRowDeleteOverlay = (rowValue) => {\r\n        setDeletedRowData(rowValue);\r\n        setIsRowDeleteOverlyOpen(true);\r\n    };\r\n    //Close the row edit overlay\r\n    const closeRowDeleteOverlay = () => {\r\n        setDeletedRowData(null);\r\n        setIsRowDeleteOverlyOpen(false);\r\n    };\r\n\r\n    //Local state value for checking if group Sort Overlay is open/closed.\r\n    const [isGroupSortOverLayOpen, setGroupSortOverLay] = useState(false);\r\n\r\n    //Toggle group Sort state value based on UI clicks\r\n    const toggleGroupSortOverLay = () => {\r\n        setGroupSortOverLay(!isGroupSortOverLayOpen);\r\n    };\r\n\r\n    const applyGroupSort = (sortOptions) => {\r\n        doGroupSort(sortOptions);\r\n    };\r\n\r\n    //Local state value for hiding/unhiding column management overlay\r\n    const [isManageColumnOpen, setManageColumnOpen] = useState(false);\r\n\r\n    //Toggle column manage overlay show/hide state value based on UI clicks\r\n    const toggleManageColumns = () => {\r\n        setManageColumnOpen(!isManageColumnOpen);\r\n    };\r\n\r\n    //Callback method from column manage overlay to update the column structure of the grid\r\n    const updateColumnStructure = (newColumnStructure, remarksColumn) => {\r\n        setColumns([...newColumnStructure]);\r\n        setIsRowExpandEnabled(remarksColumn && remarksColumn.length > 0 ? true : false);\r\n    };\r\n\r\n    //Local state value for hiding/unhiding export data overlay\r\n    const [isExportOverlayOpen, setIsExportOverlayOpen] = useState(false);\r\n\r\n    //Toggle export overlay show/hide state value based on UI clicks\r\n    const toggleExportDataOverlay = () => {\r\n        setIsExportOverlayOpen(!isExportOverlayOpen);\r\n    };\r\n\r\n    //Column filter added for all columns by default\r\n    const defaultColumn = useMemo(\r\n        () => ({\r\n            Filter: DefaultColumnFilter\r\n        }),\r\n        []\r\n    );\r\n\r\n    //Initialize react-table instance with the values received through properties\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        rows,\r\n        prepareRow,\r\n        selectedFlatRows,\r\n        state,\r\n        setGlobalFilter\r\n    } = useTable(\r\n        {\r\n            columns,\r\n            data,\r\n            defaultColumn,\r\n            globalFilter: (rows, columns, filterValue) => {\r\n                //Call global search function defined in application, if it is present\r\n                if (globalSearchLogic && typeof globalSearchLogic === \"function\") {\r\n                    return globalSearchLogic(rows, columns, filterValue);\r\n                } else {\r\n                    return rows;\r\n                }\r\n            },\r\n            autoResetFilters: false,\r\n            autoResetGlobalFilter: false,\r\n            autoResetSortBy: false,\r\n            autoResetExpanded: false,\r\n            autoResetSelectedRows: false\r\n        },\r\n        useFilters,\r\n        useGlobalFilter,\r\n        useSortBy,\r\n        useExpanded,\r\n        useRowSelect,\r\n        useFlexLayout,\r\n        useResizeColumns,\r\n        (hooks) => {\r\n            //Add checkbox for all rows in grid, with different properties for header row and body rows\r\n            hooks.allColumns.push((columns) => [\r\n                {\r\n                    id: \"selection\",\r\n                    columnId: \"column_custom_0\",\r\n                    disableResizing: true,\r\n                    disableFilters: true,\r\n                    disableSortBy: true,\r\n                    minWidth: 35,\r\n                    width: 35,\r\n                    maxWidth: 35,\r\n                    Header: ({ getToggleAllRowsSelectedProps }) => <RowSelector {...getToggleAllRowsSelectedProps()} />,\r\n                    Cell: ({ row }) => <RowSelector {...row.getToggleRowSelectedProps()} />\r\n                },\r\n                ...columns,\r\n                {\r\n                    id: \"custom\",\r\n                    columnId: \"column_custom_1\",\r\n                    disableResizing: true,\r\n                    disableFilters: true,\r\n                    disableSortBy: true,\r\n                    minWidth: 35,\r\n                    width: 35,\r\n                    maxWidth: 35,\r\n                    Cell: ({ row }) => {\r\n                        return (\r\n                            <div className=\"action\">\r\n                                <RowOptions\r\n                                    row={row}\r\n                                    bindRowEditOverlay={bindRowEditOverlay}\r\n                                    bindRowDeleteOverlay={bindRowDeleteOverlay}\r\n                                />\r\n                                {isRowExpandEnabled ? (\r\n                                    <span className=\"expander\" {...row.getToggleRowExpandedProps()}>\r\n                                        {row.isExpanded ? (\r\n                                            <i className=\"fa fa-angle-up\" aria-hidden=\"true\"></i>\r\n                                        ) : (\r\n                                            <i className=\"fa fa-angle-down\" aria-hidden=\"true\"></i>\r\n                                        )}\r\n                                    </span>\r\n                                ) : null}\r\n                            </div>\r\n                        );\r\n                    }\r\n                }\r\n            ]);\r\n        }\r\n    );\r\n\r\n    //Export selected row data and pass it to the callback method\r\n    const bulkSelector = () => {\r\n        if (selectBulkData) {\r\n            selectBulkData(selectedFlatRows);\r\n        }\r\n    };\r\n\r\n    //This code is to handle the row height calculation while expanding a row or resizing a column\r\n    useEffect(() => {\r\n        if (listRef && listRef.current) {\r\n            listRef.current.resetAfterIndex(0, true);\r\n        }\r\n    });\r\n\r\n    //Render each row and cells in each row, using attributes from react window list.\r\n    const RenderRow = useCallback(\r\n        ({ index, style }) => {\r\n            if (isItemLoaded(index)) {\r\n                const row = rows[index];\r\n                prepareRow(row);\r\n                return (\r\n                    <div {...row.getRowProps({ style })} className=\"table-row tr\">\r\n                        <div className=\"table-row-wrap\">\r\n                            {row.cells.map((cell) => {\r\n                                return (\r\n                                    <div {...cell.getCellProps()} className=\"table-cell td\">\r\n                                        {cell.render(\"Cell\")}\r\n                                    </div>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                        {/*Check if row eapand icon is clicked, and if yes, call function to bind content to the expanded region*/}\r\n                        {isRowExpandEnabled && row.isExpanded ? (\r\n                            <div className=\"expand\">\r\n                                {displayExpandedContent ? displayExpandedContent(row, additionalColumn) : null}\r\n                            </div>\r\n                        ) : null}\r\n                    </div>\r\n                );\r\n            }\r\n        },\r\n        [prepareRow, rows, displayExpandedContent]\r\n    );\r\n\r\n    //Render table title, global search component, button to show/hide column filter, button to export selected row data & the grid\r\n    //Use properties and methods provided by react-table\r\n    //Autosizer used for calculating grid height (don't consider window width and column resizing value changes)\r\n    //Infinite loader used for lazy loading, with the properties passed here and other values calculated at the top\r\n    //React window list is used for implementing virtualization, specifying the item count in a frame and height of each rows in it.\r\n    return (\r\n        <div className=\"table-wrapper\" style={{ width: gridWidth ? gridWidth : \"100%\" }}>\r\n            <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\" />\r\n            <div className=\"table-filter\">\r\n                <div className=\"results\">\r\n                    <div className=\"name\">\r\n                        <strong>{rows.length}</strong>\r\n                        <span> {title ? title : \"Rows\"}</span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"filter-utilities\">\r\n                    <ColumnReordering\r\n                        isManageColumnOpen={isManageColumnOpen}\r\n                        toggleManageColumns={toggleManageColumns}\r\n                        originalColumns={originalColumns}\r\n                        isExpandContentAvailable={isExpandContentAvailable}\r\n                        additionalColumn={[additionalColumn]}\r\n                        updateColumnStructure={updateColumnStructure}\r\n                    />\r\n                    <GlobalFilter globalFilter={state.globalFilter} setGlobalFilter={setGlobalFilter} />\r\n                    <GroupSort\r\n                        isGroupSortOverLayOpen={isGroupSortOverLayOpen}\r\n                        toggleGroupSortOverLay={toggleGroupSortOverLay}\r\n                        originalColumns={originalColumns}\r\n                        applyGroupSort={applyGroupSort}\r\n                    />\r\n                    <ExportData\r\n                        isExportOverlayOpen={isExportOverlayOpen}\r\n                        toggleExportDataOverlay={toggleExportDataOverlay}\r\n                        rows={rows}\r\n                        originalColumns={originalColumns}\r\n                        isExpandContentAvailable={isExpandContentAvailable}\r\n                        additionalColumn={[additionalColumn]}\r\n                    />\r\n                    <div className=\"filter-icon keyword-search\" onClick={toggleColumnFilter}>\r\n                        <i className=\"fa fa-filter\" aria-hidden=\"true\"></i>\r\n                    </div>\r\n                    <div className=\"filter-icon bulk-select\" onClick={bulkSelector}>\r\n                        <i className=\"fa fa-pencil-square-o\" aria-hidden=\"true\"></i>\r\n                    </div>\r\n                    <div className=\"filter-icon bulk-select\" onClick={toggleGroupSortOverLay}>\r\n                        <i className=\"fa fa-sort-amount-desc\" aria-hidden=\"true\"></i>\r\n                    </div>\r\n                    <div className=\"filter-icon manage-columns\" onClick={toggleManageColumns}>\r\n                        <i className=\"fa fa-columns\" aria-hidden=\"true\"></i>\r\n                    </div>\r\n                    <div className=\"filter-icon manage-columns\" onClick={toggleExportDataOverlay}>\r\n                        <i className=\"fa fa-share-alt\" aria-hidden=\"true\"></i>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"table-popus\">\r\n                {isRowEditOverlyOpen ? (\r\n                    <RowEditOverlay\r\n                        row={editedRowData}\r\n                        getRowEditOverlay={getRowEditOverlay}\r\n                        closeRowEditOverlay={closeRowEditOverlay}\r\n                        updateRowInGrid={updateRowInGrid}\r\n                    />\r\n                ) : null}\r\n                {isRowDeleteOverlyOpen ? (\r\n                    <RowDeleteOverLay\r\n                        row={deletedRowData}\r\n                        closeRowDeleteOverlay={closeRowDeleteOverlay}\r\n                        deleteRowFromGrid={deleteRowFromGrid}\r\n                    />\r\n                ) : null}\r\n            </div>\r\n\r\n            <div\r\n                className=\"tableContainer table-outer\"\r\n                style={{ height: gridHeight ? gridHeight : \"50vh\", overflowX: \"auto\", overflowY: \"hidden\" }}\r\n            >\r\n                <AutoSizer disableWidth disableResizing>\r\n                    {({ height }) => (\r\n                        <div {...getTableProps()} className=\"table\">\r\n                            <div className=\"thead table-row table-row--head\">\r\n                                {headerGroups.map((headerGroup) => (\r\n                                    <div {...headerGroup.getHeaderGroupProps()} className=\"tr\">\r\n                                        {headerGroup.headers.map((column) => (\r\n                                            <div {...column.getHeaderProps()} className=\"table-cell column-heading th\">\r\n                                                <div {...column.getSortByToggleProps()}>\r\n                                                    {column.render(\"Header\")}\r\n                                                    <span>\r\n                                                        {column.isSorted ? (\r\n                                                            column.isSortedDesc ? (\r\n                                                                <i className=\"fa fa-sort-desc\" aria-hidden=\"true\"></i>\r\n                                                            ) : (\r\n                                                                <i className=\"fa fa-sort-asc\" aria-hidden=\"true\"></i>\r\n                                                            )\r\n                                                        ) : (\r\n                                                            \"\"\r\n                                                        )}\r\n                                                    </span>\r\n                                                </div>\r\n                                                <div className={`txt-wrap column-filter ${isFilterOpen ? \"open\" : \"\"}`}>\r\n                                                    {!column.disableFilters ? column.render(\"Filter\") : null}\r\n                                                </div>\r\n                                                {column.canResize && <div {...column.getResizerProps()} className=\"resizer\" />}\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n                                ))}\r\n                            </div>\r\n                            <div {...getTableBodyProps()} className=\"tbody\">\r\n                                <InfiniteLoader isItemLoaded={isItemLoaded} itemCount={itemCount} loadMoreItems={loadMoreItems}>\r\n                                    {({ onItemsRendered, ref }) => (\r\n                                        <List\r\n                                            ref={(list) => {\r\n                                                ref(list);\r\n                                                listRef.current = list;\r\n                                            }}\r\n                                            style={{ overflowX: \"hidden\" }}\r\n                                            height={height - 60}\r\n                                            itemCount={rows.length}\r\n                                            itemSize={(index) => {\r\n                                                return calculateRowHeight(\r\n                                                    rows[index],\r\n                                                    headerGroups && headerGroups.length ? headerGroups[0].headers : []\r\n                                                );\r\n                                            }}\r\n                                            onItemsRendered={onItemsRendered}\r\n                                            overscanCount={20}\r\n                                        >\r\n                                            {RenderRow}\r\n                                        </List>\r\n                                    )}\r\n                                </InfiniteLoader>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </AutoSizer>\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Customgrid;\r\n","import React, { memo, useMemo, useState, useEffect } from \"react\";\r\nimport { extractColumns, extractAdditionalColumn } from \"./Utilities/Columns\";\r\nimport Customgrid from \"./Customgrid\";\r\n\r\nconst Grid = memo((props) => {\r\n    const {\r\n        title,\r\n        gridHeight,\r\n        gridWidth,\r\n        columns,\r\n        columnToExpand,\r\n        fetchData,\r\n        getRowEditOverlay,\r\n        updateRowData,\r\n        deleteRowData,\r\n        selectBulkData,\r\n        calculateRowHeight\r\n    } = props;\r\n\r\n    //Check if device is desktop\r\n    const isDesktop = window.innerWidth > 1024;\r\n\r\n    //Set state value for variable to check if there is anext page available\r\n    const [hasNextPage, setHasNextPage] = useState(true);\r\n    //Set state value for variable to check if the loading process is going on\r\n    const [isNextPageLoading, setIsNextPageLoading] = useState(false);\r\n    //Local state value for checking if data is being loaded from API\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    //Set state value for variable to hold grid data\r\n    const [items, setItems] = useState([]);\r\n    //Local state for group sort options\r\n    const [groupSortOptions, setGroupSortOptions] = useState([]);\r\n\r\n    //Logic for searching in each column\r\n    const searchColumn = (column, original, searchText) => {\r\n        //Return value\r\n        let isValuePresent = false;\r\n        //Find the accessor node and inner cells array of each column\r\n        const { accessor, innerCells } = column;\r\n        //Find accessor value of a column\r\n        const rowAccessorValue = original[accessor];\r\n        //Check if inner cells are available and save value to boolean var\r\n        const isInnerCellsPresent = innerCells && innerCells.length > 0;\r\n        //Enter if cell value is object or array\r\n        if (typeof rowAccessorValue === \"object\" && isInnerCellsPresent) {\r\n            //Enter if cell value is array\r\n            if (rowAccessorValue.length > 0) {\r\n                //Loop through cell array value and check if searched text is present\r\n                rowAccessorValue.map((value) => {\r\n                    innerCells.map((cell) => {\r\n                        const dataAccessor = value[cell.accessor];\r\n                        if (dataAccessor && dataAccessor.toString().toLowerCase().includes(searchText)) {\r\n                            isValuePresent = true;\r\n                        }\r\n                    });\r\n                });\r\n            } else {\r\n                //If cell value is an object, loop through inner cells and check if searched text is present\r\n                innerCells.map((cell) => {\r\n                    const dataAccessor = original[accessor][cell.accessor];\r\n                    if (dataAccessor && dataAccessor.toString().toLowerCase().includes(searchText)) {\r\n                        isValuePresent = true;\r\n                    }\r\n                });\r\n            }\r\n        } else {\r\n            //If cell value is not an object or array, convert it to text and check if searched text is present\r\n            const dataAccessor = original[accessor];\r\n            if (dataAccessor && dataAccessor.toString().toLowerCase().includes(searchText)) {\r\n                isValuePresent = true;\r\n            }\r\n        }\r\n        return isValuePresent;\r\n    };\r\n\r\n    //Gets triggered when one row item is updated\r\n    const updateRowInGrid = (original, updatedRow) => {\r\n        setItems((old) =>\r\n            old.map((row) => {\r\n                if (Object.entries(row).toString() === Object.entries(original).toString()) {\r\n                    row = updatedRow;\r\n                }\r\n                return row;\r\n            })\r\n        );\r\n        if (updateRowData) {\r\n            updateRowData(updatedRow);\r\n        }\r\n    };\r\n\r\n    //Gets triggered when one row item is deleted\r\n    const deleteRowFromGrid = (original) => {\r\n        setItems((old) =>\r\n            old.filter((row) => {\r\n                return row !== original;\r\n            })\r\n        );\r\n        if (deleteRowData) {\r\n            deleteRowData(original);\r\n        }\r\n    };\r\n\r\n    //Extract/add and modify required data from user configured columns and expand columns\r\n    let processedColumns = extractColumns(columns, searchColumn, isDesktop, updateRowInGrid);\r\n    let additionalColumn = extractAdditionalColumn(columnToExpand, isDesktop, updateRowInGrid);\r\n\r\n    //Create memoized column, to be used by grid component\r\n    const gridColumns = useMemo(() => processedColumns, []);\r\n\r\n    //Local variable for keeping the expanded row rendering method\r\n    let renderExpandedContent = additionalColumn ? additionalColumn.displayCell : null;\r\n\r\n    //Process data to be rendered to expanded view and return that data to the render function\r\n    const displayExpandedContent = (row, additionalColumn) => {\r\n        if (row && additionalColumn) {\r\n            const { innerCells } = additionalColumn;\r\n            const { original } = row;\r\n            if (original && innerCells && innerCells.length > 0) {\r\n                const expandedRowContent = {};\r\n                innerCells.forEach((cell) => {\r\n                    const { accessor } = cell;\r\n                    expandedRowContent[accessor] = original[accessor];\r\n                });\r\n                return renderExpandedContent(expandedRowContent);\r\n            }\r\n        }\r\n    };\r\n\r\n    //Add logic for doing global search in the grid\r\n    const globalSearchLogic = (rows, columns, filterValue) => {\r\n        //Enter search logic only if rows and columns are available\r\n        if (filterValue && processedColumns.length > 0) {\r\n            //convert user searched text to lower case\r\n            const searchText = filterValue.toLowerCase();\r\n            //Loop through all rows\r\n            return rows.filter((row) => {\r\n                //Find original data value of each row\r\n                const { original } = row;\r\n                //Return value of the filter method\r\n                let returnValue = false;\r\n                //Loop through all column values for each row\r\n                processedColumns.map((column) => {\r\n                    //Do search for each column\r\n                    returnValue = returnValue || searchColumn(column, original, searchText);\r\n                });\r\n                return returnValue;\r\n            });\r\n        }\r\n        return rows;\r\n    };\r\n\r\n    //Add logic to calculate height of each row, based on the content of  or more columns\r\n    //This can be used only if developer using the component has not passed a function to calculate row height\r\n    const calculateDefaultRowHeight = (row, gridColumns) => {\r\n        //Minimum height for each row\r\n        let rowHeight = 50;\r\n        if (gridColumns && gridColumns.length > 0 && row) {\r\n            //Get properties of a row\r\n            const { original, isExpanded } = row;\r\n            //Find the column with maximum width configured, from grid columns list\r\n            const columnWithMaxWidth = [...gridColumns].sort((a, b) => {\r\n                return b.width - a.width;\r\n            })[0];\r\n            //Get column properties including the user resized column width (totalFlexWidth)\r\n            const { id, width, totalFlexWidth } = columnWithMaxWidth;\r\n            //Get row value of that column\r\n            const rowValue = original[id];\r\n            if (rowValue) {\r\n                //Find the length of text of data in that column\r\n                const textLength = Object.values(rowValue).join(\",\").length;\r\n                //This is a formula that was created for the test data used.\r\n                rowHeight = rowHeight + Math.ceil((80 * textLength) / totalFlexWidth);\r\n                const widthVariable = totalFlexWidth > width ? totalFlexWidth - width : width - totalFlexWidth;\r\n                rowHeight = rowHeight + widthVariable / 1000;\r\n            }\r\n            //Add logic to increase row height if row is expanded\r\n            if (isExpanded && additionalColumn) {\r\n                //Increase height based on the number of inner cells in additional columns\r\n                rowHeight =\r\n                    rowHeight +\r\n                    (additionalColumn.innerCells && additionalColumn.innerCells.length > 0\r\n                        ? additionalColumn.innerCells.length * 35\r\n                        : 35);\r\n            }\r\n        }\r\n        return rowHeight;\r\n    };\r\n\r\n    //#region - Group sorting logic\r\n    //Function to return sorting logic based on the user selected order of sort\r\n    const compareValues = (compareOrder, v1, v2) => {\r\n        if (compareOrder === \"Ascending\") {\r\n            return v1 > v2 ? 1 : v1 < v2 ? -1 : 0;\r\n        } else {\r\n            return v1 < v2 ? 1 : v1 > v2 ? -1 : 0;\r\n        }\r\n    };\r\n    //Function to return sorted data\r\n    const getSortedData = (originalData) => {\r\n        return originalData.sort(function (x, y) {\r\n            let compareResult = 0;\r\n            groupSortOptions.forEach((option) => {\r\n                const { sortBy, sortOn, order } = option;\r\n                const newResult =\r\n                    sortOn === \"value\"\r\n                        ? compareValues(order, x[sortBy], y[sortBy])\r\n                        : compareValues(order, x[sortBy][sortOn], y[sortBy][sortOn]);\r\n                compareResult = compareResult || newResult;\r\n            });\r\n            return compareResult;\r\n        });\r\n    };\r\n    //#endregion\r\n\r\n    //Gets called when group sort is applied or cleared\r\n    const doGroupSort = (sortOptions) => {\r\n        setGroupSortOptions(sortOptions);\r\n    };\r\n\r\n    //Gets called when page scroll reaches the bottom of the grid.\r\n    //Fetch the next set of data and append it to the variable holding grid data and update the state value.\r\n    //Also update the hasNextPage state value to False once API response is empty, to avoid unwanted API calls.\r\n    const loadNextPage = (...args) => {\r\n        const newIndex = args && args.length > 0 ? args[0] : -1;\r\n        if (newIndex >= 0 && hasNextPage) {\r\n            setIsLoading(true);\r\n            setIsNextPageLoading(true);\r\n            fetchData(newIndex).then((data) => {\r\n                setIsLoading(false);\r\n                setHasNextPage(data && data.length > 0);\r\n                setIsNextPageLoading(false);\r\n                setItems(items.concat(data));\r\n            });\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        //Add duplicate copy of inner cells to be used for data chooser\r\n        processedColumns.map((column) => {\r\n            if (column.innerCells) {\r\n                column.originalInnerCells = column.innerCells;\r\n            }\r\n            return column;\r\n        });\r\n        if (additionalColumn) {\r\n            const { innerCells } = additionalColumn;\r\n            if (innerCells) {\r\n                additionalColumn.originalInnerCells = innerCells;\r\n            }\r\n        }\r\n\r\n        //Make API call to fetch initial set of data.\r\n        setIsLoading(true);\r\n        fetchData(0).then((data) => {\r\n            setIsLoading(false);\r\n            setItems(data);\r\n        });\r\n    }, []);\r\n\r\n    //Sort the data based on the user selected group sort optipons\r\n    const data = getSortedData([...items]);\r\n\r\n    return (\r\n        <div className=\"grid-component-container\">\r\n            {data && data.length > 0 && processedColumns && processedColumns.length > 0 ? (\r\n                <div>\r\n                    <Customgrid\r\n                        title={title}\r\n                        gridHeight={gridHeight}\r\n                        gridWidth={gridWidth}\r\n                        managableColumns={gridColumns}\r\n                        originalColumns={gridColumns}\r\n                        additionalColumn={additionalColumn}\r\n                        data={data}\r\n                        getRowEditOverlay={getRowEditOverlay}\r\n                        updateRowInGrid={updateRowInGrid}\r\n                        deleteRowFromGrid={deleteRowFromGrid}\r\n                        globalSearchLogic={globalSearchLogic}\r\n                        selectBulkData={selectBulkData}\r\n                        calculateRowHeight={\r\n                            calculateRowHeight && typeof calculateRowHeight === \"function\"\r\n                                ? calculateRowHeight\r\n                                : calculateDefaultRowHeight\r\n                        }\r\n                        isExpandContentAvailable={typeof renderExpandedContent === \"function\"}\r\n                        displayExpandedContent={displayExpandedContent}\r\n                        hasNextPage={hasNextPage}\r\n                        isNextPageLoading={isNextPageLoading}\r\n                        loadNextPage={loadNextPage}\r\n                        doGroupSort={doGroupSort}\r\n                    />\r\n                    {isNextPageLoading ? (\r\n                        <div id=\"loader\" className=\"background\">\r\n                            <div className=\"dots container\">\r\n                                <span></span>\r\n                                <span></span>\r\n                                <span></span>\r\n                            </div>\r\n                        </div>\r\n                    ) : null}\r\n                    )\r\n                </div>\r\n            ) : (\r\n                <h2 style={{ textAlign: \"center\", marginTop: \"70px\" }}>\r\n                    {isLoading ? \"Initializing Grid...\" : \"Invalid Data or Column Configurations\"}\r\n                </h2>\r\n            )}\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Grid;\r\n"],"names":["CellDisplayAndEdit","memo","row","updateRowInGrid","column","useState","isEditOpen","setIsEditOpen","editedRowValue","setEditedRowValue","closeEdit","openEdit","getUpdatedRowValue","value","saveEdit","original","originalRowValue","id","innerCells","originalInnerCells","length","columnValue","newcolumnValue","map","params","forEach","cell","cellAccessor","accessor","cellDisplayContent","displayCell","cellEditContent","editCell","React","extractColumns","columns","searchColumn","isDesktop","filteredColumns","filter","onlyInIpad","onlyInDesktop","modifiedColumns","index","sortValue","isInnerCellsPresent","columnId","Cell","disableSortBy","sortType","rowA","rowB","disableFilters","rows","filterValue","searchText","toLowerCase","push","extractAdditionalColumn","additionalColumn","RowSelector","forwardRef","ref","indeterminate","rest","checkValue","setCheckValue","defaultRef","useRef","resolvedRef","onChange","useEffect","current","DefaultColumnFilter","setFilter","e","target","undefined","GlobalFilter","globalFilter","setGlobalFilter","setValue","useAsyncDebounce","require","RowOptions","bindRowEditOverlay","bindRowDeleteOverlay","isRowOptionsOpen","setRowOptionsOpen","openRowOptionsOverlay","closeRowOptionsOverlay","openRowEditOverlay","openDeleteOverlay","RowEdit","RowPin","RowDelete","RowEditOverLay","getRowEditOverlay","closeRowEditOverlay","saveRowEdit","rowEditContent","RowDeleteOverLay","closeRowDeleteOverlay","deleteRowFromGrid","deleteRow","ItemTypes","COLUMN","ColumnItem","Header","moveColumn","findColumn","isInnerCellSelected","selectInnerCells","originalIndex","useDrag","item","type","collect","monitor","isDragging","end","dropResult","getItem","droppedId","didDrop","drag","useDrop","accept","canDrop","hover","draggedId","overIndex","drop","opacity","node","cursor","ColumnsList","props","updateColumnsInState","columnsToManage","atIndex","update","$splice","c","indexOf","display","flexWrap","ColumnReordering","isManageColumnOpen","toggleManageColumns","originalColumns","isExpandContentAvailable","additionalColumnHeader","getRemarksColumnIfAvailable","concatedOriginalColumns","concat","managedColumns","setManagedColumns","searchedColumns","setSearchedColumns","remarksColumnToManage","setRemarksColumnToManage","isErrorDisplayed","setIsErrorDisplayed","HTML5toTouch","backends","backend","HTML5Backend","TouchBackend","options","enableMouseEvents","preview","transition","TouchTransition","filterColumnsList","event","includes","columnList","columnHeader","find","isItemPresentInList","list","headerValue","filteredList","isCheckboxSelected","header","columnListToSearch","selectedColumn","findIndexOfItem","columnsList","indexOfColumnToAdd","findIndex","selectAllColumns","currentTarget","checked","selectSingleColumn","itemToAdd","prevItemIndex","newColumnsList","splice","findAndSelectInnerCells","stateColumnList","setStateColumnList","dataset","columnheader","selectRemarksInnerCells","doColumnUpdate","updateColumnStructure","resetInnerCells","resetColumnUpdate","marginLeft","color","DndProvider","MultiBackend","SORT_ITEM","SortItem","sortOption","moveSort","findSort","updateSingleSortingOption","copySortOption","deleteSortOption","getInncerCellsOfColumn","columnAccessor","changeSortByOptions","newSortByValue","innerCellsList","order","changeSortOnOptions","newSortOnValue","sortBy","changeSortOrderOptions","newSortOrderValue","sortOn","copySort","deleteSort","orgItem","innerCellItem","innerCellIndex","SortCopy","SortDelete","SortingList","updateSortingOptions","sortOptions","sortId","sort","GroupSort","isGroupSortOverLayOpen","toggleGroupSortOverLay","applyGroupSort","sortingOrders","defaultSortingOption","setSortOptions","sortingOptions","addSortingOptions","clearSortingOptions","sortIndex","sortByValue","sortOnValue","sortOrder","newOptionsList","slice","newSortingOption","updatedSortOptions","option","newOption","applySort","isError","optionIndex","duplicateSort","opt","optIndex","ExportData","isExportOverlayOpen","toggleExportDataOverlay","updatedColumns","downloadTypes","setDownloadTypes","warning","setWarning","isDownload","exportRowData","filteredRow","filteredRowValues","rowDetails","keys","Object","getOwnPropertyNames","filteredColumnVal","rowFilteredValues","key","columnName","values","toString","replace","arrObj","downloadPDF","downloadXLSFile","downloadCSVFile","unit","size","orientation","doc","jsPDF","setFontSize","title","headers","content","startY","head","body","text","autoTable","save","filteredRowValue","fileType","fileExtension","fileName","ws","XLSX","json_to_sheet","wb","Sheets","data","SheetNames","excelBuffer","bookType","Blob","FileSaver","changeDownloadType","textAlign","listRef","createRef","Customgrid","gridHeight","gridWidth","managableColumns","globalSearchLogic","selectBulkData","calculateRowHeight","displayExpandedContent","hasNextPage","isNextPageLoading","loadNextPage","doGroupSort","setColumns","isRowExpandEnabled","setIsRowExpandEnabled","itemCount","loadMoreItems","isItemLoaded","isFilterOpen","setFilterOpen","toggleColumnFilter","isRowEditOverlyOpen","setIsRowEditOverlyOpen","editedRowData","setEditedRowData","rowValue","isRowDeleteOverlyOpen","setIsRowDeleteOverlyOpen","deletedRowData","setDeletedRowData","setGroupSortOverLay","setManageColumnOpen","newColumnStructure","remarksColumn","setIsExportOverlayOpen","defaultColumn","useMemo","Filter","useTable","autoResetFilters","autoResetGlobalFilter","autoResetSortBy","autoResetExpanded","autoResetSelectedRows","useFilters","useGlobalFilter","useSortBy","useExpanded","useRowSelect","useFlexLayout","useResizeColumns","hooks","allColumns","disableResizing","minWidth","width","maxWidth","getToggleAllRowsSelectedProps","getToggleRowSelectedProps","getToggleRowExpandedProps","isExpanded","getTableProps","getTableBodyProps","headerGroups","prepareRow","selectedFlatRows","state","bulkSelector","resetAfterIndex","RenderRow","useCallback","style","getRowProps","cells","getCellProps","render","RowEditOverlay","height","overflowX","overflowY","headerGroup","getHeaderGroupProps","getHeaderProps","getSortByToggleProps","isSorted","isSortedDesc","canResize","getResizerProps","onItemsRendered","List","Grid","columnToExpand","fetchData","updateRowData","deleteRowData","window","innerWidth","setHasNextPage","setIsNextPageLoading","isLoading","setIsLoading","items","setItems","groupSortOptions","setGroupSortOptions","isValuePresent","rowAccessorValue","dataAccessor","updatedRow","old","entries","processedColumns","gridColumns","renderExpandedContent","expandedRowContent","returnValue","calculateDefaultRowHeight","rowHeight","columnWithMaxWidth","a","b","totalFlexWidth","textLength","join","Math","ceil","widthVariable","compareValues","compareOrder","v1","v2","getSortedData","originalData","x","y","compareResult","newResult","args","newIndex","then","marginTop"],"mappings":"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"}