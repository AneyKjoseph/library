{"version":3,"file":"index.js","sources":["../src/Functions/RowSelector.js","../src/Functions/DefaultColumnFilter.js","../src/Functions/GlobalFilter.js","../src/index.js"],"sourcesContent":["import React, { forwardRef, useRef, useEffect, useState, memo } from \"react\";\r\n\r\nconst RowSelector = memo(\r\n    forwardRef(({ indeterminate, ...rest }, ref) => {\r\n        const [checkValue, setCheckValue] = useState(indeterminate);\r\n        const defaultRef = useRef();\r\n        const resolvedRef = ref || defaultRef;\r\n        const onChange = () => {\r\n            setCheckValue(!indeterminate);\r\n        };\r\n        useEffect(() => {\r\n            resolvedRef.current.indeterminate = indeterminate;\r\n        }, [resolvedRef, indeterminate]);\r\n        return (\r\n            <div className=\"check-wrap\">\r\n                <input type=\"checkbox\" checked={checkValue} onChange={onChange} ref={resolvedRef} {...rest} />\r\n            </div>\r\n        );\r\n    })\r\n);\r\n\r\nexport default RowSelector;\r\n","import React, { memo } from \"react\";\r\n\r\nconst DefaultColumnFilter = memo(({ column: { filterValue, setFilter } }) => {\r\n    return (\r\n        <input\r\n            className=\"txt\"\r\n            value={filterValue || \"\"}\r\n            onChange={(e) => {\r\n                setFilter(e.target.value || undefined);\r\n            }}\r\n            placeholder=\"Search\"\r\n        />\r\n    );\r\n});\r\n\r\nexport default DefaultColumnFilter;\r\n","import React, { memo, useState } from \"react\";\r\nimport { useAsyncDebounce } from \"react-table\";\r\n\r\nconst GlobalFilter = memo(({ globalFilter, setGlobalFilter }) => {\r\n    const [value, setValue] = useState(globalFilter);\r\n\r\n    const onChange = useAsyncDebounce((value) => {\r\n        setGlobalFilter(value || undefined);\r\n    }, 200);\r\n\r\n    return (\r\n        <div className=\"txt-wrap\">\r\n            <input\r\n                type=\"text\"\r\n                value={value || \"\"}\r\n                onChange={(e) => {\r\n                    setValue(e.target.value);\r\n                    onChange(e.target.value);\r\n                }}\r\n                className=\"txt\"\r\n                placeholder=\"Search\"\r\n            />\r\n            <i className=\"fa fa-search fa-6\" aria-hidden=\"true\"></i>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default GlobalFilter;\r\n","import React, { useCallback, useState, memo, useEffect, createRef, useMemo } from \"react\";\r\nimport {\r\n    useTable,\r\n    useResizeColumns,\r\n    useFlexLayout,\r\n    useRowSelect,\r\n    useSortBy,\r\n    useFilters,\r\n    useGlobalFilter,\r\n    useExpanded\r\n} from \"react-table\";\r\nimport { VariableSizeList as List } from \"react-window\";\r\nimport AutoSizer from \"react-virtualized-auto-sizer\";\r\nimport InfiniteLoader from \"react-window-infinite-loader\";\r\nimport RowSelector from \"./Functions/RowSelector\";\r\nimport DefaultColumnFilter from \"./Functions/DefaultColumnFilter\";\r\nimport GlobalFilter from \"./Functions/GlobalFilter\";\r\nimport \"./tablestyles.css\";\r\n\r\nconst listRef = createRef(null);\r\n\r\nconst Grid = memo((props) => {\r\n    const {\r\n        title,\r\n        gridHeight,\r\n        columns,\r\n        data,\r\n        globalSearchLogic,\r\n        updateCellData,\r\n        selectBulkData,\r\n        calculateRowHeight,\r\n        renderExpandedContent,\r\n        hasNextPage,\r\n        isNextPageLoading,\r\n        loadNextPage\r\n    } = props;\r\n\r\n    //Display error message if data or columns configuration is missing.\r\n    if (!(data && data.length > 0) || !(columns && columns.length > 0)) {\r\n        return <h2 style={{ marginTop: \"50px\", textAlign: \"center\" }}>Invalid Data or Columns Configuration</h2>;\r\n    }\r\n\r\n    //Variables used for handling infinite loading\r\n    const itemCount = hasNextPage ? data.length + 1 : data.length;\r\n    const loadMoreItems = isNextPageLoading ? () => {} : loadNextPage ? loadNextPage : () => {};\r\n    const isItemLoaded = (index) => !hasNextPage || index < data.length;\r\n\r\n    //Local state value for checking if column filter is open/closed\r\n    const [isFilterOpen, setFilterOpen] = useState(false);\r\n\r\n    //Toggle column filter state value based on UI clicks\r\n    const toggleColumnFilter = () => {\r\n        setFilterOpen(!isFilterOpen);\r\n    };\r\n\r\n    //Column filter added for all columns by default\r\n    const defaultColumn = useMemo(\r\n        () => ({\r\n            Filter: DefaultColumnFilter\r\n        }),\r\n        []\r\n    );\r\n\r\n    //Initialize react-table instance with the values received through properties\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        rows,\r\n        prepareRow,\r\n        selectedFlatRows,\r\n        state,\r\n        setGlobalFilter\r\n    } = useTable(\r\n        {\r\n            columns,\r\n            data,\r\n            defaultColumn,\r\n            updateCellData,\r\n            globalFilter: (rows, columns, filterValue) => {\r\n                //Call global search function defined in application, if it is present\r\n                if (globalSearchLogic && typeof globalSearchLogic === \"function\") {\r\n                    return globalSearchLogic(rows, columns, filterValue);\r\n                } else {\r\n                    return rows;\r\n                }\r\n            },\r\n            autoResetSelectedRows: false,\r\n            autoResetSortBy: false,\r\n            autoResetFilters: false\r\n        },\r\n        useFilters,\r\n        useGlobalFilter,\r\n        useSortBy,\r\n        useRowSelect,\r\n        useFlexLayout,\r\n        useResizeColumns,\r\n        useExpanded,\r\n        (hooks) => {\r\n            //Add checkbox for all rows in grid, with different properties for header row and body rows\r\n            hooks.allColumns.push((columns) => [\r\n                {\r\n                    id: \"selection\",\r\n                    disableResizing: true,\r\n                    disableFilters: true,\r\n                    disableSortBy: true,\r\n                    minWidth: 35,\r\n                    width: 35,\r\n                    maxWidth: 35,\r\n                    Header: ({ getToggleAllRowsSelectedProps }) => <RowSelector {...getToggleAllRowsSelectedProps()} />,\r\n                    Cell: ({ row }) => <RowSelector {...row.getToggleRowSelectedProps()} />\r\n                },\r\n                ...columns\r\n            ]);\r\n        }\r\n    );\r\n\r\n    //Render each row and cells in each row, using attributes from react window list.\r\n    const RenderRow = useCallback(\r\n        ({ index, style }) => {\r\n            if (isItemLoaded(index)) {\r\n                const row = rows[index];\r\n                prepareRow(row);\r\n                return (\r\n                    <div {...row.getRowProps({ style })} className=\"table-row tr\">\r\n                        <div className=\"table-row-wrap\">\r\n                            {row.cells.map((cell) => {\r\n                                return (\r\n                                    <div {...cell.getCellProps()} className=\"table-cell td\">\r\n                                        {cell.render(\"Cell\")}\r\n                                    </div>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                        {/*Check if row eapand icon is clicked, and if yes, call function to bind content to the expanded region*/}\r\n                        {row.isExpanded ? (\r\n                            <div className=\"expand\">{renderExpandedContent ? renderExpandedContent(row) : null}</div>\r\n                        ) : null}\r\n                    </div>\r\n                );\r\n            }\r\n        },\r\n        [prepareRow, rows, renderExpandedContent]\r\n    );\r\n\r\n    //Export selected row data and pass it to the callback method\r\n    const bulkSelector = () => {\r\n        if (selectBulkData) {\r\n            selectBulkData(selectedFlatRows);\r\n        }\r\n    };\r\n\r\n    //This code is to handle the row height calculation while expanding a row or resizing a column\r\n    useEffect(() => {\r\n        if (listRef && listRef.current) {\r\n            listRef.current.resetAfterIndex(0, true);\r\n        }\r\n    });\r\n\r\n    //Render table title, global search component, button to show/hide column filter, button to export selected row data & the grid\r\n    //Use properties and methods provided by react-table\r\n    //Autosizer used for calculating grid height (don't consider window width and column resizing value changes)\r\n    //Infinite loader used for lazy loading, with the properties passed here and other values calculated at the top\r\n    //React window list is used for implementing virtualization, specifying the item count in a frame and height of each rows in it.\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <div className=\"table-filter\">\r\n                <div className=\"results\">\r\n                    <div className=\"name\">\r\n                        <strong>{rows.length}</strong>\r\n                        <span> {title ? title : \"Rows\"}</span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"filter-utilities\">\r\n                    <GlobalFilter globalFilter={state.globalFilter} setGlobalFilter={setGlobalFilter} />\r\n                    <div className=\"filter-icon keyword-search\" onClick={toggleColumnFilter}>\r\n                        <i className=\"fa fa-filter\" aria-hidden=\"true\"></i>\r\n                    </div>\r\n                    <div className=\"filter-icon bulk-select\" onClick={bulkSelector}>\r\n                        <i className=\"fa fa-pencil-square-o\"></i>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"tableContainer table-outer\" style={{ height: gridHeight ? gridHeight : \"50vh\" }}>\r\n                <AutoSizer disableWidth disableResizing>\r\n                    {({ height }) => (\r\n                        <div {...getTableProps()} className=\"table\">\r\n                            <div className=\"thead table-row table-row--head\">\r\n                                {headerGroups.map((headerGroup) => (\r\n                                    <div {...headerGroup.getHeaderGroupProps()} className=\"tr\">\r\n                                        {headerGroup.headers.map((column) => (\r\n                                            <div {...column.getHeaderProps()} className=\"table-cell column-heading th\">\r\n                                                <div {...column.getSortByToggleProps()}>\r\n                                                    {column.render(\"Header\")}\r\n                                                    <span>\r\n                                                        {column.isSorted ? (\r\n                                                            column.isSortedDesc ? (\r\n                                                                <i className=\"fa fa-sort-desc\" aria-hidden=\"true\"></i>\r\n                                                            ) : (\r\n                                                                <i className=\"fa fa-sort-asc\" aria-hidden=\"true\"></i>\r\n                                                            )\r\n                                                        ) : (\r\n                                                            \"\"\r\n                                                        )}\r\n                                                    </span>\r\n                                                </div>\r\n                                                <div className={`txt-wrap column-filter ${isFilterOpen ? \"open\" : \"\"}`}>\r\n                                                    {!column.disableFilters ? column.render(\"Filter\") : null}\r\n                                                </div>\r\n                                                {column.canResize && <div {...column.getResizerProps()} className=\"resizer\" />}\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n                                ))}\r\n                            </div>\r\n                            <div {...getTableBodyProps()} className=\"tbody\">\r\n                                <InfiniteLoader isItemLoaded={isItemLoaded} itemCount={itemCount} loadMoreItems={loadMoreItems}>\r\n                                    {({ onItemsRendered, ref }) => (\r\n                                        <List\r\n                                            ref={(list) => {\r\n                                                ref(list);\r\n                                                listRef.current = list;\r\n                                            }}\r\n                                            className=\"table-list\"\r\n                                            height={height}\r\n                                            itemCount={rows.length}\r\n                                            itemSize={(index) => {\r\n                                                if (calculateRowHeight && typeof calculateRowHeight === \"function\") {\r\n                                                    return calculateRowHeight(rows, index, headerGroups);\r\n                                                } else {\r\n                                                    return 70;\r\n                                                }\r\n                                            }}\r\n                                            onItemsRendered={onItemsRendered}\r\n                                            overscanCount={20}\r\n                                        >\r\n                                            {RenderRow}\r\n                                        </List>\r\n                                    )}\r\n                                </InfiniteLoader>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </AutoSizer>\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Grid;\r\n"],"names":["RowSelector","memo","forwardRef","ref","indeterminate","rest","useState","checkValue","setCheckValue","defaultRef","useRef","resolvedRef","onChange","useEffect","current","React","DefaultColumnFilter","column","filterValue","setFilter","e","target","value","undefined","GlobalFilter","globalFilter","setGlobalFilter","setValue","useAsyncDebounce","listRef","createRef","Grid","props","title","gridHeight","columns","data","globalSearchLogic","updateCellData","selectBulkData","calculateRowHeight","renderExpandedContent","hasNextPage","isNextPageLoading","loadNextPage","length","marginTop","textAlign","itemCount","loadMoreItems","isItemLoaded","index","isFilterOpen","setFilterOpen","toggleColumnFilter","defaultColumn","useMemo","Filter","useTable","rows","autoResetSelectedRows","autoResetSortBy","autoResetFilters","useFilters","useGlobalFilter","useSortBy","useRowSelect","useFlexLayout","useResizeColumns","useExpanded","hooks","allColumns","push","id","disableResizing","disableFilters","disableSortBy","minWidth","width","maxWidth","Header","getToggleAllRowsSelectedProps","Cell","row","getToggleRowSelectedProps","getTableProps","getTableBodyProps","headerGroups","prepareRow","selectedFlatRows","state","RenderRow","useCallback","style","getRowProps","cells","map","cell","getCellProps","render","isExpanded","bulkSelector","resetAfterIndex","height","headerGroup","getHeaderGroupProps","headers","getHeaderProps","getSortByToggleProps","isSorted","isSortedDesc","canResize","getResizerProps","onItemsRendered","List","list"],"mappings":"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"}