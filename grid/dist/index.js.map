{"version":3,"file":"index.js","sources":["../src/Functions/RowSelector.js","../src/Functions/DefaultColumnFilter.js","../src/Functions/GlobalFilter.js","../src/index.js"],"sourcesContent":["import React, { forwardRef, useRef, useEffect, useState, memo } from \"react\";\r\n\r\nconst RowSelector = memo(\r\n    forwardRef(({ indeterminate, ...rest }, ref) => {\r\n        const [checkValue, setCheckValue] = useState(indeterminate);\r\n        const defaultRef = useRef();\r\n        const resolvedRef = ref || defaultRef;\r\n        const onChange = () => {\r\n            setCheckValue(!indeterminate);\r\n        };\r\n        useEffect(() => {\r\n            resolvedRef.current.indeterminate = indeterminate;\r\n        }, [resolvedRef, indeterminate]);\r\n        return (\r\n            <div className=\"check-wrap\">\r\n                <input type=\"checkbox\" checked={checkValue} onChange={onChange} ref={resolvedRef} {...rest} />\r\n            </div>\r\n        );\r\n    })\r\n);\r\n\r\nexport default RowSelector;\r\n","import React, { memo } from \"react\";\r\n\r\nconst DefaultColumnFilter = memo(({ column: { filterValue, setFilter } }) => {\r\n    return (\r\n        <input\r\n            className=\"txt\"\r\n            value={filterValue || \"\"}\r\n            onChange={(e) => {\r\n                setFilter(e.target.value || undefined);\r\n            }}\r\n            placeholder=\"Search\"\r\n        />\r\n    );\r\n});\r\n\r\nexport default DefaultColumnFilter;\r\n","import React, { memo, useState } from \"react\";\r\nimport { useAsyncDebounce } from \"react-table\";\r\n\r\nconst GlobalFilter = memo(({ globalFilter, setGlobalFilter }) => {\r\n    const [value, setValue] = useState(globalFilter);\r\n\r\n    const onChange = useAsyncDebounce((value) => {\r\n        setGlobalFilter(value || undefined);\r\n    }, 200);\r\n\r\n    return (\r\n        <div className=\"txt-wrap\">\r\n            <input\r\n                type=\"text\"\r\n                value={value || \"\"}\r\n                onChange={(e) => {\r\n                    setValue(e.target.value);\r\n                    onChange(e.target.value);\r\n                }}\r\n                className=\"txt\"\r\n                placeholder=\"Search\"\r\n            />\r\n            <i className=\"fa fa-search fa-6\" aria-hidden=\"true\"></i>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default GlobalFilter;\r\n","import React, { useCallback, useState, memo, useEffect, createRef, useMemo } from \"react\";\r\nimport {\r\n    useTable,\r\n    useResizeColumns,\r\n    useFlexLayout,\r\n    useRowSelect,\r\n    useSortBy,\r\n    useFilters,\r\n    useGlobalFilter,\r\n    useExpanded\r\n} from \"react-table\";\r\nimport { VariableSizeList as List } from \"react-window\";\r\nimport AutoSizer from \"react-virtualized-auto-sizer\";\r\nimport RowSelector from \"./Functions/RowSelector\";\r\nimport DefaultColumnFilter from \"./Functions/DefaultColumnFilter\";\r\nimport GlobalFilter from \"./Functions/GlobalFilter\";\r\nimport \"./tablestyles.css\";\r\n\r\nconst listRef = createRef();\r\n\r\nconst Grid = memo((props) => {\r\n    const {\r\n        title,\r\n        gridHeight,\r\n        columns,\r\n        data,\r\n        globalSearchLogic,\r\n        updateCellData,\r\n        selectBulkData,\r\n        calculateRowHeight,\r\n        renderExpandedContent\r\n    } = props;\r\n\r\n    if (!(data && data.length) || !(columns && columns.length)) {\r\n        return <h2 style={{ marginTop: \"50px\", textAlign: \"center\" }}>Invalid Data or Columns Configuration</h2>;\r\n    }\r\n    const [isFilterOpen, setFilterOpen] = useState(false);\r\n\r\n    const toggleColumnFilter = () => {\r\n        setFilterOpen(!isFilterOpen);\r\n    };\r\n\r\n    const defaultColumn = useMemo(\r\n        () => ({\r\n            Filter: DefaultColumnFilter\r\n        }),\r\n        []\r\n    );\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        rows,\r\n        prepareRow,\r\n        selectedFlatRows,\r\n        state,\r\n        setGlobalFilter\r\n    } = useTable(\r\n        {\r\n            columns,\r\n            data,\r\n            defaultColumn,\r\n            updateCellData,\r\n            globalFilter: (rows, columns, filterValue) => {\r\n                if (globalSearchLogic && typeof globalSearchLogic === \"function\") {\r\n                    return globalSearchLogic(rows, columns, filterValue);\r\n                } else {\r\n                    return rows;\r\n                }\r\n            }\r\n        },\r\n        useFilters,\r\n        useGlobalFilter,\r\n        useSortBy,\r\n        useRowSelect,\r\n        useFlexLayout,\r\n        useResizeColumns,\r\n        useExpanded,\r\n        (hooks) => {\r\n            hooks.allColumns.push((columns) => [\r\n                {\r\n                    id: \"selection\",\r\n                    disableResizing: true,\r\n                    disableFilters: true,\r\n                    disableSortBy: true,\r\n                    minWidth: 35,\r\n                    width: 35,\r\n                    maxWidth: 35,\r\n                    Header: ({ getToggleAllRowsSelectedProps }) => <RowSelector {...getToggleAllRowsSelectedProps()} />,\r\n                    Cell: ({ row }) => <RowSelector {...row.getToggleRowSelectedProps()} />\r\n                },\r\n                ...columns\r\n            ]);\r\n        }\r\n    );\r\n\r\n    const RenderRow = useCallback(\r\n        ({ index, style }) => {\r\n            const row = rows[index];\r\n            prepareRow(row);\r\n            return (\r\n                <div {...row.getRowProps({ style })} className=\"table-row tr\">\r\n                    <div className=\"table-row-wrap\">\r\n                        {row.cells.map((cell) => {\r\n                            return (\r\n                                <div {...cell.getCellProps()} className=\"table-cell td\">\r\n                                    {cell.render(\"Cell\")}\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                    {row.isExpanded ? (\r\n                        <div className=\"expand\">{renderExpandedContent ? renderExpandedContent(row) : null}</div>\r\n                    ) : null}\r\n                </div>\r\n            );\r\n        },\r\n        [prepareRow, rows, renderExpandedContent]\r\n    );\r\n\r\n    const bulkSelector = () => {\r\n        if (selectBulkData) {\r\n            selectBulkData(selectedFlatRows);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (listRef && listRef.current) {\r\n            listRef.current.resetAfterIndex(0, true);\r\n        }\r\n    });\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <div className=\"table-filter\">\r\n                <div className=\"results\">\r\n                    <div className=\"name\">\r\n                        <strong>{rows.length}</strong>\r\n                        <span> {title ? title : \"Rows\"}</span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"filter-utilities\">\r\n                    <GlobalFilter globalFilter={state.globalFilter} setGlobalFilter={setGlobalFilter} />\r\n                    <div className=\"filter-icon keyword-search\" onClick={toggleColumnFilter}>\r\n                        <i className=\"fa fa-filter\" aria-hidden=\"true\"></i>\r\n                    </div>\r\n                    <div className=\"filter-icon bulk-select\" onClick={bulkSelector}>\r\n                        <i className=\"fa fa-pencil-square-o\"></i>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"tableContainer table-outer\" style={{ height: gridHeight ? gridHeight : \"50vh\" }}>\r\n                <AutoSizer disableWidth disableResizing>\r\n                    {({ height }) => (\r\n                        <div {...getTableProps()} className=\"table\">\r\n                            <div className=\"thead table-row table-row--head\">\r\n                                {headerGroups.map((headerGroup) => (\r\n                                    <div {...headerGroup.getHeaderGroupProps()} className=\"tr\">\r\n                                        {headerGroup.headers.map((column) => (\r\n                                            <div {...column.getHeaderProps()} className=\"table-cell column-heading th\">\r\n                                                <div {...column.getSortByToggleProps()}>\r\n                                                    {column.render(\"Header\")}\r\n                                                    <span>\r\n                                                        {column.isSorted ? (\r\n                                                            column.isSortedDesc ? (\r\n                                                                <i className=\"fa fa-sort-desc\" aria-hidden=\"true\"></i>\r\n                                                            ) : (\r\n                                                                <i className=\"fa fa-sort-asc\" aria-hidden=\"true\"></i>\r\n                                                            )\r\n                                                        ) : (\r\n                                                            \"\"\r\n                                                        )}\r\n                                                    </span>\r\n                                                </div>\r\n                                                <div className={`txt-wrap column-filter ${isFilterOpen ? \"open\" : \"\"}`}>\r\n                                                    {!column.disableFilters ? column.render(\"Filter\") : null}\r\n                                                </div>\r\n                                                {column.canResize && <div {...column.getResizerProps()} className=\"resizer\" />}\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n                                ))}\r\n                            </div>\r\n                            <div {...getTableBodyProps()} className=\"tbody\">\r\n                                <List\r\n                                    ref={listRef}\r\n                                    className=\"table-list\"\r\n                                    height={height}\r\n                                    itemCount={rows.length}\r\n                                    itemSize={(index) => {\r\n                                        if (calculateRowHeight && typeof calculateRowHeight === \"function\") {\r\n                                            return calculateRowHeight(rows, index, headerGroups);\r\n                                        } else {\r\n                                            return 70;\r\n                                        }\r\n                                    }}\r\n                                    overscanCount={20}\r\n                                >\r\n                                    {RenderRow}\r\n                                </List>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </AutoSizer>\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Grid;\r\n"],"names":["RowSelector","memo","forwardRef","ref","indeterminate","rest","useState","checkValue","setCheckValue","defaultRef","useRef","resolvedRef","onChange","useEffect","current","React","DefaultColumnFilter","column","filterValue","setFilter","e","target","value","undefined","GlobalFilter","globalFilter","setGlobalFilter","setValue","useAsyncDebounce","listRef","createRef","Grid","props","title","gridHeight","columns","data","globalSearchLogic","updateCellData","selectBulkData","calculateRowHeight","renderExpandedContent","length","marginTop","textAlign","isFilterOpen","setFilterOpen","toggleColumnFilter","defaultColumn","useMemo","Filter","useTable","rows","useFilters","useGlobalFilter","useSortBy","useRowSelect","useFlexLayout","useResizeColumns","useExpanded","hooks","allColumns","push","id","disableResizing","disableFilters","disableSortBy","minWidth","width","maxWidth","Header","getToggleAllRowsSelectedProps","Cell","row","getToggleRowSelectedProps","getTableProps","getTableBodyProps","headerGroups","prepareRow","selectedFlatRows","state","RenderRow","useCallback","index","style","getRowProps","cells","map","cell","getCellProps","render","isExpanded","bulkSelector","resetAfterIndex","height","headerGroup","getHeaderGroupProps","headers","getHeaderProps","getSortByToggleProps","isSorted","isSortedDesc","canResize","getResizerProps","List"],"mappings":"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"}