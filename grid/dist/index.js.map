{"version":3,"file":"index.js","sources":["../src/Utilities/TagsContext.js","../src/Utilities/TagUtilities.js","../src/Functions/CellDisplayAndEditTag.js","../src/Functions/CellDisplayAndEdit.js","../src/Utilities/ColumnsUtilities.js","../src/Functions/AdditionalColumnTag.js","../src/Functions/RowSelector.js","../src/Functions/DefaultColumnFilter.js","../src/Functions/GlobalFilter.js","../src/Images/RowPin.png","../src/Functions/RowOptions.js","../src/Functions/RowEditTag.js","../src/Functions/RowEditOverlay.js","../src/Functions/RowDeleteOverLay.js","../src/Overlays/managecolumns/ItemTypes.js","../src/Overlays/managecolumns/columnItem.js","../src/Overlays/managecolumns/columnsList.js","../src/Overlays/managecolumns/index.js","../src/Overlays/groupsort/ItemTypes.js","../src/Overlays/groupsort/sortingItem.js","../src/Overlays/groupsort/sortingList.js","../src/Overlays/groupsort/index.js","../src/Overlays/exportdata/index.js","../src/Customgrid.js","../src/index.js"],"sourcesContent":["import { createContext } from \"react\";\r\n\r\nexport const CellDisplayAndEditContext = createContext({});\r\n\r\nexport const RowEditContext = createContext({});\r\n\r\nexport const AdditionalColumnContext = createContext({});\r\n","export const checkInnerCells = (column, cellKey) => {\r\n    if (column) {\r\n        const { innerCells } = column;\r\n        if (innerCells) {\r\n            const innerCellData = innerCells.find((cell) => {\r\n                return cell.accessor === cellKey;\r\n            });\r\n            if (innerCellData) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n};\r\n","import React, { useContext, Fragment } from \"react\";\r\nimport { CellDisplayAndEditContext } from \"../Utilities/TagsContext\";\r\nimport { checkInnerCells } from \"../Utilities/TagUtilities\";\r\n\r\nconst CellDisplayAndEditTag = (props) => {\r\n    const contextVallues = useContext(CellDisplayAndEditContext);\r\n    const { column, columns } = contextVallues;\r\n    const { cellKey, columnKey } = props;\r\n\r\n    if (columns && columnKey) {\r\n        const selectedColumn = columns.find(\r\n            (col) => col.accessor === columnKey\r\n        );\r\n        if (checkInnerCells(selectedColumn, cellKey)) {\r\n            return <Fragment> {props.children}</Fragment>;\r\n        }\r\n    } else if (cellKey) {\r\n        if (checkInnerCells(column, cellKey)) {\r\n            return <Fragment> {props.children}</Fragment>;\r\n        }\r\n    }\r\n    return null;\r\n};\r\n\r\nexport default CellDisplayAndEditTag;\r\n","import React, { memo, useState } from \"react\";\r\nimport ClickAwayListener from \"react-click-away-listener\";\r\nimport CellDisplayAndEditTag from \"./CellDisplayAndEditTag\";\r\nimport { CellDisplayAndEditContext } from \"../Utilities/TagsContext\";\r\n\r\nconst CellDisplayAndEdit = memo(({ row, columns, updateRowInGrid }) => {\r\n    const { column } = row;\r\n    if (column && row.row) {\r\n        const [isEditOpen, setIsEditOpen] = useState(false);\r\n        const [editedRowValue, setEditedRowValue] = useState(null);\r\n\r\n        const { id } = column;\r\n\r\n        const closeEdit = () => {\r\n            setIsEditOpen(false);\r\n        };\r\n\r\n        const openEdit = () => {\r\n            setIsEditOpen(true);\r\n        };\r\n\r\n        const getUpdatedRowValue = (value) => {\r\n            if (value) {\r\n                setEditedRowValue(value);\r\n            }\r\n        };\r\n\r\n        const saveEdit = () => {\r\n            if (editedRowValue) {\r\n                updateRowInGrid(row.row.original, editedRowValue);\r\n            }\r\n            closeEdit();\r\n        };\r\n\r\n        const originalRowValue = { ...row.row.original };\r\n        const cellDisplayContent = column.displayCell(\r\n            originalRowValue,\r\n            CellDisplayAndEditTag\r\n        );\r\n        const cellEditContent = column.editCell\r\n            ? column.editCell(\r\n                  originalRowValue,\r\n                  CellDisplayAndEditTag,\r\n                  getUpdatedRowValue\r\n              )\r\n            : null;\r\n        return (\r\n            <CellDisplayAndEditContext.Provider\r\n                value={{ columns: columns, column: column }}\r\n            >\r\n                <ClickAwayListener onClickAway={closeEdit}>\r\n                    <div\r\n                        className={`table-cell--content table-cell--content__${id}`}\r\n                    >\r\n                        {cellEditContent ? (\r\n                            <div className=\"cell-edit\" onClick={openEdit}>\r\n                                <i\r\n                                    className=\"fa fa-pencil\"\r\n                                    aria-hidden=\"true\"\r\n                                ></i>\r\n                            </div>\r\n                        ) : null}\r\n                        {cellDisplayContent}\r\n                        {isEditOpen ? (\r\n                            <div className=\"table-cell--content-edit\">\r\n                                {cellEditContent}\r\n                                <button className=\"ok\" onClick={saveEdit} />\r\n                                <button\r\n                                    className=\"cancel\"\r\n                                    onClick={closeEdit}\r\n                                />\r\n                            </div>\r\n                        ) : null}\r\n                    </div>\r\n                </ClickAwayListener>\r\n            </CellDisplayAndEditContext.Provider>\r\n        );\r\n    }\r\n});\r\n\r\nexport default CellDisplayAndEdit;\r\n","import React from \"react\";\r\nimport CellDisplayAndEdit from \"../Functions/CellDisplayAndEdit\";\r\n\r\nexport const extractColumns = (\r\n    columns,\r\n    searchColumn,\r\n    isDesktop,\r\n    updateRowInGrid\r\n) => {\r\n    //Remove iPad only columns from desktop and vice-versa\r\n    const filteredColumns = columns.filter((column) => {\r\n        return isDesktop ? !column.onlyInTablet : !column.onlyInDesktop;\r\n    });\r\n\r\n    let modifiedColumns = [];\r\n    //Loop through the columns configuration and create required column structure\r\n    filteredColumns.forEach((column, index) => {\r\n        const { innerCells, accessor, sortValue } = column;\r\n        const isInnerCellsPresent = innerCells && innerCells.length > 0;\r\n\r\n        //Add column Id\r\n        column.columnId = `column_${index}`;\r\n\r\n        //Configure Cell function (which is used by react-table component), based on the user defined function displayCell\r\n        if (!column.Cell && column.displayCell) {\r\n            column.Cell = (row) => {\r\n                return (\r\n                    <CellDisplayAndEdit\r\n                        row={row}\r\n                        columns={columns}\r\n                        updateRowInGrid={updateRowInGrid}\r\n                    />\r\n                );\r\n            };\r\n        }\r\n\r\n        //Add logic to sort column if sort is not disabled\r\n        if (!column.disableSortBy) {\r\n            if (isInnerCellsPresent) {\r\n                //If there are inner cells and a sort value specified, do sort on that value\r\n                if (sortValue) {\r\n                    column.sortType = (rowA, rowB) => {\r\n                        return rowA.original[accessor][sortValue] >\r\n                            rowB.original[accessor][sortValue]\r\n                            ? -1\r\n                            : 1;\r\n                    };\r\n                } else {\r\n                    column.disableSortBy = true;\r\n                }\r\n            } else if (!innerCells) {\r\n                //If no inner cells are there, just do sort on column value\r\n                column.sortType = (rowA, rowB) => {\r\n                    return rowA.original[accessor] > rowB.original[accessor]\r\n                        ? -1\r\n                        : 1;\r\n                };\r\n            }\r\n        }\r\n\r\n        //Add logic to filter column if column filter is not disabled\r\n        if (!column.disableFilters) {\r\n            column.filter = (rows, id, filterValue) => {\r\n                const searchText = filterValue ? filterValue.toLowerCase() : \"\";\r\n                return rows.filter((row) => {\r\n                    //Find original data value of each row\r\n                    const { original } = row;\r\n                    //Do search for the column\r\n                    return searchColumn(column, original, searchText);\r\n                });\r\n            };\r\n        }\r\n\r\n        modifiedColumns.push(column);\r\n    });\r\n    return modifiedColumns;\r\n};\r\n\r\nexport const extractAdditionalColumn = (additionalColumn, isDesktop) => {\r\n    const { innerCells } = additionalColumn;\r\n    const isInnerCellsPresent = innerCells && innerCells.length > 0;\r\n\r\n    //Add column Id\r\n    additionalColumn.columnId = `ExpandColumn`;\r\n\r\n    //Remove iPad only columns from desktop and vice-versa\r\n    if (isInnerCellsPresent) {\r\n        additionalColumn.innerCells = innerCells.filter((cell) => {\r\n            return isDesktop ? !cell.onlyInTablet : !cell.onlyInDesktop;\r\n        });\r\n    }\r\n    return additionalColumn;\r\n};\r\n","import React, { useContext, Fragment } from \"react\";\r\nimport { AdditionalColumnContext } from \"../Utilities/TagsContext\";\r\nimport { checkInnerCells } from \"../Utilities/TagUtilities\";\r\n\r\nconst AdditionalColumnTag = (props) => {\r\n    console.log(\"Inside additional tag\");\r\n    const contextVallues = useContext(AdditionalColumnContext);\r\n    const { additionalColumn } = contextVallues;\r\n    const { cellKey } = props;\r\n\r\n    if (additionalColumn && cellKey) {\r\n        if (checkInnerCells(additionalColumn, cellKey)) {\r\n            return <Fragment> {props.children}</Fragment>;\r\n        }\r\n    }\r\n    return null;\r\n};\r\n\r\nexport default AdditionalColumnTag;\r\n","import React, { forwardRef, useRef, useEffect, useState, memo } from \"react\";\r\n\r\nconst RowSelector = memo(\r\n    forwardRef(({ indeterminate, ...rest }, ref) => {\r\n        const [checkValue, setCheckValue] = useState(indeterminate);\r\n        const defaultRef = useRef();\r\n        const resolvedRef = ref || defaultRef;\r\n        const onChange = () => {\r\n            setCheckValue(!indeterminate);\r\n        };\r\n        useEffect(() => {\r\n            resolvedRef.current.indeterminate = indeterminate;\r\n        }, [resolvedRef, indeterminate]);\r\n        return (\r\n            <div className=\"check-wrap\">\r\n                <input\r\n                    type=\"checkbox\"\r\n                    checked={checkValue}\r\n                    onChange={onChange}\r\n                    ref={resolvedRef}\r\n                    {...rest}\r\n                />\r\n            </div>\r\n        );\r\n    })\r\n);\r\n\r\nexport default RowSelector;\r\n","import React, { memo } from \"react\";\r\n\r\nconst DefaultColumnFilter = memo(({ column: { filterValue, setFilter } }) => {\r\n    return (\r\n        <input\r\n            className=\"txt\"\r\n            value={filterValue || \"\"}\r\n            onChange={(e) => {\r\n                setFilter(e.target.value || undefined);\r\n            }}\r\n            placeholder=\"Search\"\r\n        />\r\n    );\r\n});\r\n\r\nexport default DefaultColumnFilter;\r\n","import React, { memo, useState } from \"react\";\r\nimport { useAsyncDebounce } from \"react-table\";\r\nimport IconSearch from \"../Images/icon-search.svg\";\r\n\r\nconst GlobalFilter = memo(({ globalFilter, setGlobalFilter }) => {\r\n    const [value, setValue] = useState(globalFilter);\r\n\r\n    const onChange = useAsyncDebounce((value) => {\r\n        setGlobalFilter(value || undefined);\r\n    }, 200);\r\n\r\n    return (\r\n        <div className=\"txt-wrap\">\r\n            <input\r\n                type=\"text\"\r\n                value={value || \"\"}\r\n                onChange={(e) => {\r\n                    setValue(e.target.value);\r\n                    onChange(e.target.value);\r\n                }}\r\n                className=\"txt\"\r\n                placeholder=\"Search\"\r\n            />\r\n            <i>\r\n                <img src={IconSearch} />\r\n            </i>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default GlobalFilter;\r\n","/* loaded by smart-asset */\nexport default require(\"./RowPin~qQRdvcXq.png\")","import React, { useState, memo } from \"react\";\r\nimport ClickAwayListener from \"react-click-away-listener\";\r\nimport RowDelete from \"../Images/RowDelete.svg\";\r\nimport RowEdit from \"../Images/RowEdit.svg\";\r\nimport RowPin from \"../Images/RowPin.png\";\r\n\r\nconst RowOptions = memo(({ row, bindRowEditOverlay, bindRowDeleteOverlay }) => {\r\n    const { original } = row;\r\n\r\n    const [isRowOptionsOpen, setRowOptionsOpen] = useState(false);\r\n\r\n    const openRowOptionsOverlay = () => {\r\n        setRowOptionsOpen(true);\r\n    };\r\n\r\n    const closeRowOptionsOverlay = () => {\r\n        setRowOptionsOpen(false);\r\n    };\r\n\r\n    const openRowEditOverlay = () => {\r\n        bindRowEditOverlay(original);\r\n        closeRowOptionsOverlay();\r\n    };\r\n\r\n    const openDeleteOverlay = () => {\r\n        bindRowDeleteOverlay(original);\r\n        closeRowOptionsOverlay();\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"row-options-wrap\">\r\n                <span\r\n                    className=\"icon-row-options\"\r\n                    onClick={openRowOptionsOverlay}\r\n                >\r\n                    <i></i>\r\n                    <i></i>\r\n                    <i></i>\r\n                </span>\r\n                {isRowOptionsOpen ? (\r\n                    <ClickAwayListener onClickAway={closeRowOptionsOverlay}>\r\n                        <div className=\"row-options-overlay\">\r\n                            <ul>\r\n                                <li>\r\n                                    <span onClick={openRowEditOverlay}>\r\n                                        <i>\r\n                                            <img src={RowEdit} alt=\"cargo\" />\r\n                                        </i>\r\n                                        <span>Edit</span>\r\n                                    </span>\r\n                                </li>\r\n                                <li>\r\n                                    <span>\r\n                                        <i>\r\n                                            <img\r\n                                                src={RowPin}\r\n                                                alt=\"cargo\"\r\n                                                width=\"15\"\r\n                                                height=\"15\"\r\n                                            />\r\n                                        </i>\r\n                                        <span>Pin This row</span>\r\n                                    </span>\r\n                                </li>\r\n                                <li>\r\n                                    <span onClick={openDeleteOverlay}>\r\n                                        <i>\r\n                                            <img src={RowDelete} alt=\"cargo\" />\r\n                                        </i>\r\n                                        <span>Delete</span>\r\n                                    </span>\r\n                                </li>\r\n                            </ul>\r\n                            <span\r\n                                className=\"close\"\r\n                                onClick={closeRowOptionsOverlay}\r\n                            >\r\n                                <i className=\"fa fa-close\"></i>\r\n                            </span>\r\n                        </div>\r\n                    </ClickAwayListener>\r\n                ) : null}\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default RowOptions;\r\n","import React, { useContext, Fragment } from \"react\";\r\nimport { RowEditContext } from \"../Utilities/TagsContext\";\r\nimport { checkInnerCells } from \"../Utilities/TagUtilities\";\r\n\r\nconst RowEditTag = (props) => {\r\n    const contextVallues = useContext(RowEditContext);\r\n    const { columns, additionalColumn, isRowExpandEnabled } = contextVallues;\r\n    const { cellKey, columnKey } = props;\r\n\r\n    if (columns && columnKey) {\r\n        const selectedColumn = columns.find(\r\n            (col) => col.accessor === columnKey\r\n        );\r\n        if (selectedColumn && cellKey) {\r\n            if (checkInnerCells(selectedColumn, cellKey)) {\r\n                return <Fragment> {props.children}</Fragment>;\r\n            }\r\n        } else if (!selectedColumn && isRowExpandEnabled && additionalColumn) {\r\n            if (checkInnerCells(additionalColumn, columnKey)) {\r\n                return <Fragment> {props.children}</Fragment>;\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n};\r\n\r\nexport default RowEditTag;\r\n","import React, { memo, useState } from \"react\";\r\nimport { RowEditContext } from \"../Utilities/TagsContext\";\r\nimport RowEditTag from \"./RowEditTag\";\r\nimport ClickAwayListener from \"react-click-away-listener\";\r\n\r\nconst RowEditOverLay = memo(\r\n    ({\r\n        row,\r\n        columns,\r\n        isRowExpandEnabled,\r\n        additionalColumn,\r\n        getRowEditOverlay,\r\n        closeRowEditOverlay,\r\n        updateRowInGrid\r\n    }) => {\r\n        const [editedRowValue, setEditedRowValue] = useState(null);\r\n\r\n        const getUpdatedRowValue = (value) => {\r\n            if (value) {\r\n                setEditedRowValue(value);\r\n            }\r\n        };\r\n\r\n        const saveRowEdit = () => {\r\n            if (editedRowValue) {\r\n                updateRowInGrid(row, editedRowValue);\r\n            }\r\n            closeRowEditOverlay();\r\n        };\r\n\r\n        const originalRowValue = { ...row };\r\n        const rowEditContent = getRowEditOverlay(\r\n            originalRowValue,\r\n            RowEditTag,\r\n            getUpdatedRowValue\r\n        );\r\n        return (\r\n            <RowEditContext.Provider\r\n                value={{\r\n                    columns: columns,\r\n                    additionalColumn: additionalColumn,\r\n                    isRowExpandEnabled: isRowExpandEnabled\r\n                }}\r\n            >\r\n                <ClickAwayListener onClickAway={closeRowEditOverlay}>\r\n                    <div className=\"row-option-action-overlay\">\r\n                        {rowEditContent}\r\n                        <div className=\"cancel-save-buttons\">\r\n                            <button\r\n                                className=\"save-Button\"\r\n                                onClick={saveRowEdit}\r\n                            >\r\n                                Save\r\n                            </button>\r\n                            <button\r\n                                className=\"cancel-Button\"\r\n                                onClick={closeRowEditOverlay}\r\n                            >\r\n                                Cancel\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </ClickAwayListener>\r\n            </RowEditContext.Provider>\r\n        );\r\n    }\r\n);\r\n\r\nexport default RowEditOverLay;\r\n","import React, { memo } from \"react\";\r\nimport ClickAwayListener from \"react-click-away-listener\";\r\n\r\nconst RowDeleteOverLay = memo(\r\n    ({ row, closeRowDeleteOverlay, deleteRowFromGrid }) => {\r\n        const deleteRow = () => {\r\n            if (row) {\r\n                deleteRowFromGrid(row);\r\n            }\r\n            closeRowDeleteOverlay();\r\n        };\r\n\r\n        return (\r\n            <ClickAwayListener onClickAway={closeRowDeleteOverlay}>\r\n                <div className=\"row-option-action-overlay delete\">\r\n                    <div className=\"cancel-save-buttons-delete\">\r\n                        <button className=\"delete-Button\" onClick={deleteRow}>\r\n                            Delete\r\n                        </button>\r\n                        <button\r\n                            className=\"cancel-Button\"\r\n                            onClick={closeRowDeleteOverlay}\r\n                        >\r\n                            Cancel\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </ClickAwayListener>\r\n        );\r\n    }\r\n);\r\n\r\nexport default RowDeleteOverLay;\r\n","export const ItemTypes = {\r\n    COLUMN: \"column\"\r\n};\r\n","import React from \"react\";\r\nimport { useDrag, useDrop } from \"react-dnd\";\r\nimport { ItemTypes } from \"./ItemTypes\";\r\n\r\nconst ColumnItem = ({\r\n    id,\r\n    Header,\r\n    moveColumn,\r\n    findColumn,\r\n    originalInnerCells,\r\n    isInnerCellSelected,\r\n    selectInnerCells\r\n}) => {\r\n    const originalIndex = findColumn(id).index;\r\n\r\n    const [{ isDragging }, drag] = useDrag({\r\n        item: { type: ItemTypes.COLUMN, id, originalIndex },\r\n        collect: (monitor) => ({\r\n            isDragging: monitor.isDragging()\r\n        }),\r\n        end: (dropResult, monitor) => {\r\n            const { id: droppedId, originalIndex } = monitor.getItem();\r\n            const didDrop = monitor.didDrop();\r\n            if (!didDrop) {\r\n                moveColumn(droppedId, originalIndex);\r\n            }\r\n        }\r\n    });\r\n\r\n    const [, drop] = useDrop({\r\n        accept: ItemTypes.COLUMN,\r\n        canDrop: () => false,\r\n        hover({ id: draggedId }) {\r\n            if (draggedId !== id) {\r\n                const { index: overIndex } = findColumn(id);\r\n                moveColumn(draggedId, overIndex);\r\n            }\r\n        }\r\n    });\r\n\r\n    const opacity = isDragging ? 0.1 : 1;\r\n\r\n    return (\r\n        <div style={{ opacity }}>\r\n            <div className=\"column__reorder\">\r\n                <div\r\n                    ref={(node) => drag(drop(node))}\r\n                    style={{ cursor: \"move\" }}\r\n                    className=\"\"\r\n                >\r\n                    <i className=\"fa fa-align-justify\" aria-hidden=\"true\"></i>\r\n                </div>\r\n                <div className=\"\">{Header}</div>\r\n                <div className=\"column__innerCells__wrap\">\r\n                    {originalInnerCells && originalInnerCells.length > 0\r\n                        ? originalInnerCells.map((cell, index) => {\r\n                              return (\r\n                                  <div className=\"column__wrap\" key={index}>\r\n                                      <div className=\"column__checkbox\">\r\n                                          <input\r\n                                              type=\"checkbox\"\r\n                                              data-columnheader={Header}\r\n                                              value={cell.Header}\r\n                                              checked={isInnerCellSelected(\r\n                                                  Header,\r\n                                                  cell.Header\r\n                                              )}\r\n                                              onChange={selectInnerCells}\r\n                                          ></input>\r\n                                      </div>\r\n                                      <div className=\"column__txt\">\r\n                                          {cell.Header}\r\n                                      </div>\r\n                                  </div>\r\n                              );\r\n                          })\r\n                        : null}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ColumnItem;\r\n","import React from \"react\";\r\nimport { useDrop } from \"react-dnd\";\r\nimport update from \"immutability-helper\";\r\nimport { ItemTypes } from \"./ItemTypes\";\r\nimport ColumnItem from \"./columnItem\";\r\n\r\nconst ColumnsList = (props) => {\r\n    const {\r\n        updateColumnsInState,\r\n        columnsToManage,\r\n        isInnerCellSelected,\r\n        selectInnerCells\r\n    } = props;\r\n\r\n    const moveColumn = (columnId, atIndex) => {\r\n        const { column, index } = findColumn(columnId);\r\n        updateColumnsInState(\r\n            update(columnsToManage, {\r\n                $splice: [\r\n                    [index, 1],\r\n                    [atIndex, 0, column]\r\n                ]\r\n            })\r\n        );\r\n    };\r\n\r\n    const findColumn = (columnId) => {\r\n        const column = columnsToManage.filter(\r\n            (c) => `${c.columnId}` === columnId\r\n        )[0];\r\n        return {\r\n            column,\r\n            index: columnsToManage.indexOf(column)\r\n        };\r\n    };\r\n\r\n    const [, drop] = useDrop({ accept: ItemTypes.COLUMN });\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div ref={drop} style={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n                {columnsToManage.map((column, index) => {\r\n                    return (\r\n                        <ColumnItem\r\n                            key={index}\r\n                            id={`${column.columnId}`}\r\n                            Header={`${column.Header}`}\r\n                            moveColumn={moveColumn}\r\n                            findColumn={findColumn}\r\n                            originalInnerCells={column.originalInnerCells}\r\n                            isInnerCellSelected={isInnerCellSelected}\r\n                            selectInnerCells={selectInnerCells}\r\n                        />\r\n                    );\r\n                })}\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default ColumnsList;\r\n","import React, { memo, useState } from \"react\";\r\nimport { DndProvider } from \"react-dnd\";\r\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\r\nimport { TouchBackend } from \"react-dnd-touch-backend\";\r\nimport MultiBackend, { TouchTransition } from \"react-dnd-multi-backend\";\r\nimport ClickAwayListener from \"react-click-away-listener\";\r\nimport ColumnsList from \"./columnsList\";\r\n\r\nconst ColumnReordering = memo((props) => {\r\n    const {\r\n        isManageColumnOpen,\r\n        toggleManageColumns,\r\n        originalColumns,\r\n        isExpandContentAvailable,\r\n        additionalColumn\r\n    } = props;\r\n\r\n    const additionalColumnHeader =\r\n        additionalColumn && additionalColumn.length\r\n            ? additionalColumn[0].Header\r\n            : \"\";\r\n    const getRemarksColumnIfAvailable = () => {\r\n        return isExpandContentAvailable ? additionalColumn : [];\r\n    };\r\n\r\n    const concatedOriginalColumns = originalColumns.concat(\r\n        getRemarksColumnIfAvailable()\r\n    );\r\n\r\n    const [managedColumns, setManagedColumns] = useState(originalColumns);\r\n    const [searchedColumns, setSearchedColumns] = useState(\r\n        concatedOriginalColumns\r\n    );\r\n    const [remarksColumnToManage, setRemarksColumnToManage] = useState(\r\n        getRemarksColumnIfAvailable\r\n    );\r\n    const [isErrorDisplayed, setIsErrorDisplayed] = useState(false);\r\n\r\n    const HTML5toTouch = {\r\n        backends: [\r\n            {\r\n                backend: HTML5Backend\r\n            },\r\n            {\r\n                backend: TouchBackend,\r\n                options: { enableMouseEvents: true },\r\n                preview: true,\r\n                transition: TouchTransition\r\n            }\r\n        ]\r\n    };\r\n\r\n    const filterColumnsList = (event) => {\r\n        let { value } = event ? event.target : \"\";\r\n        value = value ? value.toLowerCase() : \"\";\r\n        if (value != \"\") {\r\n            setSearchedColumns(\r\n                originalColumns\r\n                    .filter((column) => {\r\n                        return column.Header.toLowerCase().includes(value);\r\n                    })\r\n                    .concat(\r\n                        getRemarksColumnIfAvailable().filter((column) => {\r\n                            return column.Header.toLowerCase().includes(value);\r\n                        })\r\n                    )\r\n            );\r\n        } else {\r\n            setSearchedColumns(concatedOriginalColumns);\r\n        }\r\n    };\r\n\r\n    const updateColumnsInState = (columns) => {\r\n        setManagedColumns(columns);\r\n    };\r\n\r\n    const findColumn = (columnList, columnHeader) => {\r\n        return columnList.find((column) => {\r\n            return column.Header === columnHeader;\r\n        });\r\n    };\r\n\r\n    const isItemPresentInList = (list, headerValue) => {\r\n        const filteredList = list.filter((item) => {\r\n            return item.Header === headerValue;\r\n        });\r\n        return filteredList && filteredList.length > 0;\r\n    };\r\n\r\n    const isCheckboxSelected = (header) => {\r\n        if (header === additionalColumnHeader) {\r\n            return remarksColumnToManage.length > 0;\r\n        } else if (header === \"Select All\") {\r\n            return (\r\n                searchedColumns.length ===\r\n                managedColumns.length + remarksColumnToManage.length\r\n            );\r\n        } else {\r\n            return isItemPresentInList(managedColumns, header);\r\n        }\r\n    };\r\n\r\n    const isInnerCellSelected = (columnHeader, header) => {\r\n        const columnListToSearch =\r\n            columnHeader === additionalColumnHeader\r\n                ? remarksColumnToManage\r\n                : managedColumns;\r\n        const selectedColumn = findColumn(columnListToSearch, columnHeader);\r\n        return isItemPresentInList(selectedColumn.innerCells, header);\r\n    };\r\n\r\n    const findIndexOfItem = (\r\n        type,\r\n        columnsList,\r\n        indexOfColumnToAdd,\r\n        columnHeader,\r\n        originalInnerCells\r\n    ) => {\r\n        if (type === \"column\") {\r\n            return columnsList.findIndex((column) => {\r\n                return (\r\n                    column.Header === originalColumns[indexOfColumnToAdd].Header\r\n                );\r\n            });\r\n        } else {\r\n            return findColumn(columnsList, columnHeader).innerCells.findIndex(\r\n                (cell) => {\r\n                    return (\r\n                        cell.Header ===\r\n                        originalInnerCells[indexOfColumnToAdd].Header\r\n                    );\r\n                }\r\n            );\r\n        }\r\n    };\r\n\r\n    const selectAllColumns = (event) => {\r\n        if (event.currentTarget.checked) {\r\n            setManagedColumns(originalColumns);\r\n            setRemarksColumnToManage(getRemarksColumnIfAvailable());\r\n        } else {\r\n            setManagedColumns([]);\r\n            setRemarksColumnToManage([]);\r\n        }\r\n    };\r\n\r\n    const selectSingleColumn = (event) => {\r\n        const { currentTarget } = event;\r\n        const { checked, value } = currentTarget;\r\n\r\n        if (value === additionalColumnHeader) {\r\n            if (checked) {\r\n                setRemarksColumnToManage(additionalColumn);\r\n            } else {\r\n                setRemarksColumnToManage([]);\r\n            }\r\n        } else {\r\n            //If column checkbox is checked\r\n            if (checked) {\r\n                //Find the index of selected column from original column array and also find the user selected column\r\n                let indexOfColumnToAdd = originalColumns.findIndex((column) => {\r\n                    return column.Header === value;\r\n                });\r\n                const itemToAdd = originalColumns[indexOfColumnToAdd];\r\n\r\n                //Loop through the managedColumns array to find the position of the column that is present previous to the user selected column\r\n                //Find index of that previous column in original column list and push the new column next to that position\r\n                let prevItemIndex = -1;\r\n                while (indexOfColumnToAdd > 0 && prevItemIndex === -1) {\r\n                    indexOfColumnToAdd = indexOfColumnToAdd - 1;\r\n                    prevItemIndex = findIndexOfItem(\r\n                        \"column\",\r\n                        managedColumns,\r\n                        indexOfColumnToAdd\r\n                    );\r\n                }\r\n\r\n                const newColumnsList = [...managedColumns];\r\n                newColumnsList.splice(prevItemIndex + 1, 0, itemToAdd);\r\n                setManagedColumns(newColumnsList);\r\n            } else {\r\n                setManagedColumns(\r\n                    managedColumns.filter((column) => {\r\n                        return column.Header !== value;\r\n                    })\r\n                );\r\n            }\r\n        }\r\n    };\r\n\r\n    const findAndSelectInnerCells = (\r\n        stateColumnList,\r\n        setStateColumnList,\r\n        event\r\n    ) => {\r\n        const { currentTarget } = event;\r\n        const { checked, dataset, value } = currentTarget;\r\n        const { columnheader } = dataset;\r\n\r\n        //Find the column in which checked/unchecked inner cell is present\r\n        const selectedColumn = findColumn(stateColumnList, columnheader);\r\n        const { originalInnerCells } = selectedColumn;\r\n        if (originalInnerCells && originalInnerCells.length > 0) {\r\n            if (checked) {\r\n                //Find the index of selected column from original column array and also find the user selected column\r\n                let indexOfColumnToAdd = originalInnerCells.findIndex(\r\n                    (column) => {\r\n                        return column.Header === value;\r\n                    }\r\n                );\r\n                const itemToAdd = originalInnerCells[indexOfColumnToAdd];\r\n\r\n                //Loop through the stateColumnList array to find the position of the column that is present previous to the user selected column\r\n                //Find index of that previous column and push the new column to add in that position\r\n                let prevItemIndex = -1;\r\n                while (indexOfColumnToAdd > 0 && prevItemIndex === -1) {\r\n                    indexOfColumnToAdd = indexOfColumnToAdd - 1;\r\n                    prevItemIndex = findIndexOfItem(\r\n                        \"innercell\",\r\n                        stateColumnList,\r\n                        indexOfColumnToAdd,\r\n                        columnheader,\r\n                        originalInnerCells\r\n                    );\r\n                }\r\n\r\n                const newColumnsList = [...stateColumnList];\r\n                findColumn(newColumnsList, columnheader).innerCells.splice(\r\n                    prevItemIndex + 1,\r\n                    0,\r\n                    itemToAdd\r\n                );\r\n                setStateColumnList(newColumnsList);\r\n            } else {\r\n                setStateColumnList(\r\n                    stateColumnList.map((column) => {\r\n                        if (column.Header === columnheader) {\r\n                            column.innerCells = column.innerCells.filter(\r\n                                (cell) => {\r\n                                    return cell.Header !== value;\r\n                                }\r\n                            );\r\n                        }\r\n                        return column;\r\n                    })\r\n                );\r\n            }\r\n        }\r\n    };\r\n\r\n    const selectInnerCells = (event) => {\r\n        findAndSelectInnerCells(managedColumns, setManagedColumns, event);\r\n    };\r\n\r\n    const selectRemarksInnerCells = (event) => {\r\n        findAndSelectInnerCells(\r\n            remarksColumnToManage,\r\n            setRemarksColumnToManage,\r\n            event\r\n        );\r\n    };\r\n\r\n    const doColumnUpdate = () => {\r\n        setIsErrorDisplayed(false);\r\n        if (managedColumns && managedColumns.length > 0) {\r\n            setSearchedColumns(concatedOriginalColumns);\r\n            props.updateColumnStructure(managedColumns, remarksColumnToManage);\r\n            toggleManageColumns();\r\n        } else {\r\n            setIsErrorDisplayed(true);\r\n        }\r\n    };\r\n\r\n    const resetInnerCells = (columnList) => {\r\n        if (columnList && columnList.length) {\r\n            return columnList.map((column) => {\r\n                column.innerCells = column.originalInnerCells;\r\n                return column;\r\n            });\r\n        }\r\n        return columnList;\r\n    };\r\n\r\n    const resetColumnUpdate = () => {\r\n        setManagedColumns(resetInnerCells(originalColumns));\r\n        setSearchedColumns(\r\n            originalColumns.concat(getRemarksColumnIfAvailable())\r\n        );\r\n        setRemarksColumnToManage(\r\n            resetInnerCells(getRemarksColumnIfAvailable())\r\n        );\r\n        setIsErrorDisplayed(false);\r\n        props.updateColumnStructure(\r\n            originalColumns,\r\n            getRemarksColumnIfAvailable()\r\n        );\r\n    };\r\n\r\n    if (isManageColumnOpen) {\r\n        return (\r\n            <ClickAwayListener onClickAway={toggleManageColumns}>\r\n                <div className=\"neo-popover neo-popover--column columns--grid\">\r\n                    <div className=\"neo-popover__column column__grid\">\r\n                        <div className=\"column__chooser\">\r\n                            <div className=\"column__header\">\r\n                                <div className=\"\">\r\n                                    <strong>Column Chooser</strong>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"column__body\">\r\n                                <div>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        placeholder=\"Search column\"\r\n                                        className=\"custom__ctrl\"\r\n                                        onChange={filterColumnsList}\r\n                                    ></input>\r\n                                </div>\r\n                                <div className=\"column__selectAll\">\r\n                                    <div className=\"column__checkbox\">\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            value=\"Select All\"\r\n                                            checked={isCheckboxSelected(\r\n                                                \"Select All\"\r\n                                            )}\r\n                                            onChange={selectAllColumns}\r\n                                        ></input>\r\n                                    </div>\r\n                                    <div className=\"column__selectTxt\">\r\n                                        Select All\r\n                                    </div>\r\n                                </div>\r\n                                {searchedColumns.map((column, index) => {\r\n                                    return (\r\n                                        <div\r\n                                            className=\"column__wrap\"\r\n                                            key={index}\r\n                                        >\r\n                                            <div className=\"column__checkbox\">\r\n                                                <input\r\n                                                    type=\"checkbox\"\r\n                                                    value={column.Header}\r\n                                                    checked={isCheckboxSelected(\r\n                                                        column.Header\r\n                                                    )}\r\n                                                    onChange={\r\n                                                        selectSingleColumn\r\n                                                    }\r\n                                                ></input>\r\n                                            </div>\r\n                                            <div className=\"column__txt\">\r\n                                                {column.Header}\r\n                                            </div>\r\n                                        </div>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"column__settings\">\r\n                            <div className=\"column__header\">\r\n                                <div className=\"column__headerTxt\">\r\n                                    <strong>Column Settings</strong>\r\n                                    {isErrorDisplayed ? (\r\n                                        <strong\r\n                                            style={{\r\n                                                marginLeft: \"10px\",\r\n                                                color: \"red\"\r\n                                            }}\r\n                                        >\r\n                                            Select at least one column (other\r\n                                            than {additionalColumnHeader})\r\n                                        </strong>\r\n                                    ) : null}\r\n                                </div>\r\n                                <div\r\n                                    className=\"column__close\"\r\n                                    onClick={toggleManageColumns}\r\n                                >\r\n                                    <i\r\n                                        className=\"fa fa-times\"\r\n                                        aria-hidden=\"true\"\r\n                                    ></i>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"column__body\">\r\n                                <DndProvider\r\n                                    backend={MultiBackend}\r\n                                    options={HTML5toTouch}\r\n                                >\r\n                                    <ColumnsList\r\n                                        columnsToManage={managedColumns}\r\n                                        updateColumnsInState={\r\n                                            updateColumnsInState\r\n                                        }\r\n                                        isInnerCellSelected={\r\n                                            isInnerCellSelected\r\n                                        }\r\n                                        selectInnerCells={selectInnerCells}\r\n                                    />\r\n                                </DndProvider>\r\n                                {remarksColumnToManage &&\r\n                                remarksColumnToManage.length > 0 ? (\r\n                                    <div className=\"column__reorder full-width\">\r\n                                        <div className=\"\">\r\n                                            {remarksColumnToManage[0].Header}\r\n                                        </div>\r\n                                        <div className=\"column__innerCells__wrap\">\r\n                                            {remarksColumnToManage[0]\r\n                                                .originalInnerCells &&\r\n                                            remarksColumnToManage[0]\r\n                                                .originalInnerCells.length > 0\r\n                                                ? remarksColumnToManage[0].originalInnerCells.map(\r\n                                                      (cell, index) => {\r\n                                                          return (\r\n                                                              <div\r\n                                                                  className=\"column__wrap\"\r\n                                                                  key={index}\r\n                                                              >\r\n                                                                  <div className=\"column__checkbox\">\r\n                                                                      <input\r\n                                                                          type=\"checkbox\"\r\n                                                                          data-columnheader={\r\n                                                                              remarksColumnToManage[0]\r\n                                                                                  .Header\r\n                                                                          }\r\n                                                                          value={\r\n                                                                              cell.Header\r\n                                                                          }\r\n                                                                          checked={isInnerCellSelected(\r\n                                                                              remarksColumnToManage[0]\r\n                                                                                  .Header,\r\n                                                                              cell.Header\r\n                                                                          )}\r\n                                                                          onChange={\r\n                                                                              selectRemarksInnerCells\r\n                                                                          }\r\n                                                                      ></input>\r\n                                                                  </div>\r\n                                                                  <div className=\"column__txt\">\r\n                                                                      {\r\n                                                                          cell.Header\r\n                                                                      }\r\n                                                                  </div>\r\n                                                              </div>\r\n                                                          );\r\n                                                      }\r\n                                                  )\r\n                                                : null}\r\n                                        </div>\r\n                                    </div>\r\n                                ) : null}\r\n                            </div>\r\n                            <div className=\"column__footer\">\r\n                                <div className=\"column__btns\">\r\n                                    <button\r\n                                        className=\"btns\"\r\n                                        onClick={resetColumnUpdate}\r\n                                    >\r\n                                        Reset\r\n                                    </button>\r\n                                    <button\r\n                                        className=\"btns\"\r\n                                        onClick={toggleManageColumns}\r\n                                    >\r\n                                        Cancel\r\n                                    </button>\r\n                                    <button\r\n                                        className=\"btns btns__save\"\r\n                                        onClick={doColumnUpdate}\r\n                                    >\r\n                                        Save\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </ClickAwayListener>\r\n        );\r\n    } else {\r\n        return <div></div>;\r\n    }\r\n});\r\n\r\nexport default ColumnReordering;\r\n","export const ItemTypes = {\n    SORT_ITEM: \"SORT_ITEM\"\n};\n","import React from \"react\";\nimport { useDrag, useDrop } from \"react-dnd\";\nimport { ItemTypes } from \"./ItemTypes\";\nimport SortCopy from \"../../Images/SortCopy.svg\";\nimport SortDelete from \"../../Images/SortDelete.svg\";\n\nconst SortItem = ({\n    id,\n    sortOption,\n    originalColumns,\n    moveSort,\n    findSort,\n    updateSingleSortingOption,\n    copySortOption,\n    deleteSortOption\n}) => {\n    const originalIndex = findSort(id).index;\n\n    const [{ isDragging }, drag] = useDrag({\n        item: { type: ItemTypes.SORT_ITEM, id, originalIndex },\n        collect: (monitor) => ({\n            isDragging: monitor.isDragging()\n        }),\n        end: (dropResult, monitor) => {\n            const { id: droppedId, originalIndex } = monitor.getItem();\n            const didDrop = monitor.didDrop();\n            if (!didDrop) {\n                moveSort(droppedId, originalIndex);\n            }\n        }\n    });\n\n    const [, drop] = useDrop({\n        accept: ItemTypes.SORT_ITEM,\n        canDrop: () => false,\n        hover({ id: draggedId }) {\n            if (draggedId !== id) {\n                const { index: overIndex } = findSort(id);\n                moveSort(draggedId, overIndex);\n            }\n        }\n    });\n\n    const getInncerCellsOfColumn = (columnAccessor) => {\n        return originalColumns.find((column) => {\n            return column.accessor === columnAccessor;\n        }).innerCells;\n    };\n\n    const changeSortByOptions = (event) => {\n        const newSortByValue = event.target.value;\n        const innerCellsList = getInncerCellsOfColumn(newSortByValue);\n        updateSingleSortingOption(\n            id,\n            newSortByValue,\n            innerCellsList && innerCellsList.length > 0\n                ? innerCellsList[0].accessor\n                : \"value\",\n            sortOption.order\n        );\n    };\n\n    const changeSortOnOptions = (event) => {\n        const newSortOnValue = event.target.value;\n        updateSingleSortingOption(\n            id,\n            sortOption.sortBy,\n            newSortOnValue,\n            sortOption.order\n        );\n    };\n\n    const changeSortOrderOptions = (event) => {\n        const newSortOrderValue = event.target.value;\n        updateSingleSortingOption(\n            id,\n            sortOption.sortBy,\n            sortOption.sortOn,\n            newSortOrderValue\n        );\n    };\n\n    const copySort = () => {\n        copySortOption(id);\n    };\n\n    const deleteSort = () => {\n        deleteSortOption(id);\n    };\n\n    const opacity = isDragging ? 0.5 : 1;\n\n    return (\n        <div className=\"sort__bodyContent\" style={{ opacity }}>\n            <div className=\"sort__reorder\">\n                <div\n                    ref={(node) => drag(drop(node))}\n                    style={{ cursor: \"move\" }}\n                    className=\"\"\n                >\n                    <i className=\"fa fa-navicon\"></i>\n                </div>\n            </div>\n\n            <div className=\"sort__reorder\">\n                <div className=\"sort__file\">\n                    <select\n                        className=\"custom__ctrl\"\n                        onChange={changeSortByOptions}\n                        value={sortOption.sortBy}\n                    >\n                        {originalColumns.map((orgItem, index) => (\n                            <option key={index} value={orgItem.accessor}>\n                                {orgItem.Header}\n                            </option>\n                        ))}\n                    </select>\n                </div>\n            </div>\n            <div className=\"sort__reorder\">\n                <div className=\"sort__file\">\n                    <select\n                        className=\"custom__ctrl\"\n                        onChange={changeSortOnOptions}\n                        value={sortOption.sortOn}\n                    >\n                        {getInncerCellsOfColumn(sortOption.sortBy) &&\n                        getInncerCellsOfColumn(sortOption.sortBy).length > 0 ? (\n                            getInncerCellsOfColumn(sortOption.sortBy).map(\n                                (innerCellItem, innerCellIndex) => (\n                                    <option\n                                        key={innerCellIndex}\n                                        value={innerCellItem.accessor}\n                                    >\n                                        {innerCellItem.Header}\n                                    </option>\n                                )\n                            )\n                        ) : (\n                            <option key={0} value=\"value\">\n                                Value\n                            </option>\n                        )}\n                    </select>\n                </div>\n            </div>\n            <div className=\"sort__reorder\">\n                <div className=\"sort__file\">\n                    <select\n                        className=\"custom__ctrl\"\n                        value={sortOption.order}\n                        onChange={changeSortOrderOptions}\n                    >\n                        <option>Ascending</option>\n                        <option>Descending</option>\n                    </select>\n                </div>\n            </div>\n            <div className=\"sort__reorder\">\n                <div className=\"sort__icon\" type={\"button\"} onClick={copySort}>\n                    <i>\n                        <img src={SortCopy} alt=\"copy sort\" />\n                    </i>\n                </div>\n            </div>\n            <div className=\"sort__reorder\">\n                <div\n                    className=\"sort__icon\"\n                    type={\"button\"}\n                    onClick={deleteSort}\n                >\n                    <i>\n                        <img src={SortDelete} alt=\"copy sort\" />\n                    </i>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default SortItem;\n","import React from \"react\";\nimport { useDrop } from \"react-dnd\";\nimport update from \"immutability-helper\";\nimport { ItemTypes } from \"./ItemTypes\";\nimport SortItem from \"./sortingItem\";\n\nconst SortingList = (props) => {\n    const { updateSortingOptions, sortOptions } = props;\n\n    const moveSort = (sortId, atIndex) => {\n        const { sort, index } = findSort(sortId);\n        updateSortingOptions(\n            update(sortOptions, {\n                $splice: [\n                    [index, 1],\n                    [atIndex, 0, sort]\n                ]\n            })\n        );\n    };\n\n    const findSort = (sortId) => {\n        const sort = sortOptions.filter((c, index) => index === sortId)[0];\n        return {\n            sort,\n            index: sortOptions.indexOf(sort)\n        };\n    };\n\n    const [, drop] = useDrop({ accept: ItemTypes.SORT_ITEM });\n\n    return (\n        <React.Fragment>\n            <div ref={drop} style={{ display: \"flex\", flexWrap: \"wrap\" }}>\n                {sortOptions && sortOptions.length > 0 ? (\n                    <ul>\n                        <li>Sort By</li>\n                        <li>Sort On</li>\n                        <li>Order</li>\n                    </ul>\n                ) : null}\n                {sortOptions.map((sortOption, index) => {\n                    return (\n                        <SortItem\n                            id={index}\n                            key={index}\n                            sortOption={sortOption}\n                            originalColumns={props.originalColumns}\n                            moveSort={moveSort}\n                            findSort={findSort}\n                            updateSingleSortingOption={\n                                props.updateSingleSortingOption\n                            }\n                            copySortOption={props.copySortOption}\n                            deleteSortOption={props.deleteSortOption}\n                        />\n                    );\n                })}\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default SortingList;\n","import React, { memo, useState } from \"react\";\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { TouchBackend } from \"react-dnd-touch-backend\";\nimport MultiBackend, { TouchTransition } from \"react-dnd-multi-backend\";\nimport ClickAwayListener from \"react-click-away-listener\";\nimport SortingList from \"./sortingList\";\n\nconst GroupSort = memo((props) => {\n    const {\n        isGroupSortOverLayOpen,\n        toggleGroupSortOverLay,\n        applyGroupSort,\n        originalColumns\n    } = props;\n\n    const sortingOrders = [\"Ascending\", \"Descending\"];\n    const defaultSortingOption = [\n        {\n            sortBy: originalColumns[0].accessor,\n            sortOn: originalColumns[0].innerCells\n                ? originalColumns[0].innerCells[0].accessor\n                : \"value\",\n            order: sortingOrders[0]\n        }\n    ];\n\n    const [sortOptions, setSortOptions] = useState([]);\n    const [isErrorDisplayed, setIsErrorDisplayed] = useState(false);\n\n    const HTML5toTouch = {\n        backends: [\n            {\n                backend: HTML5Backend\n            },\n            {\n                backend: TouchBackend,\n                options: { enableMouseEvents: true },\n                preview: true,\n                transition: TouchTransition\n            }\n        ]\n    };\n\n    const updateSortingOptions = (sortingOptions) => {\n        setSortOptions(sortingOptions);\n    };\n\n    const addSortingOptions = () => {\n        setSortOptions([...sortOptions, ...defaultSortingOption]);\n    };\n\n    const clearSortingOptions = () => {\n        setSortOptions([]);\n        applyGroupSort([]);\n    };\n\n    const updateSingleSortingOption = (\n        sortIndex,\n        sortByValue,\n        sortOnValue,\n        sortOrder\n    ) => {\n        const newOptionsList = sortOptions.slice(0);\n        const newSortingOption = {\n            sortBy: sortByValue,\n            sortOn: sortOnValue,\n            order: sortOrder\n        };\n        const updatedSortOptions = newOptionsList.map((option, index) =>\n            index === sortIndex ? newSortingOption : option\n        );\n        updateSortingOptions(updatedSortOptions);\n    };\n\n    const copySortOption = (sortIndex) => {\n        const newOption = sortOptions.slice(0)[sortIndex];\n        setSortOptions(sortOptions.concat(newOption));\n    };\n\n    const deleteSortOption = (sortIndex) => {\n        setSortOptions(\n            sortOptions.filter((option, index) => {\n                return index !== sortIndex;\n            })\n        );\n    };\n\n    const applySort = () => {\n        let isError = false;\n        sortOptions.map((option, index) => {\n            const { sortBy, sortOn } = option;\n            const optionIndex = index;\n            const duplicateSort = sortOptions.find((opt, optIndex) => {\n                return (\n                    sortBy === opt.sortBy &&\n                    sortOn === opt.sortOn &&\n                    optionIndex !== optIndex\n                );\n            });\n            if (duplicateSort) {\n                isError = true;\n            }\n        });\n        if (!isError) {\n            applyGroupSort(sortOptions);\n            toggleGroupSortOverLay();\n        }\n        setIsErrorDisplayed(isError);\n    };\n\n    if (isGroupSortOverLayOpen) {\n        return (\n            <ClickAwayListener onClickAway={toggleGroupSortOverLay}>\n                <div className=\"neo-popover\">\n                    <div className=\"neo-popover__sort\">\n                        <div className=\"neo-popover__title\">\n                            <h2>Sort</h2>\n                            <div className=\"neo-popover__close\">\n                                <i\n                                    className=\"fa fa-times\"\n                                    aria-hidden=\"true\"\n                                    onClick={toggleGroupSortOverLay}\n                                ></i>\n                            </div>\n                        </div>\n                        <div className=\"neo-popover__content\">\n                            <DndProvider\n                                backend={MultiBackend}\n                                options={HTML5toTouch}\n                            >\n                                <SortingList\n                                    sortOptions={sortOptions}\n                                    originalColumns={originalColumns}\n                                    updateSortingOptions={updateSortingOptions}\n                                    updateSingleSortingOption={\n                                        updateSingleSortingOption\n                                    }\n                                    copySortOption={copySortOption}\n                                    deleteSortOption={deleteSortOption}\n                                />\n                            </DndProvider>\n                        </div>\n                        <div className=\"sort-warning\">\n                            {isErrorDisplayed ? (\n                                <span>Duplicate sort options found.</span>\n                            ) : null}\n                        </div>\n                        <div className=\"sort__new\">\n                            <div\n                                className=\"sort__section\"\n                                type=\"button\"\n                                onClick={addSortingOptions}\n                            >\n                                <span>+</span>\n                                <div className=\"sort__txt\">New Sort</div>\n                            </div>\n                        </div>\n                        <div className=\"sort__footer\">\n                            <div className=\"sort__btns\">\n                                <button\n                                    className=\"btns\"\n                                    onClick={clearSortingOptions}\n                                >\n                                    Clear All\n                                </button>\n                                <button\n                                    className=\"btns btns__save\"\n                                    onClick={applySort}\n                                >\n                                    Ok\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </ClickAwayListener>\n        );\n    } else {\n        return <div></div>;\n    }\n});\n\nexport default GroupSort;\n","import React, { memo, useState } from \"react\";\r\nimport ClickAwayListener from \"react-click-away-listener\";\r\nimport jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\nimport * as FileSaver from \"file-saver\";\r\nimport * as XLSX from \"xlsx\";\r\n\r\nconst ExportData = memo((props) => {\r\n    const {\r\n        isExportOverlayOpen,\r\n        toggleExportDataOverlay,\r\n        rows,\r\n        originalColumns,\r\n        isExpandContentAvailable,\r\n        additionalColumn\r\n    } = props;\r\n\r\n    const getRemarksColumnIfAvailable = () => {\r\n        return isExpandContentAvailable ? additionalColumn : [];\r\n    };\r\n\r\n    const updatedColumns = [...originalColumns].concat(\r\n        getRemarksColumnIfAvailable()\r\n    );\r\n\r\n    const [managedColumns, setManagedColumns] = useState(updatedColumns);\r\n    const [searchedColumns, setSearchedColumns] = useState(updatedColumns);\r\n    const [downloadTypes, setDownloadTypes] = useState([]);\r\n    const [warning, setWarning] = useState(\"\");\r\n\r\n    let isDownload = false;\r\n\r\n    const exportRowData = () => {\r\n        isDownload = true;\r\n        let filteredRow = [];\r\n        let filteredRowValues = [];\r\n        let filteredRowHeader = [];\r\n\r\n        setWarning(\"\");\r\n\r\n        if (managedColumns.length > 0 && downloadTypes.length > 0) {\r\n            const rowLength = rows && rows.length > 0 ? rows.length : 0;\r\n            rows.forEach((rowDetails, index) => {\r\n                let row = rowDetails.original;\r\n                let filteredColumnVal = {};\r\n                let rowFilteredValues = [];\r\n                let rowFilteredHeader = [];\r\n                managedColumns.forEach((columnName) => {\r\n                    const { Header, accessor, innerCells } = columnName;\r\n                    const accessorRowValue = row[accessor];\r\n                    let columnValue = \"\";\r\n                    let columnHeader = \"\";\r\n                    if (accessor) {\r\n                        if (\r\n                            innerCells &&\r\n                            innerCells.length > 0 &&\r\n                            typeof accessorRowValue === \"object\"\r\n                        ) {\r\n                            innerCells.forEach((cell) => {\r\n                                const innerCellAccessor = cell.accessor;\r\n                                const innerCellHeader = cell.Header;\r\n                                const innerCellAccessorValue =\r\n                                    accessorRowValue[innerCellAccessor];\r\n                                if (accessorRowValue.length > 0) {\r\n                                    accessorRowValue.forEach((item, index) => {\r\n                                        columnValue = item[\r\n                                            innerCellAccessor\r\n                                        ].toString();\r\n                                        columnHeader =\r\n                                            Header +\r\n                                            \" - \" +\r\n                                            innerCellHeader +\r\n                                            \"_\" +\r\n                                            index;\r\n                                        filteredColumnVal[\r\n                                            columnHeader\r\n                                        ] = columnValue;\r\n                                        rowFilteredValues.push(columnValue);\r\n                                        rowFilteredHeader.push(columnHeader);\r\n                                    });\r\n                                } else if (innerCellAccessorValue) {\r\n                                    columnValue = innerCellAccessorValue;\r\n                                    columnHeader =\r\n                                        Header + \" - \" + innerCellHeader;\r\n                                    filteredColumnVal[\r\n                                        columnHeader\r\n                                    ] = columnValue;\r\n                                    rowFilteredValues.push(columnValue);\r\n                                    rowFilteredHeader.push(columnHeader);\r\n                                }\r\n                            });\r\n                        } else {\r\n                            columnValue = accessorRowValue;\r\n                            columnHeader = Header;\r\n                            filteredColumnVal[columnHeader] = columnValue;\r\n                            rowFilteredValues.push(columnValue);\r\n                            rowFilteredHeader.push(columnHeader);\r\n                        }\r\n                    }\r\n                });\r\n                filteredRow.push(filteredColumnVal);\r\n                filteredRowValues.push(rowFilteredValues);\r\n                if (rowLength === index + 1)\r\n                    filteredRowHeader.push(rowFilteredHeader);\r\n            });\r\n\r\n            downloadTypes.map((item) => {\r\n                if (item === \"pdf\") {\r\n                    downloadPDF(filteredRowValues, filteredRowHeader);\r\n                } else if (item === \"excel\") {\r\n                    downloadXLSFile(filteredRow);\r\n                } else {\r\n                    downloadCSVFile(filteredRow);\r\n                }\r\n            });\r\n        } else {\r\n            if (managedColumns.length === 0 && downloadTypes.length === 0) {\r\n                setWarning(\"Select at least one column and a file type\");\r\n            } else if (managedColumns.length === 0) {\r\n                setWarning(\"Select at least one column\");\r\n            } else if (downloadTypes.length === 0) {\r\n                setWarning(\"Select at least one file type\");\r\n            }\r\n        }\r\n    };\r\n\r\n    const downloadPDF = (rowFilteredValues, rowFilteredHeader) => {\r\n        const unit = \"pt\";\r\n        const size = \"A4\"; // Use A1, A2, A3 or A4\r\n        const orientation = \"landscape\"; // portrait or landscape\r\n\r\n        const marginLeft = 30;\r\n        const doc = new jsPDF(orientation, unit, size);\r\n\r\n        doc.setFontSize(15);\r\n        const title = \"iCargo Neo Report\";\r\n\r\n        let content = {\r\n            startY: 50,\r\n            head: rowFilteredHeader,\r\n            body: rowFilteredValues,\r\n            tableWidth: \"wrap\", //'auto'|'wrap'|'number'\r\n            headStyles: { fillColor: [102, 102, 255] },\r\n            styles: {\r\n                fontSize: 12,\r\n                overflowX: \"visible\",\r\n                overflowY: \"visible\"\r\n            },\r\n            theme: \"grid\", //'striped'|'grid'|'plain'|'css'\r\n            overflow: \"visible\", //'linebreak'|'ellipsize'|'visible'|'hidden'\r\n            cellWidth: \"auto\",\r\n            margin: { top: 15, right: 30, bottom: 10, left: 30 }\r\n        };\r\n\r\n        doc.text(title, marginLeft, 40);\r\n        doc.autoTable(content);\r\n        doc.save(\"iCargo Neo Report.pdf\");\r\n\r\n        isDownload = false;\r\n    };\r\n\r\n    const downloadCSVFile = (filteredRowValue) => {\r\n        const fileType =\r\n            \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\r\n        const fileExtension = \".csv\";\r\n        const fileName = \"iCargo Neo Report\";\r\n        const ws = XLSX.utils.json_to_sheet(filteredRowValue);\r\n        const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\r\n        const excelBuffer = XLSX.write(wb, { bookType: \"csv\", type: \"array\" });\r\n        const data = new Blob([excelBuffer], { type: fileType });\r\n        FileSaver.saveAs(data, fileName + fileExtension);\r\n    };\r\n\r\n    const downloadXLSFile = (filteredRowValue) => {\r\n        const fileType =\r\n            \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\r\n        const fileExtension = \".xlsx\";\r\n        const fileName = \"iCargo Neo Report\";\r\n        const ws = XLSX.utils.json_to_sheet(filteredRowValue);\r\n        const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\r\n        const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\r\n        const data = new Blob([excelBuffer], { type: fileType });\r\n        FileSaver.saveAs(data, fileName + fileExtension);\r\n    };\r\n\r\n    const filterColumnsList = (event) => {\r\n        let { value } = event ? event.target : \"\";\r\n        value = value ? value.toLowerCase() : \"\";\r\n        if (value != \"\") {\r\n            setSearchedColumns(\r\n                originalColumns\r\n                    .filter((column) => {\r\n                        return column.Header.toLowerCase().includes(value);\r\n                    })\r\n                    .concat(\r\n                        getRemarksColumnIfAvailable().filter((column) => {\r\n                            return column.Header.toLowerCase().includes(value);\r\n                        })\r\n                    )\r\n            );\r\n        } else {\r\n            setSearchedColumns(updatedColumns);\r\n        }\r\n    };\r\n\r\n    const isCheckboxSelected = (header) => {\r\n        if (header === \"Select All\") {\r\n            return managedColumns.length === searchedColumns.length;\r\n        } else {\r\n            const selectedColumn = managedColumns.filter((column) => {\r\n                return column.Header === header;\r\n            });\r\n            return selectedColumn && selectedColumn.length > 0;\r\n        }\r\n    };\r\n\r\n    const selectAllColumns = (event) => {\r\n        if (event.target.checked) {\r\n            setManagedColumns(updatedColumns);\r\n        } else {\r\n            setManagedColumns([]);\r\n        }\r\n    };\r\n\r\n    const selectSingleColumn = (event) => {\r\n        const { currentTarget } = event;\r\n        const { checked, value } = currentTarget;\r\n\r\n        //If column checkbox is checked\r\n        if (checked) {\r\n            //Find the index of selected column from original column array and also find the user selected column\r\n            let indexOfColumnToAdd = updatedColumns.findIndex((column) => {\r\n                return column.Header === value;\r\n            });\r\n            const itemToAdd = updatedColumns[indexOfColumnToAdd];\r\n\r\n            //Loop through the managedColumns array to find the position of the column that is present previous to the user selected column\r\n            //Find index of that previous column and push the new column to add in that position\r\n            let prevItemIndex = -1;\r\n            while (indexOfColumnToAdd > 0 && prevItemIndex === -1) {\r\n                prevItemIndex = managedColumns.findIndex((column) => {\r\n                    return (\r\n                        column.Header ===\r\n                        updatedColumns[indexOfColumnToAdd - 1].Header\r\n                    );\r\n                });\r\n                indexOfColumnToAdd = indexOfColumnToAdd - 1;\r\n            }\r\n\r\n            const newColumnsList = managedColumns.slice(0); //Copying state value\r\n            newColumnsList.splice(prevItemIndex + 1, 0, itemToAdd);\r\n            setManagedColumns(newColumnsList);\r\n        } else {\r\n            setManagedColumns(\r\n                managedColumns.filter((column) => {\r\n                    return column.Header !== value;\r\n                })\r\n            );\r\n        }\r\n    };\r\n\r\n    const changeDownloadType = (event) => {\r\n        const { value, checked } = event ? event.currentTarget : \"\";\r\n        if (checked) {\r\n            setDownloadTypes(downloadTypes.concat([value]));\r\n        } else {\r\n            setDownloadTypes(\r\n                downloadTypes.filter((type) => {\r\n                    return type !== value;\r\n                })\r\n            );\r\n        }\r\n    };\r\n\r\n    if (isExportOverlayOpen) {\r\n        return (\r\n            <ClickAwayListener onClickAway={toggleExportDataOverlay}>\r\n                <div className=\"neo-popover neo-popover--exports exports--grid\">\r\n                    <div className=\"neo-popover__export export__grid\">\r\n                        <div className=\"export__chooser\">\r\n                            <div className=\"export__header\">\r\n                                <div className=\"\">\r\n                                    <strong>Export Data</strong>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"export__body\">\r\n                                <div>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        placeholder=\"Search column\"\r\n                                        className=\"custom__ctrl\"\r\n                                        onChange={filterColumnsList}\r\n                                    ></input>\r\n                                </div>\r\n                                <div className=\"export__wrap export__headertxt\">\r\n                                    <div className=\"export__checkbox\">\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            value=\"Select All\"\r\n                                            checked={isCheckboxSelected(\r\n                                                \"Select All\"\r\n                                            )}\r\n                                            onChange={selectAllColumns}\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"export__txt\">\r\n                                        Select All\r\n                                    </div>\r\n                                </div>\r\n                                {searchedColumns.map((column, index) => {\r\n                                    return (\r\n                                        <div\r\n                                            className=\"export__wrap\"\r\n                                            key={index}\r\n                                        >\r\n                                            <div className=\"export__checkbox\">\r\n                                                <input\r\n                                                    type=\"checkbox\"\r\n                                                    value={column.Header}\r\n                                                    checked={isCheckboxSelected(\r\n                                                        column.Header\r\n                                                    )}\r\n                                                    onChange={\r\n                                                        selectSingleColumn\r\n                                                    }\r\n                                                ></input>\r\n                                            </div>\r\n                                            <div className=\"export__txt\">\r\n                                                {column.Header}\r\n                                            </div>\r\n                                        </div>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"export__settings\">\r\n                            <div className=\"export__header\">\r\n                                <div className=\"export__headerTxt\"></div>\r\n                                <div className=\"export__close\">\r\n                                    <i\r\n                                        className=\"fa fa-times\"\r\n                                        aria-hidden=\"true\"\r\n                                        onClick={toggleExportDataOverlay}\r\n                                    ></i>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"export__as\">Export As</div>\r\n                            <div className=\"export__body\">\r\n                                <div className=\"export__reorder\">\r\n                                    <div className=\"check-wrap\">\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            id=\"chk_pdf\"\r\n                                            value=\"pdf\"\r\n                                            checked={downloadTypes.includes(\r\n                                                \"pdf\"\r\n                                            )}\r\n                                            onChange={changeDownloadType}\r\n                                        ></input>\r\n                                    </div>\r\n                                    <div className=\"export__file\">\r\n                                        <i\r\n                                            className=\"fa fa-file-pdf-o\"\r\n                                            aria-hidden=\"true\"\r\n                                        ></i>\r\n                                        <br />\r\n                                        <strong>PDF</strong>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"export__reorder\">\r\n                                    <div className=\"check-wrap\">\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            id=\"chk_excel\"\r\n                                            value=\"excel\"\r\n                                            checked={downloadTypes.includes(\r\n                                                \"excel\"\r\n                                            )}\r\n                                            onChange={changeDownloadType}\r\n                                        ></input>\r\n                                    </div>\r\n                                    <div className=\"export__file\">\r\n                                        <i\r\n                                            className=\"fa fa-file-excel-o\"\r\n                                            aria-hidden=\"true\"\r\n                                        ></i>\r\n                                        <br />\r\n                                        <strong>Excel</strong>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"export__reorder\">\r\n                                    <div className=\"check-wrap\">\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            id=\"chk_csv\"\r\n                                            value=\"csv\"\r\n                                            checked={downloadTypes.includes(\r\n                                                \"csv\"\r\n                                            )}\r\n                                            onChange={changeDownloadType}\r\n                                        ></input>\r\n                                    </div>\r\n                                    <div className=\"export__file\">\r\n                                        <i\r\n                                            className=\"fa fa-file-text-o\"\r\n                                            aria-hidden=\"true\"\r\n                                        ></i>\r\n                                        <br />\r\n                                        <strong>CSV</strong>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"exportWarning\">\r\n                                    <span className=\"alert alert-danger\">\r\n                                        <strong>{warning}</strong>\r\n                                    </span>\r\n                                </div>\r\n                                <div>\r\n                                    {isDownload ? (\r\n                                        <h2 style={{ textAlign: \"center\" }}>\r\n                                            Loading...\r\n                                        </h2>\r\n                                    ) : null}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"export__footer\">\r\n                                <div className=\"export__btns\">\r\n                                    <button\r\n                                        className=\"btns\"\r\n                                        onClick={toggleExportDataOverlay}\r\n                                    >\r\n                                        Cancel\r\n                                    </button>\r\n                                    <button\r\n                                        className=\"btns btns__save\"\r\n                                        onClick={exportRowData}\r\n                                    >\r\n                                        Export\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </ClickAwayListener>\r\n        );\r\n    } else {\r\n        return <div></div>;\r\n    }\r\n});\r\n\r\nexport default ExportData;\r\n","import React, {\r\n    useCallback,\r\n    useState,\r\n    memo,\r\n    useEffect,\r\n    createRef,\r\n    useMemo\r\n} from \"react\";\r\nimport {\r\n    useTable,\r\n    useResizeColumns,\r\n    useFlexLayout,\r\n    useRowSelect,\r\n    useSortBy,\r\n    useFilters,\r\n    useGlobalFilter,\r\n    useExpanded\r\n} from \"react-table\";\r\nimport { VariableSizeList as List } from \"react-window\";\r\nimport AutoSizer from \"react-virtualized-auto-sizer\";\r\nimport InfiniteLoader from \"react-window-infinite-loader\";\r\nimport RowSelector from \"./Functions/RowSelector\";\r\nimport DefaultColumnFilter from \"./Functions/DefaultColumnFilter\";\r\nimport GlobalFilter from \"./Functions/GlobalFilter\";\r\nimport RowOptions from \"./Functions/RowOptions\";\r\nimport RowEditOverlay from \"./Functions/RowEditOverlay\";\r\nimport RowDeleteOverLay from \"./Functions/RowDeleteOverLay\";\r\nimport ColumnReordering from \"./Overlays/managecolumns\";\r\nimport GroupSort from \"./Overlays/groupsort\";\r\nimport ExportData from \"./Overlays/exportdata\";\r\n\r\nconst listRef = createRef(null);\r\n\r\nconst Customgrid = memo((props) => {\r\n    const {\r\n        title,\r\n        gridHeight,\r\n        gridWidth,\r\n        managableColumns,\r\n        originalColumns,\r\n        additionalColumn,\r\n        data,\r\n        getRowEditOverlay,\r\n        updateRowInGrid,\r\n        deleteRowFromGrid,\r\n        globalSearchLogic,\r\n        selectBulkData,\r\n        calculateRowHeight,\r\n        isExpandContentAvailable,\r\n        displayExpandedContent,\r\n        hasNextPage,\r\n        isNextPageLoading,\r\n        loadNextPage,\r\n        doGroupSort\r\n    } = props;\r\n\r\n    //Local state value for holding columns configuration\r\n    const [columns, setColumns] = useState(managableColumns);\r\n    //Local state value for holding the boolean value to check if row expand is available\r\n    const [isRowExpandEnabled, setIsRowExpandEnabled] = useState(\r\n        isExpandContentAvailable\r\n    );\r\n\r\n    //Variables used for handling infinite loading\r\n    const itemCount = hasNextPage ? data.length + 1 : data.length;\r\n    const loadMoreItems = isNextPageLoading\r\n        ? () => {}\r\n        : loadNextPage\r\n        ? loadNextPage\r\n        : () => {};\r\n    const isItemLoaded = (index) => !hasNextPage || index < data.length;\r\n\r\n    //Local state value for checking if column filter is open/closed\r\n    const [isFilterOpen, setFilterOpen] = useState(false);\r\n    //Toggle column filter state value based on UI clicks\r\n    const toggleColumnFilter = () => {\r\n        setFilterOpen(!isFilterOpen);\r\n    };\r\n\r\n    //Local state value for checking if column filter is open/closed\r\n    const [isRowEditOverlyOpen, setIsRowEditOverlyOpen] = useState(false);\r\n    //Local state value to hold row data that is going to be edited\r\n    const [editedRowData, setEditedRowData] = useState(null);\r\n    //Bind the user defined row edit overlay into Grid\r\n    const bindRowEditOverlay = (rowValue) => {\r\n        setEditedRowData(rowValue);\r\n        setIsRowEditOverlyOpen(true);\r\n    };\r\n    //Close the row edit overlay\r\n    const closeRowEditOverlay = () => {\r\n        setEditedRowData(null);\r\n        setIsRowEditOverlyOpen(false);\r\n    };\r\n\r\n    //Local state value for checking if column filter is open/closed\r\n    const [isRowDeleteOverlyOpen, setIsRowDeleteOverlyOpen] = useState(false);\r\n    //Local state value to hold row data that is going to be deleted\r\n    const [deletedRowData, setDeletedRowData] = useState(null);\r\n    //Bind the user defined row delete overlay into Grid\r\n    const bindRowDeleteOverlay = (rowValue) => {\r\n        setDeletedRowData(rowValue);\r\n        setIsRowDeleteOverlyOpen(true);\r\n    };\r\n    //Close the row edit overlay\r\n    const closeRowDeleteOverlay = () => {\r\n        setDeletedRowData(null);\r\n        setIsRowDeleteOverlyOpen(false);\r\n    };\r\n\r\n    //Local state value for checking if group Sort Overlay is open/closed.\r\n    const [isGroupSortOverLayOpen, setGroupSortOverLay] = useState(false);\r\n\r\n    //Toggle group Sort state value based on UI clicks\r\n    const toggleGroupSortOverLay = () => {\r\n        setGroupSortOverLay(!isGroupSortOverLayOpen);\r\n    };\r\n\r\n    const applyGroupSort = (sortOptions) => {\r\n        doGroupSort(sortOptions);\r\n    };\r\n\r\n    //Local state value for hiding/unhiding column management overlay\r\n    const [isManageColumnOpen, setManageColumnOpen] = useState(false);\r\n\r\n    //Toggle column manage overlay show/hide state value based on UI clicks\r\n    const toggleManageColumns = () => {\r\n        setManageColumnOpen(!isManageColumnOpen);\r\n    };\r\n\r\n    //Callback method from column manage overlay to update the column structure of the grid\r\n    const updateColumnStructure = (newColumnStructure, remarksColumn) => {\r\n        setColumns([...newColumnStructure]);\r\n        setIsRowExpandEnabled(\r\n            remarksColumn && remarksColumn.length > 0 ? true : false\r\n        );\r\n    };\r\n\r\n    //Local state value for hiding/unhiding export data overlay\r\n    const [isExportOverlayOpen, setIsExportOverlayOpen] = useState(false);\r\n\r\n    //Toggle export overlay show/hide state value based on UI clicks\r\n    const toggleExportDataOverlay = () => {\r\n        setIsExportOverlayOpen(!isExportOverlayOpen);\r\n    };\r\n\r\n    //Column filter added for all columns by default\r\n    const defaultColumn = useMemo(\r\n        () => ({\r\n            Filter: DefaultColumnFilter\r\n        }),\r\n        []\r\n    );\r\n\r\n    //Initialize react-table instance with the values received through properties\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        rows,\r\n        prepareRow,\r\n        selectedFlatRows,\r\n        state,\r\n        setGlobalFilter\r\n    } = useTable(\r\n        {\r\n            columns,\r\n            data,\r\n            defaultColumn,\r\n            globalFilter: (rows, columns, filterValue) => {\r\n                //Call global search function defined in application, if it is present\r\n                if (\r\n                    globalSearchLogic &&\r\n                    typeof globalSearchLogic === \"function\"\r\n                ) {\r\n                    return globalSearchLogic(rows, columns, filterValue);\r\n                } else {\r\n                    return rows;\r\n                }\r\n            },\r\n            autoResetFilters: false,\r\n            autoResetGlobalFilter: false,\r\n            autoResetSortBy: false,\r\n            autoResetExpanded: false,\r\n            autoResetSelectedRows: false\r\n        },\r\n        useFilters,\r\n        useGlobalFilter,\r\n        useSortBy,\r\n        useExpanded,\r\n        useRowSelect,\r\n        useFlexLayout,\r\n        useResizeColumns,\r\n        (hooks) => {\r\n            //Add checkbox for all rows in grid, with different properties for header row and body rows\r\n            hooks.allColumns.push((columns) => [\r\n                {\r\n                    id: \"selection\",\r\n                    columnId: \"column_custom_0\",\r\n                    disableResizing: true,\r\n                    disableFilters: true,\r\n                    disableSortBy: true,\r\n                    minWidth: 35,\r\n                    width: 35,\r\n                    maxWidth: 35,\r\n                    Header: ({ getToggleAllRowsSelectedProps }) => (\r\n                        <RowSelector {...getToggleAllRowsSelectedProps()} />\r\n                    ),\r\n                    Cell: ({ row }) => (\r\n                        <RowSelector {...row.getToggleRowSelectedProps()} />\r\n                    )\r\n                },\r\n                ...columns,\r\n                {\r\n                    id: \"custom\",\r\n                    columnId: \"column_custom_1\",\r\n                    disableResizing: true,\r\n                    disableFilters: true,\r\n                    disableSortBy: true,\r\n                    minWidth: 35,\r\n                    width: 35,\r\n                    maxWidth: 35,\r\n                    Cell: ({ row }) => {\r\n                        return (\r\n                            <div className=\"action\">\r\n                                <RowOptions\r\n                                    row={row}\r\n                                    bindRowEditOverlay={bindRowEditOverlay}\r\n                                    bindRowDeleteOverlay={bindRowDeleteOverlay}\r\n                                />\r\n                                {isRowExpandEnabled ? (\r\n                                    <span\r\n                                        className=\"expander\"\r\n                                        {...row.getToggleRowExpandedProps()}\r\n                                    >\r\n                                        {row.isExpanded ? (\r\n                                            <i\r\n                                                className=\"fa fa-angle-up\"\r\n                                                aria-hidden=\"true\"\r\n                                            ></i>\r\n                                        ) : (\r\n                                            <i\r\n                                                className=\"fa fa-angle-down\"\r\n                                                aria-hidden=\"true\"\r\n                                            ></i>\r\n                                        )}\r\n                                    </span>\r\n                                ) : null}\r\n                            </div>\r\n                        );\r\n                    }\r\n                }\r\n            ]);\r\n        }\r\n    );\r\n\r\n    //Export selected row data and pass it to the callback method\r\n    const bulkSelector = () => {\r\n        if (selectBulkData) {\r\n            selectBulkData(selectedFlatRows);\r\n        }\r\n    };\r\n\r\n    //This code is to handle the row height calculation while expanding a row or resizing a column\r\n    useEffect(() => {\r\n        if (listRef && listRef.current) {\r\n            listRef.current.resetAfterIndex(0, true);\r\n        }\r\n    });\r\n\r\n    //Render each row and cells in each row, using attributes from react window list.\r\n    const RenderRow = useCallback(\r\n        ({ index, style }) => {\r\n            if (isItemLoaded(index)) {\r\n                const row = rows[index];\r\n                prepareRow(row);\r\n                return (\r\n                    <div\r\n                        {...row.getRowProps({ style })}\r\n                        className=\"table-row tr\"\r\n                    >\r\n                        <div className=\"table-row-wrap\">\r\n                            {row.cells.map((cell) => {\r\n                                return (\r\n                                    <div\r\n                                        {...cell.getCellProps()}\r\n                                        className=\"table-cell td\"\r\n                                    >\r\n                                        {cell.render(\"Cell\")}\r\n                                    </div>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                        {/*Check if row eapand icon is clicked, and if yes, call function to bind content to the expanded region*/}\r\n                        {isRowExpandEnabled && row.isExpanded ? (\r\n                            <div className=\"expand\">\r\n                                {displayExpandedContent\r\n                                    ? displayExpandedContent(row)\r\n                                    : null}\r\n                            </div>\r\n                        ) : null}\r\n                    </div>\r\n                );\r\n            }\r\n        },\r\n        [prepareRow, rows, displayExpandedContent]\r\n    );\r\n\r\n    //Render table title, global search component, button to show/hide column filter, button to export selected row data & the grid\r\n    //Use properties and methods provided by react-table\r\n    //Autosizer used for calculating grid height (don't consider window width and column resizing value changes)\r\n    //Infinite loader used for lazy loading, with the properties passed here and other values calculated at the top\r\n    //React window list is used for implementing virtualization, specifying the item count in a frame and height of each rows in it.\r\n    return (\r\n        <div\r\n            className=\"table-wrapper\"\r\n            style={{ width: gridWidth ? gridWidth : \"100%\" }}\r\n        >\r\n            <link\r\n                rel=\"stylesheet\"\r\n                href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\"\r\n            />\r\n            <div className=\"neo-grid-header\">\r\n                <div className=\"neo-grid-header__results\">\r\n                    <strong>{rows.length}</strong>\r\n                    <span> {title ? title : \"Rows\"}</span>\r\n                </div>\r\n                <div className=\"neo-grid-header__utilities\">\r\n                    <ColumnReordering\r\n                        isManageColumnOpen={isManageColumnOpen}\r\n                        toggleManageColumns={toggleManageColumns}\r\n                        originalColumns={originalColumns}\r\n                        isExpandContentAvailable={isExpandContentAvailable}\r\n                        additionalColumn={[additionalColumn]}\r\n                        updateColumnStructure={updateColumnStructure}\r\n                    />\r\n                    <GlobalFilter\r\n                        globalFilter={state.globalFilter}\r\n                        setGlobalFilter={setGlobalFilter}\r\n                    />\r\n                    <GroupSort\r\n                        isGroupSortOverLayOpen={isGroupSortOverLayOpen}\r\n                        toggleGroupSortOverLay={toggleGroupSortOverLay}\r\n                        originalColumns={originalColumns}\r\n                        applyGroupSort={applyGroupSort}\r\n                    />\r\n                    <ExportData\r\n                        isExportOverlayOpen={isExportOverlayOpen}\r\n                        toggleExportDataOverlay={toggleExportDataOverlay}\r\n                        rows={rows}\r\n                        originalColumns={originalColumns}\r\n                        isExpandContentAvailable={isExpandContentAvailable}\r\n                        additionalColumn={[additionalColumn]}\r\n                    />\r\n                    <div\r\n                        className=\"utilities-icon keyword-search\"\r\n                        onClick={toggleColumnFilter}\r\n                    >\r\n                        <i className=\"fa fa-filter\" aria-hidden=\"true\"></i>\r\n                    </div>\r\n                    <div\r\n                        className=\"utilities-icon bulk-select\"\r\n                        onClick={bulkSelector}\r\n                    >\r\n                        <i\r\n                            className=\"fa fa-pencil-square-o\"\r\n                            aria-hidden=\"true\"\r\n                        ></i>\r\n                    </div>\r\n                    <div\r\n                        className=\"utilities-icon bulk-select\"\r\n                        onClick={toggleGroupSortOverLay}\r\n                    >\r\n                        <i\r\n                            className=\"fa fa-sort-amount-desc\"\r\n                            aria-hidden=\"true\"\r\n                        ></i>\r\n                    </div>\r\n                    <div\r\n                        className=\"utilities-icon manage-columns\"\r\n                        onClick={toggleManageColumns}\r\n                    >\r\n                        <i className=\"fa fa-columns\" aria-hidden=\"true\"></i>\r\n                    </div>\r\n                    <div\r\n                        className=\"utilities-icon manage-columns\"\r\n                        onClick={toggleExportDataOverlay}\r\n                    >\r\n                        <i className=\"fa fa-share-alt\" aria-hidden=\"true\"></i>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"table-popus\">\r\n                {isRowEditOverlyOpen ? (\r\n                    <RowEditOverlay\r\n                        row={editedRowData}\r\n                        columns={columns}\r\n                        isRowExpandEnabled={isRowExpandEnabled}\r\n                        additionalColumn={additionalColumn}\r\n                        getRowEditOverlay={getRowEditOverlay}\r\n                        closeRowEditOverlay={closeRowEditOverlay}\r\n                        updateRowInGrid={updateRowInGrid}\r\n                    />\r\n                ) : null}\r\n                {isRowDeleteOverlyOpen ? (\r\n                    <RowDeleteOverLay\r\n                        row={deletedRowData}\r\n                        closeRowDeleteOverlay={closeRowDeleteOverlay}\r\n                        deleteRowFromGrid={deleteRowFromGrid}\r\n                    />\r\n                ) : null}\r\n            </div>\r\n\r\n            <div\r\n                className=\"tableContainer table-outer neo-grid\"\r\n                style={{\r\n                    height: gridHeight ? gridHeight : \"50vh\",\r\n                    overflowX: \"auto\",\r\n                    overflowY: \"hidden\"\r\n                }}\r\n            >\r\n                <AutoSizer disableWidth disableResizing>\r\n                    {({ height }) => (\r\n                        <div {...getTableProps()} className=\"table\">\r\n                            <div className=\"thead table-row table-row--head\">\r\n                                {headerGroups.map((headerGroup) => (\r\n                                    <div\r\n                                        {...headerGroup.getHeaderGroupProps()}\r\n                                        className=\"tr\"\r\n                                    >\r\n                                        {headerGroup.headers.map((column) => (\r\n                                            <div\r\n                                                {...column.getHeaderProps()}\r\n                                                className=\"table-cell column-heading th\"\r\n                                            >\r\n                                                <div\r\n                                                    {...column.getSortByToggleProps()}\r\n                                                >\r\n                                                    {column.render(\"Header\")}\r\n                                                    <span>\r\n                                                        {column.isSorted ? (\r\n                                                            column.isSortedDesc ? (\r\n                                                                <i\r\n                                                                    className=\"fa fa-sort-desc\"\r\n                                                                    aria-hidden=\"true\"\r\n                                                                ></i>\r\n                                                            ) : (\r\n                                                                <i\r\n                                                                    className=\"fa fa-sort-asc\"\r\n                                                                    aria-hidden=\"true\"\r\n                                                                ></i>\r\n                                                            )\r\n                                                        ) : (\r\n                                                            \"\"\r\n                                                        )}\r\n                                                    </span>\r\n                                                </div>\r\n                                                <div\r\n                                                    className={`txt-wrap column-filter ${\r\n                                                        isFilterOpen\r\n                                                            ? \"open\"\r\n                                                            : \"\"\r\n                                                    }`}\r\n                                                >\r\n                                                    {!column.disableFilters\r\n                                                        ? column.render(\r\n                                                              \"Filter\"\r\n                                                          )\r\n                                                        : null}\r\n                                                </div>\r\n                                                {column.canResize && (\r\n                                                    <div\r\n                                                        {...column.getResizerProps()}\r\n                                                        className=\"resizer\"\r\n                                                    />\r\n                                                )}\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n                                ))}\r\n                            </div>\r\n                            <div {...getTableBodyProps()} className=\"tbody\">\r\n                                <InfiniteLoader\r\n                                    isItemLoaded={isItemLoaded}\r\n                                    itemCount={itemCount}\r\n                                    loadMoreItems={loadMoreItems}\r\n                                >\r\n                                    {({ onItemsRendered, ref }) => (\r\n                                        <List\r\n                                            ref={(list) => {\r\n                                                ref(list);\r\n                                                listRef.current = list;\r\n                                            }}\r\n                                            style={{ overflowX: \"hidden\" }}\r\n                                            height={height - 60}\r\n                                            itemCount={rows.length}\r\n                                            itemSize={(index) => {\r\n                                                return calculateRowHeight(\r\n                                                    rows[index],\r\n                                                    headerGroups &&\r\n                                                        headerGroups.length\r\n                                                        ? headerGroups[0]\r\n                                                              .headers\r\n                                                        : []\r\n                                                );\r\n                                            }}\r\n                                            onItemsRendered={onItemsRendered}\r\n                                            overscanCount={20}\r\n                                        >\r\n                                            {RenderRow}\r\n                                        </List>\r\n                                    )}\r\n                                </InfiniteLoader>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </AutoSizer>\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Customgrid;\r\n","import React, { memo, useMemo, useState, useEffect } from \"react\";\r\nimport {\r\n    extractColumns,\r\n    extractAdditionalColumn\r\n} from \"./Utilities/ColumnsUtilities\";\r\nimport { AdditionalColumnContext } from \"./Utilities/TagsContext\";\r\nimport AdditionalColumnTag from \"./Functions/AdditionalColumnTag\";\r\nimport Customgrid from \"./Customgrid\";\r\nimport \"!style-loader!css-loader!sass-loader!./Styles/main.scss\";\r\n\r\nconst Grid = memo((props) => {\r\n    const {\r\n        title,\r\n        gridHeight,\r\n        gridWidth,\r\n        columns,\r\n        columnToExpand,\r\n        fetchData,\r\n        getRowEditOverlay,\r\n        updateRowData,\r\n        deleteRowData,\r\n        selectBulkData,\r\n        calculateRowHeight\r\n    } = props;\r\n\r\n    //Check if device is desktop\r\n    const isDesktop = window.innerWidth > 1024;\r\n\r\n    //Set state value for variable to check if there is anext page available\r\n    const [hasNextPage, setHasNextPage] = useState(true);\r\n    //Set state value for variable to check if the loading process is going on\r\n    const [isNextPageLoading, setIsNextPageLoading] = useState(false);\r\n    //Local state value for checking if data is being loaded from API\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    //Set state value for variable to hold grid data\r\n    const [items, setItems] = useState([]);\r\n    //Local state for group sort options\r\n    const [groupSortOptions, setGroupSortOptions] = useState([]);\r\n\r\n    //Logic for searching in each column\r\n    const searchColumn = (column, original, searchText) => {\r\n        //Return value\r\n        let isValuePresent = false;\r\n        //Find the accessor node and inner cells array of each column\r\n        const { accessor, innerCells } = column;\r\n        //Find accessor value of a column\r\n        const rowAccessorValue = original[accessor];\r\n        //Check if inner cells are available and save value to boolean var\r\n        const isInnerCellsPresent = innerCells && innerCells.length > 0;\r\n        //Enter if cell value is object or array\r\n        if (typeof rowAccessorValue === \"object\" && isInnerCellsPresent) {\r\n            //Enter if cell value is array\r\n            if (rowAccessorValue.length > 0) {\r\n                //Loop through cell array value and check if searched text is present\r\n                rowAccessorValue.map((value) => {\r\n                    innerCells.map((cell) => {\r\n                        const dataAccessor = value[cell.accessor];\r\n                        if (\r\n                            dataAccessor &&\r\n                            dataAccessor\r\n                                .toString()\r\n                                .toLowerCase()\r\n                                .includes(searchText)\r\n                        ) {\r\n                            isValuePresent = true;\r\n                        }\r\n                    });\r\n                });\r\n            } else {\r\n                //If cell value is an object, loop through inner cells and check if searched text is present\r\n                innerCells.map((cell) => {\r\n                    const dataAccessor = original[accessor][cell.accessor];\r\n                    if (\r\n                        dataAccessor &&\r\n                        dataAccessor\r\n                            .toString()\r\n                            .toLowerCase()\r\n                            .includes(searchText)\r\n                    ) {\r\n                        isValuePresent = true;\r\n                    }\r\n                });\r\n            }\r\n        } else {\r\n            //If cell value is not an object or array, convert it to text and check if searched text is present\r\n            const dataAccessor = original[accessor];\r\n            if (\r\n                dataAccessor &&\r\n                dataAccessor.toString().toLowerCase().includes(searchText)\r\n            ) {\r\n                isValuePresent = true;\r\n            }\r\n        }\r\n        return isValuePresent;\r\n    };\r\n\r\n    //Gets triggered when one row item is updated\r\n    const updateRowInGrid = (original, updatedRow) => {\r\n        setItems((old) =>\r\n            old.map((row) => {\r\n                if (\r\n                    Object.entries(row).toString() ===\r\n                    Object.entries(original).toString()\r\n                ) {\r\n                    row = updatedRow;\r\n                }\r\n                return row;\r\n            })\r\n        );\r\n        if (updateRowData) {\r\n            updateRowData(updatedRow);\r\n        }\r\n    };\r\n\r\n    //Gets triggered when one row item is deleted\r\n    const deleteRowFromGrid = (original) => {\r\n        setItems((old) =>\r\n            old.filter((row) => {\r\n                return row !== original;\r\n            })\r\n        );\r\n        if (deleteRowData) {\r\n            deleteRowData(original);\r\n        }\r\n    };\r\n\r\n    //Extract/add and modify required data from user configured columns and expand columns\r\n    let processedColumns = extractColumns(\r\n        columns,\r\n        searchColumn,\r\n        isDesktop,\r\n        updateRowInGrid\r\n    );\r\n    let additionalColumn = extractAdditionalColumn(\r\n        columnToExpand,\r\n        isDesktop,\r\n        updateRowInGrid\r\n    );\r\n\r\n    //Create memoized column, to be used by grid component\r\n    const gridColumns = useMemo(() => processedColumns, []);\r\n\r\n    //Local variable for keeping the expanded row rendering method\r\n    let renderExpandedContent = additionalColumn\r\n        ? additionalColumn.displayCell\r\n        : null;\r\n\r\n    //#region - Check if data is hidden or not and display data in rendered section\r\n\r\n    //Process data to be rendered to expanded view and return that data to the render function\r\n    const displayExpandedContent = (row) => {\r\n        const { original } = row;\r\n        if (original) {\r\n            return (\r\n                <AdditionalColumnContext.Provider\r\n                    value={{ additionalColumn: additionalColumn }}\r\n                >\r\n                    {renderExpandedContent(original, AdditionalColumnTag)}\r\n                </AdditionalColumnContext.Provider>\r\n            );\r\n        }\r\n    };\r\n    //#endregion\r\n\r\n    //Add logic for doing global search in the grid\r\n    const globalSearchLogic = (rows, columns, filterValue) => {\r\n        //Enter search logic only if rows and columns are available\r\n        if (filterValue && processedColumns.length > 0) {\r\n            //convert user searched text to lower case\r\n            const searchText = filterValue.toLowerCase();\r\n            //Loop through all rows\r\n            return rows.filter((row) => {\r\n                //Find original data value of each row\r\n                const { original } = row;\r\n                //Return value of the filter method\r\n                let returnValue = false;\r\n                //Loop through all column values for each row\r\n                processedColumns.map((column) => {\r\n                    //Do search for each column\r\n                    returnValue =\r\n                        returnValue ||\r\n                        searchColumn(column, original, searchText);\r\n                });\r\n                return returnValue;\r\n            });\r\n        }\r\n        return rows;\r\n    };\r\n\r\n    //Add logic to calculate height of each row, based on the content of  or more columns\r\n    //This can be used only if developer using the component has not passed a function to calculate row height\r\n    const calculateDefaultRowHeight = (row, gridColumns) => {\r\n        //Minimum height for each row\r\n        let rowHeight = 50;\r\n        if (gridColumns && gridColumns.length > 0 && row) {\r\n            //Get properties of a row\r\n            const { original, isExpanded } = row;\r\n            //Find the column with maximum width configured, from grid columns list\r\n            const columnWithMaxWidth = [...gridColumns].sort((a, b) => {\r\n                return b.width - a.width;\r\n            })[0];\r\n            //Get column properties including the user resized column width (totalFlexWidth)\r\n            const { id, width, totalFlexWidth } = columnWithMaxWidth;\r\n            //Get row value of that column\r\n            const rowValue = original[id];\r\n            if (rowValue) {\r\n                //Find the length of text of data in that column\r\n                const textLength = Object.values(rowValue).join(\",\").length;\r\n                //This is a formula that was created for the test data used.\r\n                rowHeight =\r\n                    rowHeight + Math.ceil((80 * textLength) / totalFlexWidth);\r\n                const widthVariable =\r\n                    totalFlexWidth > width\r\n                        ? totalFlexWidth - width\r\n                        : width - totalFlexWidth;\r\n                rowHeight = rowHeight + widthVariable / 1000;\r\n            }\r\n            //Add logic to increase row height if row is expanded\r\n            if (isExpanded && additionalColumn) {\r\n                //Increase height based on the number of inner cells in additional columns\r\n                rowHeight =\r\n                    rowHeight +\r\n                    (additionalColumn.innerCells &&\r\n                    additionalColumn.innerCells.length > 0\r\n                        ? additionalColumn.innerCells.length * 35\r\n                        : 35);\r\n            }\r\n        }\r\n        return rowHeight;\r\n    };\r\n\r\n    //#region - Group sorting logic\r\n    //Function to return sorting logic based on the user selected order of sort\r\n    const compareValues = (compareOrder, v1, v2) => {\r\n        if (compareOrder === \"Ascending\") {\r\n            return v1 > v2 ? 1 : v1 < v2 ? -1 : 0;\r\n        } else {\r\n            return v1 < v2 ? 1 : v1 > v2 ? -1 : 0;\r\n        }\r\n    };\r\n    //Function to return sorted data\r\n    const getSortedData = (originalData) => {\r\n        return originalData.sort(function (x, y) {\r\n            let compareResult = 0;\r\n            groupSortOptions.forEach((option) => {\r\n                const { sortBy, sortOn, order } = option;\r\n                const newResult =\r\n                    sortOn === \"value\"\r\n                        ? compareValues(order, x[sortBy], y[sortBy])\r\n                        : compareValues(\r\n                              order,\r\n                              x[sortBy][sortOn],\r\n                              y[sortBy][sortOn]\r\n                          );\r\n                compareResult = compareResult || newResult;\r\n            });\r\n            return compareResult;\r\n        });\r\n    };\r\n    //#endregion\r\n\r\n    //Gets called when group sort is applied or cleared\r\n    const doGroupSort = (sortOptions) => {\r\n        setGroupSortOptions(sortOptions);\r\n    };\r\n\r\n    //Gets called when page scroll reaches the bottom of the grid.\r\n    //Fetch the next set of data and append it to the variable holding grid data and update the state value.\r\n    //Also update the hasNextPage state value to False once API response is empty, to avoid unwanted API calls.\r\n    const loadNextPage = (...args) => {\r\n        const newIndex = args && args.length > 0 ? args[0] : -1;\r\n        if (newIndex >= 0 && hasNextPage) {\r\n            setIsLoading(true);\r\n            setIsNextPageLoading(true);\r\n            fetchData(newIndex).then((data) => {\r\n                setIsLoading(false);\r\n                setHasNextPage(data && data.length > 0);\r\n                setIsNextPageLoading(false);\r\n                setItems(items.concat(data));\r\n            });\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        //Add duplicate copy of inner cells to be used for data chooser\r\n        processedColumns.map((column) => {\r\n            if (column.innerCells) {\r\n                column.originalInnerCells = column.innerCells;\r\n            }\r\n            return column;\r\n        });\r\n        if (additionalColumn) {\r\n            const { innerCells } = additionalColumn;\r\n            if (innerCells) {\r\n                additionalColumn.originalInnerCells = innerCells;\r\n            }\r\n        }\r\n\r\n        //Make API call to fetch initial set of data.\r\n        setIsLoading(true);\r\n        fetchData(0).then((data) => {\r\n            setIsLoading(false);\r\n            setItems(data);\r\n        });\r\n    }, []);\r\n\r\n    //Sort the data based on the user selected group sort optipons\r\n    const data = getSortedData([...items]);\r\n\r\n    return (\r\n        <div className=\"grid-component-container\">\r\n            {data &&\r\n            data.length > 0 &&\r\n            processedColumns &&\r\n            processedColumns.length > 0 ? (\r\n                <div>\r\n                    <Customgrid\r\n                        title={title}\r\n                        gridHeight={gridHeight}\r\n                        gridWidth={gridWidth}\r\n                        managableColumns={gridColumns}\r\n                        originalColumns={gridColumns}\r\n                        additionalColumn={additionalColumn}\r\n                        data={data}\r\n                        getRowEditOverlay={getRowEditOverlay}\r\n                        updateRowInGrid={updateRowInGrid}\r\n                        deleteRowFromGrid={deleteRowFromGrid}\r\n                        globalSearchLogic={globalSearchLogic}\r\n                        selectBulkData={selectBulkData}\r\n                        calculateRowHeight={\r\n                            calculateRowHeight &&\r\n                            typeof calculateRowHeight === \"function\"\r\n                                ? calculateRowHeight\r\n                                : calculateDefaultRowHeight\r\n                        }\r\n                        isExpandContentAvailable={\r\n                            typeof renderExpandedContent === \"function\"\r\n                        }\r\n                        displayExpandedContent={displayExpandedContent}\r\n                        hasNextPage={hasNextPage}\r\n                        isNextPageLoading={isNextPageLoading}\r\n                        loadNextPage={loadNextPage}\r\n                        doGroupSort={doGroupSort}\r\n                    />\r\n                    {isNextPageLoading ? (\r\n                        <div id=\"loader\" className=\"background\">\r\n                            <div className=\"dots container\">\r\n                                <span></span>\r\n                                <span></span>\r\n                                <span></span>\r\n                            </div>\r\n                        </div>\r\n                    ) : null}\r\n                </div>\r\n            ) : (\r\n                <h2 style={{ textAlign: \"center\", marginTop: \"70px\" }}>\r\n                    {isLoading\r\n                        ? \"Initializing Grid...\"\r\n                        : \"Invalid Data or Column Configurations\"}\r\n                </h2>\r\n            )}\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Grid;\r\n"],"names":["CellDisplayAndEditContext","createContext","RowEditContext","AdditionalColumnContext","checkInnerCells","column","cellKey","innerCells","innerCellData","find","cell","accessor","CellDisplayAndEditTag","props","contextVallues","useContext","columns","columnKey","selectedColumn","col","React","Fragment","children","CellDisplayAndEdit","memo","row","updateRowInGrid","useState","isEditOpen","setIsEditOpen","editedRowValue","setEditedRowValue","id","closeEdit","openEdit","getUpdatedRowValue","value","saveEdit","original","originalRowValue","cellDisplayContent","displayCell","cellEditContent","editCell","extractColumns","searchColumn","isDesktop","filteredColumns","filter","onlyInTablet","onlyInDesktop","modifiedColumns","forEach","index","sortValue","isInnerCellsPresent","length","columnId","Cell","disableSortBy","sortType","rowA","rowB","disableFilters","rows","filterValue","searchText","toLowerCase","push","extractAdditionalColumn","additionalColumn","AdditionalColumnTag","console","log","RowSelector","forwardRef","ref","indeterminate","rest","checkValue","setCheckValue","defaultRef","useRef","resolvedRef","onChange","useEffect","current","DefaultColumnFilter","setFilter","e","target","undefined","GlobalFilter","globalFilter","setGlobalFilter","setValue","useAsyncDebounce","IconSearch","require","RowOptions","bindRowEditOverlay","bindRowDeleteOverlay","isRowOptionsOpen","setRowOptionsOpen","openRowOptionsOverlay","closeRowOptionsOverlay","openRowEditOverlay","openDeleteOverlay","RowEdit","RowPin","RowDelete","RowEditTag","isRowExpandEnabled","RowEditOverLay","getRowEditOverlay","closeRowEditOverlay","saveRowEdit","rowEditContent","RowDeleteOverLay","closeRowDeleteOverlay","deleteRowFromGrid","deleteRow","ItemTypes","COLUMN","ColumnItem","Header","moveColumn","findColumn","originalInnerCells","isInnerCellSelected","selectInnerCells","originalIndex","useDrag","item","type","collect","monitor","isDragging","end","dropResult","getItem","droppedId","didDrop","drag","useDrop","accept","canDrop","hover","draggedId","overIndex","drop","opacity","node","cursor","map","ColumnsList","updateColumnsInState","columnsToManage","atIndex","update","$splice","c","indexOf","display","flexWrap","ColumnReordering","isManageColumnOpen","toggleManageColumns","originalColumns","isExpandContentAvailable","additionalColumnHeader","getRemarksColumnIfAvailable","concatedOriginalColumns","concat","managedColumns","setManagedColumns","searchedColumns","setSearchedColumns","remarksColumnToManage","setRemarksColumnToManage","isErrorDisplayed","setIsErrorDisplayed","HTML5toTouch","backends","backend","HTML5Backend","TouchBackend","options","enableMouseEvents","preview","transition","TouchTransition","filterColumnsList","event","includes","columnList","columnHeader","isItemPresentInList","list","headerValue","filteredList","isCheckboxSelected","header","columnListToSearch","findIndexOfItem","columnsList","indexOfColumnToAdd","findIndex","selectAllColumns","currentTarget","checked","selectSingleColumn","itemToAdd","prevItemIndex","newColumnsList","splice","findAndSelectInnerCells","stateColumnList","setStateColumnList","dataset","columnheader","selectRemarksInnerCells","doColumnUpdate","updateColumnStructure","resetInnerCells","resetColumnUpdate","marginLeft","color","DndProvider","MultiBackend","SORT_ITEM","SortItem","sortOption","moveSort","findSort","updateSingleSortingOption","copySortOption","deleteSortOption","getInncerCellsOfColumn","columnAccessor","changeSortByOptions","newSortByValue","innerCellsList","order","changeSortOnOptions","newSortOnValue","sortBy","changeSortOrderOptions","newSortOrderValue","sortOn","copySort","deleteSort","orgItem","innerCellItem","innerCellIndex","SortCopy","SortDelete","SortingList","updateSortingOptions","sortOptions","sortId","sort","GroupSort","isGroupSortOverLayOpen","toggleGroupSortOverLay","applyGroupSort","sortingOrders","defaultSortingOption","setSortOptions","sortingOptions","addSortingOptions","clearSortingOptions","sortIndex","sortByValue","sortOnValue","sortOrder","newOptionsList","slice","newSortingOption","updatedSortOptions","option","newOption","applySort","isError","optionIndex","duplicateSort","opt","optIndex","ExportData","isExportOverlayOpen","toggleExportDataOverlay","updatedColumns","downloadTypes","setDownloadTypes","warning","setWarning","isDownload","exportRowData","filteredRow","filteredRowValues","filteredRowHeader","rowLength","rowDetails","filteredColumnVal","rowFilteredValues","rowFilteredHeader","columnName","accessorRowValue","columnValue","innerCellAccessor","innerCellHeader","innerCellAccessorValue","toString","downloadPDF","downloadXLSFile","downloadCSVFile","unit","size","orientation","doc","jsPDF","setFontSize","title","content","startY","head","body","tableWidth","headStyles","fillColor","styles","fontSize","overflowX","overflowY","theme","overflow","cellWidth","margin","top","right","bottom","left","text","autoTable","save","filteredRowValue","fileType","fileExtension","fileName","ws","XLSX","json_to_sheet","wb","Sheets","data","SheetNames","excelBuffer","bookType","Blob","FileSaver","changeDownloadType","textAlign","listRef","createRef","Customgrid","gridHeight","gridWidth","managableColumns","globalSearchLogic","selectBulkData","calculateRowHeight","displayExpandedContent","hasNextPage","isNextPageLoading","loadNextPage","doGroupSort","setColumns","setIsRowExpandEnabled","itemCount","loadMoreItems","isItemLoaded","isFilterOpen","setFilterOpen","toggleColumnFilter","isRowEditOverlyOpen","setIsRowEditOverlyOpen","editedRowData","setEditedRowData","rowValue","isRowDeleteOverlyOpen","setIsRowDeleteOverlyOpen","deletedRowData","setDeletedRowData","setGroupSortOverLay","setManageColumnOpen","newColumnStructure","remarksColumn","setIsExportOverlayOpen","defaultColumn","useMemo","Filter","useTable","autoResetFilters","autoResetGlobalFilter","autoResetSortBy","autoResetExpanded","autoResetSelectedRows","useFilters","useGlobalFilter","useSortBy","useExpanded","useRowSelect","useFlexLayout","useResizeColumns","hooks","allColumns","disableResizing","minWidth","width","maxWidth","getToggleAllRowsSelectedProps","getToggleRowSelectedProps","getToggleRowExpandedProps","isExpanded","getTableProps","getTableBodyProps","headerGroups","prepareRow","selectedFlatRows","state","bulkSelector","resetAfterIndex","RenderRow","useCallback","style","getRowProps","cells","getCellProps","render","RowEditOverlay","height","headerGroup","getHeaderGroupProps","headers","getHeaderProps","getSortByToggleProps","isSorted","isSortedDesc","canResize","getResizerProps","onItemsRendered","List","Grid","columnToExpand","fetchData","updateRowData","deleteRowData","window","innerWidth","setHasNextPage","setIsNextPageLoading","isLoading","setIsLoading","items","setItems","groupSortOptions","setGroupSortOptions","isValuePresent","rowAccessorValue","dataAccessor","updatedRow","old","Object","entries","processedColumns","gridColumns","renderExpandedContent","returnValue","calculateDefaultRowHeight","rowHeight","columnWithMaxWidth","a","b","totalFlexWidth","textLength","values","join","Math","ceil","widthVariable","compareValues","compareOrder","v1","v2","getSortedData","originalData","x","y","compareResult","newResult","args","newIndex","then","marginTop"],"mappings":"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"}