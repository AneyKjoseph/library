{"version":3,"file":"index.js","sources":["../src/Functions/RowSelector.js","../src/Functions/DefaultColumnFilter.js","../src/Functions/GlobalFilter.js","../src/Images/RowDelete.svg","../src/Images/RowEdit.svg","../src/Images/RowPin.png","../src/Functions/RowOptions.js","../src/Overlays/managecolumns/ItemTypes.js","../src/Overlays/managecolumns/columnItem.js","../src/Overlays/managecolumns/columnsList.js","../src/Overlays/managecolumns/index.js","../src/Overlays/groupsort/ItemTypes.js","../src/Images/SortCopy.svg","../src/Images/SortDelete.svg","../src/Overlays/groupsort/sortingItem.js","../src/Overlays/groupsort/sortingList.js","../src/Overlays/groupsort/index.js","../src/Overlays/exportdata/index.js","../src/Customgrid.js","../src/index.js"],"sourcesContent":["import React, { forwardRef, useRef, useEffect, useState, memo } from \"react\";\r\n\r\nconst RowSelector = memo(\r\n    forwardRef(({ indeterminate, ...rest }, ref) => {\r\n        const [checkValue, setCheckValue] = useState(indeterminate);\r\n        const defaultRef = useRef();\r\n        const resolvedRef = ref || defaultRef;\r\n        const onChange = () => {\r\n            setCheckValue(!indeterminate);\r\n        };\r\n        useEffect(() => {\r\n            resolvedRef.current.indeterminate = indeterminate;\r\n        }, [resolvedRef, indeterminate]);\r\n        return (\r\n            <div className=\"check-wrap\">\r\n                <input type=\"checkbox\" checked={checkValue} onChange={onChange} ref={resolvedRef} {...rest} />\r\n            </div>\r\n        );\r\n    })\r\n);\r\n\r\nexport default RowSelector;\r\n","import React, { memo } from \"react\";\r\n\r\nconst DefaultColumnFilter = memo(({ column: { filterValue, setFilter } }) => {\r\n    return (\r\n        <input\r\n            className=\"txt\"\r\n            value={filterValue || \"\"}\r\n            onChange={(e) => {\r\n                setFilter(e.target.value || undefined);\r\n            }}\r\n            placeholder=\"Search\"\r\n        />\r\n    );\r\n});\r\n\r\nexport default DefaultColumnFilter;\r\n","import React, { memo, useState } from \"react\";\r\nimport { useAsyncDebounce } from \"react-table\";\r\n\r\nconst GlobalFilter = memo(({ globalFilter, setGlobalFilter }) => {\r\n    const [value, setValue] = useState(globalFilter);\r\n\r\n    const onChange = useAsyncDebounce((value) => {\r\n        setGlobalFilter(value || undefined);\r\n    }, 200);\r\n\r\n    return (\r\n        <div className=\"txt-wrap\">\r\n            <input\r\n                type=\"text\"\r\n                value={value || \"\"}\r\n                onChange={(e) => {\r\n                    setValue(e.target.value);\r\n                    onChange(e.target.value);\r\n                }}\r\n                className=\"txt\"\r\n                placeholder=\"Search\"\r\n            />\r\n            <i className=\"fa fa-search fa-6\" aria-hidden=\"true\"></i>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default GlobalFilter;\r\n","/* loaded by smart-asset */\nexport default require(\"./RowDelete~RKolkpAF.svg\")","/* loaded by smart-asset */\nexport default require(\"./RowEdit~BuKwAcSl.svg\")","/* loaded by smart-asset */\nexport default require(\"./RowPin~qQRdvcXq.png\")","import React, { useState, memo } from \"react\";\r\nimport ClickAwayListener from \"react-click-away-listener\";\r\nimport RowDelete from \"../Images/RowDelete.svg\";\r\nimport RowEdit from \"../Images/RowEdit.svg\";\r\nimport RowPin from \"../Images/RowPin.png\";\r\n\r\nconst RowOptions = memo((props) => {\r\n    const { row, originalData, DeletePopUpOverLay, deleteRowFromGrid, RowEditOverlay, rowEditData, updateRowInGrid } = props;\r\n    const { index, original } = row;\r\n\r\n    const [isRowOptionsOpen, setRowOptionsOpen] = useState(false);\r\n    const [isRowEditOverlayOpen, setRowEditOverlayOpen] = useState(false);\r\n    const [isDeleteOverlayOpen, setDeleteOverlayOpen] = useState(false);\r\n\r\n    const openRowOptionsOverlay = () => {\r\n        setRowOptionsOpen(true);\r\n    };\r\n\r\n    const closeRowOptionsOverlay = () => {\r\n        setRowOptionsOpen(false);\r\n    };\r\n\r\n    const openRowEditOverlay = () => {\r\n        setRowOptionsOpen(false);\r\n        setRowEditOverlayOpen(true);\r\n    };\r\n\r\n    const closeRowEditOverlay = () => {\r\n        setRowEditOverlayOpen(false);\r\n    };\r\n\r\n    const updateRow = (updatedrow) => {\r\n        const originalDataIndex = originalData.findIndex((data) => {\r\n            return data === original;\r\n        });\r\n        updateRowInGrid(originalDataIndex, updatedrow);\r\n    };\r\n\r\n    const openDeleteOverlay = () => {\r\n        setRowOptionsOpen(false);\r\n        setDeleteOverlayOpen(true);\r\n    };\r\n\r\n    const closeDeleteOverlay = () => {\r\n        setDeleteOverlayOpen(false);\r\n    };\r\n\r\n    const deleteRow = () => {\r\n        const originalDataIndex = originalData.findIndex((data) => {\r\n            return data === original;\r\n        });\r\n        deleteRowFromGrid(originalDataIndex, original);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"row-options-wrap\">\r\n                <span className=\"icon-row-options\" onClick={openRowOptionsOverlay}>\r\n                    <i></i>\r\n                    <i></i>\r\n                    <i></i>\r\n                </span>\r\n                {isRowOptionsOpen ? (\r\n                    <ClickAwayListener onClickAway={closeRowOptionsOverlay}>\r\n                        <div className=\"row-options-overlay\">\r\n                            <ul>\r\n                                <li>\r\n                                    <span onClick={openRowEditOverlay}>\r\n                                        <i>\r\n                                            <img src={RowEdit} alt=\"cargo\" />\r\n                                        </i>\r\n                                        <span>Edit</span>\r\n                                    </span>\r\n                                </li>\r\n                                <li>\r\n                                    <span>\r\n                                        <i>\r\n                                            <img src={RowPin} alt=\"cargo\" width=\"15\" height=\"15\" />\r\n                                        </i>\r\n                                        <span>Pin This row</span>\r\n                                    </span>\r\n                                </li>\r\n                                <li>\r\n                                    <span onClick={openDeleteOverlay}>\r\n                                        <i>\r\n                                            <img src={RowDelete} alt=\"cargo\" />\r\n                                        </i>\r\n                                        <span>Delete</span>\r\n                                    </span>\r\n                                </li>\r\n                            </ul>\r\n                            <span className=\"close\" onClick={closeRowOptionsOverlay}>\r\n                                <i className=\"fa fa-close\"></i>\r\n                            </span>\r\n                        </div>\r\n                    </ClickAwayListener>\r\n                ) : null}\r\n            </div>\r\n            {isRowEditOverlayOpen ? (\r\n                <RowEditOverlay\r\n                    row={original}\r\n                    rowEditData={rowEditData}\r\n                    closeRowEditOverlay={closeRowEditOverlay}\r\n                    updateRow={updateRow}\r\n                />\r\n            ) : null}\r\n            {isDeleteOverlayOpen ? <DeletePopUpOverLay closeDeleteOverlay={closeDeleteOverlay} deleteRow={deleteRow} /> : null}\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default RowOptions;\r\n","export const ItemTypes = {\r\n    COLUMN: \"column\"\r\n};\r\n","import React from \"react\";\r\nimport { useDrag, useDrop } from \"react-dnd\";\r\nimport { ItemTypes } from \"./ItemTypes\";\r\n\r\nconst ColumnItem = ({ id, name, moveColumn, findColumn, innerCells }) => {\r\n    const originalIndex = findColumn(id).index;\r\n\r\n    const [{ isDragging }, drag] = useDrag({\r\n        item: { type: ItemTypes.COLUMN, id, originalIndex },\r\n        collect: (monitor) => ({\r\n            isDragging: monitor.isDragging()\r\n        }),\r\n        end: (dropResult, monitor) => {\r\n            const { id: droppedId, originalIndex } = monitor.getItem();\r\n            const didDrop = monitor.didDrop();\r\n            if (!didDrop) {\r\n                moveColumn(droppedId, originalIndex);\r\n            }\r\n        }\r\n    });\r\n\r\n    const [, drop] = useDrop({\r\n        accept: ItemTypes.COLUMN,\r\n        canDrop: () => false,\r\n        hover({ id: draggedId }) {\r\n            if (draggedId !== id) {\r\n                const { index: overIndex } = findColumn(id);\r\n                moveColumn(draggedId, overIndex);\r\n            }\r\n        }\r\n    });\r\n\r\n    const opacity = isDragging ? 0.1 : 1;\r\n\r\n    return (\r\n        <div style={{ opacity }}>\r\n            <div className=\"column__reorder\">\r\n                <div ref={(node) => drag(drop(node))} style={{ cursor: \"move\" }} className=\"\">\r\n                    <i className=\"fa fa-align-justify\" aria-hidden=\"true\"></i>\r\n                </div>\r\n                <div className=\"\">{name}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ColumnItem;\r\n","import React, { useState } from \"react\";\r\nimport { useDrop } from \"react-dnd\";\r\nimport update from \"immutability-helper\";\r\nimport { ItemTypes } from \"./ItemTypes\";\r\nimport ColumnItem from \"./columnItem\";\r\n\r\nconst ColumnsList = (props) => {\r\n    const { updateColumnsInState, columnsToManage } = props;\r\n\r\n    const moveColumn = (columnId, atIndex) => {\r\n        const { column, index } = findColumn(columnId);\r\n        updateColumnsInState(\r\n            update(columnsToManage, {\r\n                $splice: [\r\n                    [index, 1],\r\n                    [atIndex, 0, column]\r\n                ]\r\n            })\r\n        );\r\n    };\r\n\r\n    const findColumn = (columnId) => {\r\n        const column = columnsToManage.filter((c) => `${c.columnId}` === columnId)[0];\r\n        return {\r\n            column,\r\n            index: columnsToManage.indexOf(column)\r\n        };\r\n    };\r\n\r\n    const [, drop] = useDrop({ accept: ItemTypes.COLUMN });\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div ref={drop} style={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n                {columnsToManage.map((column, index) => {\r\n                    return (\r\n                        <ColumnItem\r\n                            key={index}\r\n                            id={`${column.columnId}`}\r\n                            name={`${column.Header}`}\r\n                            moveColumn={moveColumn}\r\n                            findColumn={findColumn}\r\n                            innerCells={column.innerCells}\r\n                        />\r\n                    );\r\n                })}\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default ColumnsList;\r\n","import React, { memo, useState, useEffect } from \"react\";\r\nimport { DndProvider } from \"react-dnd\";\r\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\r\nimport { TouchBackend } from \"react-dnd-touch-backend\";\r\nimport MultiBackend, { TouchTransition } from \"react-dnd-multi-backend\";\r\nimport ClickAwayListener from \"react-click-away-listener\";\r\nimport ColumnsList from \"./columnsList\";\r\n\r\nconst ColumnReordering = memo((props) => {\r\n    const { isManageColumnOpen, toggleManageColumns, originalColumns, isExpandContentAvailable, additionalColumn } = props;\r\n\r\n    const additionalColumnHeader = additionalColumn && additionalColumn.length ? additionalColumn[0].Header : \"\";\r\n    const getRemarksColumnIfAvailable = () => {\r\n        return isExpandContentAvailable ? additionalColumn : [];\r\n    };\r\n\r\n    const [managedColumns, setManagedColumns] = useState(originalColumns);\r\n    const [searchedColumns, setSearchedColumns] = useState([...originalColumns].concat(getRemarksColumnIfAvailable()));\r\n    const [remarksColumnToManage, setRemarksColumnToManage] = useState(getRemarksColumnIfAvailable);\r\n    const [isErrorDisplayed, setIsErrorDisplayed] = useState(false);\r\n\r\n    const HTML5toTouch = {\r\n        backends: [\r\n            {\r\n                backend: HTML5Backend\r\n            },\r\n            {\r\n                backend: TouchBackend,\r\n                options: { enableMouseEvents: true },\r\n                preview: true,\r\n                transition: TouchTransition\r\n            }\r\n        ]\r\n    };\r\n\r\n    const filterColumnsList = (event) => {\r\n        let { value } = event ? event.target : \"\";\r\n        value = value ? value.toLowerCase() : \"\";\r\n        if (value != \"\") {\r\n            setSearchedColumns(\r\n                originalColumns\r\n                    .filter((column) => {\r\n                        return column.Header.toLowerCase().includes(value);\r\n                    })\r\n                    .concat(\r\n                        getRemarksColumnIfAvailable().filter((column) => {\r\n                            return column.Header.toLowerCase().includes(value);\r\n                        })\r\n                    )\r\n            );\r\n        } else {\r\n            setSearchedColumns(originalColumns.concat(getRemarksColumnIfAvailable()));\r\n        }\r\n    };\r\n\r\n    const updateColumnsInState = (columns) => {\r\n        setManagedColumns(columns);\r\n    };\r\n\r\n    const isCheckboxSelected = (header) => {\r\n        if (header === additionalColumnHeader) {\r\n            return remarksColumnToManage.length > 0;\r\n        } else if (header === \"Select All\") {\r\n            return searchedColumns.length === managedColumns.length + remarksColumnToManage.length;\r\n        } else {\r\n            const selectedColumn = managedColumns.filter((column) => {\r\n                return column.Header === header;\r\n            });\r\n            return selectedColumn && selectedColumn.length > 0;\r\n        }\r\n    };\r\n\r\n    const selectAllColumns = (event) => {\r\n        if (event.currentTarget.checked) {\r\n            setManagedColumns(originalColumns);\r\n            setRemarksColumnToManage(getRemarksColumnIfAvailable());\r\n        } else {\r\n            setManagedColumns([]);\r\n            setRemarksColumnToManage([]);\r\n        }\r\n    };\r\n\r\n    const selectSingleColumn = (event) => {\r\n        const { currentTarget } = event;\r\n        const { checked, value } = currentTarget;\r\n\r\n        if (value === additionalColumnHeader) {\r\n            if (checked) {\r\n                setRemarksColumnToManage(additionalColumn);\r\n            } else {\r\n                setRemarksColumnToManage([]);\r\n            }\r\n        } else {\r\n            //If column checkbox is checked\r\n            if (checked) {\r\n                //Find the index of selected column from original column array and also find the user selected column\r\n                let indexOfColumnToAdd = originalColumns.findIndex((column) => {\r\n                    return column.Header == value;\r\n                });\r\n                const itemToAdd = originalColumns[indexOfColumnToAdd];\r\n\r\n                //Loop through the managedColumns array to find the position of the column that is present previous to the user selected column\r\n                //Find index of that previous column and push the new column to add in that position\r\n                let prevItemIndex = -1;\r\n                while (indexOfColumnToAdd > 0 && prevItemIndex === -1) {\r\n                    prevItemIndex = managedColumns.findIndex((column) => {\r\n                        return column.Header == originalColumns[indexOfColumnToAdd - 1].Header;\r\n                    });\r\n                    indexOfColumnToAdd = indexOfColumnToAdd - 1;\r\n                }\r\n\r\n                const newColumnsList = managedColumns.slice(0); //Copying state value\r\n                newColumnsList.splice(prevItemIndex + 1, 0, itemToAdd);\r\n                setManagedColumns(newColumnsList);\r\n            } else {\r\n                setManagedColumns(\r\n                    managedColumns.filter((column) => {\r\n                        return column.Header !== value;\r\n                    })\r\n                );\r\n            }\r\n        }\r\n    };\r\n\r\n    const doColumnUpdate = () => {\r\n        setIsErrorDisplayed(false);\r\n        if (managedColumns && managedColumns.length > 0) {\r\n            setSearchedColumns(originalColumns.concat(getRemarksColumnIfAvailable()));\r\n            props.updateColumnStructure(managedColumns, remarksColumnToManage);\r\n        } else {\r\n            setIsErrorDisplayed(true);\r\n        }\r\n    };\r\n\r\n    const resetColumnUpdate = () => {\r\n        setManagedColumns(originalColumns);\r\n        setSearchedColumns(originalColumns.concat(getRemarksColumnIfAvailable()));\r\n        setRemarksColumnToManage(getRemarksColumnIfAvailable());\r\n        props.updateColumnStructure(originalColumns, getRemarksColumnIfAvailable());\r\n    };\r\n\r\n    if (isManageColumnOpen) {\r\n        return (\r\n            <ClickAwayListener onClickAway={toggleManageColumns}>\r\n                <div className=\"columns--grid\">\r\n                    <div className=\"column__grid\">\r\n                        <div className=\"column__chooser\">\r\n                            <div className=\"column__header\">\r\n                                <div className=\"\">\r\n                                    <strong>Column Chooser</strong>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"column__body\">\r\n                                <div>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        placeholder=\"Search column\"\r\n                                        className=\"custom__ctrl\"\r\n                                        onChange={filterColumnsList}\r\n                                    ></input>\r\n                                </div>\r\n                                <div className=\"column__selectAll\">\r\n                                    <div className=\"column__checkbox\">\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            value=\"Select All\"\r\n                                            checked={isCheckboxSelected(\"Select All\")}\r\n                                            onChange={selectAllColumns}\r\n                                        ></input>\r\n                                    </div>\r\n                                    <div className=\"column__selectTxt\">Select All</div>\r\n                                </div>\r\n                                {searchedColumns.map((column, index) => {\r\n                                    return (\r\n                                        <div className=\"column__wrap\" key={index}>\r\n                                            <div className=\"column__checkbox\">\r\n                                                <input\r\n                                                    type=\"checkbox\"\r\n                                                    value={column.Header}\r\n                                                    checked={isCheckboxSelected(column.Header)}\r\n                                                    onChange={selectSingleColumn}\r\n                                                ></input>\r\n                                            </div>\r\n                                            <div className=\"column__txt\">{column.Header}</div>\r\n                                        </div>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"column__settings\">\r\n                            <div className=\"column__header\">\r\n                                <div className=\"column__headerTxt\">\r\n                                    <strong>Column Settings</strong>\r\n                                    {isErrorDisplayed ? (\r\n                                        <strong style={{ marginLeft: \"10px\", color: \"red\" }}>\r\n                                            Select at least one column (other than {additionalColumnHeader})\r\n                                        </strong>\r\n                                    ) : null}\r\n                                </div>\r\n                                <div className=\"column__close\" onClick={toggleManageColumns}>\r\n                                    <i className=\"fa fa-times\" aria-hidden=\"true\"></i>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"column__body\">\r\n                                <DndProvider backend={MultiBackend} options={HTML5toTouch}>\r\n                                    <ColumnsList columnsToManage={managedColumns} updateColumnsInState={updateColumnsInState} />\r\n                                </DndProvider>\r\n                                {remarksColumnToManage && remarksColumnToManage.length > 0 ? (\r\n                                    <div className=\"column__reorder full-width\">\r\n                                        <div className=\"\">{remarksColumnToManage[0].Header}</div>\r\n                                    </div>\r\n                                ) : null}\r\n                            </div>\r\n                            <div className=\"column__footer\">\r\n                                <div className=\"column__btns\">\r\n                                    <button className=\"btns\" onClick={resetColumnUpdate}>\r\n                                        Reset\r\n                                    </button>\r\n                                    <button className=\"btns\" onClick={toggleManageColumns}>\r\n                                        Cancel\r\n                                    </button>\r\n                                    <button className=\"btns btns__save\" onClick={doColumnUpdate}>\r\n                                        Save\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </ClickAwayListener>\r\n        );\r\n    } else {\r\n        return <div></div>;\r\n    }\r\n});\r\n\r\nexport default ColumnReordering;\r\n","export const ItemTypes = {\n    SORT_ITEM: \"SORT_ITEM\"\n};\n","/* loaded by smart-asset */\nexport default require(\"./SortCopy~IGKyJbDR.svg\")","/* loaded by smart-asset */\nexport default require(\"./SortDelete~MFpZtzWS.svg\")","import React from \"react\";\nimport { useDrag, useDrop } from \"react-dnd\";\nimport { ItemTypes } from \"./ItemTypes\";\nimport SortCopy from \"../../Images/SortCopy.svg\";\nimport SortDelete from \"../../Images/SortDelete.svg\";\n\nconst SortItem = ({\n    id,\n    sortOption,\n    originalColumns,\n    moveSort,\n    findSort,\n    updateSingleSortingOption,\n    copySortOption,\n    deleteSortOption\n}) => {\n    const originalIndex = findSort(id).index;\n\n    const [{ isDragging }, drag] = useDrag({\n        item: { type: ItemTypes.SORT_ITEM, id, originalIndex },\n        collect: (monitor) => ({\n            isDragging: monitor.isDragging()\n        }),\n        end: (dropResult, monitor) => {\n            const { id: droppedId, originalIndex } = monitor.getItem();\n            const didDrop = monitor.didDrop();\n            if (!didDrop) {\n                moveSort(droppedId, originalIndex);\n            }\n        }\n    });\n\n    const [, drop] = useDrop({\n        accept: ItemTypes.SORT_ITEM,\n        canDrop: () => false,\n        hover({ id: draggedId }) {\n            if (draggedId !== id) {\n                const { index: overIndex } = findSort(id);\n                moveSort(draggedId, overIndex);\n            }\n        }\n    });\n\n    const getInncerCellsOfColumn = (columnAccessor) => {\n        return originalColumns.find((column) => {\n            return column.accessor === columnAccessor;\n        }).innerCells;\n    };\n\n    const changeSortByOptions = (event) => {\n        const newSortByValue = event.target.value;\n        const innerCellsList = getInncerCellsOfColumn(newSortByValue);\n        updateSingleSortingOption(\n            id,\n            newSortByValue,\n            innerCellsList && innerCellsList.length > 0 ? innerCellsList[0].accessor : \"value\",\n            sortOption.order\n        );\n    };\n\n    const changeSortOnOptions = (event) => {\n        const newSortOnValue = event.target.value;\n        updateSingleSortingOption(id, sortOption.sortBy, newSortOnValue, sortOption.order);\n    };\n\n    const changeSortOrderOptions = (event) => {\n        const newSortOrderValue = event.target.value;\n        updateSingleSortingOption(id, sortOption.sortBy, sortOption.sortOn, newSortOrderValue);\n    };\n\n    const copySort = () => {\n        copySortOption(id);\n    };\n\n    const deleteSort = () => {\n        deleteSortOption(id);\n    };\n\n    const opacity = isDragging ? 0.5 : 1;\n\n    return (\n        <div className=\"sort__bodyContent\" style={{ opacity }}>\n            <div className=\"sort__reorder\">\n                <div ref={(node) => drag(drop(node))} style={{ cursor: \"move\" }} className=\"\">\n                    <i className=\"fa fa-navicon\"></i>\n                </div>\n            </div>\n\n            <div className=\"sort__reorder\">\n                <div className=\"sort__file\">\n                    <select className=\"custom__ctrl\" onChange={changeSortByOptions} value={sortOption.sortBy}>\n                        {originalColumns.map((orgItem, index) => (\n                            <option key={index} value={orgItem.accessor}>\n                                {orgItem.Header}\n                            </option>\n                        ))}\n                    </select>\n                </div>\n            </div>\n            <div className=\"sort__reorder\">\n                <div className=\"sort__file\">\n                    <select className=\"custom__ctrl\" onChange={changeSortOnOptions} value={sortOption.sortOn}>\n                        {getInncerCellsOfColumn(sortOption.sortBy) && getInncerCellsOfColumn(sortOption.sortBy).length > 0 ? (\n                            getInncerCellsOfColumn(sortOption.sortBy).map((innerCellItem, innerCellIndex) => (\n                                <option key={innerCellIndex} value={innerCellItem.accessor}>\n                                    {innerCellItem.Header}\n                                </option>\n                            ))\n                        ) : (\n                            <option key={0} value=\"value\">\n                                Value\n                            </option>\n                        )}\n                    </select>\n                </div>\n            </div>\n            <div className=\"sort__reorder\">\n                <div className=\"sort__file\">\n                    <select className=\"custom__ctrl\" value={sortOption.order} onChange={changeSortOrderOptions}>\n                        <option>Ascending</option>\n                        <option>Descending</option>\n                    </select>\n                </div>\n            </div>\n            <div className=\"sort__reorder\">\n                <div className=\"sort__icon\" type={\"button\"} onClick={copySort}>\n                    <i>\n                        <img src={SortCopy} alt=\"copy sort\" />\n                    </i>\n                </div>\n            </div>\n            <div className=\"sort__reorder\">\n                <div className=\"sort__icon\" type={\"button\"} onClick={deleteSort}>\n                    <i>\n                        <img src={SortDelete} alt=\"copy sort\" />\n                    </i>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default SortItem;\n","import React from \"react\";\nimport { useDrop } from \"react-dnd\";\nimport update from \"immutability-helper\";\nimport { ItemTypes } from \"./ItemTypes\";\nimport SortItem from \"./sortingItem\";\n\nconst SortingList = (props) => {\n    const { updateSortingOptions, sortOptions } = props;\n\n    const moveSort = (sortId, atIndex) => {\n        const { sort, index } = findSort(sortId);\n        updateSortingOptions(\n            update(sortOptions, {\n                $splice: [\n                    [index, 1],\n                    [atIndex, 0, sort]\n                ]\n            })\n        );\n    };\n\n    const findSort = (sortId) => {\n        const sort = sortOptions.filter((c, index) => index === sortId)[0];\n        return {\n            sort,\n            index: sortOptions.indexOf(sort)\n        };\n    };\n\n    const [, drop] = useDrop({ accept: ItemTypes.SORT_ITEM });\n\n    return (\n        <React.Fragment>\n            <div ref={drop} style={{ display: \"flex\", flexWrap: \"wrap\" }}>\n                {sortOptions && sortOptions.length > 0 ? (\n                    <ul>\n                        <li>Sort By</li>\n                        <li>Sort On</li>\n                        <li>Order</li>\n                    </ul>\n                ) : null}\n                {sortOptions.map((sortOption, index) => {\n                    return (\n                        <SortItem\n                            id={index}\n                            key={index}\n                            sortOption={sortOption}\n                            originalColumns={props.originalColumns}\n                            moveSort={moveSort}\n                            findSort={findSort}\n                            updateSingleSortingOption={props.updateSingleSortingOption}\n                            copySortOption={props.copySortOption}\n                            deleteSortOption={props.deleteSortOption}\n                        />\n                    );\n                })}\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default SortingList;\n","import React, { memo, useState } from \"react\";\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { TouchBackend } from \"react-dnd-touch-backend\";\nimport MultiBackend, { TouchTransition } from \"react-dnd-multi-backend\";\nimport ClickAwayListener from \"react-click-away-listener\";\nimport SortingList from \"./sortingList\";\n\nconst GroupSort = memo((props) => {\n    const { isGroupSortOverLayOpen, toggleGroupSortOverLay, applyGroupSort, originalColumns } = props;\n\n    const sortingOrders = [\"Ascending\", \"Descending\"];\n    const defaultSortingOption = [\n        {\n            sortBy: originalColumns[0].accessor,\n            sortOn: originalColumns[0].innerCells ? originalColumns[0].innerCells[0].accessor : \"value\",\n            order: sortingOrders[0]\n        }\n    ];\n\n    const [sortOptions, setSortOptions] = useState([]);\n    const [isErrorDisplayed, setIsErrorDisplayed] = useState(false);\n\n    const HTML5toTouch = {\n        backends: [\n            {\n                backend: HTML5Backend\n            },\n            {\n                backend: TouchBackend,\n                options: { enableMouseEvents: true },\n                preview: true,\n                transition: TouchTransition\n            }\n        ]\n    };\n\n    const updateSortingOptions = (sortingOptions) => {\n        setSortOptions(sortingOptions);\n    };\n\n    const addSortingOptions = () => {\n        setSortOptions([...sortOptions, ...defaultSortingOption]);\n    };\n\n    const clearSortingOptions = () => {\n        setSortOptions([]);\n        applyGroupSort([]);\n        toggleGroupSortOverLay();\n    };\n\n    const updateSingleSortingOption = (sortIndex, sortByValue, sortOnValue, sortOrder) => {\n        const newOptionsList = sortOptions.slice(0);\n        const newSortingOption = {\n            sortBy: sortByValue,\n            sortOn: sortOnValue,\n            order: sortOrder\n        };\n        const updatedSortOptions = newOptionsList.map((option, index) => (index === sortIndex ? newSortingOption : option));\n        updateSortingOptions(updatedSortOptions);\n    };\n\n    const copySortOption = (sortIndex) => {\n        const newOption = sortOptions.slice(0)[sortIndex];\n        setSortOptions(sortOptions.concat(newOption));\n    };\n\n    const deleteSortOption = (sortIndex) => {\n        setSortOptions(\n            sortOptions.filter((option, index) => {\n                return index !== sortIndex;\n            })\n        );\n    };\n\n    const applySort = () => {\n        let isError = false;\n        sortOptions.map((option, index) => {\n            const { sortBy, sortOn } = option;\n            const optionIndex = index;\n            const duplicateSort = sortOptions.find((opt, optIndex) => {\n                return sortBy === opt.sortBy && sortOn === opt.sortOn && optionIndex !== optIndex;\n            });\n            if (duplicateSort) {\n                isError = true;\n            }\n        });\n        if (!isError) {\n            applyGroupSort(sortOptions);\n            toggleGroupSortOverLay();\n        }\n        setIsErrorDisplayed(isError);\n    };\n\n    if (isGroupSortOverLayOpen) {\n        return (\n            <ClickAwayListener onClickAway={toggleGroupSortOverLay}>\n                <div className=\"sorts--grid\">\n                    <div className=\"sort__grid\">\n                        <div className=\"sort__settings\">\n                            <div className=\"sort__header\">\n                                <div className=\"sort__headerTxt\">Sort</div>\n                                <div className=\"sort__close\">\n                                    <i className=\"fa fa-times\" aria-hidden=\"true\" onClick={toggleGroupSortOverLay}></i>\n                                </div>\n                            </div>\n                            <div className=\"sort__body\">\n                                <DndProvider backend={MultiBackend} options={HTML5toTouch}>\n                                    <SortingList\n                                        sortOptions={sortOptions}\n                                        originalColumns={originalColumns}\n                                        updateSortingOptions={updateSortingOptions}\n                                        updateSingleSortingOption={updateSingleSortingOption}\n                                        copySortOption={copySortOption}\n                                        deleteSortOption={deleteSortOption}\n                                    />\n                                </DndProvider>\n                            </div>\n                            <div className=\"sort-warning\">\n                                {isErrorDisplayed ? <span>Duplicate sort options found.</span> : null}\n                            </div>\n                            <div className=\"sort__new\">\n                                <div className=\"sort__section\" type=\"button\" onClick={addSortingOptions}>\n                                    <span>+</span>\n                                    <div className=\"sort__txt\">New Sort</div>\n                                </div>\n                            </div>\n                            <div className=\"sort__footer\">\n                                <div className=\"sort__btns\">\n                                    <button className=\"btns\" onClick={clearSortingOptions}>\n                                        Clear All\n                                    </button>\n                                    <button className=\"btns btns__save\" onClick={applySort}>\n                                        Ok\n                                    </button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </ClickAwayListener>\n        );\n    } else {\n        return <div></div>;\n    }\n});\n\nexport default GroupSort;\n","import React, { memo, useState } from \"react\";\r\nimport ClickAwayListener from \"react-click-away-listener\";\r\nimport jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\nimport * as FileSaver from \"file-saver\";\r\nimport * as XLSX from \"xlsx\";\r\n\r\nconst ExportData = memo((props) => {\r\n    const {\r\n        isExportOverlayOpen,\r\n        toggleExportDataOverlay,\r\n        rows,\r\n        originalColumns,\r\n        isExpandContentAvailable,\r\n        additionalColumn\r\n    } = props;\r\n\r\n    const getRemarksColumnIfAvailable = () => {\r\n        return isExpandContentAvailable ? additionalColumn : [];\r\n    };\r\n\r\n    const updatedColumns = [...originalColumns].concat(getRemarksColumnIfAvailable());\r\n\r\n    const [managedColumns, setManagedColumns] = useState(updatedColumns);\r\n    const [searchedColumns, setSearchedColumns] = useState(updatedColumns);\r\n    const [downloadTypes, setDownloadTypes] = useState([]);\r\n    const [warning, setWarning] = useState(\"\");\r\n\r\n    let isDownload = false;\r\n\r\n    const exportRowData = () => {\r\n        isDownload = true;\r\n        let filteredRow = [];\r\n        let filteredRowValues = [];\r\n\r\n        setWarning(\"\");\r\n\r\n        if (managedColumns.length > 0 && downloadTypes.length > 0) {\r\n            rows.forEach((rowDetails) => {\r\n                let row = rowDetails.original;\r\n                const keys = Object.getOwnPropertyNames(row);\r\n                let filteredColumnVal = {};\r\n                let rowFilteredValues = [];\r\n                keys.forEach(function (key) {\r\n                    managedColumns.forEach((columnName) => {\r\n                        if (\r\n                            columnName.accessor === key ||\r\n                            (columnName.innerCells && columnName.innerCells.length && columnName.innerCells.includes(key))\r\n                        ) {\r\n                            let columnValue = \"\";\r\n                            if (typeof row[key] === \"object\") {\r\n                                if (row[key].length === undefined)\r\n                                    columnValue = Object.values(row[key]).toString().replace(\",\", \" | \");\r\n                                if (row[key].length > 0) {\r\n                                    let arrObj = \"\";\r\n                                    row[key].forEach((item, index) => {\r\n                                        arrObj = index != 0 ? arrObj + \" | \" + Object.values(item) : Object.values(item);\r\n                                    });\r\n                                    columnValue = arrObj;\r\n                                }\r\n                            } else {\r\n                                columnValue = row[key];\r\n                            }\r\n                            filteredColumnVal[key] = columnValue;\r\n                            rowFilteredValues.push(columnValue);\r\n                        }\r\n                    });\r\n                });\r\n                filteredRow.push(filteredColumnVal);\r\n                filteredRowValues.push(rowFilteredValues);\r\n            });\r\n\r\n            downloadTypes.map((item) => {\r\n                if (item === \"pdf\") {\r\n                    downloadPDF(filteredRowValues);\r\n                } else if (item === \"excel\") {\r\n                    downloadXLSFile(filteredRow);\r\n                } else {\r\n                    downloadCSVFile(filteredRow);\r\n                }\r\n            });\r\n        } else {\r\n            if (managedColumns.length === 0 && downloadTypes.length === 0) {\r\n                setWarning(\"Select at least one column and a file type\");\r\n            } else if (managedColumns.length === 0) {\r\n                setWarning(\"Select at least one column\");\r\n            } else if (downloadTypes.length === 0) {\r\n                setWarning(\"Select at least one file type\");\r\n            }\r\n        }\r\n    };\r\n\r\n    const downloadPDF = (rowFilteredValues) => {\r\n        const unit = \"pt\";\r\n        const size = \"A4\"; // Use A1, A2, A3 or A4\r\n        const orientation = \"landscape\"; // portrait or landscape\r\n\r\n        const marginLeft = 300;\r\n        const doc = new jsPDF(orientation, unit, size);\r\n\r\n        doc.setFontSize(15);\r\n\r\n        const title = \"iCargo Neo Report\";\r\n        const headers = [\r\n            managedColumns.map((column) => {\r\n                return column.Header;\r\n            })\r\n        ];\r\n\r\n        let content = {\r\n            startY: 50,\r\n            head: headers,\r\n            body: rowFilteredValues\r\n        };\r\n\r\n        doc.text(title, marginLeft, 40);\r\n        doc.autoTable(content);\r\n        doc.save(\"iCargo Neo Report.pdf\");\r\n\r\n        isDownload = false;\r\n    };\r\n\r\n    const downloadCSVFile = (filteredRowValue) => {\r\n        const fileType = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\r\n        const fileExtension = \".csv\";\r\n        const fileName = \"iCargo Neo Report\";\r\n        const ws = XLSX.utils.json_to_sheet(filteredRowValue);\r\n        const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\r\n        const excelBuffer = XLSX.write(wb, { bookType: \"csv\", type: \"array\" });\r\n        const data = new Blob([excelBuffer], { type: fileType });\r\n        FileSaver.saveAs(data, fileName + fileExtension);\r\n    };\r\n\r\n    const downloadXLSFile = (filteredRowValue) => {\r\n        const fileType = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\r\n        const fileExtension = \".xlsx\";\r\n        const fileName = \"iCargo Neo Report\";\r\n        const ws = XLSX.utils.json_to_sheet(filteredRowValue);\r\n        const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\r\n        const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\r\n        const data = new Blob([excelBuffer], { type: fileType });\r\n        FileSaver.saveAs(data, fileName + fileExtension);\r\n    };\r\n\r\n    const filterColumnsList = (event) => {\r\n        let { value } = event ? event.target : \"\";\r\n        value = value ? value.toLowerCase() : \"\";\r\n        if (value != \"\") {\r\n            setSearchedColumns(\r\n                originalColumns\r\n                    .filter((column) => {\r\n                        return column.Header.toLowerCase().includes(value);\r\n                    })\r\n                    .concat(\r\n                        getRemarksColumnIfAvailable().filter((column) => {\r\n                            return column.Header.toLowerCase().includes(value);\r\n                        })\r\n                    )\r\n            );\r\n        } else {\r\n            setSearchedColumns(updatedColumns);\r\n        }\r\n    };\r\n\r\n    const isCheckboxSelected = (header) => {\r\n        if (header === \"Select All\") {\r\n            return managedColumns.length === searchedColumns.length;\r\n        } else {\r\n            const selectedColumn = managedColumns.filter((column) => {\r\n                return column.Header === header;\r\n            });\r\n            return selectedColumn && selectedColumn.length > 0;\r\n        }\r\n    };\r\n\r\n    const selectAllColumns = (event) => {\r\n        if (event.target.checked) {\r\n            setManagedColumns(updatedColumns);\r\n        } else {\r\n            setManagedColumns([]);\r\n        }\r\n    };\r\n\r\n    const selectSingleColumn = (event) => {\r\n        const { currentTarget } = event;\r\n        const { checked, value } = currentTarget;\r\n\r\n        //If column checkbox is checked\r\n        if (checked) {\r\n            //Find the index of selected column from original column array and also find the user selected column\r\n            let indexOfColumnToAdd = updatedColumns.findIndex((column) => {\r\n                return column.Header == value;\r\n            });\r\n            const itemToAdd = updatedColumns[indexOfColumnToAdd];\r\n\r\n            //Loop through the managedColumns array to find the position of the column that is present previous to the user selected column\r\n            //Find index of that previous column and push the new column to add in that position\r\n            let prevItemIndex = -1;\r\n            while (indexOfColumnToAdd > 0 && prevItemIndex === -1) {\r\n                prevItemIndex = managedColumns.findIndex((column) => {\r\n                    return column.Header == updatedColumns[indexOfColumnToAdd - 1].Header;\r\n                });\r\n                indexOfColumnToAdd = indexOfColumnToAdd - 1;\r\n            }\r\n\r\n            const newColumnsList = managedColumns.slice(0); //Copying state value\r\n            newColumnsList.splice(prevItemIndex + 1, 0, itemToAdd);\r\n            setManagedColumns(newColumnsList);\r\n        } else {\r\n            setManagedColumns(\r\n                managedColumns.filter((column) => {\r\n                    return column.Header !== value;\r\n                })\r\n            );\r\n        }\r\n    };\r\n\r\n    const changeDownloadType = (event) => {\r\n        const { value, checked } = event ? event.currentTarget : \"\";\r\n        if (checked) {\r\n            setDownloadTypes(downloadTypes.concat([value]));\r\n        } else {\r\n            setDownloadTypes(\r\n                downloadTypes.filter((type) => {\r\n                    return type !== value;\r\n                })\r\n            );\r\n        }\r\n    };\r\n\r\n    if (isExportOverlayOpen) {\r\n        return (\r\n            <ClickAwayListener onClickAway={toggleExportDataOverlay}>\r\n                <div className=\"exports--grid\">\r\n                    <div className=\"export__grid\">\r\n                        <div className=\"export__chooser\">\r\n                            <div className=\"export__header\">\r\n                                <div className=\"\">\r\n                                    <strong>Export Data</strong>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"export__body\">\r\n                                <div>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        placeholder=\"Search column\"\r\n                                        className=\"custom__ctrl\"\r\n                                        onChange={filterColumnsList}\r\n                                    ></input>\r\n                                </div>\r\n                                <div className=\"export__wrap export__headertxt\">\r\n                                    <div className=\"export__checkbox\">\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            value=\"Select All\"\r\n                                            checked={isCheckboxSelected(\"Select All\")}\r\n                                            onChange={selectAllColumns}\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"export__txt\">Select All</div>\r\n                                </div>\r\n                                {searchedColumns.map((column, index) => {\r\n                                    return (\r\n                                        <div className=\"export__wrap\" key={index}>\r\n                                            <div className=\"export__checkbox\">\r\n                                                <input\r\n                                                    type=\"checkbox\"\r\n                                                    value={column.Header}\r\n                                                    checked={isCheckboxSelected(column.Header)}\r\n                                                    onChange={selectSingleColumn}\r\n                                                ></input>\r\n                                            </div>\r\n                                            <div className=\"export__txt\">{column.Header}</div>\r\n                                        </div>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"export__settings\">\r\n                            <div className=\"export__header\">\r\n                                <div className=\"export__headerTxt\"></div>\r\n                                <div className=\"export__close\">\r\n                                    <i className=\"fa fa-times\" aria-hidden=\"true\" onClick={toggleExportDataOverlay}></i>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"export__as\">Export As</div>\r\n                            <div className=\"export__body\">\r\n                                <div className=\"export__reorder\">\r\n                                    <div className=\"check-wrap\">\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            id=\"chk_pdf\"\r\n                                            value=\"pdf\"\r\n                                            checked={downloadTypes.includes(\"pdf\")}\r\n                                            onChange={changeDownloadType}\r\n                                        ></input>\r\n                                    </div>\r\n                                    <div className=\"export__file\">\r\n                                        <i className=\"fa fa-file-pdf-o\" aria-hidden=\"true\"></i>\r\n                                        <br />\r\n                                        <strong>PDF</strong>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"export__reorder\">\r\n                                    <div className=\"check-wrap\">\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            id=\"chk_excel\"\r\n                                            value=\"excel\"\r\n                                            checked={downloadTypes.includes(\"excel\")}\r\n                                            onChange={changeDownloadType}\r\n                                        ></input>\r\n                                    </div>\r\n                                    <div className=\"export__file\">\r\n                                        <i className=\"fa fa-file-excel-o\" aria-hidden=\"true\"></i>\r\n                                        <br />\r\n                                        <strong>Excel</strong>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"export__reorder\">\r\n                                    <div className=\"check-wrap\">\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            id=\"chk_csv\"\r\n                                            value=\"csv\"\r\n                                            checked={downloadTypes.includes(\"csv\")}\r\n                                            onChange={changeDownloadType}\r\n                                        ></input>\r\n                                    </div>\r\n                                    <div className=\"export__file\">\r\n                                        <i className=\"fa fa-file-text-o\" aria-hidden=\"true\"></i>\r\n                                        <br />\r\n                                        <strong>CSV</strong>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"exportWarning\">\r\n                                    <span className=\"alert alert-danger\">\r\n                                        <strong>{warning}</strong>\r\n                                    </span>\r\n                                </div>\r\n                                <div>{isDownload ? <h2 style={{ textAlign: \"center\" }}>Loading...</h2> : null}</div>\r\n                            </div>\r\n                            <div className=\"export__footer\">\r\n                                <div className=\"export__btns\">\r\n                                    <button className=\"btns\" onClick={toggleExportDataOverlay}>\r\n                                        Cancel\r\n                                    </button>\r\n                                    <button className=\"btns btns__save\" onClick={exportRowData}>\r\n                                        Export\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </ClickAwayListener>\r\n        );\r\n    } else {\r\n        return <div></div>;\r\n    }\r\n});\r\n\r\nexport default ExportData;\r\n","import React, { useCallback, useState, memo, useEffect, createRef, useMemo } from \"react\";\r\nimport {\r\n    useTable,\r\n    useResizeColumns,\r\n    useFlexLayout,\r\n    useRowSelect,\r\n    useSortBy,\r\n    useFilters,\r\n    useGlobalFilter,\r\n    useExpanded\r\n} from \"react-table\";\r\nimport { VariableSizeList as List } from \"react-window\";\r\nimport AutoSizer from \"react-virtualized-auto-sizer\";\r\nimport InfiniteLoader from \"react-window-infinite-loader\";\r\nimport RowSelector from \"./Functions/RowSelector\";\r\nimport DefaultColumnFilter from \"./Functions/DefaultColumnFilter\";\r\nimport GlobalFilter from \"./Functions/GlobalFilter\";\r\nimport RowOptions from \"./Functions/RowOptions\";\r\nimport ColumnReordering from \"./Overlays/managecolumns\";\r\nimport GroupSort from \"./Overlays/groupsort\";\r\nimport ExportData from \"./Overlays/exportdata\";\r\n\r\nconst listRef = createRef(null);\r\n\r\nconst Customgrid = memo((props) => {\r\n    const {\r\n        title,\r\n        gridHeight,\r\n        gridWidth,\r\n        managableColumns,\r\n        originalColumns,\r\n        additionalColumn,\r\n        data,\r\n        originalData,\r\n        rowEditOverlay,\r\n        rowEditData,\r\n        updateRowInGrid,\r\n        deletePopUpOverLay,\r\n        deleteRowFromGrid,\r\n        globalSearchLogic,\r\n        selectBulkData,\r\n        calculateRowHeight,\r\n        isExpandContentAvailable,\r\n        renderExpandedContent,\r\n        hasNextPage,\r\n        isNextPageLoading,\r\n        loadNextPage,\r\n        doGroupSort\r\n    } = props;\r\n\r\n    //Local state value for holding columns configuration\r\n    const [columns, setColumns] = useState(managableColumns);\r\n    //Local state value for holding the boolean value to check if row expand is available\r\n    const [isRowExpandEnabled, setIsRowExpandEnabled] = useState(isExpandContentAvailable);\r\n\r\n    //Display error message if data or columns configuration is missing.\r\n    if (!(data && data.length > 0) || !(columns && columns.length > 0)) {\r\n        return <h2 style={{ marginTop: \"50px\", textAlign: \"center\" }}>Invalid Data or Columns Configuration</h2>;\r\n    }\r\n\r\n    //Variables used for handling infinite loading\r\n    const itemCount = hasNextPage ? data.length + 1 : data.length;\r\n    const loadMoreItems = isNextPageLoading ? () => {} : loadNextPage ? loadNextPage : () => {};\r\n    const isItemLoaded = (index) => !hasNextPage || index < data.length;\r\n\r\n    //Local state value for checking if column filter is open/closed\r\n    const [isFilterOpen, setFilterOpen] = useState(false);\r\n\r\n    //Toggle column filter state value based on UI clicks\r\n    const toggleColumnFilter = () => {\r\n        setFilterOpen(!isFilterOpen);\r\n    };\r\n\r\n    //Local state value for checking if group Sort Overlay is open/closed.\r\n    const [isGroupSortOverLayOpen, setGroupSortOverLay] = useState(false);\r\n\r\n    //Toggle group Sort state value based on UI clicks\r\n    const toggleGroupSortOverLay = () => {\r\n        setGroupSortOverLay(!isGroupSortOverLayOpen);\r\n    };\r\n\r\n    const applyGroupSort = (sortOptions) => {\r\n        doGroupSort(sortOptions);\r\n    };\r\n\r\n    //Local state value for hiding/unhiding column management overlay\r\n    const [isManageColumnOpen, setManageColumnOpen] = useState(false);\r\n\r\n    //Toggle column manage overlay show/hide state value based on UI clicks\r\n    const toggleManageColumns = () => {\r\n        setManageColumnOpen(!isManageColumnOpen);\r\n    };\r\n\r\n    //Callback method from column manage overlay to update the column structure of the grid\r\n    const updateColumnStructure = (newColumnStructure, remarksColumn) => {\r\n        setColumns([...newColumnStructure]);\r\n        setIsRowExpandEnabled(remarksColumn && remarksColumn.length > 0 ? true : false);\r\n        toggleManageColumns();\r\n    };\r\n\r\n    //Local state value for hiding/unhiding export data overlay\r\n    const [isExportOverlayOpen, setIsExportOverlayOpen] = useState(false);\r\n\r\n    //Toggle export overlay show/hide state value based on UI clicks\r\n    const toggleExportDataOverlay = () => {\r\n        setIsExportOverlayOpen(!isExportOverlayOpen);\r\n    };\r\n\r\n    //Column filter added for all columns by default\r\n    const defaultColumn = useMemo(\r\n        () => ({\r\n            Filter: DefaultColumnFilter\r\n        }),\r\n        []\r\n    );\r\n\r\n    //Initialize react-table instance with the values received through properties\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        rows,\r\n        prepareRow,\r\n        selectedFlatRows,\r\n        state,\r\n        setGlobalFilter\r\n    } = useTable(\r\n        {\r\n            columns,\r\n            data,\r\n            defaultColumn,\r\n            globalFilter: (rows, columns, filterValue) => {\r\n                //Call global search function defined in application, if it is present\r\n                if (globalSearchLogic && typeof globalSearchLogic === \"function\") {\r\n                    return globalSearchLogic(rows, columns, filterValue);\r\n                } else {\r\n                    return rows;\r\n                }\r\n            },\r\n            autoResetFilters: false,\r\n            autoResetGlobalFilter: false,\r\n            autoResetSortBy: false,\r\n            autoResetExpanded: false,\r\n            autoResetSelectedRows: false\r\n        },\r\n        useFilters,\r\n        useGlobalFilter,\r\n        useSortBy,\r\n        useExpanded,\r\n        useRowSelect,\r\n        useFlexLayout,\r\n        useResizeColumns,\r\n        (hooks) => {\r\n            //Add checkbox for all rows in grid, with different properties for header row and body rows\r\n            hooks.allColumns.push((columns) => [\r\n                {\r\n                    id: \"selection\",\r\n                    columnId: \"column_custom_0\",\r\n                    disableResizing: true,\r\n                    disableFilters: true,\r\n                    disableSortBy: true,\r\n                    minWidth: 35,\r\n                    width: 35,\r\n                    maxWidth: 35,\r\n                    Header: ({ getToggleAllRowsSelectedProps }) => <RowSelector {...getToggleAllRowsSelectedProps()} />,\r\n                    Cell: ({ row }) => <RowSelector {...row.getToggleRowSelectedProps()} />\r\n                },\r\n                ...columns,\r\n                {\r\n                    id: \"custom\",\r\n                    columnId: \"column_custom_1\",\r\n                    disableResizing: true,\r\n                    disableFilters: true,\r\n                    disableSortBy: true,\r\n                    minWidth: 35,\r\n                    width: 35,\r\n                    maxWidth: 35,\r\n                    Cell: ({ row }) => {\r\n                        return (\r\n                            <div className=\"action\">\r\n                                <RowOptions\r\n                                    row={row}\r\n                                    originalData={originalData}\r\n                                    DeletePopUpOverLay={deletePopUpOverLay}\r\n                                    deleteRowFromGrid={deleteRowFromGrid}\r\n                                    RowEditOverlay={rowEditOverlay}\r\n                                    rowEditData={rowEditData}\r\n                                    updateRowInGrid={updateRowInGrid}\r\n                                />\r\n                                {isRowExpandEnabled ? (\r\n                                    <span className=\"expander\" {...row.getToggleRowExpandedProps()}>\r\n                                        {row.isExpanded ? (\r\n                                            <i className=\"fa fa-angle-up\" aria-hidden=\"true\"></i>\r\n                                        ) : (\r\n                                            <i className=\"fa fa-angle-down\" aria-hidden=\"true\"></i>\r\n                                        )}\r\n                                    </span>\r\n                                ) : null}\r\n                            </div>\r\n                        );\r\n                    }\r\n                }\r\n            ]);\r\n        }\r\n    );\r\n\r\n    //Export selected row data and pass it to the callback method\r\n    const bulkSelector = () => {\r\n        if (selectBulkData) {\r\n            selectBulkData(selectedFlatRows);\r\n        }\r\n    };\r\n\r\n    //This code is to handle the row height calculation while expanding a row or resizing a column\r\n    useEffect(() => {\r\n        if (listRef && listRef.current) {\r\n            listRef.current.resetAfterIndex(0, true);\r\n        }\r\n    });\r\n\r\n    //Render each row and cells in each row, using attributes from react window list.\r\n    const RenderRow = useCallback(\r\n        ({ index, style }) => {\r\n            if (isItemLoaded(index)) {\r\n                const row = rows[index];\r\n                prepareRow(row);\r\n                return (\r\n                    <div {...row.getRowProps({ style })} className=\"table-row tr\">\r\n                        <div className=\"table-row-wrap\">\r\n                            {row.cells.map((cell) => {\r\n                                return (\r\n                                    <div {...cell.getCellProps()} className=\"table-cell td\">\r\n                                        {cell.render(\"Cell\")}\r\n                                    </div>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                        {/*Check if row eapand icon is clicked, and if yes, call function to bind content to the expanded region*/}\r\n                        {isRowExpandEnabled && row.isExpanded ? (\r\n                            <div className=\"expand\">{renderExpandedContent ? renderExpandedContent(row) : null}</div>\r\n                        ) : null}\r\n                    </div>\r\n                );\r\n            }\r\n        },\r\n        [prepareRow, rows, renderExpandedContent]\r\n    );\r\n\r\n    //Render table title, global search component, button to show/hide column filter, button to export selected row data & the grid\r\n    //Use properties and methods provided by react-table\r\n    //Autosizer used for calculating grid height (don't consider window width and column resizing value changes)\r\n    //Infinite loader used for lazy loading, with the properties passed here and other values calculated at the top\r\n    //React window list is used for implementing virtualization, specifying the item count in a frame and height of each rows in it.\r\n    return (\r\n        <div className=\"wrapper\" style={{ width: gridWidth ? gridWidth : \"100%\" }}>\r\n            <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\" />\r\n            <div className=\"table-filter\">\r\n                <div className=\"results\">\r\n                    <div className=\"name\">\r\n                        <strong>{rows.length}</strong>\r\n                        <span> {title ? title : \"Rows\"}</span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"filter-utilities\">\r\n                    <ColumnReordering\r\n                        isManageColumnOpen={isManageColumnOpen}\r\n                        toggleManageColumns={toggleManageColumns}\r\n                        originalColumns={originalColumns}\r\n                        isExpandContentAvailable={isExpandContentAvailable}\r\n                        additionalColumn={[additionalColumn]}\r\n                        updateColumnStructure={updateColumnStructure}\r\n                    />\r\n                    <GlobalFilter globalFilter={state.globalFilter} setGlobalFilter={setGlobalFilter} />\r\n                    <GroupSort\r\n                        isGroupSortOverLayOpen={isGroupSortOverLayOpen}\r\n                        toggleGroupSortOverLay={toggleGroupSortOverLay}\r\n                        originalColumns={originalColumns}\r\n                        applyGroupSort={applyGroupSort}\r\n                    />\r\n                    <ExportData\r\n                        isExportOverlayOpen={isExportOverlayOpen}\r\n                        toggleExportDataOverlay={toggleExportDataOverlay}\r\n                        rows={rows}\r\n                        originalColumns={originalColumns}\r\n                        isExpandContentAvailable={isExpandContentAvailable}\r\n                        additionalColumn={[additionalColumn]}\r\n                    />\r\n                    <div className=\"filter-icon keyword-search\" onClick={toggleColumnFilter}>\r\n                        <i className=\"fa fa-filter\" aria-hidden=\"true\"></i>\r\n                    </div>\r\n                    <div className=\"filter-icon bulk-select\" onClick={bulkSelector}>\r\n                        <i className=\"fa fa-pencil-square-o\" aria-hidden=\"true\"></i>\r\n                    </div>\r\n                    <div className=\"filter-icon bulk-select\" onClick={toggleGroupSortOverLay}>\r\n                        <i className=\"fa fa-sort-amount-desc\" aria-hidden=\"true\"></i>\r\n                    </div>\r\n                    <div className=\"filter-icon manage-columns\" onClick={toggleManageColumns}>\r\n                        <i className=\"fa fa-columns\" aria-hidden=\"true\"></i>\r\n                    </div>\r\n                    <div className=\"filter-icon manage-columns\" onClick={toggleExportDataOverlay}>\r\n                        <i className=\"fa fa-share-alt\" aria-hidden=\"true\"></i>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div\r\n                className=\"tableContainer table-outer\"\r\n                style={{ height: gridHeight ? gridHeight : \"50vh\", overflowX: \"auto\", overflowY: \"hidden\" }}\r\n            >\r\n                <AutoSizer disableWidth disableResizing>\r\n                    {({ height }) => (\r\n                        <div {...getTableProps()} className=\"table\">\r\n                            <div className=\"thead table-row table-row--head\">\r\n                                {headerGroups.map((headerGroup) => (\r\n                                    <div {...headerGroup.getHeaderGroupProps()} className=\"tr\">\r\n                                        {headerGroup.headers.map((column) => (\r\n                                            <div {...column.getHeaderProps()} className=\"table-cell column-heading th\">\r\n                                                <div {...column.getSortByToggleProps()}>\r\n                                                    {column.render(\"Header\")}\r\n                                                    <span>\r\n                                                        {column.isSorted ? (\r\n                                                            column.isSortedDesc ? (\r\n                                                                <i className=\"fa fa-sort-desc\" aria-hidden=\"true\"></i>\r\n                                                            ) : (\r\n                                                                <i className=\"fa fa-sort-asc\" aria-hidden=\"true\"></i>\r\n                                                            )\r\n                                                        ) : (\r\n                                                            \"\"\r\n                                                        )}\r\n                                                    </span>\r\n                                                </div>\r\n                                                <div className={`txt-wrap column-filter ${isFilterOpen ? \"open\" : \"\"}`}>\r\n                                                    {!column.disableFilters ? column.render(\"Filter\") : null}\r\n                                                </div>\r\n                                                {column.canResize && <div {...column.getResizerProps()} className=\"resizer\" />}\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n                                ))}\r\n                            </div>\r\n                            <div {...getTableBodyProps()} className=\"tbody\">\r\n                                <InfiniteLoader isItemLoaded={isItemLoaded} itemCount={itemCount} loadMoreItems={loadMoreItems}>\r\n                                    {({ onItemsRendered, ref }) => (\r\n                                        <List\r\n                                            ref={(list) => {\r\n                                                ref(list);\r\n                                                listRef.current = list;\r\n                                            }}\r\n                                            style={{ overflowX: \"hidden\" }}\r\n                                            height={height - 60}\r\n                                            itemCount={rows.length}\r\n                                            itemSize={(index) => {\r\n                                                if (calculateRowHeight && typeof calculateRowHeight === \"function\") {\r\n                                                    return calculateRowHeight(rows, index, headerGroups);\r\n                                                } else {\r\n                                                    return 70;\r\n                                                }\r\n                                            }}\r\n                                            onItemsRendered={onItemsRendered}\r\n                                            overscanCount={20}\r\n                                        >\r\n                                            {RenderRow}\r\n                                        </List>\r\n                                    )}\r\n                                </InfiniteLoader>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </AutoSizer>\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Customgrid;\r\n","import React, { forwardRef, useImperativeHandle, useMemo, useState, useEffect } from \"react\";\r\nimport Customgrid from \"./Customgrid\";\r\n\r\nconst Grid = forwardRef((props, ref) => {\r\n    const {\r\n        title,\r\n        gridHeight,\r\n        gridWidth,\r\n        columns,\r\n        additionalColumn,\r\n        fetchData,\r\n        rowEditOverlay,\r\n        rowEditData,\r\n        updateRowData,\r\n        deletePopUpOverLay,\r\n        deleteRowData,\r\n        selectBulkData,\r\n        calculateRowHeight\r\n    } = props;\r\n\r\n    //Set state value for variable to check if there is anext page available\r\n    const [hasNextPage, setHasNextPage] = useState(true);\r\n    //Set state value for variable to check if the loading process is going on\r\n    const [isNextPageLoading, setIsNextPageLoading] = useState(false);\r\n    //Local state value for checking if data is being loaded from API\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    //Set state value for variable to hold grid data\r\n    const [items, setItems] = useState([]);\r\n    //Local state for group sort options\r\n    const [groupSortOptions, setGroupSortOptions] = useState([]);\r\n\r\n    let processedColumns = [];\r\n    columns.forEach((column, index) => {\r\n        const { innerCells, accessor, sortValue } = column;\r\n        const isInnerCellsPresent = innerCells && innerCells.length > 0;\r\n\r\n        //Add column Id\r\n        column.columnId = `column_${index}`;\r\n\r\n        //Add logic to sort column if sort is not disabled\r\n        if (!column.disableSortBy) {\r\n            if (isInnerCellsPresent) {\r\n                //If there are inner cells and a sort value specified, do sort on that value\r\n                if (sortValue) {\r\n                    column.sortType = (rowA, rowB) => {\r\n                        return rowA.original[accessor][sortValue] > rowB.original[accessor][sortValue] ? -1 : 1;\r\n                    };\r\n                } else {\r\n                    column.disableSortBy = true;\r\n                }\r\n            } else if (!innerCells) {\r\n                //If no inner cells are there, just do sort on column value\r\n                column.sortType = (rowA, rowB) => {\r\n                    return rowA.original[accessor] > rowB.original[accessor] ? -1 : 1;\r\n                };\r\n            }\r\n        }\r\n\r\n        //Add logic to filter column if column filter is not disabled\r\n        if (!column.disableFilters) {\r\n            column.filter = (rows, id, filterValue) => {\r\n                const searchText = filterValue ? filterValue.toLowerCase() : \"\";\r\n                return rows.filter((row) => {\r\n                    //Find original data value of each row\r\n                    const { original } = row;\r\n                    //Do search for the column\r\n                    return searchColumn(column, original, searchText);\r\n                });\r\n            };\r\n        }\r\n\r\n        processedColumns.push(column);\r\n    });\r\n\r\n    const renderExpandedContent = additionalColumn ? additionalColumn.Cell : null;\r\n\r\n    const gridColumns = useMemo(() => processedColumns, []);\r\n\r\n    //Logic for searching in each column\r\n    const searchColumn = (column, original, searchText) => {\r\n        //Return value\r\n        let isValuePresent = false;\r\n        //Find the accessor node and inner cells array of each column\r\n        const { accessor, innerCells } = column;\r\n        //Find accessor value of a column\r\n        const rowAccessorValue = original[accessor];\r\n        //Check if inner cells are available and save value to boolean var\r\n        const isInnerCellsPresent = innerCells && innerCells.length > 0;\r\n        //Enter if cell value is object or array\r\n        if (typeof rowAccessorValue === \"object\" && isInnerCellsPresent) {\r\n            //Enter if cell value is array\r\n            if (rowAccessorValue.length > 0) {\r\n                //Loop through cell array value and check if searched text is present\r\n                rowAccessorValue.map((value) => {\r\n                    innerCells.map((cell) => {\r\n                        const dataAccessor = value[cell.accessor];\r\n                        if (dataAccessor && dataAccessor.toString().toLowerCase().includes(searchText)) {\r\n                            isValuePresent = true;\r\n                        }\r\n                    });\r\n                });\r\n            } else {\r\n                //If cell value is an object, loop through inner cells and check if searched text is present\r\n                innerCells.map((cell) => {\r\n                    const dataAccessor = original[accessor][cell.accessor];\r\n                    if (dataAccessor && dataAccessor.toString().toLowerCase().includes(searchText)) {\r\n                        isValuePresent = true;\r\n                    }\r\n                });\r\n            }\r\n        } else {\r\n            //If cell value is not an object or array, convert it to text and check if searched text is present\r\n            const dataAccessor = original[accessor];\r\n            if (dataAccessor && dataAccessor.toString().toLowerCase().includes(searchText)) {\r\n                isValuePresent = true;\r\n            }\r\n        }\r\n        return isValuePresent;\r\n    };\r\n\r\n    //Add logic for doing global search in the grid\r\n    const globalSearchLogic = (rows, columns, filterValue) => {\r\n        //Enter search logic only if rows and columns are available\r\n        if (filterValue && processedColumns.length > 0) {\r\n            //convert user searched text to lower case\r\n            const searchText = filterValue.toLowerCase();\r\n            //Loop through all rows\r\n            return rows.filter((row) => {\r\n                //Find original data value of each row\r\n                const { original } = row;\r\n                //Return value of the filter method\r\n                let returnValue = false;\r\n                //Loop through all column values for each row\r\n                processedColumns.map((column) => {\r\n                    //Do search for each column\r\n                    returnValue = returnValue || searchColumn(column, original, searchText);\r\n                });\r\n                return returnValue;\r\n            });\r\n        }\r\n        return rows;\r\n    };\r\n\r\n    //#region - Group sorting logic\r\n    //Function to return sorting logic based on the user selected order of sort\r\n    const compareValues = (compareOrder, v1, v2) => {\r\n        if (compareOrder === \"Ascending\") {\r\n            return v1 > v2 ? 1 : v1 < v2 ? -1 : 0;\r\n        } else {\r\n            return v1 < v2 ? 1 : v1 > v2 ? -1 : 0;\r\n        }\r\n    };\r\n    //Function to return sorted data\r\n    const getSortedData = (originalData) => {\r\n        return originalData.sort(function (x, y) {\r\n            let compareResult = 0;\r\n            groupSortOptions.forEach((option) => {\r\n                const { sortBy, sortOn, order } = option;\r\n                const newResult =\r\n                    sortOn === \"value\"\r\n                        ? compareValues(order, x[sortBy], y[sortBy])\r\n                        : compareValues(order, x[sortBy][sortOn], y[sortBy][sortOn]);\r\n                compareResult = compareResult || newResult;\r\n            });\r\n            return compareResult;\r\n        });\r\n    };\r\n    //#endregion\r\n\r\n    //#region - Cell update logic\r\n    //Function to find correct index from original data using index from sorted data\r\n    const getOriginalDataIndex = (sortedDataIndex) => {\r\n        const updatedData = getSortedData([...items]).find((item, index) => {\r\n            return index === sortedDataIndex;\r\n        });\r\n        let originalDataIndex = -1;\r\n        originalDataIndex = items.findIndex((item, index) => {\r\n            return item === updatedData;\r\n        });\r\n        return originalDataIndex;\r\n    };\r\n    //Gets triggered when a cell in grid is updated\r\n    useImperativeHandle(ref, () => ({\r\n        updateCellInGrid(rowIndex, columnId, value) {\r\n            const originalDataIndex = getOriginalDataIndex(rowIndex);\r\n            if (originalDataIndex >= 0) {\r\n                setItems((old) =>\r\n                    old.map((row, index) => {\r\n                        if (index === originalDataIndex) {\r\n                            return {\r\n                                ...old[originalDataIndex],\r\n                                [columnId]: value\r\n                            };\r\n                        }\r\n                        return row;\r\n                    })\r\n                );\r\n            }\r\n        }\r\n    }));\r\n    //#endregion\r\n\r\n    //Gets triggered when one row item is updated\r\n    const updateRowInGrid = (rowIndex, updatedRow) => {\r\n        setItems((old) =>\r\n            old.map((row, index) => {\r\n                if (index === rowIndex) {\r\n                    row = updatedRow;\r\n                }\r\n                return row;\r\n            })\r\n        );\r\n        updateRowData(updatedRow);\r\n    };\r\n\r\n    //Gets triggered when one row item is deleted\r\n    const deleteRowFromGrid = (rowIndexToBeDeleted, deletedRow) => {\r\n        setItems((old) =>\r\n            old.filter((row, index) => {\r\n                return index !== rowIndexToBeDeleted;\r\n            })\r\n        );\r\n        deleteRowData(deletedRow);\r\n    };\r\n\r\n    //Gets called when group sort is applied or cleared\r\n    const doGroupSort = (sortOptions) => {\r\n        setGroupSortOptions(sortOptions);\r\n    };\r\n\r\n    //Gets called when page scroll reaches the bottom of the grid.\r\n    //Fetch the next set of data and append it to the variable holding grid data and update the state value.\r\n    //Also update the hasNextPage state value to False once API response is empty, to avoid unwanted API calls.\r\n    const loadNextPage = (...args) => {\r\n        const newIndex = args && args.length > 0 ? args[0] : -1;\r\n        if (newIndex >= 0 && hasNextPage) {\r\n            setIsLoading(true);\r\n            setIsNextPageLoading(true);\r\n            fetchData(newIndex).then((data) => {\r\n                setIsLoading(false);\r\n                setHasNextPage(data && data.length > 0);\r\n                setIsNextPageLoading(false);\r\n                setItems(items.concat(data));\r\n            });\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        //Make API call to fetch initial set of data.\r\n        setIsLoading(true);\r\n        fetchData(0).then((data) => {\r\n            setIsLoading(false);\r\n            setItems(data);\r\n        });\r\n    }, []);\r\n\r\n    //Sort the data based on the user selected group sort optipons\r\n    const data = getSortedData([...items]);\r\n\r\n    if (data && data.length > 0) {\r\n        return (\r\n            <div>\r\n                <Customgrid\r\n                    title={title}\r\n                    gridHeight={gridHeight}\r\n                    gridWidth={gridWidth}\r\n                    managableColumns={gridColumns}\r\n                    originalColumns={gridColumns}\r\n                    additionalColumn={additionalColumn}\r\n                    data={data}\r\n                    originalData={items}\r\n                    rowEditOverlay={rowEditOverlay}\r\n                    rowEditData={rowEditData}\r\n                    updateRowInGrid={updateRowInGrid}\r\n                    deletePopUpOverLay={deletePopUpOverLay}\r\n                    deleteRowFromGrid={deleteRowFromGrid}\r\n                    globalSearchLogic={globalSearchLogic}\r\n                    selectBulkData={selectBulkData}\r\n                    calculateRowHeight={calculateRowHeight}\r\n                    isExpandContentAvailable={typeof renderExpandedContent === \"function\"}\r\n                    renderExpandedContent={renderExpandedContent}\r\n                    hasNextPage={hasNextPage}\r\n                    isNextPageLoading={isNextPageLoading}\r\n                    loadNextPage={loadNextPage}\r\n                    doGroupSort={doGroupSort}\r\n                />\r\n                {isNextPageLoading ? (\r\n                    <div id=\"loader\" className=\"background\">\r\n                        <div className=\"dots container\">\r\n                            <span></span>\r\n                            <span></span>\r\n                            <span></span>\r\n                        </div>\r\n                    </div>\r\n                ) : null}\r\n            </div>\r\n        );\r\n    } else if (isLoading) {\r\n        return <h2 style={{ textAlign: \"center\", marginTop: \"70px\" }}>Initializing Grid...</h2>;\r\n    } else {\r\n        return <h2 style={{ textAlign: \"center\", marginTop: \"70px\" }}>Invalid Data or Column Configurations</h2>;\r\n    }\r\n});\r\n\r\nexport default Grid;\r\n"],"names":["RowSelector","memo","forwardRef","ref","indeterminate","rest","useState","checkValue","setCheckValue","defaultRef","useRef","resolvedRef","onChange","useEffect","current","React","DefaultColumnFilter","column","filterValue","setFilter","e","target","value","undefined","GlobalFilter","globalFilter","setGlobalFilter","setValue","useAsyncDebounce","require","RowOptions","props","row","originalData","DeletePopUpOverLay","deleteRowFromGrid","RowEditOverlay","rowEditData","updateRowInGrid","original","isRowOptionsOpen","setRowOptionsOpen","isRowEditOverlayOpen","setRowEditOverlayOpen","isDeleteOverlayOpen","setDeleteOverlayOpen","openRowOptionsOverlay","closeRowOptionsOverlay","openRowEditOverlay","closeRowEditOverlay","updateRow","updatedrow","originalDataIndex","findIndex","data","openDeleteOverlay","closeDeleteOverlay","deleteRow","RowEdit","RowPin","RowDelete","ItemTypes","COLUMN","ColumnItem","id","name","moveColumn","findColumn","originalIndex","index","useDrag","item","type","collect","monitor","isDragging","end","dropResult","getItem","droppedId","didDrop","drag","useDrop","accept","canDrop","hover","draggedId","overIndex","drop","opacity","node","cursor","ColumnsList","updateColumnsInState","columnsToManage","columnId","atIndex","update","$splice","filter","c","indexOf","display","flexWrap","map","Header","innerCells","ColumnReordering","isManageColumnOpen","toggleManageColumns","originalColumns","isExpandContentAvailable","additionalColumn","additionalColumnHeader","length","getRemarksColumnIfAvailable","managedColumns","setManagedColumns","concat","searchedColumns","setSearchedColumns","remarksColumnToManage","setRemarksColumnToManage","isErrorDisplayed","setIsErrorDisplayed","HTML5toTouch","backends","backend","HTML5Backend","TouchBackend","options","enableMouseEvents","preview","transition","TouchTransition","filterColumnsList","event","toLowerCase","includes","columns","isCheckboxSelected","header","selectedColumn","selectAllColumns","currentTarget","checked","selectSingleColumn","indexOfColumnToAdd","itemToAdd","prevItemIndex","newColumnsList","slice","splice","doColumnUpdate","updateColumnStructure","resetColumnUpdate","marginLeft","color","DndProvider","MultiBackend","SORT_ITEM","SortItem","sortOption","moveSort","findSort","updateSingleSortingOption","copySortOption","deleteSortOption","getInncerCellsOfColumn","columnAccessor","find","accessor","changeSortByOptions","newSortByValue","innerCellsList","order","changeSortOnOptions","newSortOnValue","sortBy","changeSortOrderOptions","newSortOrderValue","sortOn","copySort","deleteSort","orgItem","innerCellItem","innerCellIndex","SortCopy","SortDelete","SortingList","updateSortingOptions","sortOptions","sortId","sort","GroupSort","isGroupSortOverLayOpen","toggleGroupSortOverLay","applyGroupSort","sortingOrders","defaultSortingOption","setSortOptions","sortingOptions","addSortingOptions","clearSortingOptions","sortIndex","sortByValue","sortOnValue","sortOrder","newOptionsList","newSortingOption","updatedSortOptions","option","newOption","applySort","isError","optionIndex","duplicateSort","opt","optIndex","ExportData","isExportOverlayOpen","toggleExportDataOverlay","rows","updatedColumns","downloadTypes","setDownloadTypes","warning","setWarning","isDownload","exportRowData","filteredRow","filteredRowValues","forEach","rowDetails","keys","Object","getOwnPropertyNames","filteredColumnVal","rowFilteredValues","key","columnName","columnValue","values","toString","replace","arrObj","push","downloadPDF","downloadXLSFile","downloadCSVFile","unit","size","orientation","doc","jsPDF","setFontSize","title","headers","content","startY","head","body","text","autoTable","save","filteredRowValue","fileType","fileExtension","fileName","ws","XLSX","json_to_sheet","wb","Sheets","SheetNames","excelBuffer","bookType","Blob","FileSaver","changeDownloadType","textAlign","listRef","createRef","Customgrid","gridHeight","gridWidth","managableColumns","rowEditOverlay","deletePopUpOverLay","globalSearchLogic","selectBulkData","calculateRowHeight","renderExpandedContent","hasNextPage","isNextPageLoading","loadNextPage","doGroupSort","setColumns","isRowExpandEnabled","setIsRowExpandEnabled","marginTop","itemCount","loadMoreItems","isItemLoaded","isFilterOpen","setFilterOpen","toggleColumnFilter","setGroupSortOverLay","setManageColumnOpen","newColumnStructure","remarksColumn","setIsExportOverlayOpen","defaultColumn","useMemo","Filter","useTable","autoResetFilters","autoResetGlobalFilter","autoResetSortBy","autoResetExpanded","autoResetSelectedRows","useFilters","useGlobalFilter","useSortBy","useExpanded","useRowSelect","useFlexLayout","useResizeColumns","hooks","allColumns","disableResizing","disableFilters","disableSortBy","minWidth","width","maxWidth","getToggleAllRowsSelectedProps","Cell","getToggleRowSelectedProps","getToggleRowExpandedProps","isExpanded","getTableProps","getTableBodyProps","headerGroups","prepareRow","selectedFlatRows","state","bulkSelector","resetAfterIndex","RenderRow","useCallback","style","getRowProps","cells","cell","getCellProps","render","height","overflowX","overflowY","headerGroup","getHeaderGroupProps","getHeaderProps","getSortByToggleProps","isSorted","isSortedDesc","canResize","getResizerProps","onItemsRendered","List","list","Grid","fetchData","updateRowData","deleteRowData","setHasNextPage","setIsNextPageLoading","isLoading","setIsLoading","items","setItems","groupSortOptions","setGroupSortOptions","processedColumns","sortValue","isInnerCellsPresent","sortType","rowA","rowB","searchText","searchColumn","gridColumns","isValuePresent","rowAccessorValue","dataAccessor","returnValue","compareValues","compareOrder","v1","v2","getSortedData","x","y","compareResult","newResult","getOriginalDataIndex","sortedDataIndex","updatedData","useImperativeHandle","updateCellInGrid","rowIndex","old","updatedRow","rowIndexToBeDeleted","deletedRow","args","newIndex","then"],"mappings":"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"}