{"version":3,"sources":["../../src/common/extDataGrid.js","../../src/functions/DatePicker.js","../../src/common/ErrorConstants.js","../../src/common/ErrorMessage.js","../../src/overlays/column_chooser/ItemTypes.js","../../src/overlays/column_chooser/columnItem.js","../../src/overlays/column_chooser/columnsList.js","../../src/overlays/column_chooser/Chooser.js","../../src/overlays/sorting/Sorting.js","../../src/overlays/export_data/ExportData.js","../../src/index.js","../../src/utilities/utils.js","App.js","index.js"],"names":["componentDidMount","this","document","window","props","componentWillUnmount","React","constructor","super","value","Date","getInputNode","bind","getValue","onValueChanged","updated","date","state","Intl","year","month","day","dateTimeFormat","column","ev","render","type","ref","onChange","ErrorMessage","useState","useEffect","setStatus","status","id","className","role","icon","onClick","e","ItemTypes","style","cursor","ColumnItem","findColumn","originalIndex","useDrag","item","collect","monitor","isDragging","end","dropResult","moveColumn","droppedId","useDrop","accept","canDrop","hover","draggedId","overIndex","index","opacity","node","drag","drop","ColumnsList","atIndex","setColumns","update","columns","$splice","c","display","flexWrap","key","text","columnReorderEntityList","isAllSelected","map","typeToBeAdded","existingColumnReorderEntityList","existingLeftPinnedList","leftPinnedColumList","searchKey","String","existingList","filtererdColumnReorderList","columnSelectList","colsList","faAlignJustify","checked","includes","disabled","maxLeftPinnedColumn","reArrangeLeftPinnedColumn","columHeaderName","subItem","setWrapperRef","handleClickOutside","event","wrapperRef","contains","placeholder","filterColumnReorderList","selectAllToColumnReOrderList","addToColumnReorderEntityList","closeColumnReOrdering","color","backend","options","enableMouseEvents","columnsArray","createColumnsArrayFromProps","resetColumnReorderList","updateTableAsPerRowChooser","rowList","i","console","x","columnFieldValue","title","copy","remove","closeSorting","add","clearAll","downLaodFileType","columnEntityList","existingColumnEntityList","columnVlaueList","length","row","keys","Object","filteredColumnVal","columnName","downloadCSVFile","doc","headers","dataValues","content","startY","head","body","wb","Sheets","data","XLSX","SheetNames","excelBuffer","bookType","Blob","FileSaver","fileName","filteredRows","columnsList","filter","columnValueList","columnLength","fileLength","clickTag","warning","filteredRow","selectDownLoadType","exportValidation","columnSearchLogic","selectAllToColumnList","addToColumnEntityList","closeExport","name","DraggableContainer","require","DraggableHeader","DropDownEditor","selectors","Data","NumericFilter","startIdx","newRows","rows","botRight","range","topLeft","rowIdx","col","rowGetter","str","pasteData","rowData","j","args","colIdx","idx","sortColumn","sortDirection","a","b","action","formulaAppliedCols","obj","operation","Number","Math","applyFormula","filteringRows","tempRows","selectedIndexes","concat","r","rowIndexes","junk","getrows","count","filters","source","target","stateCopy","columnSourceIndex","findIndex","columnTargetIndex","emptyColumns","reorderedColumns","inComingColumnsHeaderList","pinnedColumnsList","existingColumnsHeaderList","rePositionedArray","singleHeaderOneList","array_move","headerItem","arr","old_index","new_index","k","headerNameList","existingPinnedHeadersList","columnReorderingComponent","searchValue","columnField","sortingPanelComponent","exportComponent","airportCodes","height","displayNoRows","searchIconDisplay","handleSearchValue","clearSearchValue","handleFilterChange","componentWillReceiveProps","textValue","getValidFilterValues","columnId","sortingPanel","faSortAmountDown","columnReorderingPannel","faColumns","exportColumnData","closeWarningStatus","onHeaderDrop","toolbar","enableFilter","columnKey","minHeight","rowsCount","onGridRowsUpdated","enableCellSelect","onClearFilters","onColumnResize","width","onAddFilter","rowSelection","showCheckbox","enableShiftSelect","onRowsSelected","onRowsDeselected","selectBy","indexes","onGridSort","sortRows","App","setData","CargoData","draggable","editor","formulaApplicable","sortable","resizable","filterable","airportCodeList","globalSearchLogic","updatedRows","toLowerCase","flightno","segmentfrom","segmentto","flightModel","bodyType","startTime","endTime","additionalStatus","timeStatus","weightpercentage","volumevalue","uldposition1","uldvalue1","uldposition2","uldvalue2","uldposition3","weightvalue","uldvalue3","uldposition4","revenue","yeild","sr","queuedBookingSR","queuedBookingvolume","handleWarningStatus","updateCellData","fromRow","toRow","updateType","log","selectBulkData","selectedRows","gridHeight","ReactDOM","getElementById"],"mappings":"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mB,EACnBC,UAAU,EACVC,WAAW,EACXC,YAAY,EACZnB,MAAO,KAET,CACEjM,IAAK,eACL+F,KAAM,eACNgH,WAAW,EACXC,OAAQ,OACRC,mBAAmB,EACnBC,UAAU,EACVC,WAAW,EACXC,YAAY,EACZnB,MAAO,KAET,CACEjM,IAAK,YACL+F,KAAM,YACNgH,WAAW,EACXC,OAAQ,OACRC,mBAAmB,EACnBC,UAAU,EACVC,WAAW,EACXC,YAAY,EACZnB,MAAO,KAET,CACEjM,IAAK,eACL+F,KAAM,eACNgH,WAAW,EACXC,OAAQ,OACRC,mBAAmB,EACnBC,UAAU,EACVC,WAAW,EACXC,YAAY,EACZnB,MAAO,KAET,CACEjM,IAAK,YACL+F,KAAM,YACNgH,WAAW,EACXC,OAAQ,OACRC,mBAAmB,EACnBC,UAAU,EACVC,WAAW,EACXC,YAAY,EACZnB,MAAO,KAET,CACEjM,IAAK,eACL+F,KAAM,eACNgH,WAAW,EACXC,OAAQ,OACRC,mBAAmB,EACnBC,UAAU,EACVC,WAAW,EACXC,YAAY,EACZnB,MAAO,KAET,CACEjM,IAAK,YACL+F,KAAM,YACNgH,WAAW,EACXC,OAAQ,OACRC,mBAAmB,EACnBC,UAAU,EACVC,WAAW,EACXC,YAAY,EACZnB,MAAO,KAGT,CACEjM,IAAK,KACL+F,KAAM,KACNgH,WAAW,EACXC,OAAQ,OACRC,mBAAmB,EACnBC,UAAU,EACVC,WAAW,EACXC,YAAY,EACZnB,MAAO,KAET,CACEjM,IAAK,kBACL+F,KAAM,oBACNgH,WAAW,EACXC,OAAQ,OACRC,mBAAmB,EACnBC,UAAU,EACVC,WAAW,EACXC,YAAY,EACZnB,MAAO,KAET,CACEjM,IAAK,sBACL+F,KAAM,wBACNgH,WAAW,EACXC,OAAQ,OACRC,mBAAmB,EACnBC,UAAU,EACVC,WAAW,EACXC,YAAY,EACZnB,MAAO,MAKLoB,EAAmB,CACnB,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA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","file":"static/js/main.d0de3309.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDataGrid from \"react-data-grid\";\nimport { Toolbar, Data, Filters } from \"react-data-grid-addons\";\n\nclass ExtDataGrid extends ReactDataGrid {\n  componentDidMount() {\n    this._mounted = true;\n    this.dataGridComponent = document.getElementsByClassName(\n      \"react-grid-Container\"\n    )[0]; //assumes only one react datagrid component exists\n    window.addEventListener(\"resize\", this.metricsUpdated);\n    if (this.props.cellRangeSelection) {\n      this.dataGridComponent.addEventListener(\"mouseup\", this.onWindowMouseUp);\n    }\n    this.metricsUpdated();\n  }\n\n  componentWillUnmount() {\n    this._mounted = false;\n    window.removeEventListener(\"resize\", this.metricsUpdated);\n    this.dataGridComponent.removeEventListener(\"mouseup\", this.onWindowMouseUp);\n  }\n}\n\nexport default ExtDataGrid;\n","import React from 'react';\n\nexport default class DatePicker extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        value: new Date(),\n      };\n      //the variable to store component reference\n      this.input = null;\n  \n      this.getInputNode = this.getInputNode.bind(this);\n      this.getValue = this.getValue.bind(this);\n      this.onValueChanged = this.onValueChanged.bind(this);\n    }\n  \n    //returning the component with the reference, input\n    getInputNode() {\n      return this.input;\n    }\n    //returning updated object with the date value in the required format\n    getValue() {\n      var updated = {};\n      let date;\n      date = new Date(this.state.value);\n      const dateTimeFormat = new Intl.DateTimeFormat(\"en-US\", { year: \"numeric\", month: \"short\", day: \"2-digit\" });\n      const [{ value: month }, , { value: day }, , { value: year }] = dateTimeFormat.formatToParts(date);\n      updated[this.props.column.key] = `${day}-${month}-${year}`;\n      return updated;\n  \n    }\n  \n    onValueChanged(ev) {\n      this.setState({ value: ev.target.value });\n    }\n  \n    render() {\n      return (\n        <div>\n          <input\n            type=\"date\"\n            ref={(ref) => {\n              this.input = ref;\n            }}\n            value={this.state.value}\n            onChange={this.onValueChanged}\n          />\n        </div>\n      );\n    }\n  }","export const SEARCH_NOT_FOUNT_ERROR = \"No Search Matches. Please try again later.\";\r\n","import React, { useState, useEffect } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport { SEARCH_NOT_FOUNT_ERROR } from \"./ErrorConstants\";\n\nconst ErrorMessage = (props) => {\n\n  const [status, setStatus] = useState(props.status);\n  useEffect(\n    () => {\n      setStatus(props.status)\n    }\n    , [props.status]);\n  if (status === \"invalid\") {\n    return (\n      <div id=\"errorMsg\">\n        <div className=\"alert alert-danger\" role=\"alert\">\n          {SEARCH_NOT_FOUNT_ERROR}\n        </div>\n        <div className=\"notification-close\" >\n          <FontAwesomeIcon icon={faTimes}\n            onClick={(e) => {\n              props.closeWarningStatus();\n              props.clearSearchValue();\n            }} />\n        </div>\n      </div>\n    );\n  } else return <div></div>;\n};\nexport default ErrorMessage;\n","export const ItemTypes = {\r\n    COLUMN: \"column\"\r\n};\r\n","import React from \"react\";\r\nimport { useDrag, useDrop } from \"react-dnd\";\r\nimport { ItemTypes } from \"./ItemTypes\";\r\n\r\nconst style = {\r\n\tcursor: \"move\",\r\n};\r\n\r\nconst ColumnItem = ({ id, text, moveColumn, findColumn }) => {\r\n\tconst originalIndex = findColumn(id).index;\r\n\r\n\tconst [{ isDragging }, drag] = useDrag({\r\n\t\titem: { type: ItemTypes.COLUMN, id, originalIndex },\r\n\t\tcollect: (monitor) => ({\r\n\t\t\tisDragging: monitor.isDragging(),\r\n\t\t}),\r\n\t\tend: (dropResult, monitor) => {\r\n\t\t\tconst { id: droppedId, originalIndex } = monitor.getItem();\r\n\t\t\tconst didDrop = monitor.didDrop();\r\n\t\t\tif (!didDrop) {\r\n\t\t\t\tmoveColumn(droppedId, originalIndex);\r\n\t\t\t}\r\n\t\t},\r\n\t});\r\n\r\n\tconst [, drop] = useDrop({\r\n\t\taccept: ItemTypes.COLUMN,\r\n\t\tcanDrop: () => false,\r\n\t\thover({ id: draggedId }) {\r\n\t\t\tif (draggedId !== id) {\r\n\t\t\t\tconst { index: overIndex } = findColumn(id);\r\n\t\t\t\tmoveColumn(draggedId, overIndex);\r\n\t\t\t}\r\n\t\t},\r\n\t});\r\n\r\n\tconst opacity = isDragging ? 0.1 : 1;\r\n\r\n\treturn (\r\n\t\t<div ref={(node) => drag(drop(node))} style={{ ...style, opacity }}>\r\n\t\t\t{text}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default ColumnItem;\r\n","import React, { useState } from \"react\";\r\nimport { useDrop } from \"react-dnd\";\r\nimport update from \"immutability-helper\";\r\nimport { ItemTypes } from \"./ItemTypes\";\r\nimport ColumnItem from \"./columnItem\";\r\n\r\nconst ColumnsList = (props) => {\r\n\tconst [columns, setColumns] = useState([...props.columnsArray]);\r\n\r\n\tconst moveColumn = (id, atIndex) => {\r\n\t\tconst { column, index } = findColumn(id);\r\n\t\tsetColumns(\r\n\t\t\tupdate(columns, {\r\n\t\t\t\t$splice: [\r\n\t\t\t\t\t[index, 1],\r\n\t\t\t\t\t[atIndex, 0, column],\r\n\t\t\t\t],\r\n\t\t\t})\r\n\t\t);\r\n\t};\r\n\r\n\tconst findColumn = (id) => {\r\n\t\tconst column = columns.filter((c) => `${c.id}` === id)[0];\r\n\t\treturn {\r\n\t\t\tcolumn,\r\n\t\t\tindex: columns.indexOf(column),\r\n\t\t};\r\n\t};\r\n\r\n\tconst [, drop] = useDrop({ accept: ItemTypes.COLUMN });\r\n\r\n\tReact.useEffect(() => {\r\n\t\tsetColumns(props.columnsArray);\r\n\t}, [props.columnsArray]);\r\n\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t<div ref={drop} style={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n\t\t\t\t{columns.map((column) => (\r\n\t\t\t\t\t<ColumnItem\r\n\t\t\t\t\t\tkey={column.id}\r\n\t\t\t\t\t\tid={`${column.id}`}\r\n\t\t\t\t\t\ttext={column.text}\r\n\t\t\t\t\t\tmoveColumn={moveColumn}\r\n\t\t\t\t\t\tfindColumn={findColumn}\r\n\t\t\t\t\t/>\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t</React.Fragment>\r\n\t);\r\n};\r\n\r\nexport default ColumnsList;\r\n","import React from \"react\";\nimport { DndProvider } from \"react-dnd\";\nimport { TouchBackend } from \"react-dnd-touch-backend\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTimes, faAlignJustify } from \"@fortawesome/free-solid-svg-icons\";\nimport ColumnsList from \"./columnsList\";\n\nclass ColumnReordering extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columnReorderEntityList: this.props.headerKeys,\n      columnSelectList: this.props.headerKeys,\n      leftPinnedColumList: this.props.existingPinnedHeadersList,\n      isAllSelected: false,\n      maxLeftPinnedColumn: this.props.maxLeftPinnedColumn,\n    };\n    this.setWrapperRef = this.setWrapperRef.bind(this);\n    this.handleClickOutside = this.handleClickOutside.bind(this);\n  }\n  componentDidMount() {\n    document.addEventListener('mousedown', this.handleClickOutside);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('mousedown', this.handleClickOutside);\n  }\n\n  setWrapperRef(node) {\n    this.wrapperRef = node;\n  }\n\n  handleClickOutside(event) {\n    if (this.wrapperRef && !this.wrapperRef.contains(event.target)) {\n      this.props.closeColumnReOrdering()\n    }\n  }\n\n\t/**\n\t * Method to reset the coloumn list onClick of Reset button\n\t */\n\tresetColumnReorderList = () => {\n\t\tthis.setState({\n\t\t\tcolumnReorderEntityList: [],\n\t\t\tisAllSelected: false,\n\t\t});\n\t};\n\n\t/**\n\t * Method to Select all options in the coloumn list onClick of Select All button\n\t */\n\tselectAllToColumnReOrderList = () => {\n\t\tthis.resetColumnReorderList();\n\t\tthis.setState({\n\t\t\tcolumnReorderEntityList: this.props.columns.map(item=> item.name),\n\t\t\tisAllSelected: true,\n\t\t});\n\t};\n\n\t/**\n\t * Method To add a column to columnReorderEntityList when selected.\n\t * @param {String} typeToBeAdded \n\t */\n\taddToColumnReorderEntityList = (typeToBeAdded) => {\n\t\tvar existingColumnReorderEntityList = this.state.columnReorderEntityList;\n\t\tvar existingLeftPinnedList = this.state.leftPinnedColumList;\n\t\tif (!existingColumnReorderEntityList.includes(typeToBeAdded)) {\n\t\t\texistingColumnReorderEntityList.push(typeToBeAdded);\n\t\t} else {\n\t\t\texistingColumnReorderEntityList = existingColumnReorderEntityList.filter((item) => {\n\t\t\t\tif (item !== typeToBeAdded) return item;\n\t\t\t});\n\t\t\tif (existingLeftPinnedList.includes(typeToBeAdded)) {\n\t\t\t\texistingLeftPinnedList = existingLeftPinnedList.filter((item) => item !== typeToBeAdded);\n\t\t\t}\n\t\t}\n\t\tthis.setState({\n\t\t\tcolumnReorderEntityList: existingColumnReorderEntityList,\n\t\t\tisAllSelected: false,\n\t\t\tleftPinnedColumList: existingLeftPinnedList,\n\t\t});\n\t};\n\n\t/**\n\t * Method to handle the like-search on key stroke.\n\t * @param {Event} e \n\t */\n\tfilterColumnReorderList = (e) => {\n\t\tvar searchKey = String(e.target.value).toLowerCase();\n\t\tvar existingList = this.props.columns.map(item=> item.name);\n\t\tlet filtererdColumnReorderList = [];\n\t\tif (searchKey.length > 0) {\n\t\t\tfiltererdColumnReorderList = existingList.filter((item) => {\n\t\t\t\treturn item.toLowerCase().includes(searchKey);\n\t\t\t});\n\t\t} else {\n\t\t\tfiltererdColumnReorderList = this.props.columns.map(item=> item.name);\n\t\t}\n\t\tthis.setState({\n\t\t\tcolumnSelectList: filtererdColumnReorderList,\n\t\t});\n\t};\n\n\tcreateColumnsArrayFromProps = (colsList) => {\n\t\treturn colsList.map((item) => {\n\t\t\treturn {\n\t\t\t\tid: item,\n\t\t\t\ttext: (\n\t\t\t\t\t<div className='column__reorder' key={item}>\n\t\t\t\t\t\t<div className=''>\n\t\t\t\t\t\t\t<FontAwesomeIcon icon={faAlignJustify}></FontAwesomeIcon>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='column__reorder__name'>{item}</div>\n\t\t\t\t\t\t<div className='column__wrap'>\n\t\t\t\t\t\t\t<div className='column__checkbox'>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\ttype='checkbox'\n\t\t\t\t\t\t\t\t\tchecked={this.state.leftPinnedColumList.includes(item)}\n\t\t\t\t\t\t\t\t\tdisabled={\n\t\t\t\t\t\t\t\t\t\tthis.state.maxLeftPinnedColumn - this.state.leftPinnedColumList.length <= 0\n\t\t\t\t\t\t\t\t\t\t\t? this.state.leftPinnedColumList.includes(item)\n\t\t\t\t\t\t\t\t\t\t\t\t? false\n\t\t\t\t\t\t\t\t\t\t\t\t: true\n\t\t\t\t\t\t\t\t\t\t\t: false\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tonChange={() => this.reArrangeLeftPinnedColumn(item)}\n\t\t\t\t\t\t\t\t></input>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className='column__txt'>Pin Left</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t),\n\t\t\t};\n\t\t});\n\t};\n\n\t/**\n\t * Method to handle the position of columns Names when left pinned in coloumn selector view.\n\t * @param {String} columHeaderName \n\t */\n\treArrangeLeftPinnedColumn = (columHeaderName) => {\n\t\tvar existingLeftPinnedList = this.state.leftPinnedColumList;\n\t\tvar existingColumnReorderEntityList = this.state.columnReorderEntityList;\n\t\tif (!existingLeftPinnedList.includes(columHeaderName)) {\n\t\t\texistingLeftPinnedList.unshift(columHeaderName);\n\t\t} else {\n\t\t\texistingLeftPinnedList = existingLeftPinnedList.filter((item) => item !== columHeaderName);\n\t\t}\n\t\tthis.setState({\n\t\t\tleftPinnedColumList: existingLeftPinnedList,\n\t\t});\n\n\t\texistingLeftPinnedList.map((item) => {\n\t\t\texistingColumnReorderEntityList = existingColumnReorderEntityList.filter((subItem) => subItem !== item);\n\t\t\texistingColumnReorderEntityList.unshift(item);\n\t\t});\n\n\t\tthis.setState({\n\t\t\tcolumnReorderEntityList: existingColumnReorderEntityList,\n\t\t});\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div className='columns--grid'ref={this.setWrapperRef}>\n\t\t\t\t<div className='column__grid'>\n\t\t\t\t\t<div className='column__chooser'>\n\t\t\t\t\t\t<div className='column__header'>\n\t\t\t\t\t\t\t<div className=''>\n\t\t\t\t\t\t\t\t<strong>Column Chooser</strong>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='column__body'>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\t\t\t\tplaceholder='Search column'\n\t\t\t\t\t\t\t\t\tclassName='custom__ctrl'\n\t\t\t\t\t\t\t\t\tonChange={this.filterColumnReorderList}\n\t\t\t\t\t\t\t\t></input>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className='column__selectAll'>\n\t\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\t\tclassName='column__selectTxt'\n\t\t\t\t\t\t\t\t\ttype='button'\n\t\t\t\t\t\t\t\t\tonClick={() => this.selectAllToColumnReOrderList()}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tSelect All\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t{this.state.columnSelectList.map((item) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<div className='column__wrap' key={item}>\n\t\t\t\t\t\t\t\t\t\t<div className='column__checkbox'>\n\t\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\t\ttype='checkbox'\n\t\t\t\t\t\t\t\t\t\t\t\tchecked={this.state.columnReorderEntityList.includes(item)}\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={() => this.addToColumnReorderEntityList(item)}\n\t\t\t\t\t\t\t\t\t\t\t></input>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className='column__txt'>{item}</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='column__settings'>\n\t\t\t\t\t\t<div className='column__header'>\n\t\t\t\t\t\t\t<div className='column__headerTxt'>\n\t\t\t\t\t\t\t\t<strong>Column Setting</strong>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className='column__close'>\n\t\t\t\t\t\t\t\t<FontAwesomeIcon\n\t\t\t\t\t\t\t\t\tclassName=\"icon-close\" \n\t\t\t\t\t\t\t\t\ticon={faTimes}\n\t\t\t\t\t\t\t\t\tonClick={() => this.props.closeColumnReOrdering()}\n\t\t\t\t\t\t\t\t></FontAwesomeIcon>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='column__headerTxt'>\n\t\t\t\t\t\t\t<strong>&nbsp; &nbsp; Selected Column Count : {this.state.columnReorderEntityList.length}</strong>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='column__headerTxt'>\n\t\t\t\t\t\t\t{this.state.maxLeftPinnedColumn - this.state.leftPinnedColumList.length > 0 ? (\n\t\t\t\t\t\t\t\t<strong>\n\t\t\t\t\t\t\t\t\t&nbsp; &nbsp; Left Pinned Column Count Remaining :{\" \"}\n\t\t\t\t\t\t\t\t\t{this.state.maxLeftPinnedColumn - this.state.leftPinnedColumList.length}\n\t\t\t\t\t\t\t\t</strong>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<strong style={{ color: \"red\" }}>&nbsp; &nbsp; Maximum Count Of Left Pin Columns REACHED</strong>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='column__body'>\n\t\t\t\t\t\t\t<DndProvider backend={TouchBackend} options={{ enableMouseEvents: true }}>\n\t\t\t\t\t\t\t\t<ColumnsList\n\t\t\t\t\t\t\t\t\tcolumnsArray={this.createColumnsArrayFromProps(this.state.columnReorderEntityList)}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</DndProvider>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='column__footer'>\n\t\t\t\t\t\t\t<div className='column__btns'>\n\t\t\t\t\t\t\t\t<button className='btns' onClick={() => this.resetColumnReorderList()}>\n\t\t\t\t\t\t\t\t\tReset\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t<button className='btns' onClick={() => this.props.closeColumnReOrdering()}>\n\t\t\t\t\t\t\t\t\tCancel\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tclassName='btns btns__save'\n\t\t\t\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\t\t\t\tthis.props.updateTableAsPerRowChooser(\n\t\t\t\t\t\t\t\t\t\t\tthis.state.columnReorderEntityList,\n\t\t\t\t\t\t\t\t\t\t\tthis.state.leftPinnedColumList\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tSave\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default ColumnReordering;\n","import React, { useState, useRef, useEffect } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faTimes,\n  faAlignJustify,\n  faTrash,\n  faPlus,\n  faCopy,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { DndProvider } from \"react-dnd\";\nimport { TouchBackend } from \"react-dnd-touch-backend\";\nimport SortingList from \"./SortingList\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      rowList: [true],\n    };\n    this.setWrapperRef = this.setWrapperRef.bind(this);\n    this.handleClickOutside = this.handleClickOutside.bind(this);\n  }\n  componentDidMount() {\n    document.addEventListener('mousedown', this.handleClickOutside);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('mousedown', this.handleClickOutside);\n  }\n\n  setWrapperRef(node) {\n    this.wrapperRef = node;\n  }\n\n  handleClickOutside(event) {\n    if (this.wrapperRef && !this.wrapperRef.contains(event.target)) {\n      this.props.closeSorting();\n    }\n  }\n  add = () => {\n    let rowList = [...this.state.rowList];\n    rowList.push(true);\n    this.setState({ rowList });\n  };\n\n  copy = (i) => {\n    let rowList = [...this.state.rowList];\n    console.log(rowList);\n  };\n\n  clearAll = () => {\n    this.setState({ rowList: [] });\n  };\n\n  remove = (i) => {\n    let rowList = [...this.state.rowList];\n    rowList.splice(i, 1);\n    this.setState({ rowList });\n  };\n\n  createColumnsArrayFromProps = (rowList) => {\n    return rowList.map((x, i) => {\n      return (\n        <div className=\"sort__bodyContent\" key={i}  >\n          <div className=\"sort__reorder\">\n            <div className=\"\">\n              <div>&nbsp;</div>\n            </div>\n            <div className=\"sort__icon\">\n              <FontAwesomeIcon icon={faAlignJustify}></FontAwesomeIcon>\n            </div>\n          </div>\n          <div className=\"sort__reorder\">\n            <div className=\"\">\n              <div>Sort by</div>\n            </div>\n            <div className=\"sort__file\">\n              <select className=\"custom__ctrl\">\n                {this.props.columnFieldValue.map((item, index) => (\n                  <option key={index}>{item}</option>\n                ))}\n              </select>\n            </div>\n          </div>\n          <div className=\"sort__reorder\">\n            <div className=\"\">\n              <div>Sort on</div>\n            </div>\n            <div className=\"sort__file\">\n              <select className=\"custom__ctrl\">\n                <option>Value</option>\n              </select>\n            </div>\n          </div>\n          <div className=\"sort__reorder\">\n            <div className=\"\">\n              <div>Order</div>\n            </div>\n            <div className=\"sort__file\">\n              <select className=\"custom__ctrl\">\n                <option>Ascending</option>\n                <option>Descending</option>\n              </select>\n            </div>\n          </div>\n          <div className=\"sort__reorder\">\n            <div className=\"\">\n              <div>&nbsp;</div>\n            </div>\n            <div className=\"sort__icon\">\n              <FontAwesomeIcon\n                icon={faCopy}\n                title=\"Copy\"\n                onClick={() => this.copy(i)}\n              ></FontAwesomeIcon>\n            </div>\n          </div>\n          <div className=\"sort__reorder\">\n            <div className=\"\">\n              <div>&nbsp;</div>\n            </div>\n            <div className=\"sort__icon\">\n              <FontAwesomeIcon\n                icon={faTrash}\n                title=\"Delete\"\n                onClick={() => this.remove(i)}\n              ></FontAwesomeIcon>\n            </div>\n          </div>\n        </div>\n      );\n    });\n  };\n\n  render() {\n    let { rowList } = this.state;\n    return (\n      <div className=\"sorts--grid\" ref={this.setWrapperRef}>\n        <div className=\"sort__grid\">\n          <div className=\"sort__settings\">\n            <div className=\"sort__header\">\n              <div className=\"sort__headerTxt\">\n                <strong>Sort </strong>\n              </div>\n              <div className=\"sort__close\">\n                <FontAwesomeIcon\n                  className=\"icon-close\" \n                  icon={faTimes}\n                  onClick={() => this.props.closeSorting()}\n                ></FontAwesomeIcon>\n              </div>\n            </div>\n            <div className=\"sort__body\">\n              {/* <DndProvider\n                backend={TouchBackend}\n                options={{ enableMouseEvents: true }}\n              >\n                <SortingList\n                  sortsArray={this.createColumnsArrayFromProps(\n                    this.state.rowList\n                  )}\n                />\n              </DndProvider> */}\n              {rowList.map((x, i) => {\n                return (\n                  <div className=\"sort__bodyContent\" key={i}>\n                    <div className=\"sort__reorder\">\n                      <div className=\"\">\n                        <div>&nbsp;</div>\n                      </div>\n                      <div className=\"sort__icon\">\n                        <FontAwesomeIcon\n                          icon={faAlignJustify}\n                        ></FontAwesomeIcon>\n                      </div>\n                    </div>\n                    <div className=\"sort__reorder\">\n                      <div className=\"\">\n                        <div>Sort by</div>\n                      </div>\n                      <div className=\"sort__file\">\n                        <select className=\"custom__ctrl\">\n                          {this.props.columnFieldValue.map((item, index) => (\n                            <option key={index}>{item}</option>\n                          ))}\n                        </select>\n                      </div>\n                    </div>\n                    <div className=\"sort__reorder\">\n                      <div className=\"\">\n                        <div>Sort on</div>\n                      </div>\n                      <div className=\"sort__file\">\n                        <select className=\"custom__ctrl\">\n                          <option>Value</option>\n                        </select>\n                      </div>\n                    </div>\n                    <div className=\"sort__reorder\">\n                      <div className=\"\">\n                        <div>Order</div>\n                      </div>\n                      <div className=\"sort__file\">\n                        <select className=\"custom__ctrl\">\n                          <option>Ascending</option>\n                          <option>Descending</option>\n                        </select>\n                      </div>\n                    </div>\n                    <div className=\"sort__reorder\">\n                      <div className=\"\">\n                        <div>&nbsp;</div>\n                      </div>\n                      <div className=\"sort__icon\">\n                        <FontAwesomeIcon\n                          icon={faCopy}\n                          title=\"Copy\"\n                          onClick={() => this.copy(i)}\n                        ></FontAwesomeIcon>\n                      </div>\n                    </div>\n                    <div className=\"sort__reorder\">\n                      <div className=\"\">\n                        <div>&nbsp;</div>\n                      </div>\n                      <div className=\"sort__icon\">\n                        <FontAwesomeIcon\n                          icon={faTrash}\n                          title=\"Delete\"\n                          onClick={() => this.remove(i)}\n                        ></FontAwesomeIcon>\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n              <div className=\"sort__new\">\n                <div className=\"sort__section\">\n                  <FontAwesomeIcon\n                    icon={faPlus}\n                    className=\"sort__icon\"\n                  ></FontAwesomeIcon>\n                  <div className=\"sort__txt\" onClick={() => this.add()}>\n                    New Sort\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"sort__footer\">\n              <div className=\"sort__btns\">\n                <button className=\"btns\" onClick={this.clearAll}>\n                  Clear All\n                </button>\n                <button className=\"btns btns__save\">Ok</button>\n              </div>\n            </div>\n          </div>\n        </div>\n        {/* <button onClick={() => this.add()}>Add New</button> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faTimes,\n  faFilePdf,\n  faFileExcel,\n  faFileCsv,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport jsPDF from \"jspdf\";\nimport \"jspdf-autotable\";\nimport * as FileSaver from \"file-saver\";\nimport * as XLSX from \"xlsx\";\n\nlet downLaodFileType = [];\nclass ExportData extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columnValueList: this.props.columnsList,\n      columnEntityList: [],\n      isAllSelected: false,\n      downLaodFileType: [],\n      filteredRow: [],\n      warning: \"\",\n      clickTag: \"none\",\n    };\n    this.setWrapperRef = this.setWrapperRef.bind(this);\n    this.handleClickOutside = this.handleClickOutside.bind(this);\n    this.selectDownLoadType = this.selectDownLoadType.bind(this);\n    this.exportValidation = this.exportValidation.bind(this);\n  }\n  componentDidMount() {\n    document.addEventListener(\"mousedown\", this.handleClickOutside);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"mousedown\", this.handleClickOutside);\n  }\n\n  setWrapperRef(node) {\n    this.wrapperRef = node;\n  }\n\n  handleClickOutside(event) {\n    if (this.wrapperRef && !this.wrapperRef.contains(event.target)) {\n      this.props.closeExport();\n    }\n  }\n\n  resetColumnExportList = () => {\n    this.setState({\n      columnEntityList: [],\n      isAllSelected: false,\n    });\n  };\n\n  selectAllToColumnList = () => {\n    this.resetColumnExportList();\n    this.setState({\n      columnEntityList: !this.state.isAllSelected ? this.props.columnsList : [],\n      isAllSelected: !this.state.isAllSelected,\n    });\n  };\n\n  addToColumnEntityList = (typeToBeAdded) => {\n    var existingColumnEntityList = this.state.columnEntityList;\n    if (!existingColumnEntityList.includes(typeToBeAdded)) {\n      existingColumnEntityList.push(typeToBeAdded);\n    } else {\n      existingColumnEntityList = existingColumnEntityList.filter((item) => {\n        return item !== typeToBeAdded \n      });\n    }\n    this.setState({\n      columnEntityList: existingColumnEntityList,\n      isAllSelected: false,\n    });\n  };\n\n  selectDownLoadType = (event) => {\n    if (\n      event.target.checked &&\n      !this.state.downLaodFileType.includes(event.target.value)\n    ) {\n      downLaodFileType.push(event.target.value);\n      this.setState({ downLaodFileType });\n    } else {\n      downLaodFileType.map(function (value, index) {\n        if (value === event.target.value) {\n          downLaodFileType = downLaodFileType.splice(index, value);\n        }\n      });\n      this.setState({ downLaodFileType });\n    }\n  };\n\n  exportRowData = () => {\n    const columnVlaueList = this.state.columnEntityList;\n    if (columnVlaueList.length > 0 && this.state.downLaodFileType.length > 0) {\n      this.props.rows.forEach((row) => {\n        const keys = Object.getOwnPropertyNames(row);\n        var filteredColumnVal = {};\n        keys.forEach(function (key) {\n          columnVlaueList.forEach((columnName) => {\n            if (columnName.key === key) filteredColumnVal[key] = row[key];\n          });\n        });\n        this.state.filteredRow.push(filteredColumnVal);\n      });\n\n      this.state.downLaodFileType.map((item) => {\n        if (item === \"pdf\") this.downloadPDF();\n        else if (item === \"excel\") this.downloadXLSFile();\n        else this.downloadCSVFile();\n      });\n    }\n  };\n\n  downloadPDF = () => {\n    const unit = \"pt\";\n    const size = \"A4\"; // Use A1, A2, A3 or A4\n    const orientation = \"landscape\"; // portrait or landscape\n\n    const marginLeft = 300;\n    const doc = new jsPDF(orientation, unit, size);\n\n    doc.setFontSize(15);\n\n    const title = \"iCargo Report\";\n    const headers = [\n      this.state.columnEntityList.map((column) => {\n        return column.name;\n      }),\n    ];\n    var dataValues = [];\n    this.props.rows.forEach((row) => {\n      const keys = Object.keys(row);\n      var filteredColumnVal = [];\n      this.state.columnEntityList.forEach((columnName) => {\n        keys.forEach((key) => {\n          if (columnName.key === key) filteredColumnVal.push(row[key]);\n        });\n      });\n      dataValues.push(filteredColumnVal);\n    });\n\n    let content = {\n      startY: 50,\n      head: headers,\n      body: dataValues,\n    };\n\n    doc.text(title, marginLeft, 40);\n    doc.autoTable(content);\n    doc.save(\"report.pdf\");\n  };\n\n  downloadCSVFile = () => {\n    const fileType =\n      \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\n    const fileExtension = \".csv\";\n    const fileName = \"CSVDownload\";\n    const ws = XLSX.utils.json_to_sheet(this.state.filteredRow);\n    const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\n    const excelBuffer = XLSX.write(wb, { bookType: \"csv\", type: \"array\" });\n    const data = new Blob([excelBuffer], { type: fileType });\n    FileSaver.saveAs(data, fileName + fileExtension);\n  };\n\n  downloadXLSFile = () => {\n    const fileType =\n      \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\n    const fileExtension = \".xlsx\";\n    const fileName = \"XLSXDownload\";\n    const ws = XLSX.utils.json_to_sheet(this.state.filteredRow);\n    const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\n    const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\n    const data = new Blob([excelBuffer], { type: fileType });\n    FileSaver.saveAs(data, fileName + fileExtension);\n  };\n\n  columnSearchLogic = (e) => {\n    const searchKey = String(e.target.value).toLowerCase();\n    let filteredRows = this.props.columnsList.filter((item) => {\n      return item.name.toLowerCase().includes(searchKey);\n    });\n    if (!filteredRows.length) {\n      this.setState({ columnValueList: this.props.columnsList });\n    } else {\n      this.setState({ columnValueList: filteredRows });\n    }\n  };\n\n  exportValidation = () => {\n    let columnLength = this.state.columnEntityList.length;\n    let fileLength = this.state.downLaodFileType.length;\n    if (columnLength > 0 && fileLength > 0) {\n      this.exportRowData();\n      this.setState({ clickTag: \"none\" });\n    } else if (columnLength === 0) {\n      this.setState({ warning: \"Column\" });\n      this.setState({ clickTag: \"\" });\n    } else if (fileLength === 0) {\n      this.setState({ warning: \"File Type\" });\n      this.setState({ clickTag: \"\" });\n    }\n    if (columnLength === 0 && fileLength === 0) {\n      this.setState({ warning: \"File Type & Column\" });\n      this.setState({ clickTag: \"\" });\n    }\n  };\n  render() {\n    return (\n      <div className=\"exports--grid\" ref={this.setWrapperRef}>\n        <div className=\"export__grid\">\n          <div className=\"export__chooser\">\n            <div className=\"export__header\">\n              <div className=\"\">\n                <strong>Export Data</strong>\n              </div>\n            </div>\n            <div className=\"export__body\">\n              <div>\n                <input\n                  type=\"text\"\n                  placeholder=\"Search export\"\n                  className=\"custom__ctrl\"\n                  onChange={this.columnSearchLogic}\n                ></input>\n              </div>\n              <div className=\"export__selectAll\">\n                <div\n                  className=\"export__selectTxt\"\n                  onClick={() => this.selectAllToColumnList()}\n                >\n                  Select All\n                </div>\n              </div>\n              {this.state.columnValueList.length > 0\n                ? this.state.columnValueList.map((column, index) => {\n                    return (\n                      <div className=\"export__wrap\" key={column.key}>\n                        <div className=\"export__checkbox\">\n                          <input\n                            type=\"checkbox\"\n                            checked={this.state.columnEntityList.includes(\n                              column\n                            )}\n                            onChange={() => this.addToColumnEntityList(column)}\n                          ></input>\n                        </div>\n                        <div className=\"export__txt\">{column.name}</div>\n                      </div>\n                    );\n                  })\n                : \"\"}\n            </div>\n          </div>\n          <div className=\"export__settings\">\n            <div className=\"export__header\">\n              <div className=\"export__headerTxt\"></div>\n              <div className=\"export__close\">\n                <FontAwesomeIcon icon={faTimes} className=\"icon-close\" onClick={this.props.closeExport}></FontAwesomeIcon>\n              </div>\n            </div>\n            <div className=\"export__as\">Export as</div>\n            <div className=\"export__body\">\n              <div className=\"export__reorder\">\n                <div className=\"\">\n                  <input\n                    type=\"checkbox\"\n                    name=\"pdf\"\n                    value=\"pdf\"\n                    onChange={this.selectDownLoadType}\n                  ></input>\n                </div>\n                <div className=\"export__file\">\n                  <FontAwesomeIcon\n                    icon={faFilePdf}\n                    className=\"temp\"\n                  ></FontAwesomeIcon>\n                </div>\n              </div>\n              <div className=\"export__reorder\">\n                <div className=\"\">\n                  <input\n                    type=\"checkbox\"\n                    name=\"excel\"\n                    value=\"excel\"\n                    onChange={this.selectDownLoadType}\n                  ></input>\n                </div>\n                <div className=\"export__file\">\n                  <FontAwesomeIcon\n                    icon={faFileExcel}\n                    className=\"temp\"\n                  ></FontAwesomeIcon>\n                </div>\n              </div>\n              <div className=\"export__reorder\">\n                <div className=\"\">\n                  <input\n                    type=\"checkbox\"\n                    name=\"csv\"\n                    value=\"csv\"\n                    onChange={this.selectDownLoadType}\n                  ></input>\n                </div>\n                <div className=\"export__file\">\n                  <FontAwesomeIcon\n                    icon={faFileCsv}\n                    className=\"temp\"\n                  ></FontAwesomeIcon>\n                </div>\n              </div>\n              <div className=\"exportWarning\">\n                <span\n                  style={{ display: this.state.clickTag }}\n                  className=\"alert alert-danger\"\n                >\n                  You haven't selected <strong>{this.state.warning}</strong>\n                </span>\n              </div>\n            </div>\n            <div className=\"export__footer\">\n              <div className=\"export__btns\">\n                <button\n                  className=\"btns\"\n                  onClick={() => this.props.closeExport()}\n                >\n                  Cancel\n                </button>\n                <button\n                  className=\"btns btns__save\"\n                  onClick={(e) => {\n                    this.exportValidation();\n                  }}\n                >\n                  Export\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default ExportData;\n","import React, { Component } from \"react\";\nimport ExtDataGrid from \"./common/extDataGrid\";\nimport { Toolbar, Data, Filters, Editors } from \"react-data-grid-addons\";\nimport { range } from \"lodash\";\nimport { applyFormula } from \"./utilities/utils\";\nimport { FormControl } from \"react-bootstrap\";\nimport DatePicker from \"./functions/DatePicker.js\";\n//import {onRowsSelected} from \"../components/functions/OnRowsSelected.js\"\nimport {\n  faSortAmountDown,\n  faColumns,\n  // faSyncAlt,\n  faShareAlt,\n  // faAlignLeft,\n  // faFilter,\n  faSortDown,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport ErrorMessage from \"./common/ErrorMessage\";\nimport ColumnReordering from \"./overlays/column_chooser/Chooser\";\nimport Sorting from \"./overlays/sorting/Sorting\";\nimport ExportData from \"./overlays/export_data/ExportData\";\n\nconst {\n  DraggableHeader: { DraggableContainer },\n} = require(\"react-data-grid-addons\");\n\nconst { DropDownEditor } = Editors;\n\nconst defaultParsePaste = (str) => str.split(/\\r\\n|\\n|\\r/).map((row) => row.split(\"\\t\"));\n\n// let newFilters = {};\n\nconst selectors = Data.Selectors;\n\nconst { AutoCompleteFilter, NumericFilter } = Filters;\nclass spreadsheet extends Component {\n  constructor(props) {\n    super(props);\n    const airportCodes = [];\n    this.props.airportCodes.forEach((item) => {\n      airportCodes.push({ id: item, value: item });\n    });\n    this.state = {\n      height: 680,\n      displayNoRows: \"none\",\n      searchIconDisplay: \"\",\n      searchValue: \"\",\n      filter: {},\n      rows: this.props.rows,\n      selectedIndexes: [],\n      junk: {},\n      topLeft: {},\n      columnReorderingComponent: null,\n      exportComponent: null,\n      filteringRows: this.props.rows,\n      tempRows: this.props.rows,\n      sortingPanelComponent: null,\n      count: this.props.rows.length,\n      columns: this.props.columns.map((item) => {\n        if (item.editor === \"DatePicker\") {\n          item.editor = DatePicker;\n        } else if (item.editor === \"DropDown\") {\n          item.editor = <DropDownEditor options={airportCodes} />;\n        } else if (item.editor === \"Text\") {\n          item.editor = \"text\";\n        } else {\n          item.editor = null;\n        }\n        if (item.name === \"Flight Model\") {\n          item.filterRenderer = NumericFilter;\n        }\n        else {\n          item.filterRenderer = AutoCompleteFilter;\n        }\n        return item;\n      }),\n    };\n    document.addEventListener(\"copy\", this.handleCopy);\n    document.addEventListener(\"paste\", this.handlePaste);\n    this.handleSearchValue = this.handleSearchValue.bind(this);\n    this.clearSearchValue = this.clearSearchValue.bind(this);\n    this.handleFilterChange = this.handleFilterChange.bind(this);\n\n    this.formulaAppliedCols = this.props.columns.filter((item) => {\n      return item.formulaApplicable;\n    });\n  }\n\n  updateRows = (startIdx, newRows) => {\n    this.setState((state) => {\n      const rows = state.rows.slice();\n      for (let i = 0; i < newRows.length; i++) {\n        if (startIdx + i < rows.length) {\n          rows[startIdx + i] = {\n            ...rows[startIdx + i],\n            ...newRows[i],\n          };\n        }\n      }\n      return {\n        rows,\n      };\n    });\n  }\n\n  rowGetter = (i) => {\n    const { rows } = this.state;\n    return rows[i];\n  };\n\n  handleCopy = (e) => {\n    e.preventDefault();\n    const { topLeft, botRight } = this.state;\n    const text = range(topLeft.rowIdx, botRight.rowIdx + 1)\n      .map((rowIdx) =>\n        this.state.columns\n          .slice(topLeft.colIdx - 1, botRight.colIdx)\n          .map((col) => this.rowGetter(rowIdx)[col.key])\n          .join(\"\\t\")\n      )\n      .join(\"\\n\");\n    e.clipboardData.setData(\"text/plain\", text);\n  };\n\n  handlePaste = (e) => {\n    e.preventDefault();\n    const { topLeft } = this.state;\n    const newRows = [];\n    const pasteData = defaultParsePaste(e.clipboardData.getData(\"text/plain\"));\n    pasteData.forEach((row) => {\n      const rowData = {};\n      // Merge the values from pasting and the keys from the columns\n      this.state.columns.slice(topLeft.colIdx - 1, topLeft.colIdx - 1 + row.length).forEach((col, j) => {\n        rowData[col.key] = row[j];\n      });\n      newRows.push(rowData);\n    });\n    this.updateRows(topLeft.rowIdx, newRows);\n  };\n\n  setSelection = (args) => {\n    this.setState({\n      topLeft: {\n        rowIdx: args.topLeft.rowIdx,\n        colIdx: args.topLeft.idx,\n      },\n      botRight: {\n        rowIdx: args.bottomRight.rowIdx,\n        colIdx: args.bottomRight.idx,\n      },\n    });\n  };\n\n  sortRows = (data, sortColumn, sortDirection) => {\n    const comparer = (a, b) => {\n      if (sortDirection === \"ASC\") {\n        return a[sortColumn] > b[sortColumn] ? 1 : -1;\n      } else if (sortDirection === \"DESC\") {\n        return a[sortColumn] < b[sortColumn] ? 1 : -1;\n      }\n    };\n    this.setState({\n      rows: [...this.state.rows].sort(comparer),\n    });\n    return sortDirection === \"NONE\" ? data : this.state.rows;\n  };\n\n  componentWillReceiveProps(props) {\n    this.setState({\n      rows: props.rows,\n    });\n    this.setState({\n      status: props.status,\n    });\n    this.setState({\n      textValue: props.textValue,\n    });\n    this.setState({ count: props.count });\n  }\n\n  /**\n * Method To update the cell/cells with the edited values\n * @param {*} fromRow is the row from which this edit is performed\n * @param {*} toRow is the row upto which this edit is performed\n * @param {*} updated is the value of change\n * @param {*} action is type of edit action performed\n */\n  onGridRowsUpdated = ({ fromRow, toRow, updated, action }) => {\n    let columnName = \"\";\n    const filter = this.formulaAppliedCols.filter((item) => {\n      if (updated[item.key] !== null && updated[item.key] !== undefined) {\n        columnName = item.key;\n        return true;\n      } else return false;\n    });\n\n    if (filter.length > 0) {\n      updated = applyFormula(updated, columnName);\n    }\n\n    if (action !== \"COPY_PASTE\") {\n      this.setState((state) => {\n        const rows = state.rows.slice();\n        for (let i = fromRow; i <= toRow; i++) {\n          rows[i] = {\n            ...rows[i],\n            ...updated,\n          };\n        }\n\n        return {\n          rows,\n        };\n      });\n      this.setState((state) => {\n        const filteringRows = state.filteringRows.slice();\n        for (let i = fromRow; i <= toRow; i++) {\n          filteringRows[i] = {\n            ...filteringRows[i],\n            ...updated,\n          };\n        }\n\n        return {\n          filteringRows,\n        };\n      });\n      this.setState((state) => {\n        const tempRows = state.tempRows.slice();\n        for (let i = fromRow; i <= toRow; i++) {\n          tempRows[i] = {\n            ...tempRows[i],\n            ...updated,\n          };\n        }\n\n        return {\n          tempRows,\n        };\n      });\n    }\n    if (this.props.updateCellData) {\n      this.props.updateCellData(this.state.tempRows[fromRow], this.state.tempRows[toRow], updated, action);\n    }\n  };\n\t/**\n\t * Method To bulk/individual select of rows\n\t * @param {*} rows is the selected row\n\t */\n  onRowsSelected = (rows) => {\n    this.setState({\n      selectedIndexes: this.state.selectedIndexes.concat(rows.map((r) => r.rowIdx)),\n    });\n    if (this.props.selectBulkData) {\n      this.props.selectBulkData(rows);\n    }\n  };\n\t/**\n\t * Method To bulk/individual deselect of rows\n\t * @param {*} rows is the deselected row\n\t */\n  onRowsDeselected = (rows) => {\n    let rowIndexes = rows.map((r) => r.rowIdx);\n    this.setState({\n      selectedIndexes: this.state.selectedIndexes.filter((i) => rowIndexes.indexOf(i) === -1),\n    });\n  };\n\n\t/**\n\t * Method To filter the multiple columns\n\t * @param {*} value is the  incoming filtering event\n\t */\n  handleFilterChange = (value) => {\n    let junk = this.state.junk;\n    if (!(value.filterTerm == null) && !(value.filterTerm.length <= 0)) {\n      junk[value.column.key] = value;\n    } else {\n      delete junk[value.column.key];\n    }\n    this.setState({ junk });\n    const data = this.getrows(this.state.filteringRows, this.state.junk);\n    this.setState({\n      rows: data,\n      tempRows: data,\n      count: data.length,\n    });\n    if (data.length === 0) {\n      this.props.handleWarningStatus();\n    }\n    else{\n      this.props.closeWarningStatus();\n    }\n  };\n  getrows = (rows, filters) => {\n    if (Object.keys(filters).length <= 0) {\n      filters = {};\n    }\n    selectors.getRows({ rows: [], filters: {} });\n    return selectors.getRows({ rows: rows, filters: filters });\n  };\n\n  /**\n * Method To render the filter values for filtering rows\n * @param {*} rows is the row data to be considered for filtering\n * @param {*} columnId is the specific columnId for which the row datas are being considered\n */\n  getValidFilterValues(rows, columnId) {\n    return rows\n      .map((r) => r[columnId])\n      .filter((item, i, a) => {\n        return i === a.indexOf(item);\n      });\n  }\n  /**\n* Method To sort the rows for a particular column\n* @param {*} data is the row datas to be considered for sorting\n* @param {*} sortColumn is the specific column for which the row sort is being triggered\n* @param {*} sortDirection is the type of sort\n*/\n  sortRows = (data, sortColumn, sortDirection) => {\n    const comparer = (a, b) => {\n      if (sortDirection === \"ASC\") {\n        return a[sortColumn] > b[sortColumn] ? 1 : -1;\n      } else if (sortDirection === \"DESC\") {\n        return a[sortColumn] < b[sortColumn] ? 1 : -1;\n      }\n    };\n    this.setState({\n      rows: [...data].sort(comparer),\n    });\n    return sortDirection === \"NONE\" ? data : this.state.rows;\n  };\n  /**\n     * Method To swap the columns\n     * @param {*} source is source column\n     * @param {*} target is the target column \n     */\n  onHeaderDrop = (source, target) => {\n    const stateCopy = Object.assign({}, this.state);\n    const columnSourceIndex = this.state.columns.findIndex((i) => i.key === source);\n    const columnTargetIndex = this.state.columns.findIndex((i) => i.key === target);\n\n    stateCopy.columns.splice(columnTargetIndex, 0, stateCopy.columns.splice(columnSourceIndex, 1)[0]);\n\n    const emptyColumns = Object.assign({}, this.state, {\n      columns: [],\n    });\n    this.setState(emptyColumns);\n\n    const reorderedColumns = Object.assign({}, this.state, {\n      columns: stateCopy.columns,\n    });\n    this.setState(reorderedColumns);\n  };\n  updateTableAsPerRowChooser = (inComingColumnsHeaderList, pinnedColumnsList) => {\n    var existingColumnsHeaderList = this.props.columns;\n    existingColumnsHeaderList = existingColumnsHeaderList.filter((item) => {\n      return inComingColumnsHeaderList.includes(item.name);\n    });\n\n    var rePositionedArray = existingColumnsHeaderList;\n    var singleHeaderOneList;\n    if (pinnedColumnsList.length > 0) {\n      pinnedColumnsList\n        .slice(0)\n        .reverse()\n        .map((item, index) => {\n          singleHeaderOneList = existingColumnsHeaderList.filter((subItem) => item === subItem.name);\n          rePositionedArray = this.array_move(\n            existingColumnsHeaderList,\n            existingColumnsHeaderList.indexOf(singleHeaderOneList[0]),\n            index\n          );\n        });\n    }\n\n    existingColumnsHeaderList = rePositionedArray;\n\t\t/**\n       making all the frozen attribute as false for all the columns and then \n       setting items of pinnedColumnsList as frozen = true\n       */\n    existingColumnsHeaderList.map((headerItem, index) => {\n      if (headerItem.frozen !== undefined && headerItem.frozen === true) {\n        existingColumnsHeaderList[index][\"frozen\"] = false;\n      }\n      if (pinnedColumnsList.includes(headerItem.name)) {\n        existingColumnsHeaderList[index][\"frozen\"] = true;\n      }\n    });\n\n    console.log(\"existingColumnsHeaderList \", existingColumnsHeaderList);\n\n    this.setState({\n      columns: existingColumnsHeaderList,\n    });\n\n    this.closeColumnReOrdering();\n  };\n\n\t/**\n\t * Method To re-position a particular object in an Array from old_index to new_index\n\t * @param {*} arr inComing array\n\t * @param {*} old_index initial index\n\t * @param {*} new_index final index\n\t */\n  array_move = (arr, old_index, new_index) => {\n    if (new_index >= arr.length) {\n      var k = new_index - arr.length + 1;\n      while (k--) {\n        arr.push(undefined);\n      }\n    }\n    arr.splice(new_index, 0, arr.splice(old_index, 1)[0]);\n    return arr;\n  };\n\n\t/**\n\t * Method to render the column Selector Pannel\n\t */\n  columnReorderingPannel = () => {\n    var headerNameList = [];\n    var existingPinnedHeadersList = [];\n    this.state.columns\n      .filter((item) => item.frozen !== undefined && item.frozen === true)\n      .map((item) => existingPinnedHeadersList.push(item.name));\n    this.state.columns.map((item) => headerNameList.push(item.name));\n    this.setState({\n      columnReorderingComponent: (\n        <ColumnReordering\n          maxLeftPinnedColumn={this.props.maxLeftPinnedColumn}\n          updateTableAsPerRowChooser={this.updateTableAsPerRowChooser}\n          headerKeys={headerNameList}\n          closeColumnReOrdering={this.closeColumnReOrdering}\n          existingPinnedHeadersList={existingPinnedHeadersList}\n          {...this.props}\n        />\n      ),\n    });\n  };\n\n\t/**\n\t * Method to stop the render the column Selector Pannel\n\t */\n  closeColumnReOrdering = () => {\n    this.setState({\n      columnReorderingComponent: null,\n    });\n  };\n  handleSearchValue = (value) => {\n\n    this.setState({ searchValue: value });\n  };\n  clearSearchValue = () => {\n    this.setState({ searchValue: \"\" });\n    this.setState({filteringRows:this.state.filteringRows})\n  };\n\n  sortingPanel = () => {\n    let columnField = [];\n    this.state.columns.map((item) => columnField.push(item.name));\n    this.setState({\n      sortingPanelComponent: <Sorting columnFieldValue={columnField} closeSorting={this.closeSorting} />,\n    });\n  };\n\n  closeSorting = () => {\n    this.setState({\n      sortingPanelComponent: null,\n    });\n  };\n\n  //Export Data Logic\n  exportColumnData = () => {\n    this.setState({\n      exportComponent: (\n        <ExportData rows={this.state.rows} columnsList={this.state.columns} closeExport={this.closeExport} />\n      ),\n    });\n  };\n\n  closeExport = () => {\n    this.setState({\n      exportComponent: null,\n    });\n  };\n  \n  render() {\n    return (\n      <div>\n        <div className='parentDiv'>\n          <div className='totalCount'>\n            Showing <strong> {this.state.count} </strong> records\n\t\t\t\t\t</div>\n          <div className='globalSearch'>\n            <i className=\"fa fa-search\"></i>\n            <FormControl\n              className=\"globalSeachInput\"\n              type='text'\n              placeholder=\"Search\"\n              onChange={(e) => {\n                this.handleSearchValue(e.target.value);\n                this.props.globalSearchLogic(e, this.state.tempRows);\n              }}\n              value={this.state.searchValue}\n            />\n          </div>\n          {/* <div className=\"filterIcons\">\n            <FontAwesomeIcon icon={faFilter} />\n          </div> */}\n          <div className='filterIcons' onClick={this.sortingPanel}>\n            <FontAwesomeIcon title='Group Sort' icon={faSortAmountDown} />\n            <FontAwesomeIcon icon={faSortDown} className='filterArrow' />\n          </div>\n          {this.state.sortingPanelComponent}\n          <div className='filterIcons' onClick={this.columnReorderingPannel}>\n            <FontAwesomeIcon title='Column Chooser' icon={faColumns} />\n            <FontAwesomeIcon icon={faSortDown} className='filterArrow' />\n          </div>\n          {this.state.columnReorderingComponent}\n          <div className='filterIcons'>\n            <FontAwesomeIcon title='Export' icon={faShareAlt} onClick={this.exportColumnData} />\n          </div>\n          {this.state.exportComponent}\n          {/* <div className=\"filterIcons\">\n            <FontAwesomeIcon title=\"Reload\" icon={faSyncAlt} />\n          </div> */}\n          {/* <div className=\"filterIcons\">\n            <FontAwesomeIcon icon={faAlignLeft} />\n          </div> */}\n        </div>\n        <ErrorMessage\n          className='errorDiv'\n          status={this.props.status}\n          closeWarningStatus={this.props.closeWarningStatus}\n          clearSearchValue={this.clearSearchValue}\n        />\n        <DraggableContainer className='gridDiv' onHeaderDrop={this.onHeaderDrop}>\n          <ExtDataGrid\n            toolbar={<Toolbar enableFilter={true} />}\n            getValidFilterValues={(columnKey) => this.getValidFilterValues(this.state.filteringRows, columnKey)}\n            minHeight={this.state.height}\n            columns={this.state.columns}\n            rowGetter={(i) => this.state.rows[i]}\n            rowsCount={this.state.rows.length}\n            onGridRowsUpdated={this.onGridRowsUpdated}\n            enableCellSelect={true}\n            onClearFilters={() => {\n              this.setState({ junk: {} });\n            }}\n            onColumnResize={(idx, width) => console.log(`Column ${idx} has been resized to ${width}`)}\n            onAddFilter={(filter) => this.handleFilterChange(filter)}\n            rowSelection={{\n              showCheckbox: true,\n              enableShiftSelect: true,\n              onRowsSelected: this.onRowsSelected,\n              onRowsDeselected: this.onRowsDeselected,\n              selectBy: {\n                indexes: this.state.selectedIndexes,\n              },\n            }}\n            onGridSort={(sortColumn, sortDirection) => this.sortRows(this.state.rows, sortColumn, sortDirection)}\n          //**************************/\n          //--Todo-- This is commented aspart of fixing column filtering \n          // cellRangeSelection={{\n          //   onComplete: this.setSelection,\n          // }}\n          //***********************/\n          />\n        </DraggableContainer>\n      </div>\n    );\n  }\n}\nexport default spreadsheet;\n","export const applyFormula = (obj, columnName) => {\n  let item = obj[columnName].toString();\n  if (item && item.charAt(0) === \"=\") {\n    var operation = item.split(\"(\");\n    var value = operation[1]\n      .substring(0, operation[1].length - 1)\n      .split(/[,:]/);\n    switch (operation[0]) {\n      case \"=SUM\":\n      case \"=ADD\":\n      case \"=sum\":\n      case \"=add\":\n        obj[columnName] = value.reduce(function (a, b) {\n          return Number(a) + Number(b);\n        });\n        break;\n      case \"=MUL\":\n      case \"=mul\":\n        obj[columnName] = value.reduce(function (a, b) {\n          return Number(a) * Number(b);\n        });\n        break;\n      case \"=SUB\":\n      case \"=sub\":\n      case \"=DIFF\":\n      case \"=diff\":\n        obj[columnName] = value.reduce(function (a, b) {\n          return Number(a) - Number(b);\n        });\n        break;\n      case \"=min\":\n      case \"=MIN\":\n        obj[columnName] = Math.min.apply(Math, value);\n        break;\n      case \"=max\":\n      case \"=MAX\":\n        obj[columnName] = Math.max.apply(Math, value);\n        break;\n      default:\n        console.log(\"No Calculation\");\n    }\n  }\n  return obj;\n};","\nimport React, { useState, useEffect } from \"react\";\nimport Spreadsheet from \"spreadsheet\";\nimport CargoData from \"./data.json\";\nimport { fetchData } from \"./getData\";\n\nconst App = () => {\n  //Get spreadsheet height value, which is a required value\n  const gridHeight = \"90vh\";\n\n  let searchKey = \"\";\n  //Set state value for variable to hold grid data\n  const [data, setData] = useState();\n  //Set state value for variable to hold grid record status\n  const [status, setStatus] = useState(\"\");\n  const rows = CargoData;\n\n  const maxLeftPinnedColumn = 5;\n  //Configure columns and its related featues such as editor(Text/DropDown), FormulaApplicable(True/False)\n  //Editable, Draggable, sortable, resizable, filterable, default width\n  const columns = [\n    {\n      key: \"flightno\",\n      name: \"Flight #\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 120,\n    },\n    {\n      key: \"date\",\n      name: \"Date\",\n      draggable: true,\n      editor: \"DatePicker\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 120,\n    },\n    {\n      key: \"segmentfrom\",\n      name: \"Segment From\",\n      draggable: true,\n      editor: \"DropDown\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 120,\n    },\n    {\n      key: \"revenue\",\n      name: \"Revenue\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: true,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 120,\n    },\n    {\n      key: \"yeild\",\n      name: \"Yeild\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: true,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 120,\n    },\n    {\n      key: \"segmentto\",\n      name: \"Segment To\",\n      draggable: true,\n      editor: \"DropDown\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 120,\n    },\n    {\n      key: \"flightModel\",\n      name: \"Flight Model\",\n      //draggable: true,\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 120,\n    },\n    {\n      key: \"bodyType\",\n      name: \"Body Type\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 120,\n    },\n    {\n      key: \"type\",\n      name: \"Type\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 120,\n    },\n    {\n      key: \"startTime\",\n      name: \"Start Time\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 120,\n    },\n    {\n      key: \"endTime\",\n      name: \"End Time\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 120,\n    },\n    {\n      key: \"status\",\n      name: \"Status\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 120,\n    },\n    {\n      key: \"additionalStatus\",\n      name: \"Additional Status\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 120,\n    },\n    {\n      key: \"timeStatus\",\n      name: \"Time Status\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 120,\n    },\n    {\n      key: \"weightpercentage\",\n      name: \"Weight Percentage\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 120,\n    },\n    {\n      key: \"weightvalue\",\n      name: \"Weight Value\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: true,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 120,\n    },\n    {\n      key: \"volumepercentage\",\n      name: \"Volume Percentage\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: true,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 120,\n    },\n    {\n      key: \"volumevalue\",\n      name: \"Volume Value\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 120,\n    },\n    {\n      key: \"uldposition1\",\n      name: \"uldposition1\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 120,\n    },\n    {\n      key: \"uldvalue1\",\n      name: \"uldvalue1\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 120,\n    },\n    {\n      key: \"uldposition2\",\n      name: \"uldposition2\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 120,\n    },\n    {\n      key: \"uldvalue2\",\n      name: \"uldvalue2\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 120,\n    },\n    {\n      key: \"uldposition3\",\n      name: \"uldposition3\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 120,\n    },\n    {\n      key: \"uldvalue3\",\n      name: \"uldvalue3\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 120,\n    },\n    {\n      key: \"uldposition4\",\n      name: \"uldposition4\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 120,\n    },\n    {\n      key: \"uldvalue4\",\n      name: \"uldvalue4\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 120,\n    },\n\n    {\n      key: \"sr\",\n      name: \"SR\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 120,\n    },\n    {\n      key: \"queuedBookingSR\",\n      name: \"Queued Booking SR\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 120,\n    },\n    {\n      key: \"queuedBookingvolume\",\n      name: \"Queued Booking Volume\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 120,\n    },\n  ];\n\n  //Configure columns and its related functions\n  const airportCodeList =  [\n        \"AAA\",\n        \"AAB\",\n        \"AAC\",\n        \"ABA\",\n        \"ABB\",\n        \"ABC\",\n        \"ACA\",\n        \"ACB\",\n        \"ACC\",\n        \"BAA\",\n        \"BAB\",\n        \"BAC\",\n        \"BBA\",\n        \"BBB\",\n        \"BBC\",\n        \"BCA\",\n        \"BCB\",\n        \"BCC\",\n        \"CAA\",\n        \"CAB\",\n        \"CAC\",\n        \"CBA\",\n        \"CBB\",\n        \"CBC\",\n        \"CCA\",\n        \"CCB\",\n        \"CCC\",\n        \"XXX\",\n        \"XXY\",\n        \"XXZ\",\n        \"XYX\",\n        \"XYY\",\n        \"XYZ\",\n        \"XZX\",\n        \"XZY\",\n        \"XZZ\",\n        \"YXX\",\n        \"YXY\",\n        \"YXZ\",\n        \"YYX\",\n        \"YYY\",\n        \"YYZ\",\n        \"YZX\",\n        \"YZY\",\n        \"YZZ\",\n        \"ZXX\",\n        \"ZXY\",\n        \"ZXZ\",\n        \"ZYX\",\n        \"ZYY\",\n        \"ZYZ\",\n        \"ZZX\",\n        \"ZZY\",\n        \"ZZZ\"\n    ];\n\n  //Add logic for doing global search in the spreadsheet\n  const globalSearchLogic = (e, updatedRows) => {\n    searchKey = String(e.target.value).toLowerCase();\n    let filteredRows = updatedRows.filter((item) => {\n      return (\n        (item.flightno && item.flightno.toLowerCase().includes(searchKey)) ||\n        (item.date && item.date.toLowerCase().includes(searchKey)) ||\n        (item.segmentfrom &&\n          item.segmentfrom.toLowerCase().includes(searchKey)) ||\n        (item.segmentto && item.segmentto.toLowerCase().includes(searchKey)) ||\n        String(item.flightModel).includes(searchKey) ||\n        (item.bodyType && item.bodyType.toLowerCase().includes(searchKey)) ||\n        (item.type && item.type.toLowerCase().includes(searchKey)) ||\n        (item.startTime && item.startTime.toLowerCase().includes(searchKey)) ||\n        (item.endTime && item.endTime.toLowerCase().includes(searchKey)) ||\n        (item.status && item.status.toLowerCase().includes(searchKey)) ||\n        (item.additionalStatus &&\n          item.additionalStatus.toLowerCase().includes(searchKey)) ||\n        (item.timeStatus &&\n          item.timeStatus.toLowerCase().includes(searchKey)) ||\n        (item.weightpercentage &&\n          item.weightpercentage.toLowerCase().includes(searchKey)) ||\n        (item.volumevalue &&\n          item.volumevalue.toLowerCase().includes(searchKey)) ||\n        (item.uldposition1 &&\n          item.uldposition1.toLowerCase().includes(searchKey)) ||\n        (item.uldvalue1 && item.uldvalue1.toLowerCase().includes(searchKey)) ||\n        (item.uldposition2 &&\n          item.uldposition2.toLowerCase().includes(searchKey)) ||\n        (item.uldvalue2 && item.uldvalue2.toLowerCase().includes(searchKey)) ||\n        (item.uldposition3 &&\n          item.uldposition3.toLowerCase().includes(searchKey)) ||\n          (item.weightvalue && item.weightvalue.toLowerCase().includes(searchKey)) ||\n        (item.uldvalue3 && item.uldvalue3.toLowerCase().includes(searchKey)) ||\n        (item.uldposition4 &&\n          item.uldposition4.toLowerCase().includes(searchKey)) ||\n        (item.revenue && item.revenue.toLowerCase().includes(searchKey)) ||\n        (item.yeild && item.yeild.toLowerCase().includes(searchKey)) ||\n        (item.sr && item.sr.toLowerCase().includes(searchKey)) ||\n        (item.queuedBookingSR &&\n          item.queuedBookingSR.toLowerCase().includes(searchKey)) ||\n        (item.queuedBookingvolume &&\n          item.queuedBookingvolume.toLowerCase().includes(searchKey))\n      );\n    });\n    if (!filteredRows.length) {\n      setStatus(\"invalid\");\n      setData(rows);\n    } else {\n      setData(filteredRows);\n      setStatus(\"\");\n    }\n  };\nconst handleWarningStatus=()=>{\n  setStatus(\"invalid\");\n}\n  //Gets called when there is a cell edit\n  const updateCellData = (fromRow,toRow,value,updateType) => {\n    if(updateType===\"CELL_UPDATE\"){\n      console.log(\"row:\", fromRow, \"updated-Value:\", value,\"Updation-Type:\", updateType);\n    }\n    if(updateType===\"CELL_DRAG\"){\n      console.log(\"fromRow:\", fromRow,\"toRow:\",toRow, \"updated-Value:\", value,\"Updation-Type:\", updateType);\n    }\n  }\n\n  //Gets called when row bulk edit is done\n  const selectBulkData = (selectedRows) => {\n    console.log(\"selectedRows:\", selectedRows);\n  };\n  const closeWarningStatus = () => {\n    setStatus(\"\")\n  }\n  useEffect(() => {\n    //Make API call to fetch initial set of data, uncomment below code to use API call\n    // fetchData(0).then((data) => {\n    //   setItems(data);\n    // });\n    setData(rows);\n  }, [rows]);\n\n  if (data && data.length) {\n    return (\n      <div>\n        <Spreadsheet\n          rows={data}\n          textValue={searchKey}\n          globalSearchLogic={globalSearchLogic}\n          status={status}\n          closeWarningStatus={closeWarningStatus}\n          handleWarningStatus={handleWarningStatus}\n          count={data.length}\n          columns={columns}\n          airportCodes={airportCodeList}\n          gridHeight={gridHeight}\n          updateCellData={updateCellData}\n          selectBulkData={selectBulkData}\n          maxLeftPinnedColumn={maxLeftPinnedColumn}\n        />\n      </div>\n    );\n  } else return <h2>Loading Data</h2>;\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}