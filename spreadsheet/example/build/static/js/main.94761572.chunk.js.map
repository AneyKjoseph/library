{"version":3,"sources":["../../src/common/extDataGrid.js","../../src/functions/DatePicker.js","../../src/common/ErrorConstants.js","../../src/common/ErrorMessage.js","../../src/overlays/column_chooser/ItemTypes.js","../../src/overlays/column_chooser/columnItem.js","../../src/overlays/column_chooser/columnsList.js","../../src/overlays/column_chooser/Chooser.js","../../src/overlays/sorting/ItemTypes.js","../../src/overlays/sorting/SortItem.js","../../src/overlays/sorting/SortingList.js","../../src/overlays/sorting/Sorting.js","../../src/overlays/export_data/ExportData.js","../../src/index.js","../../src/utilities/utils.js","App.js","index.js"],"names":["componentDidMount","this","document","window","componentWillUnmount","React","constructor","props","super","value","Date","getInputNode","bind","getValue","onValueChanged","updated","date","state","Intl","year","month","day","dateTimeFormat","column","ev","render","type","ref","onChange","DatePicker","PropTypes","string","ErrorMessage","useState","useEffect","setStatus","status","id","className","role","icon","onClick","ItemTypes","style","cursor","ColumnItem","findColumn","originalIndex","useDrag","item","collect","monitor","isDragging","end","dropResult","moveColumn","droppedId","useDrop","accept","canDrop","hover","draggedId","overIndex","index","opacity","node","drag","drop","text","any","ColumnsList","atIndex","setColumns","update","columns","$splice","values","temp","c","display","flexWrap","key","columnsArray","handleReorderList","columnReorderEntityList","map","leftPinnedColumList","isAllSelected","existingColumnReorderEntityList","console","isExistingAllSelect","typeToBeAdded","existingLeftPinnedList","indexOfInsertion","columnSelectList","findIndex","e","searchKey","String","existingList","filtererdColumnReorderList","colsList","faAlignJustify","checked","includes","disabled","maxLeftPinnedColumn","reArrangeLeftPinnedColumn","columHeaderName","subItem","reordered","setWrapperRef","handleClickOutside","event","wrapperRef","contains","placeholder","filterColumnReorderList","length","addToColumnReorderEntityList","closeColumnReOrdering","color","backend","options","enableMouseEvents","createColumnsArrayFromProps","resetColumnReorderList","updateTableAsPerRowChooser","ColumnReordering","headerKeys","existingPinnedHeadersList","handleheaderNameList","Card","findCard","moveCard","SortingList","setCards","cards","card","sortsArray","handleReorderListOfSort","rowList","existingSortingOrderList","sortBy","columnFieldValue","order","sortOn","sortingOrderList","i","JSON","errorMessage","rowsValue","row","name","captureSortingFeildValues","title","copy","remove","sortingKey","unique","showError","some","element","setState","setTableAsPerSortingParams","reOrderedIndexList","rows","undefined","sortingParamsObjectList","closeSorting","add","clearAll","updateTableAsPerSortCondition","App","clearAllSortingParams","sortingObj","handleTableSortSwap","downLaodFileType","columnEntityList","existingColumnEntityList","columnVlaueList","keys","Object","filteredColumnVal","columnName","downloadCSVFile","doc","headers","dataValues","content","startY","head","body","wb","Sheets","data","XLSX","SheetNames","excelBuffer","bookType","Blob","FileSaver","fileName","filteredRows","columnsList","filter","columnValueList","columnLength","fileLength","clickTag","warning","filteredRow","selectDownLoadType","exportValidation","columnSearchLogic","addToColumnEntityList","closeExport","ExportData","DropDownEditor","selectors","Data","swapList","swapSortList","NumericFilter","warningStatus","action","formulaAppliedCols","obj","operation","a","b","Number","Math","applyFormula","filteringRows","tempRows","selectedIndexes","concat","r","rowIndexes","junk","getrows","count","filters","sortColumn","sortDirection","reorderedSwap","existingColumnsHeaderList","inComingColumnsHeaderList","rePositionedArray","pinnedColumnsList","singleHeaderOneList","array_move","headerItem","tempList","pinnedReorder","arr","old_index","new_index","k","headerNameList","columnReorderingComponent","searchValue","columnField","sortingPanelComponent","args","sortingOrderSwapList","exportComponent","tableSortList","existingRows","sortingOrderNameList","nameOfItem","rowItem","toCamelCase","primer","reverse","existingSortingOrderSwapList","stringOfItemIndex","sort_by","str","$1","airportCodes","height","displayNoRows","searchIconDisplay","topLeft","handleSearchValue","clearSearchValue","handleFilterChange","componentDidUpdate","resizeEvent","UNSAFE_componentWillReceiveProps","textValue","getValidFilterValues","columnId","sortingPanel","faSortAmountDown","columnReorderingPannel","faColumns","exportColumnData","closeWarningStatus","toolbar","enableFilter","columnKey","minHeight","rowGetter","rowsCount","onGridRowsUpdated","enableCellSelect","onClearFilters","onColumnResize","idx","width","onAddFilter","rowSelection","showCheckbox","enableShiftSelect","onRowsSelected","onRowsDeselected","selectBy","indexes","onGridSort","sortRows","default_cmp","getCmpFunc","cmp","fields","n_fields","arguments","field","A","B","l","result","Spreadsheet","updateCellData","selectBulkData","globalSearchLogic","setData","CargoData","draggable","editor","formulaApplicable","sortable","resizable","filterable","filterType","airportCodeList","updatedRows","target","toLowerCase","flightno","segmentfrom","segmentto","flightModel","bodyType","startTime","endTime","additionalStatus","timeStatus","weightpercentage","volumevalue","uldposition1","uldvalue1","uldposition2","uldvalue2","uldposition3","weightvalue","uldvalue3","uldposition4","revenue","yeild","sr","queuedBookingSR","queuedBookingvolume","handleWarningStatus","fromRow","toRow","updateType","log","selectedRows","gridHeight","ReactDOM","getElementById"],"mappings":"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Ed,CACEzQ,IAAK,sBACLwE,KAAM,wBACN2L,WAAW,EACXC,OAAQ,OACRC,mBAAmB,EACnBC,UAAU,EACVC,WAAW,EACXC,YAAY,EACZjC,MAAO,IACPkC,WAAY,uBAKVC,EAAkB,CACtB,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OAIIV,EAAoB,CAACjP,EAAG4P,KAC5B3P,EAAYC,OAAOF,EAAE6P,OAAOpV,OAAOqV,cACnC,IAAInJ,EAAeiJ,EAAY/I,OAAQ5J,GAElCA,EAAK8S,UAAY9S,EAAK8S,SAASD,cAActP,SAASP,IACtDhD,EAAKjC,MAAQiC,EAAKjC,KAAK8U,cAActP,SAASP,IAC9ChD,EAAK+S,aACJ/S,EAAK+S,YAAYF,cAActP,SAASP,IACzChD,EAAKgT,WAAahT,EAAKgT,UAAUH,cAActP,SAASP,IACzDC,OAAOjD,EAAKiT,aAAa1P,SAASP,IACjChD,EAAKkT,UAAYlT,EAAKkT,SAASL,cAActP,SAASP,IACtDhD,EAAKvB,MAAQuB,EAAKvB,KAAKoU,cAActP,SAASP,IAC9ChD,EAAKmT,WAAanT,EAAKmT,UAAUN,cAActP,SAASP,IACxDhD,EAAKoT,SAAWpT,EAAKoT,QAAQP,cAActP,SAASP,IACpDhD,EAAKb,QAAUa,EAAKb,OAAO0T,cAActP,SAASP,IAClDhD,EAAKqT,kBACJrT,EAAKqT,iBAAiBR,cAActP,SAASP,IAC9ChD,EAAKsT,YACJtT,EAAKsT,WAAWT,cAActP,SAASP,IACxChD,EAAKuT,kBACJvT,EAAKuT,iBAAiBV,cAActP,SAASP,IAC9ChD,EAAKwT,aACJxT,EAAKwT,YAAYX,cAActP,SAASP,IACzChD,EAAKyT,cACJzT,EAAKyT,aAAaZ,cAActP,SAASP,IAC1ChD,EAAK0T,WAAa1T,EAAK0T,UAAUb,cAActP,SAASP,IACxDhD,EAAK2T,cACJ3T,EAAK2T,aAAad,cAActP,SAASP,IAC1ChD,EAAK4T,WAAa5T,EAAK4T,UAAUf,cAActP,SAASP,IACxDhD,EAAK6T,cACJ7T,EAAK6T,aAAahB,cAActP,SAASP,IAC1ChD,EAAK8T,aACJ9T,EAAK8T,YAAYjB,cAActP,SAASP,IACzChD,EAAK+T,WAAa/T,EAAK+T,UAAUlB,cAActP,SAASP,IACxDhD,EAAKgU,cACJhU,EAAKgU,aAAanB,cAActP,SAASP,IAC1ChD,EAAKiU,SAAWjU,EAAKiU,QAAQpB,cAActP,SAASP,IACpDhD,EAAKkU,OAASlU,EAAKkU,MAAMrB,cAActP,SAASP,IAChDhD,EAAKmU,IAAMnU,EAAKmU,GAAGtB,cAActP,SAASP,IAC1ChD,EAAKoU,iBACJpU,EAAKoU,gBAAgBvB,cAActP,SAASP,IAC7ChD,EAAKqU,qBACJrU,EAAKqU,oBAAoBxB,cAActP,SAASP,IAGjD0G,EAAarF,QAKhB4N,EAAQvI,GACRxK,EAAU,MALVA,EAAU,WACV+S,EAAQ,MAONqC,EAAsB,KAC1BpV,EAAU,YAGN4S,EAAiB,CAACyC,EAASC,EAAOhX,EAAOiX,KAC1B,gBAAfA,GACFjS,QAAQkS,IACN,OACAH,EACA,iBACA/W,EACA,iBACAiX,GAGe,cAAfA,GACFjS,QAAQkS,IACN,WACAH,EACA,SACAC,EACA,iBACAhX,EACA,iBACAiX,IAMA1C,EAAkB4C,IACtBnS,QAAQkS,IAAI,gBAAiBC,IAEzBhF,EAAqB,KACzBzQ,EAAU,IACV+S,EAAQ5K,IAUV,OARApI,oBAAU,KAKRgT,EAAQ5K,IACP,CAACA,IAEA6B,EAEA,6BACE,kBAAC,EAAD,CACE7B,KAAM6B,EACNiG,UAAWnM,EACXgP,kBAAmBA,EACnB7S,OAAQA,EACRwQ,mBAAoBA,EACpB2E,oBAAqBA,EACrBrI,MAAO/C,EAAK7E,OACZ5C,QAASA,EACT+M,aAAckE,EACdkC,WAthBW,OAuhBX9C,eAAgBA,EAChBC,eAAgBA,EAChBtO,oBAhhBoB,UAohBR6D,IAAT4B,EACF,4CAEA,M,MCliBX2L,IAASrW,OACL,kBAAC,EAAD,MACFvB,SAAS6X,eAAe,W","file":"static/js/main.94761572.chunk.js","sourcesContent":["import ReactDataGrid from \"react-data-grid\";\n\nclass ExtDataGrid extends ReactDataGrid {\n  componentDidMount() {\n    this._mounted = true;\n    this.dataGridComponent = document.getElementsByClassName(\n      \"react-grid-Viewport\"\n    )[0];\n\n    window.addEventListener(\"resize\", this.metricsUpdated);\n    if (this.props.cellRangeSelection) {\n      //this.dataGridComponent.addEventListener(\"mouseup\", this.onWindowMouseUp);\n    }\n    this.metricsUpdated();\n  }\n\n  componentWillUnmount() {\n    this._mounted = false;\n    window.removeEventListener(\"resize\", this.metricsUpdated);\n    //this.dataGridComponent.removeEventListener(\"mouseup\", this.onWindowMouseUp);\n  }\n}\n\nexport default ExtDataGrid;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport default class DatePicker extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: new Date(),\n    };\n    //the variable to store component reference\n    this.input = null;\n\n    this.getInputNode = this.getInputNode.bind(this);\n    this.getValue = this.getValue.bind(this);\n    this.onValueChanged = this.onValueChanged.bind(this);\n  }\n\n  //returning the component with the reference, input\n  getInputNode() {\n    return this.input;\n  }\n  //returning updated object with the date value in the required format\n  getValue() {\n    var updated = {};\n    let date;\n    date = new Date(this.state.value);\n    const dateTimeFormat = new Intl.DateTimeFormat(\"en-US\", {\n      year: \"numeric\",\n      month: \"numeric\",\n      day: \"2-digit\",\n    });\n    const [\n      { value: month },\n      ,\n      { value: day },\n      ,\n      { value: year },\n    ] = dateTimeFormat.formatToParts(date);\n    updated[this.props.column.key] = `${year}-${month}-${day}`;\n    return updated;\n  }\n\n  onValueChanged(ev) {\n    this.setState({ value: ev.target.value });\n  }\n\n  render() {\n    return (\n      <div>\n        <input\n          type=\"date\"\n          ref={(ref) => {\n            this.input = ref;\n          }}\n          value={this.state.value}\n          onChange={this.onValueChanged}\n        />\n      </div>\n    );\n  }\n}\n\nDatePicker.propTypes = {\n  column: PropTypes.string,\n};\n","export const SEARCH_NOT_FOUNT_ERROR = \"No Records found!\";\r\n","import React, { useState, useEffect } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport { SEARCH_NOT_FOUNT_ERROR } from \"./ErrorConstants\";\n\nconst ErrorMessage = (props) => {\n  const [status, setStatus] = useState(props.status);\n  useEffect(() => {\n    setStatus(props.status);\n  }, [props.status]);\n  if (status === \"invalid\") {\n    return (\n      <div id=\"errorMsg\">\n        <div className=\"alert alert-danger\" role=\"alert\">\n          {SEARCH_NOT_FOUNT_ERROR}\n        </div>\n        <div className=\"notification-close\">\n          <FontAwesomeIcon\n            icon={faTimes}\n            onClick={() => {\n              props.closeWarningStatus();\n              props.clearSearchValue();\n            }}\n          />\n        </div>\n      </div>\n    );\n  } else return <div></div>;\n};\nexport default ErrorMessage;\n","export const ItemTypes = {\r\n    COLUMN: \"column\"\r\n};\r\n","import React from \"react\";\r\nimport { useDrag, useDrop } from \"react-dnd\";\r\nimport { ItemTypes } from \"./ItemTypes\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst style = {\r\n  cursor: \"move\",\r\n};\r\n\r\nconst ColumnItem = ({ id, text, moveColumn, findColumn }) => {\r\n  const originalIndex = findColumn(id).index;\r\n\r\n  const [{ isDragging }, drag] = useDrag({\r\n    item: { type: ItemTypes.COLUMN, id, originalIndex },\r\n    collect: (monitor) => ({\r\n      isDragging: monitor.isDragging(),\r\n    }),\r\n    end: (dropResult, monitor) => {\r\n      const { id: droppedId, originalIndex } = monitor.getItem();\r\n      const didDrop = monitor.didDrop();\r\n      if (!didDrop) {\r\n        moveColumn(droppedId, originalIndex);\r\n      }\r\n    },\r\n  });\r\n\r\n  const [, drop] = useDrop({\r\n    accept: ItemTypes.COLUMN,\r\n    canDrop: () => false,\r\n    hover({ id: draggedId }) {\r\n      if (draggedId !== id) {\r\n        const { index: overIndex } = findColumn(id);\r\n        moveColumn(draggedId, overIndex);\r\n      }\r\n    },\r\n  });\r\n\r\n  const opacity = isDragging ? 0.1 : 1;\r\n\r\n  return (\r\n    <div ref={(node) => drag(drop(node))} style={{ ...style, opacity }}>\r\n      {text}\r\n    </div>\r\n  );\r\n};\r\n\r\nColumnItem.propTypes = {\r\n  id: PropTypes.any,\r\n  text: PropTypes.any,\r\n  moveColumn: PropTypes.any,\r\n  findColumn: PropTypes.any,\r\n};\r\n\r\nexport default ColumnItem;\r\n","import React, { useState } from \"react\";\r\nimport { useDrop } from \"react-dnd\";\r\nimport update from \"immutability-helper\";\r\nimport { ItemTypes } from \"./ItemTypes\";\r\nimport ColumnItem from \"./columnItem\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ColumnsList = (props) => {\r\n  const [columns, setColumns] = useState([...props.columnsArray]);\r\n\r\n  const moveColumn = (id, atIndex) => {\r\n    const { column, index } = findColumn(id);\r\n    setColumns(\r\n      update(columns, {\r\n        $splice: [\r\n          [index, 1],\r\n          [atIndex, 0, column],\r\n        ],\r\n      })\r\n    );\r\n    let values = [];\r\n    let temp = [];\r\n    temp = update(columns, {\r\n      $splice: [\r\n        [index, 1],\r\n        [atIndex, 0, column],\r\n      ],\r\n    });\r\n    temp.forEach((item) => {\r\n      values.push(item.id);\r\n    });\r\n    props.handleReorderList(values);\r\n  };\r\n\r\n  const findColumn = (id) => {\r\n    const column = columns.filter((c) => `${c.id}` === id)[0];\r\n    return {\r\n      column,\r\n      index: columns.indexOf(column),\r\n    };\r\n  };\r\n\r\n  const [, drop] = useDrop({ accept: ItemTypes.COLUMN });\r\n\r\n  React.useEffect(() => {\r\n    setColumns(props.columnsArray);\r\n  }, [props.columnsArray]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div ref={drop} style={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n        {columns.map((column) => (\r\n          <ColumnItem\r\n            key={column.id}\r\n            id={`${column.id}`}\r\n            text={column.text}\r\n            moveColumn={moveColumn}\r\n            findColumn={findColumn}\r\n          />\r\n        ))}\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nColumnsList.propTypes = {\r\n  columnsArray: PropTypes.any,\r\n  handleReorderList: PropTypes.any,\r\n};\r\n\r\nexport default ColumnsList;\r\n","import React from \"react\";\n\nimport { DndProvider } from \"react-dnd\";\nimport { TouchBackend } from \"react-dnd-touch-backend\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTimes, faAlignJustify } from \"@fortawesome/free-solid-svg-icons\";\nimport ColumnsList from \"./columnsList\";\nimport PropTypes from \"prop-types\";\n\nclass ColumnReordering extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columnReorderEntityList: this.props.headerKeys,\n      columnSelectList: this.props.columns.map((item) => item.name),\n      leftPinnedColumList: this.props.existingPinnedHeadersList,\n      isAllSelected: true,\n      maxLeftPinnedColumn: this.props.maxLeftPinnedColumn,\n    };\n    this.setWrapperRef = this.setWrapperRef.bind(this);\n    this.handleClickOutside = this.handleClickOutside.bind(this);\n  }\n  componentDidMount() {\n    document.addEventListener(\"mousedown\", this.handleClickOutside);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"mousedown\", this.handleClickOutside);\n  }\n\n  setWrapperRef(node) {\n    this.wrapperRef = node;\n  }\n\n  handleClickOutside(event) {\n    if (this.wrapperRef && !this.wrapperRef.contains(event.target)) {\n      this.props.closeColumnReOrdering();\n    }\n  }\n\n  /**\n   * Method to reset the coloumn list onClick of Reset button\n   */\n  resetColumnReorderList = () => {\n    this.setState({\n      columnReorderEntityList: this.props.columns.map((item) => item.name),\n      leftPinnedColumList: [],\n      isAllSelected: true,\n    });\n  };\n\n  /**\n   * Method to Select all options in the coloumn list onClick of Select All button\n   */\n  selectAllToColumnReOrderList = () => {\n    this.resetColumnReorderList();\n    var existingColumnReorderEntityList = this.state.columnReorderEntityList;\n    console.log(existingColumnReorderEntityList);\n    var isExistingAllSelect = this.state.isAllSelected;\n    if (!isExistingAllSelect) {\n      existingColumnReorderEntityList = this.props.columns.map(\n        (item) => item.name\n      );\n      isExistingAllSelect = true;\n    } else {\n      existingColumnReorderEntityList = [];\n      isExistingAllSelect = false;\n    }\n    this.setState({\n      columnReorderEntityList: existingColumnReorderEntityList,\n      isAllSelected: isExistingAllSelect,\n      leftPinnedColumList: [],\n    });\n  };\n\n  /**\n   * Method To add a column to columnReorderEntityList when selected.\n   * @param {String} typeToBeAdded\n   */\n  addToColumnReorderEntityList = (typeToBeAdded) => {\n    var existingColumnReorderEntityList = this.state.columnReorderEntityList;\n    var existingLeftPinnedList = this.state.leftPinnedColumList;\n    if (!existingColumnReorderEntityList.includes(typeToBeAdded)) {\n      var indexOfInsertion = this.state.columnSelectList.findIndex(\n        (item) => item === typeToBeAdded\n      );\n      while (indexOfInsertion > 0) {\n        if (\n          existingColumnReorderEntityList.includes(\n            this.state.columnSelectList[indexOfInsertion - 1]\n          )\n        ) {\n          if (\n            !existingLeftPinnedList.includes(\n              this.state.columnSelectList[indexOfInsertion - 1]\n            )\n          ) {\n            indexOfInsertion = existingColumnReorderEntityList.findIndex(\n              (item) =>\n                item === this.state.columnSelectList[indexOfInsertion - 1]\n            );\n            indexOfInsertion = indexOfInsertion + 1;\n            break;\n          } else {\n            indexOfInsertion = indexOfInsertion - 1;\n          }\n        } else {\n          indexOfInsertion = indexOfInsertion - 1;\n        }\n      }\n      existingColumnReorderEntityList.splice(\n        indexOfInsertion,\n        0,\n        typeToBeAdded\n      );\n    } else {\n      existingColumnReorderEntityList = existingColumnReorderEntityList.filter(\n        (item) => {\n          if (item !== typeToBeAdded) return item;\n        }\n      );\n      if (existingLeftPinnedList.includes(typeToBeAdded)) {\n        existingLeftPinnedList = existingLeftPinnedList.filter(\n          (item) => item !== typeToBeAdded\n        );\n      }\n    }\n    this.setState({\n      columnReorderEntityList: existingColumnReorderEntityList,\n      isAllSelected: false,\n      leftPinnedColumList: existingLeftPinnedList,\n    });\n  };\n\n  /**\n   * Method to handle the like-search on key stroke.\n   * @param {Event} e\n   */\n  filterColumnReorderList = (e) => {\n    var searchKey = String(e.target.value).toLowerCase();\n    var existingList = this.props.columns.map((item) => item.name);\n    let filtererdColumnReorderList = [];\n    if (searchKey.length > 0) {\n      filtererdColumnReorderList = existingList.filter((item) => {\n        return item.toLowerCase().includes(searchKey);\n      });\n    } else {\n      filtererdColumnReorderList = this.props.columns.map((item) => item.name);\n    }\n    this.setState({\n      columnSelectList: filtererdColumnReorderList,\n    });\n  };\n\n  createColumnsArrayFromProps = (colsList) => {\n    return colsList.map((item) => {\n      return {\n        id: item,\n        text: (\n          <div className=\"column__reorder\" key={item}>\n            <div className=\"\">\n              <FontAwesomeIcon icon={faAlignJustify}></FontAwesomeIcon>\n            </div>\n            <div className=\"column__reorder__name\">{item}</div>\n            <div className=\"column__wrap\">\n              <div className=\"column__checkbox\">\n                <input\n                  type=\"checkbox\"\n                  id={\"checkBoxToPinLeft_\" + item}\n                  checked={this.state.leftPinnedColumList.includes(item)}\n                  disabled={\n                    this.state.maxLeftPinnedColumn -\n                      this.state.leftPinnedColumList.length <=\n                    0\n                      ? this.state.leftPinnedColumList.includes(item)\n                        ? false\n                        : true\n                      : false\n                  }\n                  onChange={() => this.reArrangeLeftPinnedColumn(item)}\n                ></input>\n              </div>\n              <div className=\"column__txt\">Pin Left</div>\n            </div>\n          </div>\n        ),\n      };\n    });\n  };\n\n  /**\n   * Method to handle the position of columns Names when left pinned in coloumn selector view.\n   * @param {String} columHeaderName\n   */\n  reArrangeLeftPinnedColumn = (columHeaderName) => {\n    var existingLeftPinnedList = this.state.leftPinnedColumList;\n    var existingColumnReorderEntityList = this.state.columnReorderEntityList;\n    if (!existingLeftPinnedList.includes(columHeaderName)) {\n      existingLeftPinnedList.unshift(columHeaderName);\n    } else {\n      existingLeftPinnedList = existingLeftPinnedList.filter(\n        (item) => item !== columHeaderName\n      );\n    }\n    this.setState({\n      leftPinnedColumList: existingLeftPinnedList,\n    });\n\n    existingLeftPinnedList.map((item) => {\n      existingColumnReorderEntityList = existingColumnReorderEntityList.filter(\n        (subItem) => subItem !== item\n      );\n      existingColumnReorderEntityList.unshift(item);\n    });\n    this.setState({\n      columnReorderEntityList: existingColumnReorderEntityList,\n    });\n  };\n\n  handleReorderList = (reordered) => {\n    this.props.handleheaderNameList(reordered);\n  };\n\n  render() {\n    return (\n      <div className=\"columns--grid\" ref={this.setWrapperRef}>\n        <div className=\"column__grid\">\n          <div className=\"column__chooser\">\n            <div className=\"column__header\">\n              <div className=\"\">\n                <strong>Column Chooser</strong>\n              </div>\n            </div>\n            <div className=\"column__body\">\n              <div>\n                <input\n                  type=\"text\"\n                  placeholder=\"Search column\"\n                  className=\"custom__ctrl\"\n                  onChange={this.filterColumnReorderList}\n                ></input>\n              </div>\n              <div className=\"column__wrap column__headertxt\">\n                <div className=\"column__checkbox\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"selectallcolumncheckbox\"\n                    onChange={() => this.selectAllToColumnReOrderList()}\n                    checked={\n                      this.state.columnReorderEntityList.length ===\n                      this.props.columns.length\n                    }\n                  />\n                </div>\n                <div className=\"column__txt\">Select all</div>\n              </div>\n              {this.state.columnSelectList.map((item) => {\n                return (\n                  <div className=\"column__wrap\" key={item}>\n                    <div className=\"column__checkbox\">\n                      <input\n                        type=\"checkbox\"\n                        id={\"checkboxtoselectreorder_\" + item}\n                        checked={this.state.columnReorderEntityList.includes(\n                          item\n                        )}\n                        onChange={() => this.addToColumnReorderEntityList(item)}\n                      ></input>\n                    </div>\n                    <div className=\"column__txt\">{item}</div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n          <div className=\"column__settings\">\n            <div className=\"column__header\">\n              <div className=\"column__headerTxt\">\n                <strong>Column Setting</strong>\n              </div>\n              <div className=\"column__close\">\n                <FontAwesomeIcon\n                  className=\"icon-close\"\n                  icon={faTimes}\n                  onClick={() => this.props.closeColumnReOrdering()}\n                ></FontAwesomeIcon>\n              </div>\n            </div>\n            <div className=\"column__header\">\n              <div className=\"column__headerTxt\">\n                <strong>\n                  &nbsp; &nbsp; Selected Column Count :{\" \"}\n                  {this.state.columnReorderEntityList.length}\n                </strong>\n              </div>\n              <div className=\"column__headerTxt\">\n                {this.state.maxLeftPinnedColumn -\n                  this.state.leftPinnedColumList.length >\n                0 ? (\n                  <strong>\n                    &nbsp; &nbsp; Left Pinned Column Count Remaining :{\" \"}\n                    {this.state.maxLeftPinnedColumn -\n                      this.state.leftPinnedColumList.length}\n                  </strong>\n                ) : (\n                  <strong style={{ color: \"red\" }}>\n                    &nbsp; &nbsp; Maximum Count Of Left Pin Columns REACHED\n                  </strong>\n                )}\n              </div>\n            </div>\n            <div className=\"column__body\">\n              <DndProvider\n                backend={TouchBackend}\n                options={{ enableMouseEvents: true }}\n              >\n                <ColumnsList\n                  columnsArray={this.createColumnsArrayFromProps(\n                    this.state.columnReorderEntityList\n                  )}\n                  handleReorderList={this.handleReorderList}\n                />\n              </DndProvider>\n            </div>\n            <div className=\"column__footer\">\n              <div className=\"column__btns\">\n                <button\n                  className=\"btns\"\n                  onClick={() => this.resetColumnReorderList()}\n                >\n                  Reset\n                </button>\n                <button\n                  className=\"btns\"\n                  onClick={() => this.props.closeColumnReOrdering()}\n                >\n                  Cancel\n                </button>\n                <button\n                  className=\"btns btns__save\"\n                  onClick={() =>\n                    this.props.updateTableAsPerRowChooser(\n                      this.state.columnReorderEntityList,\n                      this.state.leftPinnedColumList\n                    )\n                  }\n                >\n                  Save\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nColumnReordering.propTypes = {\n  headerKeys: PropTypes.any,\n  columns: PropTypes.any,\n  existingPinnedHeadersList: PropTypes.any,\n  maxLeftPinnedColumn: PropTypes.any,\n  closeColumnReOrdering: PropTypes.any,\n  handleheaderNameList: PropTypes.any,\n  updateTableAsPerRowChooser: PropTypes.any,\n};\n\nexport default ColumnReordering;\n","export const ItemTypes = {\n  CARD: \"sort\",\n};\n","import React from \"react\";\nimport { useDrag, useDrop } from \"react-dnd\";\nimport { ItemTypes } from \"./ItemTypes\";\nimport PropTypes from \"prop-types\";\n\nconst style = {\n  cursor: \"move\",\n};\n\nconst Card = ({ id, text, moveCard, findCard }) => {\n  const originalIndex = findCard(id).index;\n\n  const [{ isDragging }, drag] = useDrag({\n    item: { type: ItemTypes.CARD, id, originalIndex },\n    collect: (monitor) => ({\n      isDragging: monitor.isDragging(),\n    }),\n    end: (dropResult, monitor) => {\n      const { id: droppedId, originalIndex } = monitor.getItem();\n      const didDrop = monitor.didDrop();\n      if (!didDrop) {\n        moveCard(droppedId, originalIndex);\n      }\n    },\n  });\n\n  const [, drop] = useDrop({\n    accept: ItemTypes.CARD,\n    canDrop: () => false,\n    hover({ id: draggedId }) {\n      if (draggedId !== id) {\n        const { index: overIndex } = findCard(id);\n        moveCard(draggedId, overIndex);\n      }\n    },\n  });\n\n  const opacity = isDragging ? 0.5 : 1;\n\n  return (\n    <div ref={(node) => drag(drop(node))} style={{ ...style, opacity }}>\n      {text}\n    </div>\n  );\n};\n\nCard.propTypes = {\n  id: PropTypes.any,\n  text: PropTypes.any,\n  moveCard: PropTypes.any,\n  findCard: PropTypes.any,\n};\n\nexport default Card;\n","import React, { useState } from \"react\";\nimport { useDrop } from \"react-dnd\";\nimport Card from \"./SortItem\";\nimport update from \"immutability-helper\";\nimport { ItemTypes } from \"./ItemTypes\";\nimport PropTypes from \"prop-types\";\n\nconst SortingList = (props) => {\n  const [cards, setCards] = useState([...props.sortsArray]);\n\n  const moveCard = (id, atIndex) => {\n    const { card, index } = findCard(id);\n    setCards(\n      update(cards, {\n        $splice: [\n          [index, 1],\n          [atIndex, 0, card],\n        ],\n      })\n    );\n\n    let values = [];\n    let temp = [];\n    temp = update(cards, {\n      $splice: [\n        [index, 1],\n        [atIndex, 0, card],\n      ],\n    });\n    temp.forEach((item) => {\n      values.push(item.id);\n    });\n    props.handleReorderListOfSort(values);\n  };\n\n  const findCard = (id) => {\n    const card = cards.filter((c) => `${c.id}` === id)[0];\n    return {\n      card,\n      index: cards.indexOf(card),\n    };\n  };\n\n  const [, drop] = useDrop({ accept: ItemTypes.CARD });\n\n  React.useEffect(() => {\n    setCards(props.sortsArray);\n  }, [props.sortsArray]);\n\n  return (\n    <React.Fragment>\n      <div ref={drop} style={{ display: \"flex\", flexWrap: \"wrap\" }}>\n        {cards.map((card) => (\n          <Card\n            key={card.id}\n            id={`${card.id}`}\n            text={card.text}\n            moveCard={moveCard}\n            findCard={findCard}\n          />\n        ))}\n      </div>\n    </React.Fragment>\n  );\n};\n\nSortingList.propTypes = {\n  sortsArray: PropTypes.any,\n  handleReorderListOfSort: PropTypes.any,\n};\n\nexport default SortingList;\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faTimes,\n  faAlignJustify,\n  faTrash,\n  faPlus,\n  faCopy,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { DndProvider } from \"react-dnd\";\nimport { TouchBackend } from \"react-dnd-touch-backend\";\nimport SortingList from \"./SortingList\";\nimport PropTypes from \"prop-types\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rowList: [true],\n      rows: [],\n      sortingOrderList:\n        this.props.sortingParamsObjectList === undefined\n          ? []\n          : this.props.sortingParamsObjectList,\n      errorMessage: false,\n    };\n    this.setWrapperRef = this.setWrapperRef.bind(this);\n    this.handleClickOutside = this.handleClickOutside.bind(this);\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"mousedown\", this.handleClickOutside);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"mousedown\", this.handleClickOutside);\n  }\n\n  setWrapperRef(node) {\n    this.wrapperRef = node;\n  }\n\n  handleClickOutside(event) {\n    if (this.wrapperRef && !this.wrapperRef.contains(event.target)) {\n      this.props.closeSorting();\n    }\n  }\n\n  add = () => {\n    let rowList = [...this.state.rowList];\n    rowList.push(true);\n    var existingSortingOrderList = this.state.sortingOrderList;\n    existingSortingOrderList.push({\n      sortBy: this.props.columnFieldValue[0],\n      order: \"Ascending\",\n      sortOn: \"Value\",\n    });\n    this.setState({\n      rowList,\n      sortingOrderList: existingSortingOrderList,\n    });\n  };\n\n  copy = (i) => {\n    let rowList = [...this.state.sortingOrderList];\n    rowList.push(JSON.parse(JSON.stringify(rowList[i])));\n    this.setState({ sortingOrderList: rowList });\n  };\n\n  clearAll = () => {\n    this.setState({ sortingOrderList: [], errorMessage: false });\n    this.props.clearAllSortingParams();\n  };\n\n  remove = (i) => {\n    let sortingOrderList = [...this.state.sortingOrderList];\n    sortingOrderList.splice(i, 1);\n    this.setState({ sortingOrderList });\n    if (sortingOrderList.length <= 1) {\n      this.setState({ errorMessage: false });\n    }\n  };\n\n  createColumnsArrayFromProps = (rowsValue) => {\n    return rowsValue.map((row, index) => {\n      return {\n        id: index,\n        text: (\n          <div className=\"sort__bodyContent\" key={index}>\n            <div className=\"sort__reorder\">\n              <div className=\"\">\n                <div>&nbsp;</div>\n              </div>\n\n              <div className=\"sort__icon\">\n                <FontAwesomeIcon icon={faAlignJustify}></FontAwesomeIcon>\n              </div>\n            </div>\n\n            <div className=\"sort__reorder\">\n              <div className=\"\">\n                <div>Sort by</div>\n              </div>\n\n              <div className=\"sort__file\">\n                <select\n                  className=\"custom__ctrl\"\n                  name={\"sortBy\"}\n                  onChange={(e) =>\n                    this.captureSortingFeildValues(e, index, \"sortBy\")\n                  }\n                  value={row.sortBy}\n                >\n                  {this.props.columnFieldValue.map((item, index) => (\n                    <option key={index}>{item}</option>\n                  ))}\n                </select>\n              </div>\n            </div>\n\n            <div className=\"sort__reorder\">\n              <div className=\"\">\n                <div>Sort on</div>\n              </div>\n\n              <div className=\"sort__file\">\n                <select\n                  className=\"custom__ctrl\"\n                  name={\"sortOn\"}\n                  onChange={(e) =>\n                    this.captureSortingFeildValues(e, index, \"sortOn\")\n                  }\n                  value={row.sortOn}\n                >\n                  <option>Value</option>\n                </select>\n              </div>\n            </div>\n\n            <div className=\"sort__reorder\">\n              <div className=\"\">\n                <div>Order</div>\n              </div>\n\n              <div className=\"sort__file\">\n                <select\n                  className=\"custom__ctrl\"\n                  name={\"order\"}\n                  onChange={(e) =>\n                    this.captureSortingFeildValues(e, index, \"order\")\n                  }\n                  value={row.order}\n                >\n                  <option>Ascending</option>\n                  <option>Descending</option>\n                </select>\n              </div>\n            </div>\n\n            <div className=\"sort__reorder\">\n              <div className=\"\">\n                <div>&nbsp;</div>\n              </div>\n\n              <div className=\"sort__icon\">\n                <FontAwesomeIcon\n                  icon={faCopy}\n                  title=\"Copy\"\n                  onClick={() => this.copy(index)}\n                ></FontAwesomeIcon>\n              </div>\n            </div>\n\n            <div className=\"sort__reorder\">\n              <div className=\"\">\n                <div>&nbsp;</div>\n              </div>\n\n              <div className=\"sort__icon\">\n                <FontAwesomeIcon\n                  icon={faTrash}\n                  title=\"Delete\"\n                  onClick={() => this.remove(index)}\n                ></FontAwesomeIcon>\n              </div>\n            </div>\n          </div>\n        ),\n      };\n    });\n  };\n\n  captureSortingFeildValues = (event, index, sortingKey) => {\n    var existingSortingOrderList = this.state.sortingOrderList;\n\n    if (sortingKey === \"sortBy\") {\n      existingSortingOrderList[index][\"sortBy\"] = event.target.value;\n    }\n    if (sortingKey === \"order\") {\n      existingSortingOrderList[index][\"order\"] = event.target.value;\n    }\n    if (\n      existingSortingOrderList[index][\"sortOn\"] === \"\" ||\n      existingSortingOrderList[index][\"sortOn\"] === undefined\n    ) {\n      existingSortingOrderList[index][\"sortOn\"] = \"Value\";\n    }\n    this.setState({\n      sortingOrderList: existingSortingOrderList,\n    });\n  };\n\n  updateTableAsPerSortCondition = () => {\n    const unique = new Set();\n    const showError = this.state.sortingOrderList.some(\n      (element) => unique.size === unique.add(element.sortBy).size\n    );\n    showError\n      ? this.setState({\n          errorMessage: true,\n        })\n      : this.setState({\n          errorMessage: false,\n        });\n    !showError\n      ? this.props.setTableAsPerSortingParams(this.state.sortingOrderList)\n      : \"\";\n  };\n\n  /**\n   *\n   * @param {*} reOrderedSortingList\n   */\n  handleReorderListOfSort = (reOrderedIndexList) => {\n    this.props.handleTableSortSwap(reOrderedIndexList);\n  };\n\n  render() {\n    return (\n      <div className=\"sorts--grid\" ref={this.setWrapperRef}>\n        <div className=\"sort__grid\">\n          <div className=\"sort__settings\">\n            <div className=\"sort__header\">\n              <div className=\"sort__headerTxt\">\n                <strong>Sort </strong>\n              </div>\n\n              <div className=\"sort__close\">\n                <FontAwesomeIcon\n                  className=\"icon-close\"\n                  icon={faTimes}\n                  onClick={(e) => this.props.closeSorting()}\n                ></FontAwesomeIcon>\n              </div>\n            </div>\n\n            <div className=\"sort__body\">\n              <DndProvider\n                backend={TouchBackend}\n                options={{ enableMouseEvents: true }}\n              >\n                <SortingList\n                  handleReorderListOfSort={this.handleReorderListOfSort}\n                  sortsArray={this.createColumnsArrayFromProps(\n                    this.state.sortingOrderList\n                  )}\n                />\n              </DndProvider>\n              <div className=\"sort-warning\">\n                {this.state.errorMessage ? (\n                  <span className=\"alert alert-danger\">\n                    Sort by opted are same, Please choose different one.\n                  </span>\n                ) : (\n                  \"\"\n                )}\n              </div>\n            </div>\n            <div className=\"sort__new\">\n              <div className=\"sort__section\">\n                <FontAwesomeIcon\n                  icon={faPlus}\n                  className=\"sort__icon\"\n                ></FontAwesomeIcon>\n\n                <div className=\"sort__txt\" onClick={() => this.add()}>\n                  New Sort\n                </div>\n              </div>\n            </div>\n            <div className=\"sort__footer\">\n              <div className=\"sort__btns\">\n                <button className=\"btns\" onClick={this.clearAll}>\n                  Clear All\n                </button>\n\n                <button\n                  className=\"btns btns__save\"\n                  onClick={() => this.updateTableAsPerSortCondition()}\n                >\n                  Ok\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nApp.propTypes = {\n  sortingParamsObjectList: PropTypes.any,\n  closeSorting: PropTypes.any,\n  columnFieldValue: PropTypes.any,\n  clearAllSortingParams: PropTypes.any,\n  sortingObj: PropTypes.any,\n  setTableAsPerSortingParams: PropTypes.any,\n  handleTableSortSwap: PropTypes.any,\n  rowList: PropTypes.any,\n};\n\nexport default App;\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faTimes,\n  faFilePdf,\n  faFileExcel,\n  faFileCsv,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport jsPDF from \"jspdf\";\nimport \"jspdf-autotable\";\nimport * as FileSaver from \"file-saver\";\nimport * as XLSX from \"xlsx\";\nimport PropTypes from \"prop-types\";\n\nlet downLaodFileType = [];\nclass ExportData extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columnValueList: this.props.columnsList,\n      columnEntityList: this.props.columnsList,\n      isAllSelected: true,\n      downLaodFileType: [],\n      filteredRow: [],\n      warning: \"\",\n      clickTag: \"none\",\n    };\n    this.setWrapperRef = this.setWrapperRef.bind(this);\n    this.handleClickOutside = this.handleClickOutside.bind(this);\n    this.selectDownLoadType = this.selectDownLoadType.bind(this);\n    this.exportValidation = this.exportValidation.bind(this);\n  }\n  componentDidMount() {\n    document.addEventListener(\"mousedown\", this.handleClickOutside);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"mousedown\", this.handleClickOutside);\n  }\n\n  setWrapperRef(node) {\n    this.wrapperRef = node;\n  }\n\n  handleClickOutside(event) {\n    if (this.wrapperRef && !this.wrapperRef.contains(event.target)) {\n      this.props.closeExport();\n    }\n  }\n\n  resetColumnExportList = () => {\n    this.setState({\n      columnEntityList: [],\n      isAllSelected: false,\n    });\n  };\n\n  selectAllToColumnList = () => {\n    this.resetColumnExportList();\n    this.setState({\n      columnEntityList: !this.state.isAllSelected ? this.props.columnsList : [],\n      isAllSelected: !this.state.isAllSelected,\n    });\n  };\n\n  addToColumnEntityList = (typeToBeAdded) => {\n    var existingColumnEntityList = this.state.columnEntityList;\n    if (!existingColumnEntityList.includes(typeToBeAdded)) {\n      existingColumnEntityList.push(typeToBeAdded);\n    } else {\n      existingColumnEntityList = existingColumnEntityList.filter((item) => {\n        return item !== typeToBeAdded;\n      });\n    }\n    this.setState({\n      columnEntityList: existingColumnEntityList,\n      isAllSelected: false,\n    });\n  };\n\n  selectDownLoadType = (event) => {\n    if (\n      event.target.checked &&\n      !this.state.downLaodFileType.includes(event.target.value)\n    ) {\n      downLaodFileType.push(event.target.value);\n      this.setState({ downLaodFileType });\n    } else {\n      downLaodFileType.map(function (value, index) {\n        if (value === event.target.value) {\n          downLaodFileType = downLaodFileType.splice(index, value);\n        }\n      });\n      this.setState({ downLaodFileType });\n    }\n  };\n\n  exportRowData = () => {\n    const columnVlaueList = this.state.columnEntityList;\n    if (columnVlaueList.length > 0 && this.state.downLaodFileType.length > 0) {\n      this.props.rows.forEach((row) => {\n        const keys = Object.getOwnPropertyNames(row);\n        var filteredColumnVal = {};\n        keys.forEach(function (key) {\n          columnVlaueList.forEach((columnName) => {\n            if (columnName.key === key) filteredColumnVal[key] = row[key];\n          });\n        });\n        this.state.filteredRow.push(filteredColumnVal);\n      });\n\n      this.state.downLaodFileType.map((item) => {\n        if (item === \"pdf\") this.downloadPDF();\n        else if (item === \"excel\") this.downloadXLSFile();\n        else this.downloadCSVFile();\n      });\n    }\n  };\n\n  downloadPDF = () => {\n    const unit = \"pt\";\n    const size = \"A4\"; // Use A1, A2, A3 or A4\n    const orientation = \"landscape\"; // portrait or landscape\n\n    const marginLeft = 300;\n    const doc = new jsPDF(orientation, unit, size);\n\n    doc.setFontSize(15);\n\n    const title = \"iCargo Report\";\n    const headers = [\n      this.state.columnEntityList.map((column) => {\n        return column.name;\n      }),\n    ];\n    var dataValues = [];\n    this.props.rows.forEach((row) => {\n      const keys = Object.keys(row);\n      var filteredColumnVal = [];\n      this.state.columnEntityList.forEach((columnName) => {\n        keys.forEach((key) => {\n          if (columnName.key === key) filteredColumnVal.push(row[key]);\n        });\n      });\n      dataValues.push(filteredColumnVal);\n    });\n\n    let content = {\n      startY: 50,\n      head: headers,\n      body: dataValues,\n    };\n\n    doc.text(title, marginLeft, 40);\n    doc.autoTable(content);\n    doc.save(\"report.pdf\");\n  };\n\n  downloadCSVFile = () => {\n    const fileType =\n      \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\n    const fileExtension = \".csv\";\n    const fileName = \"CSVDownload\";\n    const ws = XLSX.utils.json_to_sheet(this.state.filteredRow);\n    const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\n    const excelBuffer = XLSX.write(wb, { bookType: \"csv\", type: \"array\" });\n    const data = new Blob([excelBuffer], { type: fileType });\n    FileSaver.saveAs(data, fileName + fileExtension);\n  };\n\n  downloadXLSFile = () => {\n    const fileType =\n      \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\n    const fileExtension = \".xlsx\";\n    const fileName = \"XLSXDownload\";\n    const ws = XLSX.utils.json_to_sheet(this.state.filteredRow);\n    const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\n    const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\n    const data = new Blob([excelBuffer], { type: fileType });\n    FileSaver.saveAs(data, fileName + fileExtension);\n  };\n\n  columnSearchLogic = (e) => {\n    const searchKey = String(e.target.value).toLowerCase();\n    let filteredRows = this.props.columnsList.filter((item) => {\n      return item.name.toLowerCase().includes(searchKey);\n    });\n    if (!filteredRows.length) {\n      this.setState({ columnValueList: this.props.columnsList });\n    } else {\n      this.setState({ columnValueList: filteredRows });\n    }\n  };\n\n  exportValidation = () => {\n    let columnLength = this.state.columnEntityList.length;\n    let fileLength = this.state.downLaodFileType.length;\n    if (columnLength > 0 && fileLength > 0) {\n      this.exportRowData();\n      this.setState({ clickTag: \"none\" });\n    } else if (columnLength === 0) {\n      this.setState({ warning: \"Column\" });\n      this.setState({ clickTag: \"\" });\n    } else if (fileLength === 0) {\n      this.setState({ warning: \"File Type\" });\n      this.setState({ clickTag: \"\" });\n    }\n    if (columnLength === 0 && fileLength === 0) {\n      this.setState({ warning: \"File Type & Column\" });\n      this.setState({ clickTag: \"\" });\n    }\n  };\n  render() {\n    return (\n      <div className=\"exports--grid\" ref={this.setWrapperRef}>\n        <div className=\"export__grid\">\n          <div className=\"export__chooser\">\n            <div className=\"export__header\">\n              <div className=\"\">\n                <strong>Export Data</strong>\n              </div>\n            </div>\n            <div className=\"export__body\">\n              <div>\n                <input\n                  type=\"text\"\n                  placeholder=\"Search export\"\n                  className=\"custom__ctrl\"\n                  onChange={this.columnSearchLogic}\n                ></input>\n              </div>\n              <div className=\"export__wrap export__headertxt\">\n                <div className=\"export__checkbox\">\n                  <input\n                    className=\"selectColumn\"\n                    type=\"checkbox\"\n                    onChange={() => this.selectAllToColumnList()}\n                    checked={this.state.isAllSelected}\n                  />\n                </div>\n                <div className=\"export__txt\">Select All</div>\n              </div>\n              {this.state.columnValueList &&\n              this.state.columnValueList.length > 0\n                ? this.state.columnValueList.map((column) => {\n                    return (\n                      <div className=\"export__wrap\" key={column.key}>\n                        <div className=\"export__checkbox\">\n                          <input\n                            type=\"checkbox\"\n                            checked={this.state.columnEntityList.includes(\n                              column\n                            )}\n                            onChange={() => this.addToColumnEntityList(column)}\n                          ></input>\n                        </div>\n                        <div className=\"export__txt\">{column.name}</div>\n                      </div>\n                    );\n                  })\n                : \"\"}\n            </div>\n          </div>\n          <div className=\"export__settings\">\n            <div className=\"export__header\">\n              <div className=\"export__headerTxt\"></div>\n              <div className=\"export__close\">\n                <FontAwesomeIcon\n                  icon={faTimes}\n                  className=\"icon-close\"\n                  onClick={this.props.closeExport}\n                ></FontAwesomeIcon>\n              </div>\n            </div>\n            <div className=\"export__as\">Export as</div>\n            <div className=\"export__body\">\n              <div className=\"export__reorder\">\n                <div className=\"\">\n                  <input\n                    type=\"checkbox\"\n                    name=\"pdf\"\n                    value=\"pdf\"\n                    onChange={this.selectDownLoadType}\n                  ></input>\n                </div>\n                <div className=\"export__file\">\n                  <FontAwesomeIcon\n                    icon={faFilePdf}\n                    className=\"temp\"\n                  ></FontAwesomeIcon>\n                </div>\n              </div>\n              <div className=\"export__reorder\">\n                <div className=\"\">\n                  <input\n                    type=\"checkbox\"\n                    name=\"excel\"\n                    value=\"excel\"\n                    onChange={this.selectDownLoadType}\n                  ></input>\n                </div>\n                <div className=\"export__file\">\n                  <FontAwesomeIcon\n                    icon={faFileExcel}\n                    className=\"temp\"\n                  ></FontAwesomeIcon>\n                </div>\n              </div>\n              <div className=\"export__reorder\">\n                <div className=\"\">\n                  <input\n                    type=\"checkbox\"\n                    name=\"csv\"\n                    value=\"csv\"\n                    onChange={this.selectDownLoadType}\n                  ></input>\n                </div>\n                <div className=\"export__file\">\n                  <FontAwesomeIcon\n                    icon={faFileCsv}\n                    className=\"temp\"\n                  ></FontAwesomeIcon>\n                </div>\n              </div>\n              <div className=\"exportWarning\">\n                <span\n                  style={{ display: this.state.clickTag }}\n                  className=\"alert alert-danger\"\n                >\n                  You have not selected <strong>{this.state.warning}</strong>\n                </span>\n              </div>\n            </div>\n            <div className=\"export__footer\">\n              <div className=\"export__btns\">\n                <button\n                  className=\"btns\"\n                  onClick={() => this.props.closeExport()}\n                >\n                  Cancel\n                </button>\n                <button\n                  className=\"btns btns__save\"\n                  onClick={() => {\n                    this.exportValidation();\n                  }}\n                >\n                  Export\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nExportData.propTypes = {\n  columnsList: PropTypes.any,\n  closeExport: PropTypes.any,\n  rows: PropTypes.any,\n};\n\nexport default ExportData;\n","import React, { Component } from \"react\";\n\nimport ExtDataGrid from \"./common/extDataGrid\";\nimport { Toolbar, Data, Filters, Editors } from \"react-data-grid-addons\";\nimport { range } from \"lodash\";\nimport { applyFormula } from \"./utilities/utils\";\nimport { FormControl } from \"react-bootstrap\";\nimport DatePicker from \"./functions/DatePicker.js\";\n//import {onRowsSelected} from \"../components/functions/OnRowsSelected.js\"\nimport {\n  faSortAmountDown,\n  faColumns,\n  faShareAlt,\n  faSortDown,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport ErrorMessage from \"./common/ErrorMessage\";\nimport ColumnReordering from \"./overlays/column_chooser/Chooser\";\nimport Sorting from \"./overlays/sorting/Sorting\";\nimport ExportData from \"./overlays/export_data/ExportData\";\nimport PropTypes from \"prop-types\";\n\nconst { DropDownEditor } = Editors;\n\nconst defaultParsePaste = (str) =>\n  str.split(/\\r\\n|\\n|\\r/).map((row) => row.split(\"\\t\"));\nconst selectors = Data.Selectors;\nlet swapList = [];\nlet swapSortList = [];\nconst { AutoCompleteFilter, NumericFilter } = Filters;\n\nclass Spreadsheet extends Component {\n  constructor(props) {\n    super(props);\n    const airportCodes = [];\n    this.props.airportCodes.forEach((item) => {\n      airportCodes.push({ id: item, value: item });\n    });\n    this.state = {\n      warningStatus: \"\",\n      height: 680,\n      displayNoRows: \"none\",\n      searchIconDisplay: \"\",\n      searchValue: \"\",\n      filter: {},\n      rows: JSON.parse(JSON.stringify(this.props.rows)),\n      selectedIndexes: [],\n      junk: {},\n      topLeft: {},\n      columnReorderingComponent: null,\n      exportComponent: null,\n      filteringRows: this.props.rows,\n      tempRows: this.props.rows,\n      sortingPanelComponent: null,\n      count: this.props.rows.length,\n      sortingOrderSwapList: [],\n      sortingParamsObjectList: [],\n      pinnedReorder: false,\n      columns: this.props.columns.map((item) => {\n        if (item.editor === \"DatePicker\") {\n          item.editor = DatePicker;\n        } else if (item.editor === \"DropDown\") {\n          item.editor = <DropDownEditor options={airportCodes} />;\n        } else if (item.editor === \"Text\") {\n          item.editor = \"text\";\n        } else {\n          item.editor = null;\n        }\n        if (item.filterType === \"numeric\") {\n          item.filterRenderer = NumericFilter;\n        } else {\n          item.filterRenderer = AutoCompleteFilter;\n        }\n        return item;\n      }),\n    };\n    // document.addEventListener(\"copy\", this.handleCopy);\n    // document.addEventListener(\"paste\", this.handlePaste);\n    this.handleSearchValue = this.handleSearchValue.bind(this);\n    this.clearSearchValue = this.clearSearchValue.bind(this);\n    this.handleFilterChange = this.handleFilterChange.bind(this);\n\n    this.formulaAppliedCols = this.props.columns.filter((item) => {\n      return item.formulaApplicable;\n    });\n  }\n  componentDidUpdate() {\n    //Fix for column re-order and pin left issue (functionality was working only after doing a window re-size)\n    const resizeEvent = document.createEvent(\"HTMLEvents\");\n    resizeEvent.initEvent(\"resize\", true, false);\n    window.dispatchEvent(resizeEvent);\n  }\n  // updateRows = (startIdx, newRows) => {\n  //   this.setState((state) => {\n  //     const rows = state.rows.slice();\n  //     for (let i = 0; i < newRows.length; i++) {\n  //       if (startIdx + i < rows.length) {\n  //         rows[startIdx + i] = {\n  //           ...rows[startIdx + i],\n  //           ...newRows[i],\n  //         };\n  //       }\n  //     }\n  //     return {\n  //       rows,\n  //     };\n  //   });\n  // };\n\n  // rowGetter = (i) => {\n\t// console.log(i)\n  //   const { rows } = this.state;\n  //   return rows[i];\n  // };\n\n  // handleCopy = (e) => {\n  //   e.preventDefault();\n  //   const { topLeft, botRight } = this.state;\n  //   const text = range(topLeft.rowIdx, botRight.rowIdx + 1)\n  //     .map((rowIdx) =>\n  //       this.state.columns\n  //         .slice(topLeft.colIdx - 1, botRight.colIdx)\n  //         .map((col) => this.rowGetter(rowIdx)[col.key])\n  //         .join(\"\\t\")\n  //     )\n  //     .join(\"\\n\");\n  //   e.clipboardData.setData(\"text/plain\", text);\n  // };\n\n  // handlePaste = (e) => {\n  //   e.preventDefault();\n  //   const { topLeft } = this.state;\n  //   const newRows = [];\n  //   const pasteData = defaultParsePaste(e.clipboardData.getData(\"text/plain\"));\n  //   pasteData.forEach((row) => {\n  //     const rowData = {};\n  //     // Merge the values from pasting and the keys from the columns\n  //     this.state.columns\n  //       .slice(topLeft.colIdx - 1, topLeft.colIdx - 1 + row.length)\n  //       .forEach((col, j) => {\n  //         rowData[col.key] = row[j];\n  //       });\n  //     newRows.push(rowData);\n  //   });\n  //   this.updateRows(topLeft.rowIdx, newRows);\n  // };\n\n  // setSelection = (args) => {\n  //   this.setState({\n  //     topLeft: {\n  //       rowIdx: args.topLeft.rowIdx,\n  //       colIdx: args.topLeft.idx,\n  //     },\n  //     botRight: {\n  //       rowIdx: args.bottomRight.rowIdx,\n  //       colIdx: args.bottomRight.idx,\n  //     },\n  //   });\n  // };\n\n  handleWarningStatus = () => {\n    this.setState({ warningStatus: \"invalid\" });\n  };\n\n  closeWarningStatus = () => {\n    this.setState({ warningStatus: \"\" });\n  };\n\n  UNSAFE_componentWillReceiveProps(props) {\n    this.setState({\n      rows: props.rows,\n    });\n    this.setState({\n      status: props.status,\n    });\n    this.setState({\n      textValue: props.textValue,\n    });\n    this.setState({ count: props.count });\n    this.setState({ warningStatus: props.status });\n  }\n\n  /**\n   * Method To update the cell/cells with the edited values\n   * @param {*} fromRow is the row from which this edit is performed\n   * @param {*} toRow is the row upto which this edit is performed\n   * @param {*} updated is the value of change\n   * @param {*} action is type of edit action performed\n   */\n  onGridRowsUpdated = ({ fromRow, toRow, updated, action }) => {\n    let columnName = \"\";\n    const filter = this.formulaAppliedCols.filter((item) => {\n      if (updated[item.key] !== null && updated[item.key] !== undefined) {\n        columnName = item.key;\n        return true;\n      } else return false;\n    });\n\n    if (filter.length > 0) {\n      updated = applyFormula(updated, columnName);\n    }\n\n    if (action !== \"COPY_PASTE\") {\n      this.setState((state) => {\n        const rows = state.rows.slice();\n        for (let i = fromRow; i <= toRow; i++) {\n          rows[i] = {\n            ...rows[i],\n            ...updated,\n          };\n        }\n\n        return {\n          rows,\n        };\n      });\n      this.setState((state) => {\n        const filteringRows = state.filteringRows.slice();\n        for (let i = fromRow; i <= toRow; i++) {\n          filteringRows[i] = {\n            ...filteringRows[i],\n            ...updated,\n          };\n        }\n\n        return {\n          filteringRows,\n        };\n      });\n      this.setState((state) => {\n        const tempRows = state.tempRows.slice();\n        for (let i = fromRow; i <= toRow; i++) {\n          tempRows[i] = {\n            ...tempRows[i],\n            ...updated,\n          };\n        }\n\n        return {\n          tempRows,\n        };\n      });\n    }\n    if (this.props.updateCellData) {\n      this.props.updateCellData(\n        this.state.tempRows[fromRow],\n        this.state.tempRows[toRow],\n        updated,\n        action\n      );\n    }\n  };\n  /**\n   * Method To bulk/individual select of rows\n   * @param {*} rows is the selected row\n   */\n  onRowsSelected = (rows) => {\n    this.setState({\n      selectedIndexes: this.state.selectedIndexes.concat(\n        rows.map((r) => r.rowIdx)\n      ),\n    });\n    if (this.props.selectBulkData) {\n      this.props.selectBulkData(rows);\n    }\n  };\n  /**\n   * Method To bulk/individual deselect of rows\n   * @param {*} rows is the deselected row\n   */\n  onRowsDeselected = (rows) => {\n    let rowIndexes = rows.map((r) => r.rowIdx);\n    this.setState({\n      selectedIndexes: this.state.selectedIndexes.filter(\n        (i) => rowIndexes.indexOf(i) === -1\n      ),\n    });\n  };\n\n  /**\n   * Method To filter the multiple columns\n   * @param {*} value is the  incoming filtering event\n   */\n  handleFilterChange = (value) => {\n    let junk = this.state.junk;\n    if (!(value.filterTerm == null) && !(value.filterTerm.length <= 0)) {\n      junk[value.column.key] = value;\n    } else {\n      delete junk[value.column.key];\n    }\n    this.setState({ junk });\n    const data = this.getrows(this.state.filteringRows, this.state.junk);\n    this.setState({\n      rows: data,\n      tempRows: data,\n      count: data.length,\n    });\n    if (data.length === 0) {\n      this.handleWarningStatus();\n    } else {\n      this.closeWarningStatus();\n    }\n  };\n  getrows = (rows, filters) => {\n    if (Object.keys(filters).length <= 0) {\n      filters = {};\n    }\n    selectors.getRows({ rows: [], filters: {} });\n    return selectors.getRows({ rows: rows, filters: filters });\n  };\n\n  /**\n   * Method To render the filter values for filtering rows\n   * @param {*} rows is the row data to be considered for filtering\n   * @param {*} columnId is the specific columnId for which the row datas are being considered\n   */\n  getValidFilterValues(rows, columnId) {\n    this.setState({ selectedIndexes: [] });\n    return rows\n      .map((r) => r[columnId])\n      .filter((item, i, a) => {\n        return i === a.indexOf(item);\n      });\n  }\n  /**\n   * Method To sort the rows for a particular column\n   * @param {*} data is the row datas to be considered for sorting\n   * @param {*} sortColumn is the specific column for which the row sort is being triggered\n   * @param {*} sortDirection is the type of sort\n   */\n  sortRows = (data, sortColumn, sortDirection) => {\n    this.setState({ selectedIndexes: [] });\n    const comparer = (a, b) => {\n      if (sortDirection === \"ASC\") {\n        return a[sortColumn] > b[sortColumn] ? 1 : -1;\n      } else if (sortDirection === \"DESC\") {\n        return a[sortColumn] < b[sortColumn] ? 1 : -1;\n      }\n    };\n    this.setState({\n      rows: [...data].sort(comparer),\n      selectedIndexes: [],\n    });\n    return sortDirection === \"NONE\" ? data : this.state.rows;\n  };\n  /**\n   * Method To swap the columns\n   * @param {*} source is source column\n   * @param {*} target is the target column\n   */\n  // onHeaderDrop = (source, target) => {\n  //   const stateCopy = Object.assign({}, this.state);\n  //   const columnSourceIndex = this.state.columns.findIndex(\n  //     (i) => i.key === source\n  //   );\n  //   const columnTargetIndex = this.state.columns.findIndex(\n  //     (i) => i.key === target\n  //   );\n\n  //   stateCopy.columns.splice(\n  //     columnTargetIndex,\n  //     0,\n  //     stateCopy.columns.splice(columnSourceIndex, 1)[0]\n  //   );\n\n  //   const emptyColumns = Object.assign({}, this.state, {\n  //     columns: [],\n  //   });\n  //   this.setState(emptyColumns);\n\n  //   const reorderedColumns = Object.assign({}, this.state, {\n  //     columns: stateCopy.columns,\n  //   });\n  //   this.setState(reorderedColumns);\n  // };\n  /**\n   * Method To dynamically swap the column from column chooser\n   * @param {*} reordered is the swapped array of columns\n   */\n  handleheaderNameList = (reordered) => {\n    swapList = reordered;\n  };\n\n  handleTableSortSwap = (reorderedSwap) => {\n    swapSortList = reorderedSwap;\n  };\n\n  updateTableAsPerRowChooser = (\n    inComingColumnsHeaderList,\n    pinnedColumnsList\n  ) => {\n    // let pinnedReorder = false;\n    let existingColumnsHeaderList = this.props.columns;\n    existingColumnsHeaderList = existingColumnsHeaderList.filter((item) => {\n      return inComingColumnsHeaderList.includes(item.name);\n    });\n    let rePositionedArray = existingColumnsHeaderList;\n    let singleHeaderOneList;\n    if (pinnedColumnsList.length > 0) {\n      pinnedColumnsList\n        .slice(0)\n        .reverse()\n        .map((item, index) => {\n          singleHeaderOneList = existingColumnsHeaderList.filter(\n            (subItem) => item === subItem.name\n          );\n          rePositionedArray = this.array_move(\n            existingColumnsHeaderList,\n            existingColumnsHeaderList.indexOf(singleHeaderOneList[0]),\n            index\n          );\n        });\n    }\n    if (swapList.length > 0) {\n      swapList.slice(0).map((item, index) => {\n        singleHeaderOneList = existingColumnsHeaderList.filter((subItem) => {\n          return item === subItem.name;\n        });\n        rePositionedArray = this.array_move(\n          existingColumnsHeaderList,\n          existingColumnsHeaderList.indexOf(singleHeaderOneList[0]),\n          index\n        );\n      });\n    }\n\n    existingColumnsHeaderList = rePositionedArray;\n    /**\n       making all the frozen attribute as false for all the columns and then \n       setting items of pinnedColumnsList as frozen = true\n       */\n    existingColumnsHeaderList.map((headerItem, index) => {\n      if (headerItem.frozen !== undefined && headerItem.frozen === true) {\n        existingColumnsHeaderList[index][\"frozen\"] = false;\n      }\n      if (pinnedColumnsList.includes(headerItem.name)) {\n        existingColumnsHeaderList[index][\"frozen\"] = true;\n      }\n    });\n\n    const toTop = (key, value) => (a, b) =>\n      (b[key] === value) - (a[key] === value);\n    existingColumnsHeaderList.sort(toTop(\"frozen\", true));\n\n    this.setState({\n      columns: existingColumnsHeaderList,\n    });\n\n    let tempList = [];\n    existingColumnsHeaderList.forEach((item) => {\n      tempList.push(item.name);\n    });\n\n    if (swapList.length > 0) {\n      for (let i = 0; i < tempList.length; i++) {\n        if (tempList[i] === swapList[i]) this.setState({ pinnedReorder: true });\n      }\n    }\n    this.closeColumnReOrdering();\n    swapList = [];\n    this.setState({ pinnedReorder: false });\n  };\n\n  /**\n   * Method To re-position a particular object in an Array from old_index to new_index\n   * @param {*} arr inComing array\n   * @param {*} old_index initial index\n   * @param {*} new_index final index\n   */\n  array_move = (arr, old_index, new_index) => {\n    if (new_index >= arr.length) {\n      var k = new_index - arr.length + 1;\n      while (k--) {\n        arr.push(undefined);\n      }\n    }\n    arr.splice(new_index, 0, arr.splice(old_index, 1)[0]);\n    return arr;\n  };\n\n  /**\n   * Method to render the column Selector Pannel\n   */\n  columnReorderingPannel = () => {\n    this.setState({ selectedIndexes: [] });\n    var headerNameList = [];\n    var existingPinnedHeadersList = [];\n    this.state.columns\n      .filter((item) => item.frozen !== undefined && item.frozen === true)\n      .map((item) => existingPinnedHeadersList.push(item.name));\n    this.state.columns.map((item) => headerNameList.push(item.name));\n    this.setState({\n      columnReorderingComponent: (\n        <ColumnReordering\n          maxLeftPinnedColumn={this.props.maxLeftPinnedColumn}\n          updateTableAsPerRowChooser={this.updateTableAsPerRowChooser}\n          headerKeys={headerNameList}\n          closeColumnReOrdering={this.closeColumnReOrdering}\n          existingPinnedHeadersList={existingPinnedHeadersList}\n          handleheaderNameList={this.handleheaderNameList}\n          {...this.props}\n        />\n      ),\n    });\n  };\n\n  /**\n   * Method to stop the render the column Selector Pannel\n   */\n  closeColumnReOrdering = () => {\n    this.setState({\n      columnReorderingComponent: null,\n    });\n  };\n  handleSearchValue = (value) => {\n    this.setState({ searchValue: value });\n  };\n  clearSearchValue = () => {\n    this.setState({ searchValue: \"\" });\n    this.setState({ filteringRows: this.state.filteringRows });\n  };\n\n  sortingPanel = () => {\n    this.setState({ selectedIndexes: [] });\n    let columnField = [];\n    this.state.columns.map((item) => columnField.push(item.name));\n    this.setState({\n      sortingPanelComponent: (\n        <Sorting\n          setTableAsPerSortingParams={(args) =>\n            this.setTableAsPerSortingParams(args)\n          }\n          sortingParamsObjectList={this.state.sortingParamsObjectList}\n          handleTableSortSwap={this.handleTableSortSwap}\n          clearAllSortingParams={this.clearAllSortingParams}\n          columnFieldValue={columnField}\n          closeSorting={this.closeSorting}\n        />\n      ),\n    });\n  };\n\n  closeSorting = () => {\n    this.setState({\n      sortingPanelComponent: null,\n      sortingOrderSwapList: [],\n    });\n    swapSortList = [];\n  };\n\n  clearAllSortingParams = () => {\n    this.setState({\n    rows: JSON.parse(JSON.stringify(this.props.rows))\n    });\n  };\n\n  //Export Data Logic\n  exportColumnData = () => {\n    this.setState({ selectedIndexes: [] });\n    this.setState({\n      exportComponent: (\n        <ExportData\n          rows={this.state.rows}\n          columnsList={this.state.columns}\n          closeExport={this.closeExport}\n        />\n      ),\n    });\n  };\n\n  closeExport = () => {\n    this.setState({\n      exportComponent: null,\n    });\n  };\n  // handleColumnResize = (idx, width) => {\n  //   let columnArray = [...this.state.columns];\n  //   columnArray.forEach((item) => {\n  //     if (item.name === this.state.columns[idx - 1].name) {\n  //       item.width = width;\n  //     }\n  //   });\n  //   this.setState({ columns: columnArray });\n  // };\n  setTableAsPerSortingParams = (tableSortList) => {\n    var existingRows = this.state.rows;\n    var sortingOrderNameList = [];\n    tableSortList.map((item) => {\n      var nameOfItem = \"\";\n      Object.keys(this.state.rows[0]).map((rowItem) => {\n        if (\n          rowItem.toLowerCase() === this.toCamelCase(item.sortBy).toLowerCase()\n        ) {\n          nameOfItem = rowItem;\n        }\n      });\n      var typeOfItem = this.state.rows[0][item.sortBy === nameOfItem];\n      if (typeof typeOfItem === \"number\") {\n        sortingOrderNameList.push({\n          name: nameOfItem,\n          primer: parseInt,\n          reverse: item.order === \"Ascending\" ? false : true,\n        });\n      } else {\n        sortingOrderNameList.push({\n          name: nameOfItem,\n          reverse: item.order === \"Ascending\" ? false : true,\n        });\n      }\n    });\n\n    if (swapSortList.length > 0) {\n      var existingSortingOrderSwapList = this.state.sortingOrderSwapList;\n      swapSortList.map((item, index) => {\n        var stringOfItemIndex = item + \"\" + index;\n        if (\n          item !== index &&\n          !existingSortingOrderSwapList.includes(\n            stringOfItemIndex.split(\"\").reverse().join(\"\")\n          )\n        ) {\n          existingSortingOrderSwapList.push(stringOfItemIndex);\n          sortingOrderNameList = this.array_move(\n            sortingOrderNameList,\n            item,\n            index\n          );\n          tableSortList = this.array_move(tableSortList, item, index);\n        }\n        this.setState({\n          sortingOrderSwapList: existingSortingOrderSwapList,\n        });\n      });\n    }\n\n    existingRows.sort(sort_by(...sortingOrderNameList));\n    this.setState({\n      rows: existingRows,\n      sortingParamsObjectList: tableSortList,\n    });\n\n    this.closeSorting();\n  };\n\n  toCamelCase = (str) => {\n    return str\n      .replace(/\\s(.)/g, function ($1) {\n        return $1.toUpperCase();\n      })\n      .replace(/\\s/g, \"\")\n      .replace(/^(.)/, function ($1) {\n        return $1.toLowerCase();\n      });\n  };\n\n  render() {\n    return (\n      <div>\n        <div className=\"parentDiv\">\n          <div className=\"totalCount\">\n            Showing <strong> {this.state.count} </strong> records\n          </div>\n          <div className=\"globalSearch\">\n            <i className=\"fa fa-search\"></i>\n            <FormControl\n              className=\"globalSeachInput\"\n              type=\"text\"\n              placeholder=\"Search\"\n              onChange={(e) => {\n                this.handleSearchValue(e.target.value);\n                this.props.globalSearchLogic(e, this.state.tempRows);\n              }}\n              value={this.state.searchValue}\n            />\n          </div>\n          <div className=\"filterIcons\" onClick={this.sortingPanel}>\n            <FontAwesomeIcon title=\"Group Sort\" icon={faSortAmountDown} />\n            <FontAwesomeIcon icon={faSortDown} className=\"filterArrow\" />\n          </div>\n          {this.state.sortingPanelComponent}\n          <div className=\"filterIcons\" onClick={this.columnReorderingPannel}>\n            <FontAwesomeIcon title=\"Column Chooser\" icon={faColumns} />\n            <FontAwesomeIcon icon={faSortDown} className=\"filterArrow\" />\n          </div>\n          {this.state.columnReorderingComponent}\n          <div className=\"filterIcons\">\n            <FontAwesomeIcon\n              title=\"Export\"\n              icon={faShareAlt}\n              onClick={this.exportColumnData}\n            />\n          </div>\n          {this.state.exportComponent}\n        </div>\n        <ErrorMessage\n          className=\"errorDiv\"\n          status={this.state.warningStatus}\n          closeWarningStatus={() => {\n            this.props.closeWarningStatus();\n            this.closeWarningStatus();\n          }}\n          clearSearchValue={this.clearSearchValue}\n        />\n        <ExtDataGrid\n          toolbar={<Toolbar enableFilter={true} />}\n          getValidFilterValues={(columnKey) =>\n            this.getValidFilterValues(this.state.filteringRows, columnKey)\n          }\n          minHeight={this.state.height}\n          columns={this.state.columns}\n          rowGetter={(i) => this.state.rows[i]}\n          rowsCount={this.state.rows.length}\n          onGridRowsUpdated={this.onGridRowsUpdated}\n          enableCellSelect={true}\n          onClearFilters={() => {\n            this.setState({ junk: {} });\n          }}\n          onColumnResize={(idx, width) =>\n            console.log(`Column ${idx} has been resized to ${width}`)\n          }\n          onAddFilter={(filter) => this.handleFilterChange(filter)}\n          rowSelection={{\n            showCheckbox: true,\n            enableShiftSelect: true,\n            onRowsSelected: this.onRowsSelected,\n            onRowsDeselected: this.onRowsDeselected,\n            selectBy: {\n              indexes: this.state.selectedIndexes,\n            },\n          }}\n          onGridSort={(sortColumn, sortDirection) =>\n            this.sortRows(this.state.filteringRows, sortColumn, sortDirection)\n          }\n          // cellRangeSelection={{\n          //   onComplete: this.setSelection,\n          // }}\n        />\n      </div>\n    );\n  }\n}\n\n/**\n * Global Method To Sort The Grid.\n */\nvar sort_by;\n(function () {\n  // utility functions\n  var default_cmp = function (a, b) {\n      if (a == b) return 0;\n      return a < b ? -1 : 1;\n    },\n    getCmpFunc = function (primer, reverse) {\n      var cmp = default_cmp;\n      if (primer) {\n        cmp = function (a, b) {\n          return default_cmp(primer(a), primer(b));\n        };\n      }\n      if (reverse) {\n        return function (a, b) {\n          return -1 * cmp(a, b);\n        };\n      }\n      return cmp;\n    };\n\n  // actual implementation\n  sort_by = function () {\n    var fields = [],\n      n_fields = arguments.length,\n      field,\n      name,\n      cmp;\n\n    // preprocess sorting options\n    for (var i = 0; i < n_fields; i++) {\n      field = arguments[i];\n      if (typeof field === \"string\") {\n        name = field;\n        cmp = default_cmp;\n      } else {\n        name = field.name;\n        cmp = getCmpFunc(field.primer, field.reverse);\n      }\n      fields.push({\n        name: name,\n        cmp: cmp,\n      });\n    }\n\n    return function (A, B) {\n      var name, cmp, result;\n      for (var i = 0, l = n_fields; i < l; i++) {\n        result = 0;\n        field = fields[i];\n        name = field.name;\n        cmp = field.cmp;\n\n        result = cmp(A[name], B[name]);\n        if (result !== 0) break;\n      }\n      return result;\n    };\n  };\n})();\n\nSpreadsheet.propTypes = {\n  airportCodes: PropTypes.any,\n  rows: PropTypes.any,\n  columns: PropTypes.any,\n  status: PropTypes.any,\n  textValue: PropTypes.any,\n  count: PropTypes.any,\n  updateCellData: PropTypes.any,\n  selectBulkData: PropTypes.any,\n  pinnedReorder: PropTypes.any,\n  maxLeftPinnedColumn: PropTypes.any,\n  globalSearchLogic: PropTypes.any,\n  closeWarningStatus: PropTypes.any,\n};\n\nexport default Spreadsheet;\n","export const applyFormula = (obj, columnName) => {\n  let item = obj[columnName].toString();\n  if (item && item.charAt(0) === \"=\") {\n    var operation = item.split(\"(\");\n    var value = operation[1]\n      .substring(0, operation[1].length - 1)\n      .split(/[,:]/);\n    switch (operation[0]) {\n      case \"=SUM\":\n      case \"=ADD\":\n      case \"=sum\":\n      case \"=add\":\n        obj[columnName] = value.reduce(function (a, b) {\n          return Number(a) + Number(b);\n        });\n        break;\n      case \"=MUL\":\n      case \"=mul\":\n        obj[columnName] = value.reduce(function (a, b) {\n          return Number(a) * Number(b);\n        });\n        break;\n      case \"=SUB\":\n      case \"=sub\":\n      case \"=DIFF\":\n      case \"=diff\":\n        obj[columnName] = value.reduce(function (a, b) {\n          return Number(a) - Number(b);\n        });\n        break;\n      case \"=min\":\n      case \"=MIN\":\n        obj[columnName] = Math.min.apply(Math, value);\n        break;\n      case \"=max\":\n      case \"=MAX\":\n        obj[columnName] = Math.max.apply(Math, value);\n        break;\n      default:\n        console.log(\"No Calculation\");\n    }\n  }\n  return obj;\n};","import React, { useState, useEffect } from \"react\";\nimport Spreadsheet from \"spreadsheet\";\nimport CargoData from \"./data.json\";\n//import { fetchData } from \"./getData\";\n\nconst App = () => {\n  //Get spreadsheet height value, which is a required value\n  const gridHeight = \"90vh\";\n\n  let searchKey = \"\";\n  //Set state value for variable to hold grid data\n  const [data, setData] = useState();\n  //Set state value for variable to hold grid record status\n  const [status, setStatus] = useState(\"\");\n  const rows = CargoData;\n\n  const maxLeftPinnedColumn = 5;\n  //Configure columns and its related featues such as editor(Text/DropDown), FormulaApplicable(True/False)\n  //Editable, Draggable, sortable, resizable, filterable, default width\n  const columns = [\n    {\n      key: \"flightno\",\n      name: \"FlightNo\",\n      draggable: false,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\",\n    },\n    {\n      key: \"date\",\n      name: \"Date\",\n      draggable: false,\n      editor: \"DatePicker\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\",\n    },\n    {\n      key: \"segmentfrom\",\n      name: \"Segment From\",\n      draggable: false,\n      editor: \"DropDown\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\",\n    },\n    {\n      key: \"revenue\",\n      name: \"Revenue\",\n      draggable: false,\n      editor: \"Text\",\n      formulaApplicable: true,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\",\n    },\n    {\n      key: \"yeild\",\n      name: \"Yeild\",\n      draggable: false,\n      editor: \"Text\",\n      formulaApplicable: true,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\",\n    },\n    {\n      key: \"segmentto\",\n      name: \"Segment To\",\n      draggable: false,\n      editor: \"DropDown\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\",\n    },\n    {\n      key: \"flightModel\",\n      name: \"Flight Model\",\n      draggable: false,\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"numeric\",\n    },\n    {\n      key: \"bodyType\",\n      name: \"Body Type\",\n      draggable: false,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\",\n    },\n    {\n      key: \"type\",\n      name: \"Type\",\n      draggable: false,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\",\n    },\n    {\n      key: \"startTime\",\n      name: \"Start Time\",\n      draggable: false,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\",\n    },\n    {\n      key: \"endTime\",\n      name: \"End Time\",\n      draggable: false,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\",\n    },\n    {\n      key: \"status\",\n      name: \"Status\",\n      draggable: false,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\",\n    },\n    {\n      key: \"additionalStatus\",\n      name: \"Additional Status\",\n      draggable: false,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\",\n    },\n    {\n      key: \"timeStatus\",\n      name: \"Time Status\",\n      draggable: false,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\",\n    },\n    {\n      key: \"weightpercentage\",\n      name: \"Weight Percentage\",\n      draggable: false,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\",\n    },\n    {\n      key: \"weightvalue\",\n      name: \"Weight Value\",\n      draggable: false,\n      editor: \"Text\",\n      formulaApplicable: true,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\",\n    },\n    {\n      key: \"volumepercentage\",\n      name: \"Volume Percentage\",\n      draggable: false,\n      editor: \"Text\",\n      formulaApplicable: true,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\",\n    },\n    {\n      key: \"volumevalue\",\n      name: \"Volume Value\",\n      draggable: false,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\",\n    },\n    {\n      key: \"uldposition1\",\n      name: \"uldposition1\",\n      draggable: false,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\",\n    },\n    {\n      key: \"uldvalue1\",\n      name: \"uldvalue1\",\n      draggable: false,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\",\n    },\n    {\n      key: \"uldposition2\",\n      name: \"uldposition2\",\n      draggable: false,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\",\n    },\n    {\n      key: \"uldvalue2\",\n      name: \"uldvalue2\",\n      draggable: false,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\",\n    },\n    {\n      key: \"uldposition3\",\n      name: \"uldposition3\",\n      draggable: false,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\",\n    },\n    {\n      key: \"uldvalue3\",\n      name: \"uldvalue3\",\n      draggable: false,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\",\n    },\n    {\n      key: \"uldposition4\",\n      name: \"uldposition4\",\n      draggable: false,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\",\n    },\n    {\n      key: \"uldvalue4\",\n      name: \"uldvalue4\",\n      draggable: false,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\",\n    },\n\n    {\n      key: \"sr\",\n      name: \"SR\",\n      draggable: false,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\",\n    },\n    {\n      key: \"queuedBookingSR\",\n      name: \"Queued Booking SR\",\n      draggable: false,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\",\n    },\n    {\n      key: \"queuedBookingvolume\",\n      name: \"Queued Booking Volume\",\n      draggable: false,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\",\n    },\n  ];\n\n  //Configure columns and its related functions\n  const airportCodeList = [\n    \"AAA\",\n    \"AAB\",\n    \"AAC\",\n    \"ABA\",\n    \"ABB\",\n    \"ABC\",\n    \"ACA\",\n    \"ACB\",\n    \"ACC\",\n    \"BAA\",\n    \"BAB\",\n    \"BAC\",\n    \"BBA\",\n    \"BBB\",\n    \"BBC\",\n    \"BCA\",\n    \"BCB\",\n    \"BCC\",\n    \"CAA\",\n    \"CAB\",\n    \"CAC\",\n    \"CBA\",\n    \"CBB\",\n    \"CBC\",\n    \"CCA\",\n    \"CCB\",\n    \"CCC\",\n    \"XXX\",\n    \"XXY\",\n    \"XXZ\",\n    \"XYX\",\n    \"XYY\",\n    \"XYZ\",\n    \"XZX\",\n    \"XZY\",\n    \"XZZ\",\n    \"YXX\",\n    \"YXY\",\n    \"YXZ\",\n    \"YYX\",\n    \"YYY\",\n    \"YYZ\",\n    \"YZX\",\n    \"YZY\",\n    \"YZZ\",\n    \"ZXX\",\n    \"ZXY\",\n    \"ZXZ\",\n    \"ZYX\",\n    \"ZYY\",\n    \"ZYZ\",\n    \"ZZX\",\n    \"ZZY\",\n    \"ZZZ\",\n  ];\n\n  //Add logic for doing global search in the spreadsheet\n  const globalSearchLogic = (e, updatedRows) => {\n    searchKey = String(e.target.value).toLowerCase();\n    let filteredRows = updatedRows.filter((item) => {\n      return (\n        (item.flightno && item.flightno.toLowerCase().includes(searchKey)) ||\n        (item.date && item.date.toLowerCase().includes(searchKey)) ||\n        (item.segmentfrom &&\n          item.segmentfrom.toLowerCase().includes(searchKey)) ||\n        (item.segmentto && item.segmentto.toLowerCase().includes(searchKey)) ||\n        String(item.flightModel).includes(searchKey) ||\n        (item.bodyType && item.bodyType.toLowerCase().includes(searchKey)) ||\n        (item.type && item.type.toLowerCase().includes(searchKey)) ||\n        (item.startTime && item.startTime.toLowerCase().includes(searchKey)) ||\n        (item.endTime && item.endTime.toLowerCase().includes(searchKey)) ||\n        (item.status && item.status.toLowerCase().includes(searchKey)) ||\n        (item.additionalStatus &&\n          item.additionalStatus.toLowerCase().includes(searchKey)) ||\n        (item.timeStatus &&\n          item.timeStatus.toLowerCase().includes(searchKey)) ||\n        (item.weightpercentage &&\n          item.weightpercentage.toLowerCase().includes(searchKey)) ||\n        (item.volumevalue &&\n          item.volumevalue.toLowerCase().includes(searchKey)) ||\n        (item.uldposition1 &&\n          item.uldposition1.toLowerCase().includes(searchKey)) ||\n        (item.uldvalue1 && item.uldvalue1.toLowerCase().includes(searchKey)) ||\n        (item.uldposition2 &&\n          item.uldposition2.toLowerCase().includes(searchKey)) ||\n        (item.uldvalue2 && item.uldvalue2.toLowerCase().includes(searchKey)) ||\n        (item.uldposition3 &&\n          item.uldposition3.toLowerCase().includes(searchKey)) ||\n        (item.weightvalue &&\n          item.weightvalue.toLowerCase().includes(searchKey)) ||\n        (item.uldvalue3 && item.uldvalue3.toLowerCase().includes(searchKey)) ||\n        (item.uldposition4 &&\n          item.uldposition4.toLowerCase().includes(searchKey)) ||\n        (item.revenue && item.revenue.toLowerCase().includes(searchKey)) ||\n        (item.yeild && item.yeild.toLowerCase().includes(searchKey)) ||\n        (item.sr && item.sr.toLowerCase().includes(searchKey)) ||\n        (item.queuedBookingSR &&\n          item.queuedBookingSR.toLowerCase().includes(searchKey)) ||\n        (item.queuedBookingvolume &&\n          item.queuedBookingvolume.toLowerCase().includes(searchKey))\n      );\n    });\n    if (!filteredRows.length) {\n      setStatus(\"invalid\");\n      setData([]);\n      // setRow(\"\");\n    } else {\n      setData(filteredRows);\n      setStatus(\"\");\n    }\n  };\n  const handleWarningStatus = () => {\n    setStatus(\"invalid\");\n  };\n  //Gets called when there is a cell edit\n  const updateCellData = (fromRow, toRow, value, updateType) => {\n    if (updateType === \"CELL_UPDATE\") {\n      console.log(\n        \"row:\",\n        fromRow,\n        \"updated-Value:\",\n        value,\n        \"Updation-Type:\",\n        updateType\n      );\n    }\n    if (updateType === \"CELL_DRAG\") {\n      console.log(\n        \"fromRow:\",\n        fromRow,\n        \"toRow:\",\n        toRow,\n        \"updated-Value:\",\n        value,\n        \"Updation-Type:\",\n        updateType\n      );\n    }\n  };\n\n  //Gets called when row bulk edit is done\n  const selectBulkData = (selectedRows) => {\n    console.log(\"selectedRows:\", selectedRows);\n  };\n  const closeWarningStatus = () => {\n    setStatus(\"\");\n    setData(rows);\n  };\n  useEffect(() => {\n    //Make API call to fetch initial set of data, uncomment below code to use API call\n    // fetchData(0).then((data) => {\n    //   setItems(data);\n    // });\n    setData(rows);\n  }, [rows]);\n\n  if (data) {\n    return (\n      <div>\n        <Spreadsheet\n          rows={data}\n          textValue={searchKey}\n          globalSearchLogic={globalSearchLogic}\n          status={status}\n          closeWarningStatus={closeWarningStatus}\n          handleWarningStatus={handleWarningStatus}\n          count={data.length}\n          columns={columns}\n          airportCodes={airportCodeList}\n          gridHeight={gridHeight}\n          updateCellData={updateCellData}\n          selectBulkData={selectBulkData}\n          maxLeftPinnedColumn={maxLeftPinnedColumn}\n        />\n      </div>\n    );\n  } else if (data === undefined) {\n    return <h2>Loading Data</h2>;\n  } else {\n    return null;\n  }\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}