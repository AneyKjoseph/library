{"version":3,"sources":["../../src/common/extDataGrid.js","../../src/functions/DatePicker.js","../../src/common/ErrorConstants.js","../../src/common/ErrorMessage.js","../../src/overlays/column_chooser/ItemTypes.js","../../src/overlays/column_chooser/columnItem.js","../../src/overlays/column_chooser/columnsList.js","../../src/overlays/column_chooser/Chooser.js","../../src/overlays/sorting/ItemTypes.js","../../src/overlays/sorting/SortItem.js","../../src/overlays/sorting/SortingList.js","../../src/overlays/sorting/Sorting.js","../../src/overlays/export_data/ExportData.js","../../src/index.js","../../src/utilities/utils.js","App.js","index.js"],"names":["componentDidMount","this","document","window","props","componentWillUnmount","React","constructor","super","value","Date","getInputNode","bind","getValue","onValueChanged","updated","date","state","Intl","year","month","day","dateTimeFormat","column","ev","render","type","ref","onChange","ErrorMessage","useState","useEffect","setStatus","status","id","className","role","icon","onClick","e","ItemTypes","style","cursor","ColumnItem","findColumn","originalIndex","useDrag","item","collect","monitor","isDragging","end","dropResult","moveColumn","droppedId","useDrop","accept","canDrop","hover","draggedId","overIndex","index","opacity","node","drag","drop","ColumnsList","atIndex","setColumns","update","columns","$splice","c","display","flexWrap","key","text","columnReorderEntityList","map","leftPinnedColumList","isAllSelected","existingColumnReorderEntityList","isExistingAllSelect","typeToBeAdded","existingLeftPinnedList","indexOfInsertion","columnSelectList","findIndex","searchKey","String","existingList","filtererdColumnReorderList","colsList","faAlignJustify","checked","includes","disabled","maxLeftPinnedColumn","reArrangeLeftPinnedColumn","columHeaderName","subItem","setWrapperRef","handleClickOutside","event","wrapperRef","contains","placeholder","filterColumnReorderList","length","addToColumnReorderEntityList","closeColumnReOrdering","color","backend","options","enableMouseEvents","columnsArray","createColumnsArrayFromProps","resetColumnReorderList","updateTableAsPerRowChooser","Card","findCard","moveCard","SortingList","setCards","cards","card","rowList","existingSortingOrderList","sortBy","order","sortOn","sortingOrderList","i","rows","console","name","captureSortingFeildValues","columnFieldValue","title","copy","remove","sortingKey","errorMessage","closeSorting","sortsArray","add","clickTag","clearAll","updateTableAsPerSortCondition","downLaodFileType","columnEntityList","existingColumnEntityList","columnVlaueList","row","keys","Object","filteredColumnVal","columnName","downloadCSVFile","doc","headers","dataValues","content","startY","head","body","wb","Sheets","data","XLSX","SheetNames","excelBuffer","bookType","Blob","FileSaver","fileName","filteredRows","columnsList","filter","columnValueList","columnLength","fileLength","warning","filteredRow","selectDownLoadType","exportValidation","columnSearchLogic","addToColumnEntityList","closeExport","DraggableContainer","require","DraggableHeader","DropDownEditor","selectors","Data","NumericFilter","startIdx","newRows","botRight","range","topLeft","rowIdx","col","rowGetter","str","pasteData","rowData","j","args","colIdx","idx","warningStatus","action","formulaAppliedCols","obj","operation","a","b","Number","Math","applyFormula","filteringRows","tempRows","selectedIndexes","concat","r","rowIndexes","junk","getrows","count","filters","sortColumn","sortDirection","source","target","stateCopy","columnSourceIndex","columnTargetIndex","emptyColumns","reorderedColumns","inComingColumnsHeaderList","pinnedColumnsList","existingColumnsHeaderList","rePositionedArray","singleHeaderOneList","array_move","headerItem","arr","old_index","new_index","k","headerNameList","existingPinnedHeadersList","columnReorderingComponent","searchValue","columnField","sortingPanelComponent","exportComponent","airportCodes","height","displayNoRows","searchIconDisplay","handleSearchValue","clearSearchValue","handleFilterChange","componentDidUpdate","prevProps","resizeEvent","componentWillReceiveProps","textValue","getValidFilterValues","columnId","sortingPanel","faSortAmountDown","columnReorderingPannel","faColumns","exportColumnData","closeWarningStatus","onHeaderDrop","toolbar","enableFilter","columnKey","minHeight","rowsCount","onGridRowsUpdated","enableCellSelect","onClearFilters","onColumnResize","width","onAddFilter","rowSelection","showCheckbox","enableShiftSelect","onRowsSelected","onRowsDeselected","selectBy","indexes","onGridSort","sortRows","cellRangeSelection","onComplete","setSelection","App","setData","CargoData","draggable","editor","formulaApplicable","sortable","resizable","filterable","filterType","airportCodeList","globalSearchLogic","updatedRows","toLowerCase","flightno","segmentfrom","segmentto","flightModel","bodyType","startTime","endTime","additionalStatus","timeStatus","weightpercentage","volumevalue","uldposition1","uldvalue1","uldposition2","uldvalue2","uldposition3","weightvalue","uldvalue3","uldposition4","revenue","yeild","sr","queuedBookingSR","queuedBookingvolume","handleWarningStatus","updateCellData","fromRow","toRow","updateType","log","selectBulkData","selectedRows","gridHeight","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.a78229f9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDataGrid from \"react-data-grid\";\nimport { Toolbar, Data, Filters } from \"react-data-grid-addons\";\n\nclass ExtDataGrid extends ReactDataGrid {\n  componentDidMount() {\n    this._mounted = true;\n    this.dataGridComponent = document.getElementsByClassName(\n      \"react-grid-Viewport\"\n    )[0]; //assumes only one react datagrid component exists\n    window.addEventListener(\"resize\", this.metricsUpdated);\n    if (this.props.cellRangeSelection) {\n      this.dataGridComponent.addEventListener(\"mouseup\", this.onWindowMouseUp);\n    }\n    this.metricsUpdated();\n  }\n\n  componentWillUnmount() {\n    this._mounted = false;\n    window.removeEventListener(\"resize\", this.metricsUpdated);\n    this.dataGridComponent.removeEventListener(\"mouseup\", this.onWindowMouseUp);\n  }\n}\n\nexport default ExtDataGrid;\n","import React from 'react';\n\nexport default class DatePicker extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        value: new Date(),\n      };\n      //the variable to store component reference\n      this.input = null;\n  \n      this.getInputNode = this.getInputNode.bind(this);\n      this.getValue = this.getValue.bind(this);\n      this.onValueChanged = this.onValueChanged.bind(this);\n    }\n  \n    //returning the component with the reference, input\n    getInputNode() {\n      return this.input;\n    }\n    //returning updated object with the date value in the required format\n    getValue() {\n      var updated = {};\n      let date;\n      date = new Date(this.state.value);\n      const dateTimeFormat = new Intl.DateTimeFormat(\"en-US\", { year: \"numeric\", month: \"short\", day: \"2-digit\" });\n      const [{ value: month }, , { value: day }, , { value: year }] = dateTimeFormat.formatToParts(date);\n      updated[this.props.column.key] = `${day}-${month}-${year}`;\n      return updated;\n  \n    }\n  \n    onValueChanged(ev) {\n      this.setState({ value: ev.target.value });\n    }\n  \n    render() {\n      return (\n        <div>\n          <input\n            type=\"date\"\n            ref={(ref) => {\n              this.input = ref;\n            }}\n            value={this.state.value}\n            onChange={this.onValueChanged}\n          />\n        </div>\n      );\n    }\n  }","export const SEARCH_NOT_FOUNT_ERROR = \"No Records found!\";\r\n","import React, { useState, useEffect } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport { SEARCH_NOT_FOUNT_ERROR } from \"./ErrorConstants\";\n\nconst ErrorMessage = (props) => {\n\n  const [status, setStatus] = useState(props.status);\n  useEffect(\n    () => {\n      setStatus(props.status)\n    }\n    , [props.status]);\n  if (status === \"invalid\") {\n    return (\n      <div id=\"errorMsg\">\n        <div className=\"alert alert-danger\" role=\"alert\">\n          {SEARCH_NOT_FOUNT_ERROR}\n        </div>\n        <div className=\"notification-close\" >\n          <FontAwesomeIcon icon={faTimes}\n            onClick={(e) => {\n              props.closeWarningStatus();\n              props.clearSearchValue();\n            }} />\n        </div>\n      </div>\n    );\n  } else return <div></div>;\n};\nexport default ErrorMessage;\n","export const ItemTypes = {\r\n    COLUMN: \"column\"\r\n};\r\n","import React from \"react\";\r\nimport { useDrag, useDrop } from \"react-dnd\";\r\nimport { ItemTypes } from \"./ItemTypes\";\r\n\r\nconst style = {\r\n\tcursor: \"move\",\r\n};\r\n\r\nconst ColumnItem = ({ id, text, moveColumn, findColumn }) => {\r\n\tconst originalIndex = findColumn(id).index;\r\n\r\n\tconst [{ isDragging }, drag] = useDrag({\r\n\t\titem: { type: ItemTypes.COLUMN, id, originalIndex },\r\n\t\tcollect: (monitor) => ({\r\n\t\t\tisDragging: monitor.isDragging(),\r\n\t\t}),\r\n\t\tend: (dropResult, monitor) => {\r\n\t\t\tconst { id: droppedId, originalIndex } = monitor.getItem();\r\n\t\t\tconst didDrop = monitor.didDrop();\r\n\t\t\tif (!didDrop) {\r\n\t\t\t\tmoveColumn(droppedId, originalIndex);\r\n\t\t\t}\r\n\t\t},\r\n\t});\r\n\r\n\tconst [, drop] = useDrop({\r\n\t\taccept: ItemTypes.COLUMN,\r\n\t\tcanDrop: () => false,\r\n\t\thover({ id: draggedId }) {\r\n\t\t\tif (draggedId !== id) {\r\n\t\t\t\tconst { index: overIndex } = findColumn(id);\r\n\t\t\t\tmoveColumn(draggedId, overIndex);\r\n\t\t\t}\r\n\t\t},\r\n\t});\r\n\r\n\tconst opacity = isDragging ? 0.1 : 1;\r\n\r\n\treturn (\r\n\t\t<div ref={(node) => drag(drop(node))} style={{ ...style, opacity }}>\r\n\t\t\t{text}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default ColumnItem;\r\n","import React, { useState } from \"react\";\r\nimport { useDrop } from \"react-dnd\";\r\nimport update from \"immutability-helper\";\r\nimport { ItemTypes } from \"./ItemTypes\";\r\nimport ColumnItem from \"./columnItem\";\r\n\r\nconst ColumnsList = (props) => {\r\n\tconst [columns, setColumns] = useState([...props.columnsArray]);\r\n\r\n\tconst moveColumn = (id, atIndex) => {\r\n\t\tconst { column, index } = findColumn(id);\r\n\t\tsetColumns(\r\n\t\t\tupdate(columns, {\r\n\t\t\t\t$splice: [\r\n\t\t\t\t\t[index, 1],\r\n\t\t\t\t\t[atIndex, 0, column],\r\n\t\t\t\t],\r\n\t\t\t})\r\n\t\t);\r\n\t};\r\n\r\n\tconst findColumn = (id) => {\r\n\t\tconst column = columns.filter((c) => `${c.id}` === id)[0];\r\n\t\treturn {\r\n\t\t\tcolumn,\r\n\t\t\tindex: columns.indexOf(column),\r\n\t\t};\r\n\t};\r\n\r\n\tconst [, drop] = useDrop({ accept: ItemTypes.COLUMN });\r\n\r\n\tReact.useEffect(() => {\r\n\t\tsetColumns(props.columnsArray);\r\n\t}, [props.columnsArray]);\r\n\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t<div ref={drop} style={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n\t\t\t\t{columns.map((column) => (\r\n\t\t\t\t\t<ColumnItem\r\n\t\t\t\t\t\tkey={column.id}\r\n\t\t\t\t\t\tid={`${column.id}`}\r\n\t\t\t\t\t\ttext={column.text}\r\n\t\t\t\t\t\tmoveColumn={moveColumn}\r\n\t\t\t\t\t\tfindColumn={findColumn}\r\n\t\t\t\t\t/>\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t</React.Fragment>\r\n\t);\r\n};\r\n\r\nexport default ColumnsList;\r\n","import React from \"react\";\nimport { DndProvider } from \"react-dnd\";\nimport { TouchBackend } from \"react-dnd-touch-backend\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTimes, faAlignJustify } from \"@fortawesome/free-solid-svg-icons\";\nimport ColumnsList from \"./columnsList\";\n\nclass ColumnReordering extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columnReorderEntityList: this.props.headerKeys,\n      columnSelectList: this.props.columns.map(item=> item.name),\n      leftPinnedColumList: this.props.existingPinnedHeadersList,\n      isAllSelected: true,\n      maxLeftPinnedColumn: this.props.maxLeftPinnedColumn,\n    };\n    this.setWrapperRef = this.setWrapperRef.bind(this);\n    this.handleClickOutside = this.handleClickOutside.bind(this);\n  }\n  componentDidMount() {\n    document.addEventListener('mousedown', this.handleClickOutside);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('mousedown', this.handleClickOutside);\n  }\n\n  setWrapperRef(node) {\n    this.wrapperRef = node;\n  }\n\n  handleClickOutside(event) {\n    if (this.wrapperRef && !this.wrapperRef.contains(event.target)) {\n      this.props.closeColumnReOrdering()\n    }\n  }\n\n\t/**\n\t * Method to reset the coloumn list onClick of Reset button\n\t */\n\tresetColumnReorderList = () => {\n\t\tthis.setState({\n\t\t\tcolumnReorderEntityList: this.props.columns.map(item=> item.name),\n\t\t\tleftPinnedColumList:[],\n\t\t\tisAllSelected: true,\n\t\t});\n\t};\n\n\t/**\n\t * Method to Select all options in the coloumn list onClick of Select All button\n\t */\n\tselectAllToColumnReOrderList = () => {\n\t\tthis.resetColumnReorderList();\n\t\tvar existingColumnReorderEntityList = this.state.columnReorderEntityList;\n\t\tvar isExistingAllSelect = this.state.isAllSelected;\n\t\tif(!isExistingAllSelect){\n\t\t\texistingColumnReorderEntityList = this.props.columns.map(item=> item.name)\n\t\t\tisExistingAllSelect=true;\n\t\t}\n\t\telse{\n\t\t\texistingColumnReorderEntityList=[];\n\t\t\tisExistingAllSelect = false\n\t\t}\n\t\tthis.setState({\n\t\t\tcolumnReorderEntityList: existingColumnReorderEntityList,\n\t\t\tisAllSelected: isExistingAllSelect,\n\t\t\tleftPinnedColumList:[]\n\t\t});\n\t};\n\n\t/**\n\t * Method To add a column to columnReorderEntityList when selected.\n\t * @param {String} typeToBeAdded \n\t */\n\taddToColumnReorderEntityList = (typeToBeAdded) => {\n\t\tvar existingColumnReorderEntityList = this.state.columnReorderEntityList;\n\t\tvar existingLeftPinnedList = this.state.leftPinnedColumList;\n\t\tif (!existingColumnReorderEntityList.includes(typeToBeAdded)) {\n\t\t\tvar indexOfInsertion=this.state.columnSelectList.findIndex(item=> item === typeToBeAdded);\n\t\t\twhile(indexOfInsertion>0){\n\t\t\t\tif(existingColumnReorderEntityList.includes(this.state.columnSelectList[indexOfInsertion-1])){\n\t\t\t\t\tif(!existingLeftPinnedList.includes(this.state.columnSelectList[indexOfInsertion-1])){\n\t\t\t\t\t\tindexOfInsertion = existingColumnReorderEntityList.findIndex(item => \n\t\t\t\t\t\t\titem === this.state.columnSelectList[indexOfInsertion-1])\n\t\t\t\t\t\t\tindexOfInsertion = indexOfInsertion + 1;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tindexOfInsertion = indexOfInsertion-1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tindexOfInsertion = indexOfInsertion-1;\n\t\t\t\t}\n\t\t\t}\n\t\t\texistingColumnReorderEntityList.splice(indexOfInsertion, \n\t\t\t\t0, typeToBeAdded);\n\t\t} else {\n\t\t\texistingColumnReorderEntityList = existingColumnReorderEntityList.filter((item) => {\n\t\t\t\tif (item !== typeToBeAdded) return item;\n\t\t\t});\n\t\t\tif (existingLeftPinnedList.includes(typeToBeAdded)) {\n\t\t\t\texistingLeftPinnedList = existingLeftPinnedList.filter((item) => item !== typeToBeAdded);\n\t\t\t}\n\t\t}\n\t\tthis.setState({\n\t\t\tcolumnReorderEntityList: existingColumnReorderEntityList,\n\t\t\tisAllSelected: false,\n\t\t\tleftPinnedColumList: existingLeftPinnedList,\n\t\t});\n\t};\n\n\t/**\n\t * Method to handle the like-search on key stroke.\n\t * @param {Event} e \n\t */\n\tfilterColumnReorderList = (e) => {\n\t\tvar searchKey = String(e.target.value).toLowerCase();\n\t\tvar existingList = this.props.columns.map(item=> item.name);\n\t\tlet filtererdColumnReorderList = [];\n\t\tif (searchKey.length > 0) {\n\t\t\tfiltererdColumnReorderList = existingList.filter((item) => {\n\t\t\t\treturn item.toLowerCase().includes(searchKey);\n\t\t\t});\n\t\t} else {\n\t\t\tfiltererdColumnReorderList = this.props.columns.map(item=> item.name);\n\t\t}\n\t\tthis.setState({\n\t\t\tcolumnSelectList: filtererdColumnReorderList,\n\t\t});\n\t};\n\n\tcreateColumnsArrayFromProps = (colsList) => {\n\t\treturn colsList.map((item) => {\n\t\t\treturn {\n\t\t\t\tid: item,\n\t\t\t\ttext: (\n\t\t\t\t\t<div className='column__reorder' key={item}>\n\t\t\t\t\t\t<div className=''>\n\t\t\t\t\t\t\t<FontAwesomeIcon icon={faAlignJustify}></FontAwesomeIcon>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='column__reorder__name'>{item}</div>\n\t\t\t\t\t\t<div className='column__wrap'>\n\t\t\t\t\t\t\t<div className='column__checkbox'>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\ttype='checkbox'\n\t\t\t\t\t\t\t\t\tchecked={this.state.leftPinnedColumList.includes(item)}\n\t\t\t\t\t\t\t\t\tdisabled={\n\t\t\t\t\t\t\t\t\t\tthis.state.maxLeftPinnedColumn - this.state.leftPinnedColumList.length <= 0\n\t\t\t\t\t\t\t\t\t\t\t? this.state.leftPinnedColumList.includes(item)\n\t\t\t\t\t\t\t\t\t\t\t\t? false\n\t\t\t\t\t\t\t\t\t\t\t\t: true\n\t\t\t\t\t\t\t\t\t\t\t: false\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tonChange={() => this.reArrangeLeftPinnedColumn(item)}\n\t\t\t\t\t\t\t\t></input>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className='column__txt'>Pin Left</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t),\n\t\t\t};\n\t\t});\n\t};\n\n\t/**\n\t * Method to handle the position of columns Names when left pinned in coloumn selector view.\n\t * @param {String} columHeaderName \n\t */\n\treArrangeLeftPinnedColumn = (columHeaderName) => {\n\t\tvar existingLeftPinnedList = this.state.leftPinnedColumList;\n\t\tvar existingColumnReorderEntityList = this.state.columnReorderEntityList;\n\t\tif (!existingLeftPinnedList.includes(columHeaderName)) {\n\t\t\texistingLeftPinnedList.unshift(columHeaderName);\n\t\t} else {\n\t\t\texistingLeftPinnedList = existingLeftPinnedList.filter((item) => item !== columHeaderName);\n\t\t}\n\t\tthis.setState({\n\t\t\tleftPinnedColumList: existingLeftPinnedList,\n\t\t});\n\n\t\texistingLeftPinnedList.map((item) => {\n\t\t\texistingColumnReorderEntityList = existingColumnReorderEntityList.filter((subItem) => subItem !== item);\n\t\t\texistingColumnReorderEntityList.unshift(item);\n\t\t});\n\n\t\tthis.setState({\n\t\t\tcolumnReorderEntityList: existingColumnReorderEntityList,\n\t\t});\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div className='columns--grid'ref={this.setWrapperRef}>\n\t\t\t\t<div className='column__grid'>\n\t\t\t\t\t<div className='column__chooser'>\n\t\t\t\t\t\t<div className='column__header'>\n\t\t\t\t\t\t\t<div className=''>\n\t\t\t\t\t\t\t\t<strong>Column Chooser</strong>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='column__body'>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\t\t\t\tplaceholder='Search column'\n\t\t\t\t\t\t\t\t\tclassName='custom__ctrl'\n\t\t\t\t\t\t\t\t\tonChange={this.filterColumnReorderList}\n\t\t\t\t\t\t\t\t></input>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className='column__selectTxt'>\n\t\t\t\t\t\t\t\t<input \n\t\t\t\t\t\t\t\t\tclassName='column__checkbox'\n\t\t\t\t\t\t\t\t\ttype='checkbox'\n\t\t\t\t\t\t\t\t\tonChange={() => this.selectAllToColumnReOrderList()}\n\t\t\t\t\t\t\t\t\tchecked={this.state.columnReorderEntityList.length === this.props.columns.length}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\tSelect All\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t{this.state.columnSelectList.map((item) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<div className='column__wrap' key={item}>\n\t\t\t\t\t\t\t\t\t\t<div className='column__checkbox'>\n\t\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\t\ttype='checkbox'\n\t\t\t\t\t\t\t\t\t\t\t\tchecked={this.state.columnReorderEntityList.includes(item)}\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={() => this.addToColumnReorderEntityList(item)}\n\t\t\t\t\t\t\t\t\t\t\t></input>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className='column__txt'>{item}</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='column__settings'>\n\t\t\t\t\t\t<div className='column__header'>\n\t\t\t\t\t\t\t<div className='column__headerTxt'>\n\t\t\t\t\t\t\t\t<strong>Column Setting</strong>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className='column__close'>\n\t\t\t\t\t\t\t\t<FontAwesomeIcon\n\t\t\t\t\t\t\t\t\tclassName=\"icon-close\" \n\t\t\t\t\t\t\t\t\ticon={faTimes}\n\t\t\t\t\t\t\t\t\tonClick={() => this.props.closeColumnReOrdering()}\n\t\t\t\t\t\t\t\t></FontAwesomeIcon>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='column__headerTxt'>\n\t\t\t\t\t\t\t<strong>&nbsp; &nbsp; Selected Column Count : {this.state.columnReorderEntityList.length}</strong>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='column__headerTxt'>\n\t\t\t\t\t\t\t{this.state.maxLeftPinnedColumn - this.state.leftPinnedColumList.length > 0 ? (\n\t\t\t\t\t\t\t\t<strong>\n\t\t\t\t\t\t\t\t\t&nbsp; &nbsp; Left Pinned Column Count Remaining :{\" \"}\n\t\t\t\t\t\t\t\t\t{this.state.maxLeftPinnedColumn - this.state.leftPinnedColumList.length}\n\t\t\t\t\t\t\t\t</strong>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<strong style={{ color: \"red\" }}>&nbsp; &nbsp; Maximum Count Of Left Pin Columns REACHED</strong>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='column__body'>\n\t\t\t\t\t\t\t<DndProvider backend={TouchBackend} options={{ enableMouseEvents: true }}>\n\t\t\t\t\t\t\t\t<ColumnsList\n\t\t\t\t\t\t\t\t\tcolumnsArray={this.createColumnsArrayFromProps(this.state.columnReorderEntityList)}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</DndProvider>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='column__footer'>\n\t\t\t\t\t\t\t<div className='column__btns'>\n\t\t\t\t\t\t\t\t<button className='btns' onClick={() => this.resetColumnReorderList()}>\n\t\t\t\t\t\t\t\t\tReset\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t<button className='btns' onClick={() => this.props.closeColumnReOrdering()}>\n\t\t\t\t\t\t\t\t\tCancel\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tclassName='btns btns__save'\n\t\t\t\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\t\t\t\tthis.props.updateTableAsPerRowChooser(\n\t\t\t\t\t\t\t\t\t\t\tthis.state.columnReorderEntityList,\n\t\t\t\t\t\t\t\t\t\t\tthis.state.leftPinnedColumList\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tSave\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default ColumnReordering;\n\n","export const ItemTypes = {\n  CARD: \"sort\",\n};\n","import React from \"react\";\nimport { useDrag, useDrop } from \"react-dnd\";\nimport { ItemTypes } from \"./ItemTypes\";\n\nconst style = {\n  cursor: \"move\",\n};\n\nconst Card = ({ id, text, moveCard, findCard }) => {\n  const originalIndex = findCard(id).index;\n\n  const [{ isDragging }, drag] = useDrag({\n    item: { type: ItemTypes.CARD, id, originalIndex },\n    collect: (monitor) => ({\n      isDragging: monitor.isDragging(),\n    }),\n    end: (dropResult, monitor) => {\n      const { id: droppedId, originalIndex } = monitor.getItem();\n      const didDrop = monitor.didDrop();\n      if (!didDrop) {\n        moveCard(droppedId, originalIndex);\n      }\n    },\n  });\n\n  const [, drop] = useDrop({\n    accept: ItemTypes.CARD,\n    canDrop: () => false,\n    hover({ id: draggedId }) {\n      if (draggedId !== id) {\n        const { index: overIndex } = findCard(id);\n        moveCard(draggedId, overIndex);\n      }\n    },\n  });\n\n  const opacity = isDragging ? 0.5 : 1;\n\n  return (\n    <div ref={(node) => drag(drop(node))} style={{ ...style, opacity }}>\n      {text}\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { useState } from \"react\";\nimport { useDrop } from \"react-dnd\";\nimport Card from \"./SortItem\";\nimport update from \"immutability-helper\";\nimport { ItemTypes } from \"./ItemTypes\";\n\nconst SortingList = (props) => {\n  const [cards, setCards] = useState([...props.sortsArray]);\n\n  const moveCard = (id, atIndex) => {\n    const { card, index } = findCard(id);\n    setCards(\n      update(cards, {\n        $splice: [\n          [index, 1],\n          [atIndex, 0, card],\n        ],\n      })\n    );\n  };\n\n  const findCard = (id) => {\n    const card = cards.filter((c) => `${c.id}` === id)[0];\n    return {\n      card,\n      index: cards.indexOf(card),\n    };\n  };\n\n  const [, drop] = useDrop({ accept: ItemTypes.CARD });\n\n  React.useEffect(() => {\n    setCards(props.sortsArray);\n  }, [props.sortsArray]);\n\n  return (\n    <React.Fragment>\n      <div ref={drop} style={{ display: \"flex\", flexWrap: \"wrap\" }}>\n        {cards.map((card) => (\n          <Card\n            key={card.id}\n            id={`${card.id}`}\n            text={card.text}\n            moveCard={moveCard}\n            findCard={findCard}\n          />\n        ))}\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default SortingList;\n","import React, { useState, useRef, useEffect } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faTimes,\n  faAlignJustify,\n  faTrash,\n  faPlus,\n  faCopy,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { DndProvider } from \"react-dnd\";\nimport { TouchBackend } from \"react-dnd-touch-backend\";\nimport SortingList from \"./SortingList\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      rowList: [true],\n      rows: [],\n      sortingOrderList: [\n        {\n          sortBy: \"\",\n          order: \"\",\n          sortOn: \"\",\n        },\n      ],\n      errorMessage: false,\n    };\n    this.setWrapperRef = this.setWrapperRef.bind(this);\n    this.handleClickOutside = this.handleClickOutside.bind(this);\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"mousedown\", this.handleClickOutside);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"mousedown\", this.handleClickOutside);\n  }\n\n  setWrapperRef(node) {\n    this.wrapperRef = node;\n  }\n\n  handleClickOutside(event) {\n    if (this.wrapperRef && !this.wrapperRef.contains(event.target)) {\n      this.props.closeSorting();\n    }\n  }\n\n  add = () => {\n    let rowList = [...this.state.rowList];\n    rowList.push(true);\n    var existingSortingOrderList = this.state.sortingOrderList;\n    existingSortingOrderList.push({\n      sortBy: \"\",\n      order: \"\",\n      sortOn: \"\",\n    });\n    this.setState({\n      rowList,\n      sortingOrderList: existingSortingOrderList,\n    });\n  };\n\n  copy = (i) => {\n    let rowList = [...this.state.rows];\n    rowList.push(rowList[i]);\n    this.setState({ rows: rowList });\n  };\n\n  clearAll = () => {\n    this.setState({ rowList: [] });\n  };\n\n  remove = (i) => {\n    let rowList = [...this.state.rowList];\n    console.log(i)\n    rowList.splice(i, 1);\n    console.log()\n    this.setState({ rowList });\n  };\n  createColumnsArrayFromProps = (rowList) => {\n    return rowList.map((i, index) => {\n      return {\n        id: index,\n        text: (\n          <div className=\"sort__bodyContent\" key={i}>\n            <div className=\"sort__reorder\">\n              <div className=\"\">\n                <div>&nbsp;</div>\n              </div>\n              <div className=\"sort__icon\">\n                <FontAwesomeIcon icon={faAlignJustify}></FontAwesomeIcon>\n              </div>\n            </div>\n            <div className=\"sort__reorder\">\n              <div className=\"\">\n                <div>Sort by</div>\n              </div>\n              <div className=\"sort__file\">\n                <select\n                  className=\"custom__ctrl\"\n                  name={\"sortBy\"}\n                  onChange={(e) =>\n                    this.captureSortingFeildValues(e, index, \"sortBy\")\n                  }\n                >\n                  {this.props.columnFieldValue.map((item, index) => (\n                    <option key={index}>{item}</option>\n                  ))}\n                </select>\n              </div>\n            </div>\n            <div className=\"sort__reorder\">\n              <div className=\"\">\n                <div>Sort on</div>\n              </div>\n              <div className=\"sort__file\">\n                <select\n                  className=\"custom__ctrl\"\n                  name={\"sortOn\"}\n                  onChange={(e) =>\n                    this.captureSortingFeildValues(e, index, \"sortOn\")\n                  }\n                >\n                  <option>Value</option>\n                </select>\n              </div>\n            </div>\n            <div className=\"sort__reorder\">\n              <div className=\"\">\n                <div>Order</div>\n              </div>\n              <div className=\"sort__file\">\n                <select\n                  className=\"custom__ctrl\"\n                  name={\"order\"}\n                  onChange={(e) =>\n                    this.captureSortingFeildValues(e, index, \"Order\")\n                  }\n                >\n                  <option>Ascending</option>\n\n                  <option>Descending</option>\n                </select>\n              </div>\n            </div>\n            <div className=\"sort__reorder\">\n              <div className=\"\">\n                <div>&nbsp;</div>\n              </div>\n              <div className=\"sort__icon\">\n                <FontAwesomeIcon\n                  icon={faCopy}\n                  title=\"Copy\"\n                  onClick={() => this.copy(index)}\n                ></FontAwesomeIcon>\n              </div>\n            </div>\n            <div className=\"sort__reorder\">\n              <div className=\"\">\n                <div>&nbsp;</div>\n              </div>\n              <div className=\"sort__icon\">\n                <FontAwesomeIcon\n                  icon={faTrash}\n                  title=\"Delete\"\n                  onClick={() => this.remove(index)}\n                ></FontAwesomeIcon>\n              </div>\n            </div>\n          </div>\n        ),\n      };\n    });\n  };\n\n  captureSortingFeildValues = (event, index, sortingKey) => {\n    var sortingObj = {\n      //``\n    };\n    var existingSortingOrderList = this.state.sortingOrderList;\n    if (sortingKey === \"sortBy\") {\n      const { name, value } = event.target;\n    const rows = [...this.state.sortingOrderList];\n    this.setState({\n      errorMessage: false,\n    });\n    rows.map((column) => {\n      console.log(column[name]);\n      if (column[name] === value) {\n        this.setState({\n          errorMessage: true,\n        });\n      }\n    });\n      existingSortingOrderList[index][\"sortBy\"] = event.target.value;\n    }\n    if (sortingKey === \"order\") {\n      existingSortingOrderList[index][\"order\"] = event.target.value;\n    }\n\n    if (\n      existingSortingOrderList[index][\"sortOn\"] === \"\" ||\n      existingSortingOrderList[index][\"sortOn\"] === undefined\n    ) {\n      existingSortingOrderList[index][\"sortOn\"] = \"Value\";\n    }\n\n    this.setState({\n      sortingOrderList: existingSortingOrderList,\n    });\n  };\n  updateTableAsPerSortCondition = () => {\n    console.log(\"FILTER SORT LIST OF OBJECTS \", this.state.sortingOrderList);\n  };\n\n  render() {\n    let { rowList } = this.state.rowList;\n    return (\n      <div className=\"sorts--grid\" ref={this.setWrapperRef}>\n        <div className=\"sort__grid\">\n          <div className=\"sort__settings\">\n            <div className=\"sort__header\">\n              <div className=\"sort__headerTxt\">\n                <strong>Sort </strong>\n              </div>\n              <div className=\"sort__close\">\n                <FontAwesomeIcon\n                  className=\"icon-close\"\n                  icon={faTimes}\n                  onClick={() => this.props.closeSorting()}\n                ></FontAwesomeIcon>\n              </div>\n            </div>\n            <div className=\"sort__body\">\n              <DndProvider\n                backend={TouchBackend}\n                options={{ enableMouseEvents: true }}\n              >\n                <SortingList\n                  sortsArray={this.createColumnsArrayFromProps(this.state.rowList)}\n                />\n              </DndProvider>\n              <div className=\"sort__new\">\n                <div className=\"sort__section\">\n                  <FontAwesomeIcon\n                    icon={faPlus}\n                    className=\"sort__icon\"\n                  ></FontAwesomeIcon>\n                  <div className=\"sort__txt\" onClick={() => this.add()}>\n                    New Sort\n                  </div>\n                </div>\n              </div>\n              <div>\n              {this.state.errorMessage ?\n                <span\n                  style={{ display: this.state.clickTag }}\n                  className=\"alert alert-danger\"\n                >\n                   Please Add New Sort\n                </span>\n                 : \"\"}\n              </div>\n            </div>\n            <div className=\"sort__footer\">\n              <div className=\"sort__btns\">\n                <button className=\"btns\" onClick={this.clearAll}>\n                  Clear All\n                </button>\n                <button\n                  className=\"btns btns__save\"\n                  onClick={() => this.updateTableAsPerSortCondition()}\n                >\n                  Ok\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faTimes,\n  faFilePdf,\n  faFileExcel,\n  faFileCsv,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport jsPDF from \"jspdf\";\nimport \"jspdf-autotable\";\nimport * as FileSaver from \"file-saver\";\nimport * as XLSX from \"xlsx\";\n\nlet downLaodFileType = [];\nclass ExportData extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columnValueList: this.props.columnsList,\n      columnEntityList: [],\n      isAllSelected: false,\n      downLaodFileType: [],\n      filteredRow: [],\n      warning: \"\",\n      clickTag: \"none\",\n    };\n    this.setWrapperRef = this.setWrapperRef.bind(this);\n    this.handleClickOutside = this.handleClickOutside.bind(this);\n    this.selectDownLoadType = this.selectDownLoadType.bind(this);\n    this.exportValidation = this.exportValidation.bind(this);\n  }\n  componentDidMount() {\n    document.addEventListener(\"mousedown\", this.handleClickOutside);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"mousedown\", this.handleClickOutside);\n  }\n\n  setWrapperRef(node) {\n    this.wrapperRef = node;\n  }\n\n  handleClickOutside(event) {\n    if (this.wrapperRef && !this.wrapperRef.contains(event.target)) {\n      this.props.closeExport();\n    }\n  }\n\n  resetColumnExportList = () => {\n    this.setState({\n      columnEntityList: [],\n      isAllSelected: false,\n    });\n  };\n\n  selectAllToColumnList = () => {\n    this.resetColumnExportList();\n    this.setState({\n      columnEntityList: !this.state.isAllSelected ? this.props.columnsList : [],\n      isAllSelected: !this.state.isAllSelected,\n    });\n  };\n\n  addToColumnEntityList = (typeToBeAdded) => {\n    var existingColumnEntityList = this.state.columnEntityList;\n    if (!existingColumnEntityList.includes(typeToBeAdded)) {\n      existingColumnEntityList.push(typeToBeAdded);\n    } else {\n      existingColumnEntityList = existingColumnEntityList.filter((item) => {\n        return item !== typeToBeAdded \n      });\n    }\n    this.setState({\n      columnEntityList: existingColumnEntityList,\n      isAllSelected: false,\n    });\n  };\n\n  selectDownLoadType = (event) => {\n    if (\n      event.target.checked &&\n      !this.state.downLaodFileType.includes(event.target.value)\n    ) {\n      downLaodFileType.push(event.target.value);\n      this.setState({ downLaodFileType });\n    } else {\n      downLaodFileType.map(function (value, index) {\n        if (value === event.target.value) {\n          downLaodFileType = downLaodFileType.splice(index, value);\n        }\n      });\n      this.setState({ downLaodFileType });\n    }\n  };\n\n  exportRowData = () => {\n    const columnVlaueList = this.state.columnEntityList;\n    if (columnVlaueList.length > 0 && this.state.downLaodFileType.length > 0) {\n      this.props.rows.forEach((row) => {\n        const keys = Object.getOwnPropertyNames(row);\n        var filteredColumnVal = {};\n        keys.forEach(function (key) {\n          columnVlaueList.forEach((columnName) => {\n            if (columnName.key === key) filteredColumnVal[key] = row[key];\n          });\n        });\n        this.state.filteredRow.push(filteredColumnVal);\n      });\n\n      this.state.downLaodFileType.map((item) => {\n        if (item === \"pdf\") this.downloadPDF();\n        else if (item === \"excel\") this.downloadXLSFile();\n        else this.downloadCSVFile();\n      });\n    }\n  };\n\n  downloadPDF = () => {\n    const unit = \"pt\";\n    const size = \"A4\"; // Use A1, A2, A3 or A4\n    const orientation = \"landscape\"; // portrait or landscape\n\n    const marginLeft = 300;\n    const doc = new jsPDF(orientation, unit, size);\n\n    doc.setFontSize(15);\n\n    const title = \"iCargo Report\";\n    const headers = [\n      this.state.columnEntityList.map((column) => {\n        return column.name;\n      }),\n    ];\n    var dataValues = [];\n    this.props.rows.forEach((row) => {\n      const keys = Object.keys(row);\n      var filteredColumnVal = [];\n      this.state.columnEntityList.forEach((columnName) => {\n        keys.forEach((key) => {\n          if (columnName.key === key) filteredColumnVal.push(row[key]);\n        });\n      });\n      dataValues.push(filteredColumnVal);\n    });\n\n    let content = {\n      startY: 50,\n      head: headers,\n      body: dataValues,\n    };\n\n    doc.text(title, marginLeft, 40);\n    doc.autoTable(content);\n    doc.save(\"report.pdf\");\n  };\n\n  downloadCSVFile = () => {\n    const fileType =\n      \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\n    const fileExtension = \".csv\";\n    const fileName = \"CSVDownload\";\n    const ws = XLSX.utils.json_to_sheet(this.state.filteredRow);\n    const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\n    const excelBuffer = XLSX.write(wb, { bookType: \"csv\", type: \"array\" });\n    const data = new Blob([excelBuffer], { type: fileType });\n    FileSaver.saveAs(data, fileName + fileExtension);\n  };\n\n  downloadXLSFile = () => {\n    const fileType =\n      \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\n    const fileExtension = \".xlsx\";\n    const fileName = \"XLSXDownload\";\n    const ws = XLSX.utils.json_to_sheet(this.state.filteredRow);\n    const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\n    const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\n    const data = new Blob([excelBuffer], { type: fileType });\n    FileSaver.saveAs(data, fileName + fileExtension);\n  };\n\n  columnSearchLogic = (e) => {\n    const searchKey = String(e.target.value).toLowerCase();\n    let filteredRows = this.props.columnsList.filter((item) => {\n      return item.name.toLowerCase().includes(searchKey);\n    });\n    if (!filteredRows.length) {\n      this.setState({ columnValueList: this.props.columnsList });\n    } else {\n      this.setState({ columnValueList: filteredRows });\n    }\n  };\n\n  exportValidation = () => {\n    let columnLength = this.state.columnEntityList.length;\n    let fileLength = this.state.downLaodFileType.length;\n    if (columnLength > 0 && fileLength > 0) {\n      this.exportRowData();\n      this.setState({ clickTag: \"none\" });\n    } else if (columnLength === 0) {\n      this.setState({ warning: \"Column\" });\n      this.setState({ clickTag: \"\" });\n    } else if (fileLength === 0) {\n      this.setState({ warning: \"File Type\" });\n      this.setState({ clickTag: \"\" });\n    }\n    if (columnLength === 0 && fileLength === 0) {\n      this.setState({ warning: \"File Type & Column\" });\n      this.setState({ clickTag: \"\" });\n    }\n  };\n  render() {\n    return (\n      <div className=\"exports--grid\" ref={this.setWrapperRef}>\n        <div className=\"export__grid\">\n          <div className=\"export__chooser\">\n            <div className=\"export__header\">\n              <div className=\"\">\n                <strong>Export Data</strong>\n              </div>\n            </div>\n            <div className=\"export__body\">\n              <div>\n                <input\n                  type=\"text\"\n                  placeholder=\"Search export\"\n                  className=\"custom__ctrl\"\n                  onChange={this.columnSearchLogic}\n                ></input>\n              </div>\n              <div className=\"export__selectAll\">\n                <div>\n                <input \n\t\t\t\t\t\t\t\t\tclassName='column__checkbox'\n\t\t\t\t\t\t\t\t\ttype='checkbox'\n                  onChange={() => this.selectAllToColumnList()}\n\t\t\t\t\t\t\t\t  checked={this.state.isAllSelected}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\tSelect All\n                </div>\n              </div>\n              {this.state.columnValueList.length > 0\n                ? this.state.columnValueList.map((column, index) => {\n                    return (\n                      <div className=\"export__wrap\" key={column.key}>\n                        <div className=\"export__checkbox\">\n                          <input\n                            type=\"checkbox\"\n                            checked={this.state.columnEntityList.includes(\n                              column\n                            )}\n                            onChange={() => this.addToColumnEntityList(column)}\n                          ></input>\n                        </div>\n                        <div className=\"export__txt\">{column.name}</div>\n                      </div>\n                    );\n                  })\n                : \"\"}\n            </div>\n          </div>\n          <div className=\"export__settings\">\n            <div className=\"export__header\">\n              <div className=\"export__headerTxt\"></div>\n              <div className=\"export__close\">\n                <FontAwesomeIcon icon={faTimes} className=\"icon-close\" onClick={this.props.closeExport}></FontAwesomeIcon>\n              </div>\n            </div>\n            <div className=\"export__as\">Export as</div>\n            <div className=\"export__body\">\n              <div className=\"export__reorder\">\n                <div className=\"\">\n                  <input\n                    type=\"checkbox\"\n                    name=\"pdf\"\n                    value=\"pdf\"\n                    onChange={this.selectDownLoadType}\n                  ></input>\n                </div>\n                <div className=\"export__file\">\n                  <FontAwesomeIcon\n                    icon={faFilePdf}\n                    className=\"temp\"\n                  ></FontAwesomeIcon>\n                </div>\n              </div>\n              <div className=\"export__reorder\">\n                <div className=\"\">\n                  <input\n                    type=\"checkbox\"\n                    name=\"excel\"\n                    value=\"excel\"\n                    onChange={this.selectDownLoadType}\n                  ></input>\n                </div>\n                <div className=\"export__file\">\n                  <FontAwesomeIcon\n                    icon={faFileExcel}\n                    className=\"temp\"\n                  ></FontAwesomeIcon>\n                </div>\n              </div>\n              <div className=\"export__reorder\">\n                <div className=\"\">\n                  <input\n                    type=\"checkbox\"\n                    name=\"csv\"\n                    value=\"csv\"\n                    onChange={this.selectDownLoadType}\n                  ></input>\n                </div>\n                <div className=\"export__file\">\n                  <FontAwesomeIcon\n                    icon={faFileCsv}\n                    className=\"temp\"\n                  ></FontAwesomeIcon>\n                </div>\n              </div>\n              <div className=\"exportWarning\">\n                <span\n                  style={{ display: this.state.clickTag }}\n                  className=\"alert alert-danger\"\n                >\n                  You haven't selected <strong>{this.state.warning}</strong>\n                </span>\n              </div>\n            </div>\n            <div className=\"export__footer\">\n              <div className=\"export__btns\">\n                <button\n                  className=\"btns\"\n                  onClick={() => this.props.closeExport()}\n                >\n                  Cancel\n                </button>\n                <button\n                  className=\"btns btns__save\"\n                  onClick={(e) => {\n                    this.exportValidation();\n                  }}\n                >\n                  Export\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default ExportData;\n\n","import React, { Component } from \"react\";\nimport ExtDataGrid from \"./common/extDataGrid\";\nimport { Toolbar, Data, Filters, Editors } from \"react-data-grid-addons\";\nimport { range } from \"lodash\";\nimport { applyFormula } from \"./utilities/utils\";\nimport { FormControl } from \"react-bootstrap\";\nimport DatePicker from \"./functions/DatePicker.js\";\n//import {onRowsSelected} from \"../components/functions/OnRowsSelected.js\"\nimport {\n\tfaSortAmountDown,\n\tfaColumns,\n\t// faSyncAlt,\n\tfaShareAlt,\n\t// faAlignLeft,\n\t// faFilter,\n\tfaSortDown,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport ErrorMessage from \"./common/ErrorMessage\";\nimport ColumnReordering from \"./overlays/column_chooser/Chooser\";\nimport Sorting from \"./overlays/sorting/Sorting\";\nimport ExportData from \"./overlays/export_data/ExportData\";\n\nconst {\n\tDraggableHeader: { DraggableContainer },\n} = require(\"react-data-grid-addons\");\n\nconst { DropDownEditor } = Editors;\n\nconst defaultParsePaste = (str) => str.split(/\\r\\n|\\n|\\r/).map((row) => row.split(\"\\t\"));\n\n// let newFilters = {};\n\nconst selectors = Data.Selectors;\n\nconst { AutoCompleteFilter, NumericFilter } = Filters;\nclass spreadsheet extends Component {\n  constructor(props) {\n    super(props);\n    const airportCodes = [];\n    this.props.airportCodes.forEach((item) => {\n      airportCodes.push({ id: item, value: item });\n    });\n    this.state = {\n      warningStatus: \"\",\n      height: 680,\n      displayNoRows: \"none\",\n      searchIconDisplay: \"\",\n      searchValue: \"\",\n      filter: {},\n      rows: this.props.rows,\n      selectedIndexes: [],\n      junk: {},\n      topLeft: {},\n      columnReorderingComponent: null,\n      exportComponent: null,\n      filteringRows: this.props.rows,\n      tempRows: this.props.rows,\n      sortingPanelComponent: null,\n      count: this.props.rows.length,\n      columns: this.props.columns.map((item) => {\n        if (item.editor === \"DatePicker\") {\n          item.editor = DatePicker;\n        } else if (item.editor === \"DropDown\") {\n          item.editor = <DropDownEditor options={airportCodes} />;\n        } else if (item.editor === \"Text\") {\n          item.editor = \"text\";\n        } else {\n          item.editor = null;\n        }\n        if (item.filterType === \"numeric\") {\n          item.filterRenderer = NumericFilter;\n        }\n        else {\n          item.filterRenderer = AutoCompleteFilter;\n        }\n        return item;\n      }),\n    };\n    document.addEventListener(\"copy\", this.handleCopy);\n    document.addEventListener(\"paste\", this.handlePaste);\n    this.handleSearchValue = this.handleSearchValue.bind(this);\n    this.clearSearchValue = this.clearSearchValue.bind(this);\n    this.handleFilterChange = this.handleFilterChange.bind(this);\n\n    this.formulaAppliedCols = this.props.columns.filter((item) => {\n      return item.formulaApplicable;\n    });\n  }\n\tcomponentDidUpdate(prevProps) {\n\t\t//Fix for column re-order and pin left issue (functionality was working only after doing a window re-size)\n\t\tconst resizeEvent = document.createEvent(\"HTMLEvents\");\n\t\tresizeEvent.initEvent(\"resize\", true, false);\n\t\twindow.dispatchEvent(resizeEvent);\n\t}\n  updateRows = (startIdx, newRows) => {\n    this.setState((state) => {\n      const rows = state.rows.slice();\n      for (let i = 0; i < newRows.length; i++) {\n        if (startIdx + i < rows.length) {\n          rows[startIdx + i] = {\n            ...rows[startIdx + i],\n            ...newRows[i],\n          };\n        }\n      }\n      return {\n        rows,\n      };\n    });\n  }\n\n  rowGetter = (i) => {\n    const { rows } = this.state;\n    return rows[i];\n  };\n\n  handleCopy = (e) => {\n    e.preventDefault();\n    const { topLeft, botRight } = this.state;\n    const text = range(topLeft.rowIdx, botRight.rowIdx + 1)\n      .map((rowIdx) =>\n        this.state.columns\n          .slice(topLeft.colIdx - 1, botRight.colIdx)\n          .map((col) => this.rowGetter(rowIdx)[col.key])\n          .join(\"\\t\")\n      )\n      .join(\"\\n\");\n    e.clipboardData.setData(\"text/plain\", text);\n  };\n\n  handlePaste = (e) => {\n    e.preventDefault();\n    const { topLeft } = this.state;\n    const newRows = [];\n    const pasteData = defaultParsePaste(e.clipboardData.getData(\"text/plain\"));\n    pasteData.forEach((row) => {\n      const rowData = {};\n      // Merge the values from pasting and the keys from the columns\n      this.state.columns.slice(topLeft.colIdx - 1, topLeft.colIdx - 1 + row.length).forEach((col, j) => {\n        rowData[col.key] = row[j];\n      });\n      newRows.push(rowData);\n    });\n    this.updateRows(topLeft.rowIdx, newRows);\n  };\n\n  setSelection = (args) => {\n    this.setState({\n      topLeft: {\n        rowIdx: args.topLeft.rowIdx,\n        colIdx: args.topLeft.idx,\n      },\n      botRight: {\n        rowIdx: args.bottomRight.rowIdx,\n        colIdx: args.bottomRight.idx,\n      },\n    });\n  };\n\n  handleWarningStatus = () => {\n    this.setState({ warningStatus: \"invalid\" })\n  }\n  closeWarningStatus = () => {\n    this.setState({ warningStatus: \"\" })\n  }\n  componentWillReceiveProps(props) {\n    this.setState({\n      rows: props.rows,\n    });\n    this.setState({\n      status: props.status,\n    });\n    this.setState({\n      textValue: props.textValue,\n    });\n    this.setState({ count: props.count });\n    this.setState({ warningStatus: props.status })\n  }\n\n  /**\n * Method To update the cell/cells with the edited values\n * @param {*} fromRow is the row from which this edit is performed\n * @param {*} toRow is the row upto which this edit is performed\n * @param {*} updated is the value of change\n * @param {*} action is type of edit action performed\n */\n  onGridRowsUpdated = ({ fromRow, toRow, updated, action }) => {\n    let columnName = \"\";\n    const filter = this.formulaAppliedCols.filter((item) => {\n      if (updated[item.key] !== null && updated[item.key] !== undefined) {\n        columnName = item.key;\n        return true;\n      } else return false;\n    });\n\n    if (filter.length > 0) {\n      updated = applyFormula(updated, columnName);\n    }\n\n    if (action !== \"COPY_PASTE\") {\n      this.setState((state) => {\n        const rows = state.rows.slice();\n        for (let i = fromRow; i <= toRow; i++) {\n          rows[i] = {\n            ...rows[i],\n            ...updated,\n          };\n        }\n\n        return {\n          rows,\n        };\n      });\n      this.setState((state) => {\n        const filteringRows = state.filteringRows.slice();\n        for (let i = fromRow; i <= toRow; i++) {\n          filteringRows[i] = {\n            ...filteringRows[i],\n            ...updated,\n          };\n        }\n\n        return {\n          filteringRows,\n        };\n      });\n      this.setState((state) => {\n        const tempRows = state.tempRows.slice();\n        for (let i = fromRow; i <= toRow; i++) {\n          tempRows[i] = {\n            ...tempRows[i],\n            ...updated,\n          };\n        }\n\n        return {\n          tempRows,\n        };\n      });\n    }\n    if (this.props.updateCellData) {\n      this.props.updateCellData(this.state.tempRows[fromRow], this.state.tempRows[toRow], updated, action);\n    }\n  };\n\t/**\n\t * Method To bulk/individual select of rows\n\t * @param {*} rows is the selected row\n\t */\n\tonRowsSelected = (rows) => {\n\t\tthis.setState({\n\t\t\tselectedIndexes: this.state.selectedIndexes.concat(rows.map((r) => r.rowIdx)),\n\t\t});\n\t\tif (this.props.selectBulkData) {\n\t\t\tthis.props.selectBulkData(rows);\n\t\t}\n\t};\n\t/**\n\t * Method To bulk/individual deselect of rows\n\t * @param {*} rows is the deselected row\n\t */\n\tonRowsDeselected = (rows) => {\n\t\tlet rowIndexes = rows.map((r) => r.rowIdx);\n\t\tthis.setState({\n\t\t\tselectedIndexes: this.state.selectedIndexes.filter((i) => rowIndexes.indexOf(i) === -1),\n\t\t});\n\t};\n\n\t/**\n\t * Method To filter the multiple columns\n\t * @param {*} value is the  incoming filtering event\n\t */\n  handleFilterChange = (value) => {\n    let junk = this.state.junk;\n    if (!(value.filterTerm == null) && !(value.filterTerm.length <= 0)) {\n      junk[value.column.key] = value;\n    } else {\n      delete junk[value.column.key];\n    }\n    this.setState({ junk });\n    const data = this.getrows(this.state.filteringRows, this.state.junk);\n    this.setState({\n      rows: data,\n      tempRows: data,\n      count: data.length,\n    });\n    if (data.length === 0) {\n      this.handleWarningStatus();\n    }\n    else {\n      this.closeWarningStatus();\n    }\n  };\n  getrows = (rows, filters) => {\n    if (Object.keys(filters).length <= 0) {\n      filters = {};\n    }\n    selectors.getRows({ rows: [], filters: {} });\n    return selectors.getRows({ rows: rows, filters: filters });\n  };\n\n  /**\n * Method To render the filter values for filtering rows\n * @param {*} rows is the row data to be considered for filtering\n * @param {*} columnId is the specific columnId for which the row datas are being considered\n */\n  getValidFilterValues(rows, columnId) {\n    return rows\n      .map((r) => r[columnId])\n      .filter((item, i, a) => {\n        return i === a.indexOf(item);\n      });\n  }\n  /**\n* Method To sort the rows for a particular column\n* @param {*} data is the row datas to be considered for sorting\n* @param {*} sortColumn is the specific column for which the row sort is being triggered\n* @param {*} sortDirection is the type of sort\n*/\n  sortRows = (data, sortColumn, sortDirection) => {\n    const comparer = (a, b) => {\n      if (sortDirection === \"ASC\") {\n        return a[sortColumn] > b[sortColumn] ? 1 : -1;\n      } else if (sortDirection === \"DESC\") {\n        return a[sortColumn] < b[sortColumn] ? 1 : -1;\n      }\n    };\n    this.setState({\n      rows: [...data].sort(comparer),\n    });\n    return sortDirection === \"NONE\" ? data : this.state.rows;\n  };\n  /**\n     * Method To swap the columns\n     * @param {*} source is source column\n     * @param {*} target is the target column \n     */\n  onHeaderDrop = (source, target) => {\n    const stateCopy = Object.assign({}, this.state);\n    const columnSourceIndex = this.state.columns.findIndex((i) => i.key === source);\n    const columnTargetIndex = this.state.columns.findIndex((i) => i.key === target);\n\n    stateCopy.columns.splice(columnTargetIndex, 0, stateCopy.columns.splice(columnSourceIndex, 1)[0]);\n\n    const emptyColumns = Object.assign({}, this.state, {\n      columns: [],\n    });\n    this.setState(emptyColumns);\n\n    const reorderedColumns = Object.assign({}, this.state, {\n      columns: stateCopy.columns,\n    });\n    this.setState(reorderedColumns);\n  };\n  updateTableAsPerRowChooser = (inComingColumnsHeaderList, pinnedColumnsList) => {\n    var existingColumnsHeaderList = this.props.columns;\n    existingColumnsHeaderList = existingColumnsHeaderList.filter((item) => {\n      return inComingColumnsHeaderList.includes(item.name);\n    });\n\n    var rePositionedArray = existingColumnsHeaderList;\n    var singleHeaderOneList;\n    if (pinnedColumnsList.length > 0) {\n      pinnedColumnsList\n        .slice(0)\n        .reverse()\n        .map((item, index) => {\n          singleHeaderOneList = existingColumnsHeaderList.filter((subItem) => item === subItem.name);\n          rePositionedArray = this.array_move(\n            existingColumnsHeaderList,\n            existingColumnsHeaderList.indexOf(singleHeaderOneList[0]),\n            index\n          );\n        });\n    }\n\n    existingColumnsHeaderList = rePositionedArray;\n\t\t/**\n       making all the frozen attribute as false for all the columns and then \n       setting items of pinnedColumnsList as frozen = true\n       */\n\t\texistingColumnsHeaderList.map((headerItem, index) => {\n\t\t\tif (headerItem.frozen !== undefined && headerItem.frozen === true) {\n\t\t\t\texistingColumnsHeaderList[index][\"frozen\"] = false;\n\t\t\t}\n\t\t\tif (pinnedColumnsList.includes(headerItem.name)) {\n\t\t\t\texistingColumnsHeaderList[index][\"frozen\"] = true;\n\t\t\t}\n\t\t});\n\n\t\tconsole.log(\"existingColumnsHeaderList \", existingColumnsHeaderList);\n\n\t\tthis.setState({\n\t\t\tcolumns: existingColumnsHeaderList,\n\t\t});\n\n\t\tthis.closeColumnReOrdering();\n\t};\n\n\t/**\n\t * Method To re-position a particular object in an Array from old_index to new_index\n\t * @param {*} arr inComing array\n\t * @param {*} old_index initial index\n\t * @param {*} new_index final index\n\t */\n\tarray_move = (arr, old_index, new_index) => {\n\t\tif (new_index >= arr.length) {\n\t\t\tvar k = new_index - arr.length + 1;\n\t\t\twhile (k--) {\n\t\t\t\tarr.push(undefined);\n\t\t\t}\n\t\t}\n\t\tarr.splice(new_index, 0, arr.splice(old_index, 1)[0]);\n\t\treturn arr;\n\t};\n\n\t/**\n\t * Method to render the column Selector Pannel\n\t */\n\tcolumnReorderingPannel = () => {\n\t\tvar headerNameList = [];\n\t\tvar existingPinnedHeadersList = [];\n\t\tthis.state.columns\n\t\t\t.filter((item) => item.frozen !== undefined && item.frozen === true)\n\t\t\t.map((item) => existingPinnedHeadersList.push(item.name));\n\t\tthis.state.columns.map((item) => headerNameList.push(item.name));\n\t\tthis.setState({\n\t\t\tcolumnReorderingComponent: (\n\t\t\t\t<ColumnReordering\n\t\t\t\t\tmaxLeftPinnedColumn={this.props.maxLeftPinnedColumn}\n\t\t\t\t\tupdateTableAsPerRowChooser={this.updateTableAsPerRowChooser}\n\t\t\t\t\theaderKeys={headerNameList}\n\t\t\t\t\tcloseColumnReOrdering={this.closeColumnReOrdering}\n\t\t\t\t\texistingPinnedHeadersList={existingPinnedHeadersList}\n\t\t\t\t\t{...this.props}\n\t\t\t\t/>\n\t\t\t),\n\t\t});\n\t};\n\n\t/**\n\t * Method to stop the render the column Selector Pannel\n\t */\n\tcloseColumnReOrdering = () => {\n\t\tthis.setState({\n\t\t\tcolumnReorderingComponent: null,\n\t\t});\n\t};\n\thandleSearchValue = (value) => {\n\t\tthis.setState({ searchValue: value });\n\t};\n\tclearSearchValue = () => {\n\t\tthis.setState({ searchValue: \"\" });\n\t\tthis.setState({ filteringRows: this.state.filteringRows });\n\t};\n\n\tsortingPanel = () => {\n\t\tlet columnField = [];\n\t\tthis.state.columns.map((item) => columnField.push(item.name));\n\t\tthis.setState({\n\t\t\tsortingPanelComponent: <Sorting columnFieldValue={columnField} closeSorting={this.closeSorting} />,\n\t\t});\n\t};\n\n\tcloseSorting = () => {\n\t\tthis.setState({\n\t\t\tsortingPanelComponent: null,\n\t\t});\n\t};\n\n\t//Export Data Logic\n\texportColumnData = () => {\n\t\tthis.setState({\n\t\t\texportComponent: (\n\t\t\t\t<ExportData rows={this.state.rows} columnsList={this.state.columns} closeExport={this.closeExport} />\n\t\t\t),\n\t\t});\n\t};\n\n\tcloseExport = () => {\n\t\tthis.setState({\n\t\t\texportComponent: null,\n\t\t});\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className='parentDiv'>\n\t\t\t\t\t<div className='totalCount'>\n            Showing <strong> {this.state.count} </strong> records\n\t\t\t\t\t</div>\n          <div className='globalSearch'>\n            <i className=\"fa fa-search\"></i>\n            <FormControl\n              className=\"globalSeachInput\"\n              type='text'\n              placeholder=\"Search\"\n              onChange={(e) => {\n                this.handleSearchValue(e.target.value);\n\t\t\t\t\t\t\t\tthis.props.globalSearchLogic(e, this.state.tempRows);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tvalue={this.state.searchValue}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t{/* <div className=\"filterIcons\">\n            <FontAwesomeIcon icon={faFilter} />\n          </div> */}\n\t\t\t\t\t<div className='filterIcons' onClick={this.sortingPanel}>\n\t\t\t\t\t\t<FontAwesomeIcon title='Group Sort' icon={faSortAmountDown} />\n\t\t\t\t\t\t<FontAwesomeIcon icon={faSortDown} className='filterArrow' />\n\t\t\t\t\t</div>\n\t\t\t\t\t{this.state.sortingPanelComponent}\n\t\t\t\t\t<div className='filterIcons' onClick={this.columnReorderingPannel}>\n\t\t\t\t\t\t<FontAwesomeIcon title='Column Chooser' icon={faColumns} />\n\t\t\t\t\t\t<FontAwesomeIcon icon={faSortDown} className='filterArrow' />\n\t\t\t\t\t</div>\n\t\t\t\t\t{this.state.columnReorderingComponent}\n\t\t\t\t\t<div className='filterIcons'>\n\t\t\t\t\t\t<FontAwesomeIcon title='Export' icon={faShareAlt} onClick={this.exportColumnData} />\n\t\t\t\t\t</div>\n\t\t\t\t\t{this.state.exportComponent}\n\t\t\t\t\t{/* <div className=\"filterIcons\">\n            <FontAwesomeIcon title=\"Reload\" icon={faSyncAlt} />\n          </div> */}\n\t\t\t\t\t{/* <div className=\"filterIcons\">\n            <FontAwesomeIcon icon={faAlignLeft} />\n          </div> */}\n        </div>\n        <ErrorMessage\n          className='errorDiv'\n          status={this.state.warningStatus}\n          closeWarningStatus={(e) => {\n            this.props.closeWarningStatus();\n            this.closeWarningStatus();\n          }}\n          clearSearchValue={this.clearSearchValue}\n        />\n        <DraggableContainer className='gridDiv' onHeaderDrop={this.onHeaderDrop}>\n          <ExtDataGrid\n            toolbar={<Toolbar enableFilter={true} />}\n            getValidFilterValues={(columnKey) => this.getValidFilterValues(this.state.filteringRows, columnKey)}\n            minHeight={this.state.height}\n            columns={this.state.columns}\n            rowGetter={(i) => this.state.rows[i]}\n            rowsCount={this.state.rows.length}\n            onGridRowsUpdated={this.onGridRowsUpdated}\n            enableCellSelect={true}\n            onClearFilters={() => {\n              this.setState({ junk: {} });\n            }}\n            onColumnResize={(idx, width) => console.log(`Column ${idx} has been resized to ${width}`)}\n            onAddFilter={(filter) => this.handleFilterChange(filter)}\n            rowSelection={{\n              showCheckbox: true,\n              enableShiftSelect: true,\n              onRowsSelected: this.onRowsSelected,\n              onRowsDeselected: this.onRowsDeselected,\n              selectBy: {\n                indexes: this.state.selectedIndexes,\n              },\n            }}\n            onGridSort={(sortColumn, sortDirection) => this.sortRows(this.state.rows, sortColumn, sortDirection)}\n            cellRangeSelection={{\n              onComplete: this.setSelection,\n            }}\n          />\n        </DraggableContainer>\n      </div>\n    );\n  }\n}\nexport default spreadsheet;\n","export const applyFormula = (obj, columnName) => {\n  let item = obj[columnName].toString();\n  if (item && item.charAt(0) === \"=\") {\n    var operation = item.split(\"(\");\n    var value = operation[1]\n      .substring(0, operation[1].length - 1)\n      .split(/[,:]/);\n    switch (operation[0]) {\n      case \"=SUM\":\n      case \"=ADD\":\n      case \"=sum\":\n      case \"=add\":\n        obj[columnName] = value.reduce(function (a, b) {\n          return Number(a) + Number(b);\n        });\n        break;\n      case \"=MUL\":\n      case \"=mul\":\n        obj[columnName] = value.reduce(function (a, b) {\n          return Number(a) * Number(b);\n        });\n        break;\n      case \"=SUB\":\n      case \"=sub\":\n      case \"=DIFF\":\n      case \"=diff\":\n        obj[columnName] = value.reduce(function (a, b) {\n          return Number(a) - Number(b);\n        });\n        break;\n      case \"=min\":\n      case \"=MIN\":\n        obj[columnName] = Math.min.apply(Math, value);\n        break;\n      case \"=max\":\n      case \"=MAX\":\n        obj[columnName] = Math.max.apply(Math, value);\n        break;\n      default:\n        console.log(\"No Calculation\");\n    }\n  }\n  return obj;\n};","\nimport React, { useState, useEffect } from \"react\";\nimport Spreadsheet from \"spreadsheet\";\nimport CargoData from \"./data.json\";\nimport { fetchData } from \"./getData\";\n\nconst App = () => {\n  //Get spreadsheet height value, which is a required value\n  const gridHeight = \"90vh\";\n\n  let searchKey = \"\";\n  //Set state value for variable to hold grid data\n  const [data, setData] = useState();\n  //Set state value for variable to hold grid record status\n  const [status, setStatus] = useState(\"\");\n  const rows = CargoData;\n\n  const maxLeftPinnedColumn = 5;\n  //Configure columns and its related featues such as editor(Text/DropDown), FormulaApplicable(True/False)\n  //Editable, Draggable, sortable, resizable, filterable, default width\n  const columns = [\n    {\n      key: \"flightno\",\n      name: \"Flight #\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\"\n    },\n    {\n      key: \"date\",\n      name: \"Date\",\n      draggable: true,\n      editor: \"DatePicker\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\"\n    },\n    {\n      key: \"segmentfrom\",\n      name: \"Segment From\",\n      draggable: true,\n      editor: \"DropDown\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\"\n    },\n    {\n      key: \"revenue\",\n      name: \"Revenue\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: true,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\"\n    },\n    {\n      key: \"yeild\",\n      name: \"Yeild\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: true,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\"\n    },\n    {\n      key: \"segmentto\",\n      name: \"Segment To\",\n      draggable: true,\n      editor: \"DropDown\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\"\n    },\n    {\n      key: \"flightModel\",\n      name: \"Flight Model\",\n      //draggable: true,\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"numeric\"\n    },\n    {\n      key: \"bodyType\",\n      name: \"Body Type\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\"\n    },\n    {\n      key: \"type\",\n      name: \"Type\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\"\n    },\n    {\n      key: \"startTime\",\n      name: \"Start Time\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\"\n    },\n    {\n      key: \"endTime\",\n      name: \"End Time\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\"\n    },\n    {\n      key: \"status\",\n      name: \"Status\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\"\n    },\n    {\n      key: \"additionalStatus\",\n      name: \"Additional Status\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\"\n    },\n    {\n      key: \"timeStatus\",\n      name: \"Time Status\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\"\n    },\n    {\n      key: \"weightpercentage\",\n      name: \"Weight Percentage\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\"\n    },\n    {\n      key: \"weightvalue\",\n      name: \"Weight Value\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: true,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\"\n    },\n    {\n      key: \"volumepercentage\",\n      name: \"Volume Percentage\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: true,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\"\n    },\n    {\n      key: \"volumevalue\",\n      name: \"Volume Value\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\"\n    },\n    {\n      key: \"uldposition1\",\n      name: \"uldposition1\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\"\n    },\n    {\n      key: \"uldvalue1\",\n      name: \"uldvalue1\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\"\n    },\n    {\n      key: \"uldposition2\",\n      name: \"uldposition2\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\"\n    },\n    {\n      key: \"uldvalue2\",\n      name: \"uldvalue2\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\"\n    },\n    {\n      key: \"uldposition3\",\n      name: \"uldposition3\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\"\n    },\n    {\n      key: \"uldvalue3\",\n      name: \"uldvalue3\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\"\n    },\n    {\n      key: \"uldposition4\",\n      name: \"uldposition4\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\"\n    },\n    {\n      key: \"uldvalue4\",\n      name: \"uldvalue4\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\"\n    },\n\n    {\n      key: \"sr\",\n      name: \"SR\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\"\n    },\n    {\n      key: \"queuedBookingSR\",\n      name: \"Queued Booking SR\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\"\n    },\n    {\n      key: \"queuedBookingvolume\",\n      name: \"Queued Booking Volume\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\"\n    }\n  ];\n\n  //Configure columns and its related functions\n  const airportCodeList =  [\n        \"AAA\",\n        \"AAB\",\n        \"AAC\",\n        \"ABA\",\n        \"ABB\",\n        \"ABC\",\n        \"ACA\",\n        \"ACB\",\n        \"ACC\",\n        \"BAA\",\n        \"BAB\",\n        \"BAC\",\n        \"BBA\",\n        \"BBB\",\n        \"BBC\",\n        \"BCA\",\n        \"BCB\",\n        \"BCC\",\n        \"CAA\",\n        \"CAB\",\n        \"CAC\",\n        \"CBA\",\n        \"CBB\",\n        \"CBC\",\n        \"CCA\",\n        \"CCB\",\n        \"CCC\",\n        \"XXX\",\n        \"XXY\",\n        \"XXZ\",\n        \"XYX\",\n        \"XYY\",\n        \"XYZ\",\n        \"XZX\",\n        \"XZY\",\n        \"XZZ\",\n        \"YXX\",\n        \"YXY\",\n        \"YXZ\",\n        \"YYX\",\n        \"YYY\",\n        \"YYZ\",\n        \"YZX\",\n        \"YZY\",\n        \"YZZ\",\n        \"ZXX\",\n        \"ZXY\",\n        \"ZXZ\",\n        \"ZYX\",\n        \"ZYY\",\n        \"ZYZ\",\n        \"ZZX\",\n        \"ZZY\",\n        \"ZZZ\"\n    ];\n\n  //Add logic for doing global search in the spreadsheet\n  const globalSearchLogic = (e, updatedRows) => {\n    searchKey = String(e.target.value).toLowerCase();\n    let filteredRows = updatedRows.filter((item) => {\n      return (\n        (item.flightno && item.flightno.toLowerCase().includes(searchKey)) ||\n        (item.date && item.date.toLowerCase().includes(searchKey)) ||\n        (item.segmentfrom &&\n          item.segmentfrom.toLowerCase().includes(searchKey)) ||\n        (item.segmentto && item.segmentto.toLowerCase().includes(searchKey)) ||\n        String(item.flightModel).includes(searchKey) ||\n        (item.bodyType && item.bodyType.toLowerCase().includes(searchKey)) ||\n        (item.type && item.type.toLowerCase().includes(searchKey)) ||\n        (item.startTime && item.startTime.toLowerCase().includes(searchKey)) ||\n        (item.endTime && item.endTime.toLowerCase().includes(searchKey)) ||\n        (item.status && item.status.toLowerCase().includes(searchKey)) ||\n        (item.additionalStatus &&\n          item.additionalStatus.toLowerCase().includes(searchKey)) ||\n        (item.timeStatus &&\n          item.timeStatus.toLowerCase().includes(searchKey)) ||\n        (item.weightpercentage &&\n          item.weightpercentage.toLowerCase().includes(searchKey)) ||\n        (item.volumevalue &&\n          item.volumevalue.toLowerCase().includes(searchKey)) ||\n        (item.uldposition1 &&\n          item.uldposition1.toLowerCase().includes(searchKey)) ||\n        (item.uldvalue1 && item.uldvalue1.toLowerCase().includes(searchKey)) ||\n        (item.uldposition2 &&\n          item.uldposition2.toLowerCase().includes(searchKey)) ||\n        (item.uldvalue2 && item.uldvalue2.toLowerCase().includes(searchKey)) ||\n        (item.uldposition3 &&\n          item.uldposition3.toLowerCase().includes(searchKey)) ||\n          (item.weightvalue && item.weightvalue.toLowerCase().includes(searchKey)) ||\n        (item.uldvalue3 && item.uldvalue3.toLowerCase().includes(searchKey)) ||\n        (item.uldposition4 &&\n          item.uldposition4.toLowerCase().includes(searchKey)) ||\n        (item.revenue && item.revenue.toLowerCase().includes(searchKey)) ||\n        (item.yeild && item.yeild.toLowerCase().includes(searchKey)) ||\n        (item.sr && item.sr.toLowerCase().includes(searchKey)) ||\n        (item.queuedBookingSR &&\n          item.queuedBookingSR.toLowerCase().includes(searchKey)) ||\n        (item.queuedBookingvolume &&\n          item.queuedBookingvolume.toLowerCase().includes(searchKey))\n      );\n    });\n    if (!filteredRows.length) {\n      setStatus(\"invalid\");\n      setData(rows);\n    } else {\n      setData(filteredRows);\n      setStatus(\"\");\n    }\n  };\nconst handleWarningStatus=()=>{\n  setStatus(\"invalid\");\n}\n  //Gets called when there is a cell edit\n  const updateCellData = (fromRow,toRow,value,updateType) => {\n    if(updateType===\"CELL_UPDATE\"){\n      console.log(\"row:\", fromRow, \"updated-Value:\", value,\"Updation-Type:\", updateType);\n    }\n    if(updateType===\"CELL_DRAG\"){\n      console.log(\"fromRow:\", fromRow,\"toRow:\",toRow, \"updated-Value:\", value,\"Updation-Type:\", updateType);\n    }\n  }\n\n  //Gets called when row bulk edit is done\n  const selectBulkData = (selectedRows) => {\n    console.log(\"selectedRows:\", selectedRows);\n  };\n  const closeWarningStatus = () => {\n    setStatus(\"\")\n  }\n  useEffect(() => {\n    //Make API call to fetch initial set of data, uncomment below code to use API call\n    // fetchData(0).then((data) => {\n    //   setItems(data);\n    // });\n    setData(rows);\n  }, [rows]);\n\n  if (data && data.length) {\n    return (\n      <div>\n        <Spreadsheet\n          rows={data}\n          textValue={searchKey}\n          globalSearchLogic={globalSearchLogic}\n          status={status}\n          closeWarningStatus={closeWarningStatus}\n          handleWarningStatus={handleWarningStatus}\n          count={data.length}\n          columns={columns}\n          airportCodes={airportCodeList}\n          gridHeight={gridHeight}\n          updateCellData={updateCellData}\n          selectBulkData={selectBulkData}\n          maxLeftPinnedColumn={maxLeftPinnedColumn}\n        />\n      </div>\n    );\n  } else return <h2>Loading Data</h2>;\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}