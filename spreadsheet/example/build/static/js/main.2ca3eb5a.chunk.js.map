{"version":3,"sources":["../../src/common/extDataGrid.js","../../src/functions/DatePicker.js","../../src/common/ErrorConstants.js","../../src/common/ErrorMessage.js","../../src/overlays/column_chooser/ItemTypes.js","../../src/overlays/column_chooser/columnItem.js","../../src/overlays/column_chooser/columnsList.js","../../src/overlays/column_chooser/Chooser.js","../../src/overlays/sorting/ItemTypes.js","../../src/overlays/sorting/SortItem.js","../../src/overlays/sorting/SortingList.js","../../src/overlays/sorting/Sorting.js","../../src/overlays/export_data/ExportData.js","../../src/index.js","../../src/utilities/utils.js","App.js","index.js"],"names":["this","document","window","constructor","value","Date","updated","date","state","Intl","year","month","day","dateTimeFormat","props","column","ev","type","ref","onChange","onValueChanged","React","DatePicker","PropTypes","string","ErrorMessage","useState","useEffect","setStatus","status","id","className","role","icon","onClick","ItemTypes","style","cursor","ColumnItem","findColumn","originalIndex","useDrag","item","collect","monitor","isDragging","end","moveColumn","droppedId","useDrop","accept","canDrop","hover","draggedId","overIndex","index","opacity","node","drag","drop","text","any","ColumnsList","atIndex","setColumns","update","columns","$splice","values","temp","c","display","flexWrap","key","columnsArray","handleReorderList","columnReorderEntityList","leftPinnedColumList","isAllSelected","existingColumnReorderEntityList","isExistingAllSelect","typeToBeAdded","existingLeftPinnedList","indexOfInsertion","e","searchKey","String","existingList","filtererdColumnReorderList","columnSelectList","colsList","faAlignJustify","checked","disabled","columHeaderName","subItem","reordered","maxLeftPinnedColumn","chooserDate","pinLeft","wrapperRef","contains","event","setWrapperRef","placeholder","filterColumnReorderList","length","map","color","backend","options","enableMouseEvents","createColumnsArrayFromProps","ColumnReordering","headerKeys","existingPinnedHeadersList","closeColumnReOrdering","handleheaderNameList","updateTableAsPerRowChooser","Card","findCard","moveCard","SortingList","setCards","cards","card","sortsArray","handleReorderListOfSort","rowList","existingSortingOrderList","sortBy","order","sortOn","sortingOrderList","i","JSON","errorMessage","rowsValue","name","row","title","sortingKey","unique","showError","element","reOrderedIndexList","rows","clearAll","App","sortingParamsObjectList","closeSorting","columnFieldValue","clearAllSortingParams","sortingObj","setTableAsPerSortingParams","handleTableSortSwap","downLaodFileType","columnEntityList","existingColumnEntityList","columnVlaueList","keys","Object","filteredColumnVal","columnName","doc","headers","dataValues","content","startY","head","body","wb","Sheets","data","XLSX","SheetNames","excelBuffer","bookType","Blob","FileSaver","fileName","filteredRows","columnValueList","columnsList","columnLength","fileLength","clickTag","warning","filteredRow","columnSearchLogic","closeExport","selectDownLoadType","ExportData","sort_by","DropDownEditor","selectors","Data","swapList","swapSortList","NumericFilter","target","Promise","resolve","to","from","a","newRows","count","pageIndex","action","filter","obj","operation","b","Number","Math","console","applyFormula","filteringRows","tempRows","selectedIndexes","r","rowIndexes","junk","hasFilter","firstPage","subDataSet","rowsRemaining","rw","rowsToSplit","chunks","dtSet","filters","dtRows","result","sortDirection","sortColumn","reorderedSwap","existingColumnsHeaderList","rePositionedArray","inComingColumnsHeaderList","pinnedColumnsList","singleHeaderOneList","headerItem","tempList","pinnedReorder","new_index","arr","k","headerNameList","columnReorderingComponent","searchValue","columnField","sortingPanelComponent","args","sortingOrderSwapList","exportComponent","tableSortList","existingRows","sortingOrderNameList","nameOfItem","rowItem","primer","reverse","existingSortingOrderSwapList","stringOfItemIndex","str","$1","updatedRows","rowSlice","warningStatus","rVal","airportCodes","dataSetVar","height","displayNoRows","searchIconDisplay","pageRowCount","dataSet","topLeft","resizeEvent","textValue","isSorted","rowsToSearch","startsWith","dt","sortFilteredRows","onScroll","handleScroll","srchRows","save","faSave","sortingPanel","faSortAmountDown","columnReorderingPannel","faColumns","exportColumnData","closeWarningStatus","clearSearchValue","toolbar","enableFilter","getValidFilterValues","columnKey","minHeight","rowGetter","rowsCount","onGridRowsUpdated","enableCellSelect","onClearFilters","onColumnResize","idx","onAddFilter","rowSelection","showCheckbox","enableShiftSelect","onRowsSelected","onRowsDeselected","selectBy","indexes","onGridSort","globalSearch","handleWarningStatus","default_cmp","getCmpFunc","cmp","fields","n_fields","arguments","field","A","B","l","Spreadsheet","updateCellData","selectBulkData","globalSearchLogic","setData","CargoData","slice","pageSize","draggable","editor","formulaApplicable","sortable","resizable","filterable","width","filterType","gridHeight","fromRow","toRow","updateType","log","selectedRows","undefined","ReactDOM","render","getElementById"],"mappings":"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CVC,WAAW,EACXC,YAAY,EACZC,MAAO,IACPC,WAAY,sBAEd,CACElR,IAAK,YACLiE,KAAM,YACN0M,WAAW,EACXC,OAAQ,OACRC,mBAAmB,EACnBC,UAAU,EACVC,WAAW,EACXC,YAAY,EACZC,MAAO,IACPC,WAAY,sBAEd,CACElR,IAAK,eACLiE,KAAM,eACN0M,WAAW,EACXC,OAAQ,OACRC,mBAAmB,EACnBC,UAAU,EACVC,WAAW,EACXC,YAAY,EACZC,MAAO,IACPC,WAAY,sBAEd,CACElR,IAAK,YACLiE,KAAM,YACN0M,WAAW,EACXC,OAAQ,OACRC,mBAAmB,EACnBC,UAAU,EACVC,WAAW,EACXC,YAAY,EACZC,MAAO,IACPC,WAAY,sBAEd,CACElR,IAAK,eACLiE,KAAM,eACN0M,WAAW,EACXC,OAAQ,OACRC,mBAAmB,EACnBC,UAAU,EACVC,WAAW,EACXC,YAAY,EACZC,MAAO,IACPC,WAAY,sBAEd,CACElR,IAAK,YACLiE,KAAM,YACN0M,WAAW,EACXC,OAAQ,OACRC,mBAAmB,EACnBC,UAAU,EACVC,WAAW,EACXC,YAAY,EACZC,MAAO,IACPC,WAAY,sBAGd,CACElR,IAAK,KACLiE,KAAM,KACN0M,WAAW,EACXC,OAAQ,OACRC,mBAAmB,EACnBC,UAAU,EACVC,WAAW,EACXC,YAAY,EACZC,MAAO,IACPC,WAAY,sBAEd,CACElR,IAAK,kBACLiE,KAAM,oBACN0M,WAAW,EACXC,OAAQ,OACRC,mBAAmB,EACnBC,UAAU,EACVC,WAAW,EACXC,YAAY,EACZC,MAAO,IACPC,WAAY,sBAEd,CACElR,IAAK,sBACLiE,KAAM,wBACN0M,WAAW,EACXC,OAAQ,OACRC,mBAAmB,EACnBC,UAAU,EACVC,WAAW,EACXC,YAAY,EACZC,MAAO,IACPC,WAAY,uBAgHR3E,aA3GgB,CACtB,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OAsDM4E,WAtdW,OAudXf,eAnDe,SAACgB,EAASC,EAAO1V,EAAO2V,GAC1B,gBAAfA,GACFvI,QAAQwI,IACN,gBACAH,EACA,iBACAzV,EACA,iBACA2V,EACA,cACAD,GAGe,cAAfC,GACFvI,QAAQwI,IACN,WACAH,EACA,SACAC,EACA,iBACA1V,EACA,iBACA2V,IA8BEjB,eAxBe,SAACmB,GACtBzI,QAAQwI,IAAI,gBAAiBC,IAwBvBhQ,oBAldoB,UAsdRiQ,IAATrL,EACF,4CAEA,M,MCleXsL,IAASC,OACL,kBAAC,GAAD,MACFnW,SAASoW,eAAe,W","file":"static/js/main.2ca3eb5a.chunk.js","sourcesContent":["import ReactDataGrid from \"react-data-grid\";\n\nclass ExtDataGrid extends ReactDataGrid {\n  componentDidMount() {\n    this._mounted = true;\n    this.dataGridComponent = document.getElementsByClassName(\n      \"react-grid-Viewport\"\n    )[0];\n\n    window.addEventListener(\"resize\", this.metricsUpdated);\n    if (this.props.cellRangeSelection) {\n      //this.dataGridComponent.addEventListener(\"mouseup\", this.onWindowMouseUp);\n    }\n    this.metricsUpdated();\n  }\n\n  componentWillUnmount() {\n    this._mounted = false;\n    window.removeEventListener(\"resize\", this.metricsUpdated);\n    //this.dataGridComponent.removeEventListener(\"mouseup\", this.onWindowMouseUp);\n  }\n}\n\nexport default ExtDataGrid;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport default class DatePicker extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: new Date(),\n    };\n    //the variable to store component reference\n    this.input = null;\n\n    this.getInputNode = this.getInputNode.bind(this);\n    this.getValue = this.getValue.bind(this);\n    this.onValueChanged = this.onValueChanged.bind(this);\n  }\n\n  //returning the component with the reference, input\n  getInputNode() {\n    return this.input;\n  }\n  //returning updated object with the date value in the required format\n  getValue() {\n    var updated = {};\n    let date;\n    date = new Date(this.state.value);\n    const dateTimeFormat = new Intl.DateTimeFormat(\"en-US\", {\n      year: \"numeric\",\n      month: \"numeric\",\n      day: \"2-digit\",\n    });\n    const [\n      { value: month },\n      ,\n      { value: day },\n      ,\n      { value: year },\n    ] = dateTimeFormat.formatToParts(date);\n    updated[this.props.column.key] = `${year}-${month}-${day}`;\n    return updated;\n  }\n\n  onValueChanged(ev) {\n    this.setState({ value: ev.target.value });\n  }\n\n  render() {\n    return (\n      <div>\n        <input\n          type=\"date\"\n          ref={(ref) => {\n            this.input = ref;\n          }}\n          value={this.state.value}\n          onChange={this.onValueChanged}\n        />\n      </div>\n    );\n  }\n}\n\nDatePicker.propTypes = {\n  column: PropTypes.string,\n};\n","export const SEARCH_NOT_FOUNT_ERROR = \"No Records found!\";\r\n","import React, { useState, useEffect } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport { SEARCH_NOT_FOUNT_ERROR } from \"./ErrorConstants\";\n\nconst ErrorMessage = (props) => {\n  const [status, setStatus] = useState(props.status);\n  useEffect(() => {\n    setStatus(props.status);\n  }, [props.status]);\n  if (status === \"invalid\") {\n    return (\n      <div id=\"errorMsg\">\n        <div className=\"alert alert-danger\" role=\"alert\">\n          {SEARCH_NOT_FOUNT_ERROR}\n        </div>\n        <div className=\"notification-close\">\n          <FontAwesomeIcon\n            icon={faTimes}\n            onClick={() => {\n              props.closeWarningStatus();\n              props.clearSearchValue();\n            }}\n          />\n        </div>\n      </div>\n    );\n  } else return <div></div>;\n};\nexport default ErrorMessage;\n","export const ItemTypes = {\r\n    COLUMN: \"column\"\r\n};\r\n","import React from \"react\";\r\nimport { useDrag, useDrop } from \"react-dnd\";\r\nimport { ItemTypes } from \"./ItemTypes\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst style = {\r\n  cursor: \"move\",\r\n};\r\n\r\nconst ColumnItem = ({ id, text, moveColumn, findColumn }) => {\r\n  const originalIndex = findColumn(id).index;\r\n\r\n  const [{ isDragging }, drag] = useDrag({\r\n    item: { type: ItemTypes.COLUMN, id, originalIndex },\r\n    collect: (monitor) => ({\r\n      isDragging: monitor.isDragging(),\r\n    }),\r\n    end: (dropResult, monitor) => {\r\n      const { id: droppedId, originalIndex } = monitor.getItem();\r\n      const didDrop = monitor.didDrop();\r\n      if (!didDrop) {\r\n        moveColumn(droppedId, originalIndex);\r\n      }\r\n    },\r\n  });\r\n\r\n  const [, drop] = useDrop({\r\n    accept: ItemTypes.COLUMN,\r\n    canDrop: () => false,\r\n    hover({ id: draggedId }) {\r\n      if (draggedId !== id) {\r\n        const { index: overIndex } = findColumn(id);\r\n        moveColumn(draggedId, overIndex);\r\n      }\r\n    },\r\n  });\r\n\r\n  const opacity = isDragging ? 0.1 : 1;\r\n\r\n  return (\r\n    <div ref={(node) => drag(drop(node))} style={{ ...style, opacity }}>\r\n      {text}\r\n    </div>\r\n  );\r\n};\r\n\r\nColumnItem.propTypes = {\r\n  id: PropTypes.any,\r\n  text: PropTypes.any,\r\n  moveColumn: PropTypes.any,\r\n  findColumn: PropTypes.any,\r\n};\r\n\r\nexport default ColumnItem;\r\n","import React, { useState } from \"react\";\r\nimport { useDrop } from \"react-dnd\";\r\nimport update from \"immutability-helper\";\r\nimport { ItemTypes } from \"./ItemTypes\";\r\nimport ColumnItem from \"./columnItem\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ColumnsList = (props) => {\r\n  const [columns, setColumns] = useState([...props.columnsArray]);\r\n\r\n  const moveColumn = (id, atIndex) => {\r\n    const { column, index } = findColumn(id);\r\n    setColumns(\r\n      update(columns, {\r\n        $splice: [\r\n          [index, 1],\r\n          [atIndex, 0, column],\r\n        ],\r\n      })\r\n    );\r\n    let values = [];\r\n    let temp = [];\r\n    temp = update(columns, {\r\n      $splice: [\r\n        [index, 1],\r\n        [atIndex, 0, column],\r\n      ],\r\n    });\r\n    temp.forEach((item) => {\r\n      values.push(item.id);\r\n    });\r\n    props.handleReorderList(values);\r\n  };\r\n\r\n  const findColumn = (id) => {\r\n    const column = columns.filter((c) => `${c.id}` === id)[0];\r\n    return {\r\n      column,\r\n      index: columns.indexOf(column),\r\n    };\r\n  };\r\n\r\n  const [, drop] = useDrop({ accept: ItemTypes.COLUMN });\r\n\r\n  React.useEffect(() => {\r\n    setColumns(props.columnsArray);\r\n  }, [props.columnsArray]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div ref={drop} style={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n        {columns.map((column) => (\r\n          <ColumnItem\r\n            key={column.id}\r\n            id={`${column.id}`}\r\n            text={column.text}\r\n            moveColumn={moveColumn}\r\n            findColumn={findColumn}\r\n          />\r\n        ))}\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nColumnsList.propTypes = {\r\n  columnsArray: PropTypes.any,\r\n  handleReorderList: PropTypes.any,\r\n};\r\n\r\nexport default ColumnsList;\r\n","import React from \"react\";\n\nimport { DndProvider } from \"react-dnd\";\nimport { TouchBackend } from \"react-dnd-touch-backend\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTimes, faAlignJustify } from \"@fortawesome/free-solid-svg-icons\";\nimport ColumnsList from \"./columnsList\";\nimport PropTypes from \"prop-types\";\n\nclass ColumnReordering extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columnReorderEntityList: this.props.headerKeys,\n      columnSelectList: this.props.columns.map((item) => item.name),\n      leftPinnedColumList: this.props.existingPinnedHeadersList,\n      isAllSelected: true,\n      maxLeftPinnedColumn: this.props.maxLeftPinnedColumn,\n      chooserDate: {\n        column: \"\",\n        pinLeft: false,\n      },\n    };\n    this.setWrapperRef = this.setWrapperRef.bind(this);\n    this.handleClickOutside = this.handleClickOutside.bind(this);\n  }\n  componentDidMount() {\n    document.addEventListener(\"mousedown\", this.handleClickOutside);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"mousedown\", this.handleClickOutside);\n  }\n\n  setWrapperRef(node) {\n    this.wrapperRef = node;\n  }\n\n  handleClickOutside(event) {\n    if (this.wrapperRef && !this.wrapperRef.contains(event.target)) {\n      this.props.closeColumnReOrdering();\n    }\n  }\n\n  /**\n   * Method to reset the coloumn list onClick of Reset button\n   */\n  resetColumnReorderList = () => {\n    this.setState({\n      columnReorderEntityList: this.props.columns.map((item) => item.name),\n      leftPinnedColumList: [],\n      isAllSelected: true,\n    });\n  };\n\n  /**\n   * Method to Select all options in the coloumn list onClick of Select All button\n   */\n  selectAllToColumnReOrderList = () => {\n    this.resetColumnReorderList();\n    var existingColumnReorderEntityList = this.state.columnReorderEntityList;\n    var isExistingAllSelect = this.state.isAllSelected;\n    if (!isExistingAllSelect) {\n      existingColumnReorderEntityList = this.props.columns.map(\n        (item) => item.name\n      );\n      isExistingAllSelect = true;\n    } else {\n      existingColumnReorderEntityList = [];\n      isExistingAllSelect = false;\n    }\n    this.setState({\n      columnReorderEntityList: existingColumnReorderEntityList,\n      isAllSelected: isExistingAllSelect,\n      leftPinnedColumList: [],\n    });\n  };\n\n  /**\n   * Method To add a column to columnReorderEntityList when selected.\n   * @param {String} typeToBeAdded\n   */\n  addToColumnReorderEntityList = (typeToBeAdded) => {\n    var existingColumnReorderEntityList = this.state.columnReorderEntityList;\n    var existingLeftPinnedList = this.state.leftPinnedColumList;\n    if (!existingColumnReorderEntityList.includes(typeToBeAdded)) {\n      var indexOfInsertion = this.state.columnSelectList.findIndex(\n        (item) => item === typeToBeAdded\n      );\n      while (indexOfInsertion > 0) {\n        if (\n          existingColumnReorderEntityList.includes(\n            this.state.columnSelectList[indexOfInsertion - 1]\n          )\n        ) {\n          if (\n            !existingLeftPinnedList.includes(\n              this.state.columnSelectList[indexOfInsertion - 1]\n            )\n          ) {\n            indexOfInsertion = existingColumnReorderEntityList.findIndex(\n              (item) =>\n                item === this.state.columnSelectList[indexOfInsertion - 1]\n            );\n            indexOfInsertion = indexOfInsertion + 1;\n            break;\n          } else {\n            indexOfInsertion = indexOfInsertion - 1;\n          }\n        } else {\n          indexOfInsertion = indexOfInsertion - 1;\n        }\n      }\n      existingColumnReorderEntityList.splice(\n        indexOfInsertion,\n        0,\n        typeToBeAdded\n      );\n    } else {\n      existingColumnReorderEntityList = existingColumnReorderEntityList.filter(\n        (item) => {\n          if (item !== typeToBeAdded) return item;\n        }\n      );\n      if (existingLeftPinnedList.includes(typeToBeAdded)) {\n        existingLeftPinnedList = existingLeftPinnedList.filter(\n          (item) => item !== typeToBeAdded\n        );\n      }\n    }\n    this.setState({\n      columnReorderEntityList: existingColumnReorderEntityList,\n      isAllSelected: false,\n      leftPinnedColumList: existingLeftPinnedList,\n    });\n  };\n\n  /**\n   * Method to handle the like-search on key stroke.\n   * @param {Event} e\n   */\n  filterColumnReorderList = (e) => {\n    var searchKey = String(e.target.value).toLowerCase();\n    var existingList = this.props.columns.map((item) => item.name);\n    let filtererdColumnReorderList = [];\n    if (searchKey.length > 0) {\n      filtererdColumnReorderList = existingList.filter((item) => {\n        return item.toLowerCase().includes(searchKey);\n      });\n    } else {\n      filtererdColumnReorderList = this.props.columns.map((item) => item.name);\n    }\n    this.setState({\n      columnSelectList: filtererdColumnReorderList,\n    });\n  };\n\n  createColumnsArrayFromProps = (colsList) => {\n    return colsList.map((item) => {\n      return {\n        id: item,\n        text: (\n          <div className=\"column__reorder\" key={item}>\n            <div className=\"\">\n              <FontAwesomeIcon icon={faAlignJustify}></FontAwesomeIcon>\n            </div>\n            <div className=\"column__reorder__name\">{item}</div>\n            <div className=\"column__wrap\">\n              <div className=\"column__checkbox\">\n                <input\n                  role=\"check1\"\n                  type=\"checkbox\"\n                  id={\"checkBoxToPinLeft_\" + item}\n                  checked={this.state.leftPinnedColumList.includes(item)}\n                  disabled={\n                    this.state.maxLeftPinnedColumn -\n                      this.state.leftPinnedColumList.length <=\n                    0\n                      ? this.state.leftPinnedColumList.includes(item)\n                        ? false\n                        : true\n                      : false\n                  }\n                  onChange={() => this.reArrangeLeftPinnedColumn(item)}\n                ></input>\n              </div>\n              <div className=\"column__txt\">Pin Left</div>\n            </div>\n          </div>\n        ),\n      };\n    });\n  };\n\n  /**\n   * Method to handle the position of columns Names when left pinned in coloumn selector view.\n   * @param {String} columHeaderName\n   */\n  reArrangeLeftPinnedColumn = (columHeaderName) => {\n    var existingLeftPinnedList = this.state.leftPinnedColumList;\n    var existingColumnReorderEntityList = this.state.columnReorderEntityList;\n    if (!existingLeftPinnedList.includes(columHeaderName)) {\n      existingLeftPinnedList.unshift(columHeaderName);\n    } else {\n      existingLeftPinnedList = existingLeftPinnedList.filter(\n        (item) => item !== columHeaderName\n      );\n    }\n    this.setState({\n      leftPinnedColumList: existingLeftPinnedList,\n    });\n\n    existingLeftPinnedList.map((item) => {\n      existingColumnReorderEntityList = existingColumnReorderEntityList.filter(\n        (subItem) => subItem !== item\n      );\n      existingColumnReorderEntityList.unshift(item);\n    });\n    this.setState({\n      columnReorderEntityList: existingColumnReorderEntityList,\n    });\n  };\n\n  handleReorderList = (reordered) => {\n    this.props.handleheaderNameList(reordered);\n  };\n\n  render() {\n    return (\n      <div className=\"columns--grid\" ref={this.setWrapperRef}>\n        <div className=\"column__grid\">\n          <div className=\"column__chooser\">\n            <div className=\"column__header\">\n              <div className=\"\">\n                <strong>Column Chooser</strong>\n              </div>\n            </div>\n            <div className=\"column__body\">\n              <div>\n                <input\n                  type=\"text\"\n                  placeholder=\"Search column\"\n                  className=\"custom__ctrl\"\n                  onChange={this.filterColumnReorderList}\n                ></input>\n              </div>\n              <div className=\"column__wrap column__headertxt\">\n                <div className=\"column__checkbox\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"selectallcolumncheckbox\"\n                    onChange={() => this.selectAllToColumnReOrderList()}\n                    checked={\n                      this.state.columnReorderEntityList.length ===\n                      this.props.columns.length\n                    }\n                  />\n                </div>\n                <div className=\"column__txt\">Select all</div>\n              </div>\n              {this.state.columnSelectList.map((item) => {\n                return (\n                  <div className=\"column__wrap\" key={item}>\n                    <div className=\"column__checkbox\">\n                      <input\n                        type=\"checkbox\"\n                        id={\"checkboxtoselectreorder_\" + item}\n                        checked={this.state.columnReorderEntityList.includes(\n                          item\n                        )}\n                        onChange={() => this.addToColumnReorderEntityList(item)}\n                      ></input>\n                    </div>\n                    <div className=\"column__txt\">{item}</div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n          <div className=\"column__settings\">\n            <div className=\"column__header\">\n              <div className=\"column__headerTxt\">\n                <strong>Column Setting</strong>\n              </div>\n              <div className=\"column__close\">\n                <FontAwesomeIcon\n                  className=\"icon-close\"\n                  icon={faTimes}\n                  onClick={() => this.props.closeColumnReOrdering()}\n                ></FontAwesomeIcon>\n              </div>\n            </div>\n            <div className=\"column__header\">\n              <div className=\"column__headerTxt\">\n                <strong>\n                  &nbsp; &nbsp; Selected Column Count :{\" \"}\n                  {this.state.columnReorderEntityList.length}\n                </strong>\n              </div>\n              <div className=\"column__headerTxt\">\n                {this.state.maxLeftPinnedColumn -\n                  this.state.leftPinnedColumList.length >\n                0 ? (\n                  <strong>\n                    &nbsp; &nbsp; Left Pinned Column Count Remaining :{\" \"}\n                    {this.state.maxLeftPinnedColumn -\n                      this.state.leftPinnedColumList.length}\n                  </strong>\n                ) : (\n                  <strong style={{ color: \"red\" }}>\n                    &nbsp; &nbsp; Maximum Count Of Left Pin Columns REACHED\n                  </strong>\n                )}\n              </div>\n            </div>\n            <div className=\"column__body\">\n              <DndProvider\n                backend={TouchBackend}\n                options={{ enableMouseEvents: true }}\n              >\n                <ColumnsList\n                  columnsArray={this.createColumnsArrayFromProps(\n                    this.state.columnReorderEntityList\n                  )}\n                  handleReorderList={this.handleReorderList}\n                />\n              </DndProvider>\n            </div>\n            <div className=\"column__footer\">\n              <div className=\"column__btns\">\n                <button\n                  className=\"btns\"\n                  onClick={() => this.resetColumnReorderList()}\n                >\n                  Reset\n                </button>\n                <button\n                  className=\"btns\"\n                  onClick={() => this.props.closeColumnReOrdering()}\n                >\n                  Cancel\n                </button>\n                <button\n                  className=\"btns btns__save\"\n                  onClick={() =>\n                    this.props.updateTableAsPerRowChooser(\n                      this.state.columnReorderEntityList,\n                      this.state.leftPinnedColumList\n                    )\n                  }\n                >\n                  Save\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nColumnReordering.propTypes = {\n  headerKeys: PropTypes.any,\n  columns: PropTypes.any,\n  existingPinnedHeadersList: PropTypes.any,\n  maxLeftPinnedColumn: PropTypes.any,\n  closeColumnReOrdering: PropTypes.any,\n  handleheaderNameList: PropTypes.any,\n  updateTableAsPerRowChooser: PropTypes.any,\n};\n\nexport default ColumnReordering;\n","export const ItemTypes = {\n  CARD: \"sort\",\n};\n","import React from \"react\";\nimport { useDrag, useDrop } from \"react-dnd\";\nimport { ItemTypes } from \"./ItemTypes\";\nimport PropTypes from \"prop-types\";\n\nconst style = {\n  cursor: \"move\",\n};\n\nconst Card = ({ id, text, moveCard, findCard }) => {\n  const originalIndex = findCard(id).index;\n\n  const [{ isDragging }, drag] = useDrag({\n    item: { type: ItemTypes.CARD, id, originalIndex },\n    collect: (monitor) => ({\n      isDragging: monitor.isDragging(),\n    }),\n    end: (dropResult, monitor) => {\n      const { id: droppedId, originalIndex } = monitor.getItem();\n      const didDrop = monitor.didDrop();\n      if (!didDrop) {\n        moveCard(droppedId, originalIndex);\n      }\n    },\n  });\n\n  const [, drop] = useDrop({\n    accept: ItemTypes.CARD,\n    canDrop: () => false,\n    hover({ id: draggedId }) {\n      if (draggedId !== id) {\n        const { index: overIndex } = findCard(id);\n        moveCard(draggedId, overIndex);\n      }\n    },\n  });\n\n  const opacity = isDragging ? 0.5 : 1;\n\n  return (\n    <div ref={(node) => drag(drop(node))} style={{ ...style, opacity }}>\n      {text}\n    </div>\n  );\n};\n\nCard.propTypes = {\n  id: PropTypes.any,\n  text: PropTypes.any,\n  moveCard: PropTypes.any,\n  findCard: PropTypes.any,\n};\n\nexport default Card;\n","import React, { useState } from \"react\";\nimport { useDrop } from \"react-dnd\";\nimport Card from \"./SortItem\";\nimport update from \"immutability-helper\";\nimport { ItemTypes } from \"./ItemTypes\";\nimport PropTypes from \"prop-types\";\n\nconst SortingList = (props) => {\n  const [cards, setCards] = useState([...props.sortsArray]);\n\n  const moveCard = (id, atIndex) => {\n    const { card, index } = findCard(id);\n    setCards(\n      update(cards, {\n        $splice: [\n          [index, 1],\n          [atIndex, 0, card],\n        ],\n      })\n    );\n\n    let values = [];\n    let temp = [];\n    temp = update(cards, {\n      $splice: [\n        [index, 1],\n        [atIndex, 0, card],\n      ],\n    });\n    temp.forEach((item) => {\n      values.push(item.id);\n    });\n    props.handleReorderListOfSort(values);\n  };\n\n  const findCard = (id) => {\n    const card = cards.filter((c) => `${c.id}` === id)[0];\n    return {\n      card,\n      index: cards.indexOf(card),\n    };\n  };\n\n  const [, drop] = useDrop({ accept: ItemTypes.CARD });\n\n  React.useEffect(() => {\n    setCards(props.sortsArray);\n  }, [props.sortsArray]);\n\n  return (\n    <React.Fragment>\n      <div ref={drop} style={{ display: \"flex\", flexWrap: \"wrap\" }}>\n        {cards.map((card) => (\n          <Card\n            key={card.id}\n            id={`${card.id}`}\n            text={card.text}\n            moveCard={moveCard}\n            findCard={findCard}\n          />\n        ))}\n      </div>\n    </React.Fragment>\n  );\n};\n\nSortingList.propTypes = {\n  sortsArray: PropTypes.any,\n  handleReorderListOfSort: PropTypes.any,\n};\n\nexport default SortingList;\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faTimes,\n  faAlignJustify,\n  faTrash,\n  faPlus,\n  faCopy,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { DndProvider } from \"react-dnd\";\nimport { TouchBackend } from \"react-dnd-touch-backend\";\nimport SortingList from \"./SortingList\";\nimport PropTypes from \"prop-types\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rowList: [true],\n      rows: [],\n      sortingOrderList:\n        this.props.sortingParamsObjectList === undefined\n          ? []\n          : this.props.sortingParamsObjectList,\n      errorMessage: false,\n    };\n    this.setWrapperRef = this.setWrapperRef.bind(this);\n    this.handleClickOutside = this.handleClickOutside.bind(this);\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"mousedown\", this.handleClickOutside);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"mousedown\", this.handleClickOutside);\n  }\n\n  setWrapperRef(node) {\n    this.wrapperRef = node;\n  }\n\n  handleClickOutside(event) {\n    if (this.wrapperRef && !this.wrapperRef.contains(event.target)) {\n      this.props.closeSorting();\n    }\n  }\n\n  add = () => {\n    let rowList = [...this.state.rowList];\n    rowList.push(true);\n    var existingSortingOrderList = this.state.sortingOrderList;\n    existingSortingOrderList.push({\n      sortBy: this.props.columnFieldValue[0],\n      order: \"Ascending\",\n      sortOn: \"Value\",\n    });\n    this.setState({\n      rowList,\n      sortingOrderList: existingSortingOrderList,\n    });\n  };\n\n  copy = (i) => {\n    let rowList = [...this.state.sortingOrderList];\n    rowList.push(JSON.parse(JSON.stringify(rowList[i])));\n    this.setState({ sortingOrderList: rowList });\n  };\n\n  clearAll = () => {\n    this.setState({ sortingOrderList: [], errorMessage: false });\n    this.props.clearAllSortingParams();\n  };\n\n  remove = (i) => {\n    let sortingOrderList = [...this.state.sortingOrderList];\n    sortingOrderList.splice(i, 1);\n    this.setState({ sortingOrderList });\n    if (sortingOrderList.length <= 1) {\n      this.setState({ errorMessage: false });\n    }\n  };\n\n  createColumnsArrayFromProps = (rowsValue) => {\n    return rowsValue.map((row, index) => {\n      return {\n        id: index,\n        text: (\n          <div className=\"sort__bodyContent\" key={index}>\n            <div className=\"sort__reorder\">\n              <div className=\"\">\n                <div>&nbsp;</div>\n              </div>\n\n              <div className=\"sort__icon\">\n                <FontAwesomeIcon icon={faAlignJustify}></FontAwesomeIcon>\n              </div>\n            </div>\n\n            <div className=\"sort__reorder\">\n              <div className=\"\">\n                <div>Sort by</div>\n              </div>\n\n              <div className=\"sort__file\">\n                <select\n                  className=\"custom__ctrl\"\n                  name={\"sortBy\"}\n                  onChange={(e) =>\n                    this.captureSortingFeildValues(e, index, \"sortBy\")\n                  }\n                  value={row.sortBy}\n                >\n                  {this.props.columnFieldValue.map((item, index) => (\n                    <option key={index}>{item}</option>\n                  ))}\n                </select>\n              </div>\n            </div>\n\n            <div className=\"sort__reorder\">\n              <div className=\"\">\n                <div>Sort on</div>\n              </div>\n\n              <div className=\"sort__file\">\n                <select\n                  className=\"custom__ctrl\"\n                  name={\"sortOn\"}\n                  onChange={(e) =>\n                    this.captureSortingFeildValues(e, index, \"sortOn\")\n                  }\n                  value={row.sortOn}\n                >\n                  <option>Value</option>\n                </select>\n              </div>\n            </div>\n\n            <div className=\"sort__reorder\">\n              <div className=\"\">\n                <div>Order</div>\n              </div>\n\n              <div className=\"sort__file\">\n                <select\n                  className=\"custom__ctrl\"\n                  name={\"order\"}\n                  onChange={(e) =>\n                    this.captureSortingFeildValues(e, index, \"order\")\n                  }\n                  value={row.order}\n                >\n                  <option>Ascending</option>\n                  <option>Descending</option>\n                </select>\n              </div>\n            </div>\n\n            <div className=\"sort__reorder\">\n              <div className=\"\">\n                <div>&nbsp;</div>\n              </div>\n\n              <div className=\"sort__icon\">\n                <FontAwesomeIcon\n                  icon={faCopy}\n                  title=\"Copy\"\n                  onClick={() => this.copy(index)}\n                ></FontAwesomeIcon>\n              </div>\n            </div>\n\n            <div className=\"sort__reorder\">\n              <div className=\"\">\n                <div>&nbsp;</div>\n              </div>\n\n              <div className=\"sort__icon\">\n                <FontAwesomeIcon\n                  icon={faTrash}\n                  title=\"Delete\"\n                  onClick={() => this.remove(index)}\n                ></FontAwesomeIcon>\n              </div>\n            </div>\n          </div>\n        ),\n      };\n    });\n  };\n\n  captureSortingFeildValues = (event, index, sortingKey) => {\n    var existingSortingOrderList = this.state.sortingOrderList;\n\n    if (sortingKey === \"sortBy\") {\n      existingSortingOrderList[index][\"sortBy\"] = event.target.value;\n    }\n    if (sortingKey === \"order\") {\n      existingSortingOrderList[index][\"order\"] = event.target.value;\n    }\n    if (\n      existingSortingOrderList[index][\"sortOn\"] === \"\" ||\n      existingSortingOrderList[index][\"sortOn\"] === undefined\n    ) {\n      existingSortingOrderList[index][\"sortOn\"] = \"Value\";\n    }\n    this.setState({\n      sortingOrderList: existingSortingOrderList,\n    });\n  };\n\n  updateTableAsPerSortCondition = () => {\n    const unique = new Set();\n    const showError = this.state.sortingOrderList.some(\n      (element) => unique.size === unique.add(element.sortBy).size\n    );\n    showError\n      ? this.setState({\n          errorMessage: true,\n        })\n      : this.setState({\n          errorMessage: false,\n        });\n    !showError\n      ? this.props.setTableAsPerSortingParams(this.state.sortingOrderList)\n      : \"\";\n  };\n\n  /**\n   *\n   * @param {*} reOrderedSortingList\n   */\n  handleReorderListOfSort = (reOrderedIndexList) => {\n    this.props.handleTableSortSwap(reOrderedIndexList);\n  };\n\n  render() {\n    return (\n      <div className=\"sorts--grid\" ref={this.setWrapperRef}>\n        <div className=\"sort__grid\">\n          <div className=\"sort__settings\">\n            <div className=\"sort__header\">\n              <div className=\"sort__headerTxt\">\n                <strong>Sort </strong>\n              </div>\n\n              <div className=\"sort__close\">\n                <FontAwesomeIcon\n                  className=\"icon-close\"\n                  icon={faTimes}\n                  onClick={(e) => this.props.closeSorting()}\n                ></FontAwesomeIcon>\n              </div>\n            </div>\n\n            <div className=\"sort__body\">\n              <DndProvider\n                backend={TouchBackend}\n                options={{ enableMouseEvents: true }}\n              >\n                <SortingList\n                  handleReorderListOfSort={this.handleReorderListOfSort}\n                  sortsArray={this.createColumnsArrayFromProps(\n                    this.state.sortingOrderList\n                  )}\n                />\n              </DndProvider>\n              <div className=\"sort-warning\">\n                {this.state.errorMessage ? (\n                  <span className=\"alert alert-danger\">\n                    Sort by opted are same, Please choose different one.\n                  </span>\n                ) : (\n                  \"\"\n                )}\n              </div>\n            </div>\n            <div className=\"sort__new\">\n              <div className=\"sort__section\">\n                <FontAwesomeIcon\n                  icon={faPlus}\n                  className=\"sort__icon\"\n                ></FontAwesomeIcon>\n\n                <div className=\"sort__txt\" onClick={() => this.add()}>\n                  New Sort\n                </div>\n              </div>\n            </div>\n            <div className=\"sort__footer\">\n              <div className=\"sort__btns\">\n                <button className=\"btns\" onClick={this.clearAll}>\n                  Clear All\n                </button>\n\n                <button\n                  className=\"btns btns__save\"\n                  onClick={() => this.updateTableAsPerSortCondition()}\n                >\n                  Ok\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nApp.propTypes = {\n  sortingParamsObjectList: PropTypes.any,\n  closeSorting: PropTypes.any,\n  columnFieldValue: PropTypes.any,\n  clearAllSortingParams: PropTypes.any,\n  sortingObj: PropTypes.any,\n  setTableAsPerSortingParams: PropTypes.any,\n  handleTableSortSwap: PropTypes.any,\n  rowList: PropTypes.any,\n};\n\nexport default App;\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faTimes,\n  faFilePdf,\n  faFileExcel,\n  faFileCsv,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport jsPDF from \"jspdf\";\nimport \"jspdf-autotable\";\nimport * as FileSaver from \"file-saver\";\nimport * as XLSX from \"xlsx\";\nimport PropTypes from \"prop-types\";\n\nlet downLaodFileType = [];\nclass ExportData extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columnValueList: this.props.columnsList,\n      columnEntityList: this.props.columnsList,\n      isAllSelected: true,\n      downLaodFileType: [],\n      filteredRow: [],\n      warning: \"\",\n      clickTag: \"none\",\n    };\n    this.setWrapperRef = this.setWrapperRef.bind(this);\n    this.handleClickOutside = this.handleClickOutside.bind(this);\n    this.selectDownLoadType = this.selectDownLoadType.bind(this);\n    this.exportValidation = this.exportValidation.bind(this);\n  }\n  componentDidMount() {\n    document.addEventListener(\"mousedown\", this.handleClickOutside);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"mousedown\", this.handleClickOutside);\n  }\n\n  setWrapperRef(node) {\n    this.wrapperRef = node;\n  }\n\n  handleClickOutside(event) {\n    if (this.wrapperRef && !this.wrapperRef.contains(event.target)) {\n      this.props.closeExport();\n    }\n  }\n\n  resetColumnExportList = () => {\n    this.setState({\n      columnEntityList: [],\n      isAllSelected: false,\n    });\n  };\n\n  selectAllToColumnList = () => {\n    this.resetColumnExportList();\n    this.setState({\n      columnEntityList: !this.state.isAllSelected ? this.props.columnsList : [],\n      isAllSelected: !this.state.isAllSelected,\n    });\n  };\n\n  addToColumnEntityList = (typeToBeAdded) => {\n    var existingColumnEntityList = this.state.columnEntityList;\n    if (!existingColumnEntityList.includes(typeToBeAdded)) {\n      existingColumnEntityList.push(typeToBeAdded);\n    } else {\n      existingColumnEntityList = existingColumnEntityList.filter((item) => {\n        return item !== typeToBeAdded;\n      });\n    }\n    this.setState({\n      columnEntityList: existingColumnEntityList,\n      isAllSelected: false,\n    });\n  };\n\n  selectDownLoadType = (event) => {\n    if (\n      event.target.checked &&\n      !this.state.downLaodFileType.includes(event.target.value)\n    ) {\n      downLaodFileType.push(event.target.value);\n      this.setState({ downLaodFileType });\n    } else {\n      downLaodFileType.map(function (value, index) {\n        if (value === event.target.value) {\n          downLaodFileType = downLaodFileType.splice(index, value);\n        }\n      });\n      this.setState({ downLaodFileType });\n    }\n  };\n\n  exportRowData = () => {\n    const columnVlaueList = this.state.columnEntityList;\n    if (columnVlaueList.length > 0 && this.state.downLaodFileType.length > 0) {\n      this.props.rows.forEach((row) => {\n        const keys = Object.getOwnPropertyNames(row);\n        var filteredColumnVal = {};\n        keys.forEach(function (key) {\n          columnVlaueList.forEach((columnName) => {\n            if (columnName.key === key) filteredColumnVal[key] = row[key];\n          });\n        });\n        this.state.filteredRow.push(filteredColumnVal);\n      });\n\n      this.state.downLaodFileType.map((item) => {\n        if (item === \"pdf\") this.downloadPDF();\n        else if (item === \"excel\") this.downloadXLSFile();\n        else this.downloadCSVFile();\n      });\n    }\n  };\n\n  downloadPDF = () => {\n    const unit = \"pt\";\n    const size = \"A4\"; // Use A1, A2, A3 or A4\n    const orientation = \"landscape\"; // portrait or landscape\n\n    const marginLeft = 300;\n    const doc = new jsPDF(orientation, unit, size);\n\n    doc.setFontSize(15);\n\n    const title = \"iCargo Report\";\n    const headers = [\n      this.state.columnEntityList.map((column) => {\n        return column.name;\n      }),\n    ];\n    var dataValues = [];\n    this.props.rows.forEach((row) => {\n      const keys = Object.keys(row);\n      var filteredColumnVal = [];\n      this.state.columnEntityList.forEach((columnName) => {\n        keys.forEach((key) => {\n          if (columnName.key === key) filteredColumnVal.push(row[key]);\n        });\n      });\n      dataValues.push(filteredColumnVal);\n    });\n\n    let content = {\n      startY: 50,\n      head: headers,\n      body: dataValues,\n    };\n\n    doc.text(title, marginLeft, 40);\n    doc.autoTable(content);\n    doc.save(\"report.pdf\");\n  };\n\n  downloadCSVFile = () => {\n    const fileType =\n      \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\n    const fileExtension = \".csv\";\n    const fileName = \"CSVDownload\";\n    const ws = XLSX.utils.json_to_sheet(this.state.filteredRow);\n    const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\n    const excelBuffer = XLSX.write(wb, { bookType: \"csv\", type: \"array\" });\n    const data = new Blob([excelBuffer], { type: fileType });\n    FileSaver.saveAs(data, fileName + fileExtension);\n  };\n\n  downloadXLSFile = () => {\n    const fileType =\n      \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\n    const fileExtension = \".xlsx\";\n    const fileName = \"XLSXDownload\";\n    const ws = XLSX.utils.json_to_sheet(this.state.filteredRow);\n    const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\n    const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\n    const data = new Blob([excelBuffer], { type: fileType });\n    FileSaver.saveAs(data, fileName + fileExtension);\n  };\n\n  columnSearchLogic = (e) => {\n    const searchKey = String(e.target.value).toLowerCase();\n    let filteredRows = this.props.columnsList.filter((item) => {\n      return item.name.toLowerCase().includes(searchKey);\n    });\n    if (!filteredRows.length) {\n      this.setState({ columnValueList: this.props.columnsList });\n    } else {\n      this.setState({ columnValueList: filteredRows });\n    }\n  };\n\n  exportValidation = () => {\n    let columnLength = this.state.columnEntityList.length;\n    let fileLength = this.state.downLaodFileType.length;\n    if (columnLength > 0 && fileLength > 0) {\n      this.exportRowData();\n      this.setState({ clickTag: \"none\" });\n    } else if (columnLength === 0) {\n      this.setState({ warning: \"Column\" });\n      this.setState({ clickTag: \"\" });\n    } else if (fileLength === 0) {\n      this.setState({ warning: \"File Type\" });\n      this.setState({ clickTag: \"\" });\n    }\n    if (columnLength === 0 && fileLength === 0) {\n      this.setState({ warning: \"File Type & Column\" });\n      this.setState({ clickTag: \"\" });\n    }\n  };\n  render() {\n    return (\n      <div className=\"exports--grid\" ref={this.setWrapperRef}>\n        <div className=\"export__grid\">\n          <div className=\"export__chooser\">\n            <div className=\"export__header\">\n              <div className=\"\">\n                <strong>Export Data</strong>\n              </div>\n            </div>\n            <div className=\"export__body\">\n              <div>\n                <input\n                  type=\"text\"\n                  placeholder=\"Search export\"\n                  className=\"custom__ctrl\"\n                  onChange={this.columnSearchLogic}\n                ></input>\n              </div>\n              <div className=\"export__wrap export__headertxt\">\n                <div className=\"export__checkbox\">\n                  <input\n                    className=\"selectColumn\"\n                    type=\"checkbox\"\n                    onChange={() => this.selectAllToColumnList()}\n                    checked={this.state.isAllSelected}\n                  />\n                </div>\n                <div className=\"export__txt\">Select All</div>\n              </div>\n              {this.state.columnValueList &&\n              this.state.columnValueList.length > 0\n                ? this.state.columnValueList.map((column) => {\n                    return (\n                      <div className=\"export__wrap\" key={column.key}>\n                        <div className=\"export__checkbox\">\n                          <input\n                            type=\"checkbox\"\n                            checked={this.state.columnEntityList.includes(\n                              column\n                            )}\n                            onChange={() => this.addToColumnEntityList(column)}\n                          ></input>\n                        </div>\n                        <div className=\"export__txt\">{column.name}</div>\n                      </div>\n                    );\n                  })\n                : \"\"}\n            </div>\n          </div>\n          <div className=\"export__settings\">\n            <div className=\"export__header\">\n              <div className=\"export__headerTxt\"></div>\n              <div className=\"export__close\">\n                <FontAwesomeIcon\n                  icon={faTimes}\n                  className=\"icon-close\"\n                  onClick={this.props.closeExport}\n                ></FontAwesomeIcon>\n              </div>\n            </div>\n            <div className=\"export__as\">Export as</div>\n            <div className=\"export__body\">\n              <div className=\"export__reorder\">\n                <div className=\"\">\n                  <input\n                    type=\"checkbox\"\n                    name=\"pdf\"\n                    value=\"pdf\"\n                    onChange={this.selectDownLoadType}\n                  ></input>\n                </div>\n                <div className=\"export__file\">\n                  <FontAwesomeIcon\n                    icon={faFilePdf}\n                    className=\"temp\"\n                  ></FontAwesomeIcon>\n                </div>\n              </div>\n              <div className=\"export__reorder\">\n                <div className=\"\">\n                  <input\n                    type=\"checkbox\"\n                    name=\"excel\"\n                    value=\"excel\"\n                    onChange={this.selectDownLoadType}\n                  ></input>\n                </div>\n                <div className=\"export__file\">\n                  <FontAwesomeIcon\n                    icon={faFileExcel}\n                    className=\"temp\"\n                  ></FontAwesomeIcon>\n                </div>\n              </div>\n              <div className=\"export__reorder\">\n                <div className=\"\">\n                  <input\n                    type=\"checkbox\"\n                    name=\"csv\"\n                    value=\"csv\"\n                    onChange={this.selectDownLoadType}\n                  ></input>\n                </div>\n                <div className=\"export__file\">\n                  <FontAwesomeIcon\n                    icon={faFileCsv}\n                    className=\"temp\"\n                  ></FontAwesomeIcon>\n                </div>\n              </div>\n              <div className=\"exportWarning\">\n                <span\n                  style={{ display: this.state.clickTag }}\n                  className=\"alert alert-danger\"\n                >\n                  You have not selected <strong>{this.state.warning}</strong>\n                </span>\n              </div>\n            </div>\n            <div className=\"export__footer\">\n              <div className=\"export__btns\">\n                <button\n                  className=\"btns\"\n                  onClick={() => this.props.closeExport()}\n                >\n                  Cancel\n                </button>\n                <button\n                  className=\"btns btns__save\"\n                  onClick={() => {\n                    this.exportValidation();\n                  }}\n                >\n                  Export\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nExportData.propTypes = {\n  columnsList: PropTypes.any,\n  closeExport: PropTypes.any,\n  rows: PropTypes.any,\n};\n\nexport default ExportData;\n","import React, { Component } from \"react\";\r\n\r\nimport ExtDataGrid from \"./common/extDataGrid\";\r\nimport { Toolbar, Data, Filters, Editors } from \"react-data-grid-addons\";\r\nimport { range } from \"lodash\";\r\nimport { applyFormula } from \"./utilities/utils\";\r\nimport { FormControl } from \"react-bootstrap\";\r\nimport DatePicker from \"./functions/DatePicker.js\";\r\n//import {onRowsSelected} from \"../components/functions/OnRowsSelected.js\"\r\nimport {\r\n  faSortAmountDown,\r\n  faColumns,\r\n  faShareAlt,\r\n  faSortDown,\r\n  faSave,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport ErrorMessage from \"./common/ErrorMessage\";\r\nimport ColumnReordering from \"./overlays/column_chooser/Chooser\";\r\nimport Sorting from \"./overlays/sorting/Sorting\";\r\nimport ExportData from \"./overlays/export_data/ExportData\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst { DropDownEditor } = Editors;\r\n\r\nconst defaultParsePaste = (str) =>\r\n  str.split(/\\r\\n|\\n|\\r/).map((row) => row.split(\"\\t\"));\r\nconst selectors = Data.Selectors;\r\nlet swapList = [];\r\nlet swapSortList = [];\r\nconst { AutoCompleteFilter, NumericFilter } = Filters;\r\n\r\nclass Spreadsheet extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const airportCodes = [];\r\n    this.props.airportCodes.forEach((item) => {\r\n      airportCodes.push({ id: item, value: item });\r\n    });\r\n    const dataSetVar = JSON.parse(JSON.stringify(this.props.dataSet))\r\n    this.state = {\r\n      warningStatus: \"\",\r\n      height: 680,\r\n      displayNoRows: \"none\",\r\n      searchIconDisplay: \"\",\r\n      searchValue: \"\",\r\n      sortColumn: \"\",\r\n      sortDirection:\"NONE\",\r\n      filter: {},\r\n      pageRowCount: this.props.pageSize,\r\n      pageIndex:1,\r\n      dataSet: dataSetVar,\r\n      subDataSet: [],\r\n      rows: dataSetVar? dataSetVar.slice(0,500):[],\r\n      selectedIndexes: [],\r\n      junk: {},\r\n      topLeft: {},\r\n      columnReorderingComponent: null,\r\n      exportComponent: null,\r\n      filteringRows: this.props.rows,\r\n      tempRows: this.props.rows,\r\n      sortingPanelComponent: null,\r\n      count: this.props.rows.length,\r\n      sortingOrderSwapList: [],\r\n      sortingParamsObjectList: [],\r\n      pinnedReorder: false,\r\n      columns: this.props.columns.map((item) => {\r\n        if (item.editor === \"DatePicker\") {\r\n          item.editor = DatePicker;\r\n        } else if (item.editor === \"DropDown\") {\r\n          item.editor = <DropDownEditor options={airportCodes} />;\r\n        } else if (item.editor === \"Text\") {\r\n          item.editor = \"text\";\r\n        } else {\r\n          item.editor = null;\r\n        }\r\n        if (item.filterType === \"numeric\") {\r\n          item.filterRenderer = NumericFilter;\r\n        } else {\r\n          item.filterRenderer = AutoCompleteFilter;\r\n        }\r\n        return item;\r\n      }),\r\n    };\r\n    // document.addEventListener(\"copy\", this.handleCopy);\r\n    // document.addEventListener(\"paste\", this.handlePaste);\r\n    this.handleSearchValue = this.handleSearchValue.bind(this);\r\n    this.clearSearchValue = this.clearSearchValue.bind(this);\r\n    this.handleFilterChange = this.handleFilterChange.bind(this);\r\n\r\n    this.formulaAppliedCols = this.props.columns.filter((item) => {\r\n      return item.formulaApplicable;\r\n    });\r\n  }\r\n  \r\n  isAtBottom = (event) => {\r\n    const target = event.target;// as HTMLDivElement;\r\n    var isbtm = target.clientHeight + target.scrollTop >= target.scrollHeight-10;\r\n    return isbtm;\r\n  }\r\n  isSubset(){\r\n    if(Object.keys(this.state.junk).length > 0 || this.state.sortDirection != \"NONE\" \r\n      || this.state.searchValue != \"\")\r\n    {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  loadMoreRows = (from, newRowsCount) => {    \r\n    return new Promise(resolve => {\r\n      let hasFilter = Object.keys(this.state.junk).length > 0;\r\n      let to = from + newRowsCount;\r\n      if(this.isSubset() && this.state.subDataSet.length > 0){\r\n        to = to < this.state.subDataSet.length? to : this.state.subDataSet.length\r\n        resolve(this.state.subDataSet.slice(from, to))\r\n      } else {\r\n        resolve(this.state.dataSet.slice(from, to));\r\n      }\r\n    });\r\n  }\r\n  handleScroll= async (event) => {\r\n    if (!this.isAtBottom(event)) \r\n      return;\r\n    let newRows = await this.loadMoreRows(this.state.pageIndex * this.state.pageRowCount, this.state.pageRowCount);\r\n    if (newRows && newRows.length > 0) {\r\n      let length = this.state.rows.length + newRows.length;\r\n      this.setState({\r\n        rows: [...this.state.rows, ...newRows],\r\n        count: length,\r\n        pageIndex: this.state.pageIndex + 1\r\n      })\r\n    }\r\n  } \r\n  componentDidUpdate() {\r\n    //Fix for column re-order and pin left issue (functionality was working only after doing a window re-size)\r\n    const resizeEvent = document.createEvent(\"HTMLEvents\");\r\n    resizeEvent.initEvent(\"resize\", true, false);\r\n    window.dispatchEvent(resizeEvent);\r\n  }\r\n  // updateRows = (startIdx, newRows) => {\r\n  //   this.setState((state) => {\r\n  //     const rows = state.rows.slice();\r\n  //     for (let i = 0; i < newRows.length; i++) {\r\n  //       if (startIdx + i < rows.length) {\r\n  //         rows[startIdx + i] = {\r\n  //           ...rows[startIdx + i],\r\n  //           ...newRows[i],\r\n  //         };\r\n  //       }\r\n  //     }\r\n  //     return {\r\n  //       rows,\r\n  //     };\r\n  //   });\r\n  // };\r\n\r\n  // rowGetter = (i) => {\r\n  // console.log(i)\r\n  //   const { rows } = this.state;\r\n  //   return rows[i];\r\n  // };\r\n\r\n  // handleCopy = (e) => {\r\n  //   e.preventDefault();\r\n  //   const { topLeft, botRight } = this.state;\r\n  //   const text = range(topLeft.rowIdx, botRight.rowIdx + 1)\r\n  //     .map((rowIdx) =>\r\n  //       this.state.columns\r\n  //         .slice(topLeft.colIdx - 1, botRight.colIdx)\r\n  //         .map((col) => this.rowGetter(rowIdx)[col.key])\r\n  //         .join(\"\\t\")\r\n  //     )\r\n  //     .join(\"\\n\");\r\n  //   e.clipboardData.setData(\"text/plain\", text);\r\n  // };\r\n\r\n  // handlePaste = (e) => {\r\n  //   e.preventDefault();\r\n  //   const { topLeft } = this.state;\r\n  //   const newRows = [];\r\n  //   const pasteData = defaultParsePaste(e.clipboardData.getData(\"text/plain\"));\r\n  //   pasteData.forEach((row) => {\r\n  //     const rowData = {};\r\n  //     // Merge the values from pasting and the keys from the columns\r\n  //     this.state.columns\r\n  //       .slice(topLeft.colIdx - 1, topLeft.colIdx - 1 + row.length)\r\n  //       .forEach((col, j) => {\r\n  //         rowData[col.key] = row[j];\r\n  //       });\r\n  //     newRows.push(rowData);\r\n  //   });\r\n  //   this.updateRows(topLeft.rowIdx, newRows);\r\n  // };\r\n\r\n  // setSelection = (args) => {\r\n  //   this.setState({\r\n  //     topLeft: {\r\n  //       rowIdx: args.topLeft.rowIdx,\r\n  //       colIdx: args.topLeft.idx,\r\n  //     },\r\n  //     botRight: {\r\n  //       rowIdx: args.bottomRight.rowIdx,\r\n  //       colIdx: args.bottomRight.idx,\r\n  //     },\r\n  //   });\r\n  // };\r\n\r\n  UNSAFE_componentWillReceiveProps(props) {\r\n    this.setState({\r\n      rows: props.rows,\r\n      status: props.status,\r\n      textValue: props.textValue,\r\n      count: props.count,\r\n      warningStatus: props.status,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Method To update the cell/cells with the edited values\r\n   * @param {*} fromRow is the row from which this edit is performed\r\n   * @param {*} toRow is the row upto which this edit is performed\r\n   * @param {*} updated is the value of change\r\n   * @param {*} action is type of edit action performed\r\n   */\r\n  onGridRowsUpdated = ({ fromRow, toRow, updated, action }) => {\r\n    let columnName = \"\";\r\n    const filter = this.formulaAppliedCols.filter((item) => {\r\n      if (updated[item.key] !== null && updated[item.key] !== undefined) {\r\n        columnName = item.key;\r\n        return true;\r\n      } else return false;\r\n    });\r\n\r\n    if (filter.length > 0) {\r\n      updated = applyFormula(updated, columnName);\r\n    }\r\n\r\n    if (action !== \"COPY_PASTE\") {\r\n      this.setState((state) => {\r\n        const rows = state.rows.slice();\r\n        for (let i = fromRow; i <= toRow; i++) {\r\n          rows[i] = {\r\n            ...rows[i],\r\n            ...updated,\r\n          };\r\n        }\r\n\r\n        return {\r\n          rows,\r\n        };\r\n      });\r\n      this.setState((state) => {\r\n        const filteringRows = state.filteringRows.slice();\r\n        for (let i = fromRow; i <= toRow; i++) {\r\n          filteringRows[i] = {\r\n            ...filteringRows[i],\r\n            ...updated,\r\n          };\r\n        }\r\n\r\n        return {\r\n          filteringRows,\r\n        };\r\n      });\r\n      this.setState((state) => {\r\n        const tempRows = state.tempRows.slice();\r\n        for (let i = fromRow; i <= toRow; i++) {\r\n          tempRows[i] = {\r\n            ...tempRows[i],\r\n            ...updated,\r\n          };\r\n        }\r\n\r\n        return {\r\n          tempRows,\r\n        };\r\n      });\r\n    }\r\n    if (this.props.updateCellData) {\r\n      this.props.updateCellData(\r\n        this.state.tempRows[fromRow],\r\n        this.state.tempRows[toRow],\r\n        updated,\r\n        action\r\n      );\r\n    }\r\n  };\r\n  /**\r\n   * Method To bulk/individual select of rows\r\n   * @param {*} rows is the selected row\r\n   */\r\n  onRowsSelected = (rows) => {\r\n    this.setState({\r\n      selectedIndexes: this.state.selectedIndexes.concat(\r\n        rows.map((r) => r.rowIdx)\r\n      ),\r\n    });\r\n    if (this.props.selectBulkData) {\r\n      this.props.selectBulkData(rows);\r\n    }\r\n  };\r\n  /**\r\n   * Method To bulk/individual deselect of rows\r\n   * @param {*} rows is the deselected row\r\n   */\r\n  onRowsDeselected = (rows) => {\r\n    let rowIndexes = rows.map((r) => r.rowIdx);\r\n    this.setState({\r\n      selectedIndexes: this.state.selectedIndexes.filter(\r\n        (i) => rowIndexes.indexOf(i) === -1\r\n      ),\r\n    });\r\n  };\r\n\r\n  setStateAsync(stateObj){\r\n    return new Promise(resolve => {\r\n      this.setState(stateObj, resolve);\r\n    });\r\n  }\r\n  /**\r\n   * Method To filter the multiple columns\r\n   * @param {*} value is the  incoming filtering event\r\n   */\r\n  handleFilterChange = async (value) => {\r\n    let junk = this.state.junk;\r\n    if (!(value.filterTerm == null) && !(value.filterTerm.length <= 0)) {\r\n      junk[value.column.key] = value;\r\n    } else {\r\n      delete junk[value.column.key];\r\n    }\r\n    this.setState({ junk });\r\n    let hasFilter = Object.keys(junk).length > 0;\r\n    const firstPage = this.state.dataSet.slice(0, this.state.pageRowCount);\r\n    let data = this.getrows(firstPage, this.state.junk);\r\n    await this.setStateAsync({\r\n      rows: data\r\n      ,tempRows: data,\r\n      count: data.length,\r\n      subDataSet: hasFilter? data : [],\r\n      pageIndex: hasFilter? this.state.pageIndex: 1\r\n    });\r\n    if (hasFilter) {\r\n      let rowsRemaining = this.state.dataSet.slice(this.state.pageRowCount, this.state.dataSet.length);\r\n      this.getSlicedRows(this.state.junk, rowsRemaining, data);\r\n    } else {\r\n      let rowsRemaining = this.state.dataSet;//.slice(this.state.pageRowCount, this.state.dataSet.length);\r\n      if (this.state.searchValue != \"\") {\r\n        let searchKey = String(this.state.searchValue).toLowerCase();\r\n        rowsRemaining = rowsRemaining.filter((item) => {\r\n          return Object.values(item).toString().toLowerCase().includes(searchKey);\r\n        });\r\n      }\r\n\r\n      if (this.state.sortDirection != \"NONE\" && this.state.sortColumn != \"\") {\r\n        rowsRemaining = this.sortFilteredRows(rowsRemaining, this.state.sortColumn, this.state.sortDirection);\r\n        let rw = rowsRemaining.slice(0, this.state.pageIndex * this.state.pageRowCount);\r\n        await this.setStateAsync({\r\n          subDataSet: rowsRemaining,\r\n          rows: rw,\r\n          tempRows: rw,\r\n          count: rw.length,\r\n        });\r\n        data = rw;\r\n      }\r\n    }\r\n    if (data.length === 0) {\r\n      this.handleWarningStatus();\r\n    } else {\r\n      this.closeWarningStatus(data);\r\n    }\r\n  };\r\n  \r\n  getSlicedRows = async (filters, rowsToSplit, firstResult ) => {\r\n    let data = [];\r\n    if(rowsToSplit.length > 0){\r\n      var chunks = [];           \r\n      while (rowsToSplit.length) {\r\n        chunks.push(rowsToSplit.splice(0, 500));\r\n      }\r\n      let index = 0;\r\n      chunks.forEach(async (arr,i) => {\r\n        this.getRowsAsync(arr, filters).then(async (dt)=>{          \r\n          index++;      \r\n          data = [...data, ...dt];          \r\n          if(index == chunks.length){\r\n            let dtSet = [...firstResult, ...data];\r\n            if (this.state.searchValue != \"\") {\r\n              let searchKey = String(this.state.searchValue).toLowerCase();\r\n              dtSet = dtSet.filter((item) => {\r\n                return Object.values(item).toString().toLowerCase().includes(searchKey);\r\n              });\r\n            }\r\n      \r\n            if(this.state.sortDirection != \"NONE\" && this.state.sortColumn != \"\"){\r\n              dtSet = this.sortFilteredRows(dtSet, this.state.sortColumn, this.state.sortDirection);\r\n            }\r\n            let rw = dtSet.slice(0,this.state.pageIndex * this.state.pageRowCount);\r\n            await this.setStateAsync({\r\n              subDataSet: dtSet,\r\n              rows: rw,\r\n              tempRows: rw,\r\n              count: rw.length,\r\n            });\r\n            if (dtSet.length === 0) {\r\n              this.handleWarningStatus();\r\n            } else {\r\n              this.closeWarningStatus(rw);\r\n            }\r\n          }\r\n        });\r\n      });\r\n    }\r\n  }\r\n  getRowsAsync = async (rows, filters) => {\r\n    if (Object.keys(filters).length <= 0) {\r\n      filters = {};\r\n    }\r\n    selectors.getRows({ rows: [], filters: {} });\r\n    return await selectors.getRows({ rows: rows, filters: filters });\r\n  };\r\n\r\n\r\n  getrows = (rows, filters) => {\r\n    if (Object.keys(filters).length <= 0) {\r\n      filters = {};\r\n    }\r\n    selectors.getRows({ rows: [], filters: {} });\r\n    return selectors.getRows({ rows: rows, filters: filters });\r\n  };\r\n\r\n  /**\r\n   * Method To render the filter values for filtering rows\r\n   * @param {*} rows is the row data to be considered for filtering\r\n   * @param {*} columnId is the specific columnId for which the row datas are being considered\r\n   */\r\n  getValidFilterValues(rows, columnId) {\r\n    this.setState({ selectedIndexes: [] });\r\n    return rows\r\n      .map((r) => r[columnId])\r\n      .filter((item, i, a) => {\r\n        return i === a.indexOf(item);\r\n      });\r\n  }\r\n  /**\r\n   * Method To sort the rows for a particular column\r\n   * @param {*} data is the row datas to be considered for sorting\r\n   * @param {*} sortColumn is the specific column for which the row sort is being triggered\r\n   * @param {*} sortDirection is the type of sort\r\n   */\r\n  sortRows = (data, sortColumn, sortDirection) => {\r\n    this.setState({ selectedIndexes: [] });\r\n    const comparer = (a, b) => {\r\n      if (sortDirection === \"ASC\") {\r\n        return a[sortColumn] > b[sortColumn] ? 1 : -1;\r\n      } else if (sortDirection === \"DESC\") {\r\n        return a[sortColumn] < b[sortColumn] ? 1 : -1;\r\n      }\r\n    };\r\n    let hasFilter = Object.keys(this.state.junk).length > 0;\r\n    let dtRows = [];\r\n    if (hasFilter) {\r\n      dtRows = this.state.subDataSet;\r\n    } else {\r\n      dtRows = this.state.dataSet;\r\n    }\r\n    let result = [...dtRows].sort(comparer);\r\n    this.setState({\r\n      rows: result.slice(0, this.state.pageIndex * this.state.pageRowCount),\r\n      subDataSet: result,\r\n      selectedIndexes: [],\r\n      sortColumn: sortDirection === \"NONE\" ? \"\" : sortColumn,\r\n      sortDirection: sortDirection\r\n    });\r\n    return sortDirection === \"NONE\" ? data : this.state.rows;\r\n  };\r\n  sortFilteredRows = (data, sortColumn, sortDirection) => {\r\n    this.setState({ selectedIndexes: [] });\r\n    const comparer = (a, b) => {\r\n      if (sortDirection === \"ASC\") {\r\n        return a[sortColumn] > b[sortColumn] ? 1 : -1;\r\n      } else if (sortDirection === \"DESC\") {\r\n        return a[sortColumn] < b[sortColumn] ? 1 : -1;\r\n      }\r\n    };\r\n    return sortDirection === \"NONE\" ? data : [...data].sort(comparer);;\r\n  }\r\n  /**\r\n   * Method To swap the columns\r\n   * @param {*} source is source column\r\n   * @param {*} target is the target column\r\n   */\r\n  // onHeaderDrop = (source, target) => {\r\n  //   const stateCopy = Object.assign({}, this.state);\r\n  //   const columnSourceIndex = this.state.columns.findIndex(\r\n  //     (i) => i.key === source\r\n  //   );\r\n  //   const columnTargetIndex = this.state.columns.findIndex(\r\n  //     (i) => i.key === target\r\n  //   );\r\n\r\n  //   stateCopy.columns.splice(\r\n  //     columnTargetIndex,\r\n  //     0,\r\n  //     stateCopy.columns.splice(columnSourceIndex, 1)[0]\r\n  //   );\r\n\r\n  //   const emptyColumns = Object.assign({}, this.state, {\r\n  //     columns: [],\r\n  //   });\r\n  //   this.setState(emptyColumns);\r\n\r\n  //   const reorderedColumns = Object.assign({}, this.state, {\r\n  //     columns: stateCopy.columns,\r\n  //   });\r\n  //   this.setState(reorderedColumns);\r\n  // };\r\n  /**\r\n   * Method To dynamically swap the column from column chooser\r\n   * @param {*} reordered is the swapped array of columns\r\n   */\r\n  handleheaderNameList = (reordered) => {\r\n    swapList = reordered;\r\n  };\r\n\r\n  handleTableSortSwap = (reorderedSwap) => {\r\n    swapSortList = reorderedSwap;\r\n  };\r\n\r\n  updateTableAsPerRowChooser = (\r\n    inComingColumnsHeaderList,\r\n    pinnedColumnsList\r\n  ) => {\r\n    let existingColumnsHeaderList = this.props.columns;\r\n    existingColumnsHeaderList = existingColumnsHeaderList.filter((item) => {\r\n      return inComingColumnsHeaderList.includes(item.name);\r\n    });\r\n    let rePositionedArray = existingColumnsHeaderList;\r\n    let singleHeaderOneList;\r\n    if (pinnedColumnsList.length > 0) {\r\n      pinnedColumnsList\r\n        .slice(0)\r\n        .reverse()\r\n        .map((item, index) => {\r\n          singleHeaderOneList = existingColumnsHeaderList.filter(\r\n            (subItem) => item === subItem.name\r\n          );\r\n          rePositionedArray = this.array_move(\r\n            existingColumnsHeaderList,\r\n            existingColumnsHeaderList.indexOf(singleHeaderOneList[0]),\r\n            index\r\n          );\r\n        });\r\n    }\r\n    if (swapList.length > 0) {\r\n      swapList.slice(0).map((item, index) => {\r\n        singleHeaderOneList = existingColumnsHeaderList.filter((subItem) => {\r\n          return item === subItem.name;\r\n        });\r\n        rePositionedArray = this.array_move(\r\n          existingColumnsHeaderList,\r\n          existingColumnsHeaderList.indexOf(singleHeaderOneList[0]),\r\n          index\r\n        );\r\n      });\r\n    }\r\n\r\n    existingColumnsHeaderList = rePositionedArray;\r\n    /**\r\n       making all the frozen attribute as false for all the columns and then \r\n       setting items of pinnedColumnsList as frozen = true\r\n       */\r\n    existingColumnsHeaderList.map((headerItem, index) => {\r\n      if (headerItem.frozen !== undefined && headerItem.frozen === true) {\r\n        existingColumnsHeaderList[index][\"frozen\"] = false;\r\n      }\r\n      if (pinnedColumnsList.includes(headerItem.name)) {\r\n        existingColumnsHeaderList[index][\"frozen\"] = true;\r\n      }\r\n    });\r\n\r\n    const toTop = (key, value) => (a, b) =>\r\n      (b[key] === value) - (a[key] === value);\r\n    existingColumnsHeaderList.sort(toTop(\"frozen\", true));\r\n\r\n    this.setState({\r\n      columns: existingColumnsHeaderList,\r\n    });\r\n\r\n    let tempList = [];\r\n    existingColumnsHeaderList.forEach((item) => {\r\n      tempList.push(item.name);\r\n    });\r\n\r\n    if (swapList.length > 0) {\r\n      for (let i = 0; i < tempList.length; i++) {\r\n        if (tempList[i] === swapList[i]) this.setState({ pinnedReorder: true });\r\n      }\r\n    }\r\n    this.closeColumnReOrdering();\r\n    swapList = [];\r\n    this.setState({ pinnedReorder: false });\r\n  };\r\n\r\n  /**\r\n   * Method To re-position a particular object in an Array from old_index to new_index\r\n   * @param {*} arr inComing array\r\n   * @param {*} old_index initial index\r\n   * @param {*} new_index final index\r\n   */\r\n  array_move = (arr, old_index, new_index) => {\r\n    if (new_index >= arr.length) {\r\n      var k = new_index - arr.length + 1;\r\n      while (k--) {\r\n        arr.push(undefined);\r\n      }\r\n    }\r\n    arr.splice(new_index, 0, arr.splice(old_index, 1)[0]);\r\n    return arr;\r\n  };\r\n\r\n  /**\r\n   * Method to render the column Selector Pannel\r\n   */\r\n  columnReorderingPannel = () => {\r\n    this.setState({ selectedIndexes: [] });\r\n    var headerNameList = [];\r\n    var existingPinnedHeadersList = [];\r\n    this.state.columns\r\n      .filter((item) => item.frozen !== undefined && item.frozen === true)\r\n      .map((item) => existingPinnedHeadersList.push(item.name));\r\n    this.state.columns.map((item) => headerNameList.push(item.name));\r\n    this.setState({\r\n      columnReorderingComponent: (\r\n        <ColumnReordering\r\n          maxLeftPinnedColumn={this.props.maxLeftPinnedColumn}\r\n          updateTableAsPerRowChooser={this.updateTableAsPerRowChooser}\r\n          headerKeys={headerNameList}\r\n          closeColumnReOrdering={this.closeColumnReOrdering}\r\n          existingPinnedHeadersList={existingPinnedHeadersList}\r\n          handleheaderNameList={this.handleheaderNameList}\r\n          {...this.props}\r\n        />\r\n      ),\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Method to stop the render the column Selector Pannel\r\n   */\r\n  closeColumnReOrdering = () => {\r\n    this.setState({\r\n      columnReorderingComponent: null,\r\n    });\r\n  };\r\n  handleSearchValue = (value) => {\r\n    this.setState({ searchValue: value });\r\n  };\r\n  clearSearchValue = () => {\r\n    this.setState({ searchValue: \"\" });\r\n    this.setState({ filteringRows: this.state.filteringRows });\r\n  };\r\n\r\n  sortingPanel = () => {\r\n    this.setState({ selectedIndexes: [] });\r\n    let columnField = [];\r\n    this.state.columns.map((item) => columnField.push(item.name));\r\n    this.setState({\r\n      sortingPanelComponent: (\r\n        <Sorting\r\n          setTableAsPerSortingParams={(args) =>\r\n            this.setTableAsPerSortingParams(args)\r\n          }\r\n          sortingParamsObjectList={this.state.sortingParamsObjectList}\r\n          handleTableSortSwap={this.handleTableSortSwap}\r\n          clearAllSortingParams={this.clearAllSortingParams}\r\n          columnFieldValue={columnField}\r\n          closeSorting={this.closeSorting}\r\n        />\r\n      ),\r\n    });\r\n  };\r\n\r\n  closeSorting = () => {\r\n    this.setState({\r\n      sortingPanelComponent: null,\r\n      sortingOrderSwapList: [],\r\n    });\r\n    swapSortList = [];\r\n  };\r\n\r\n  clearAllSortingParams = () => {\r\n    this.setState({\r\n      rows: JSON.parse(JSON.stringify(this.props.rows)),\r\n    });\r\n  };\r\n\r\n  //Export Data Logic\r\n  exportColumnData = () => {\r\n    this.setState({ selectedIndexes: [] });\r\n    this.setState({\r\n      exportComponent: (\r\n        <ExportData\r\n          rows={this.state.rows}\r\n          columnsList={this.state.columns}\r\n          closeExport={this.closeExport}\r\n        />\r\n      ),\r\n    });\r\n  };\r\n\r\n  closeExport = () => {\r\n    this.setState({\r\n      exportComponent: null,\r\n    });\r\n  };\r\n  // handleColumnResize = (idx, width) => {\r\n  //   let columnArray = [...this.state.columns];\r\n  //   columnArray.forEach((item) => {\r\n  //     if (item.name === this.state.columns[idx - 1].name) {\r\n  //       item.width = width;\r\n  //     }\r\n  //   });\r\n  //   this.setState({ columns: columnArray });\r\n  // };\r\n  setTableAsPerSortingParams = (tableSortList) => {\r\n    var existingRows = this.state.rows;\r\n    var sortingOrderNameList = [];\r\n    tableSortList.map((item) => {\r\n      var nameOfItem = \"\";\r\n      Object.keys(this.state.rows[0]).map((rowItem) => {\r\n        if (\r\n          rowItem.toLowerCase() === this.toCamelCase(item.sortBy).toLowerCase()\r\n        ) {\r\n          nameOfItem = rowItem;\r\n        }\r\n      });\r\n      var typeOfItem = this.state.rows[0][item.sortBy === nameOfItem];\r\n      if (typeof typeOfItem === \"number\") {\r\n        sortingOrderNameList.push({\r\n          name: nameOfItem,\r\n          primer: parseInt,\r\n          reverse: item.order === \"Ascending\" ? false : true,\r\n        });\r\n      } else {\r\n        sortingOrderNameList.push({\r\n          name: nameOfItem,\r\n          reverse: item.order === \"Ascending\" ? false : true,\r\n        });\r\n      }\r\n    });\r\n\r\n    if (swapSortList.length > 0) {\r\n      var existingSortingOrderSwapList = this.state.sortingOrderSwapList;\r\n      swapSortList.map((item, index) => {\r\n        var stringOfItemIndex = item + \"\" + index;\r\n        if (\r\n          item !== index &&\r\n          !existingSortingOrderSwapList.includes(\r\n            stringOfItemIndex.split(\"\").reverse().join(\"\")\r\n          )\r\n        ) {\r\n          existingSortingOrderSwapList.push(stringOfItemIndex);\r\n          sortingOrderNameList = this.array_move(\r\n            sortingOrderNameList,\r\n            item,\r\n            index\r\n          );\r\n          tableSortList = this.array_move(tableSortList, item, index);\r\n        }\r\n        this.setState({\r\n          sortingOrderSwapList: existingSortingOrderSwapList,\r\n        });\r\n      });\r\n    }\r\n\r\n    existingRows.sort(sort_by(...sortingOrderNameList));\r\n    this.setState({\r\n      rows: existingRows,\r\n      sortingParamsObjectList: tableSortList,\r\n    });\r\n\r\n    this.closeSorting();\r\n  };\r\n\r\n  toCamelCase = (str) => {\r\n    return str\r\n      .replace(/\\s(.)/g, function ($1) {\r\n        return $1.toUpperCase();\r\n      })\r\n      .replace(/\\s/g, \"\")\r\n      .replace(/^(.)/, function ($1) {\r\n        return $1.toLowerCase();\r\n      });\r\n  };\r\n\r\n  getSearchRecords(e){\r\n    let searchKey = String(e.target.value).toLowerCase();\r\n    let hasFilter = Object.keys(this.state.junk).length > 0;\r\n    let isSorted = this.state.sortDirection != \"NONE\" && this.state.sortColumn != \"\";\r\n    let rowsToSearch = [];\r\n    // Remove search key\r\n    if (this.state.searchValue.startsWith(searchKey) || searchKey == \"\") {\r\n      if (hasFilter) {\r\n        let rowsToSplit = [...this.state.dataSet];\r\n        var chunks = [];\r\n        while (rowsToSplit.length) {\r\n          chunks.push(rowsToSplit.splice(0, 500));\r\n        }\r\n        let index = 0;\r\n        chunks.forEach((arr, i) => {\r\n          let dt = this.getrows(arr, this.state.junk);\r\n          rowsToSearch = [...rowsToSearch, ...dt];\r\n        })\r\n      } else {\r\n        rowsToSearch = [...this.state.dataSet];\r\n      }\r\n      if (isSorted) {\r\n        return this.sortFilteredRows(rowsToSearch, this.state.sortColumn, this.state.sortDirection);\r\n      }\r\n      return rowsToSearch;\r\n    } \r\n    // Set search key\r\n    else{\r\n      if(hasFilter || isSorted || searchKey.length > 1)\r\n        return this.state.subDataSet; \r\n      else\r\n      return this.state.dataSet;\r\n    }\r\n  }\r\n\r\n  globalSearchLogic = (e, updatedRows) => {\r\n    let searchKey = String(e.target.value).toLowerCase();\r\n    let filteredRows = updatedRows.filter((item) => {\r\n      return Object.values(item).toString().toLowerCase().includes(searchKey);\r\n    });\r\n    if (!filteredRows.length) {\r\n      this.setState({ warningStatus: \"invalid\", rows: [] });\r\n    } else {\r\n      let rowSlice = filteredRows.slice(0, this.state.pageIndex * this.state.pageRowCount);\r\n      this.setState({ warningStatus: \"\", \r\n        rows: rowSlice,\r\n        subDataSet: filteredRows,\r\n        count: rowSlice.length, });\r\n    }\r\n  };\r\n\r\n  handleWarningStatus = () => {\r\n    this.setState({ warningStatus: \"invalid\" });\r\n  };\r\n\r\n  closeWarningStatus = (rVal=this.props.rows) => {\r\n    this.setState({ warningStatus: \"\", rows: rVal });\r\n  };\r\n\r\n  save = () => {\r\n    console.log(\"save\");\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div onScroll={this.handleScroll}>\r\n        <div className=\"parentDiv\">\r\n          <div className=\"totalCount\">\r\n            Showing <strong> {this.state.count} </strong> records\r\n          </div>\r\n          <div className=\"globalSearch\">\r\n            <i className=\"fa fa-search\"></i>\r\n            <FormControl\r\n              className=\"globalSeachInput\"\r\n              type=\"text\"\r\n              placeholder=\"Search\"\r\n              onChange={(e) => {\r\n                this.handleSearchValue(e.target.value);\r\n                let srchRows = this.getSearchRecords(e);\r\n                this.globalSearchLogic(e, srchRows);\r\n              }}\r\n              value={this.state.searchValue}\r\n            />\r\n          </div>\r\n          <div className=\"filterIcons\" onClick={this.save}>\r\n            <FontAwesomeIcon title=\"Group Sort\" icon={faSave} />\r\n          </div>\r\n          <div className=\"filterIcons\" onClick={this.sortingPanel}>\r\n            <FontAwesomeIcon title=\"Group Sort\" icon={faSortAmountDown} />\r\n            <FontAwesomeIcon icon={faSortDown} className=\"filterArrow\" />\r\n          </div>\r\n          {this.state.sortingPanelComponent}\r\n          <div className=\"filterIcons\" onClick={this.columnReorderingPannel}>\r\n            <FontAwesomeIcon title=\"Column Chooser\" icon={faColumns} />\r\n            <FontAwesomeIcon icon={faSortDown} className=\"filterArrow\" />\r\n          </div>\r\n          {this.state.columnReorderingComponent}\r\n          <div className=\"filterIcons\">\r\n            <FontAwesomeIcon\r\n              title=\"Export\"\r\n              icon={faShareAlt}\r\n              onClick={this.exportColumnData}\r\n            />\r\n          </div>\r\n          {this.state.exportComponent}\r\n        </div>\r\n        <ErrorMessage\r\n          className=\"errorDiv\"\r\n          status={this.state.warningStatus}\r\n          closeWarningStatus={() => {\r\n            this.closeWarningStatus();\r\n          }}\r\n          clearSearchValue={this.clearSearchValue}\r\n        />\r\n        <ExtDataGrid\r\n          toolbar={<Toolbar enableFilter={true} />}\r\n          getValidFilterValues={(columnKey) =>\r\n            this.getValidFilterValues(this.state.filteringRows, columnKey)\r\n          }\r\n          minHeight={this.state.height}\r\n          columns={this.state.columns}\r\n          rowGetter={(i) => this.state.rows[i]}\r\n          rowsCount={this.state.rows.length}\r\n          onGridRowsUpdated={this.onGridRowsUpdated}\r\n          enableCellSelect={true}\r\n          onClearFilters={() => {\r\n            this.setState({ junk: {} });\r\n          }}\r\n          onColumnResize={(idx, width) =>\r\n            console.log(`Column ${idx} has been resized to ${width}`)\r\n          }\r\n          onAddFilter={(filter) => this.handleFilterChange(filter)}\r\n          rowSelection={{\r\n            showCheckbox: true,\r\n            enableShiftSelect: true,\r\n            onRowsSelected: this.onRowsSelected,\r\n            onRowsDeselected: this.onRowsDeselected,\r\n            selectBy: {\r\n              indexes: this.state.selectedIndexes,\r\n            },\r\n          }}\r\n          onGridSort={(sortColumn, sortDirection) =>\r\n            this.sortRows(this.state.filteringRows, sortColumn, sortDirection)\r\n          }\r\n          globalSearch={this.globalSearchLogic}\r\n          handleWarningStatus={this.handleWarningStatus}\r\n          closeWarningStatus={this.closeWarningStatus}\r\n          // cellRangeSelection={{\r\n          //   onComplete: this.setSelection,\r\n          // }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Global Method To Sort The Grid.\r\n */\r\nvar sort_by;\r\n(function () {\r\n  // utility functions\r\n  var default_cmp = function (a, b) {\r\n      if (a == b) return 0;\r\n      return a < b ? -1 : 1;\r\n    },\r\n    getCmpFunc = function (primer, reverse) {\r\n      var cmp = default_cmp;\r\n      if (primer) {\r\n        cmp = function (a, b) {\r\n          return default_cmp(primer(a), primer(b));\r\n        };\r\n      }\r\n      if (reverse) {\r\n        return function (a, b) {\r\n          return -1 * cmp(a, b);\r\n        };\r\n      }\r\n      return cmp;\r\n    };\r\n\r\n  // actual implementation\r\n  sort_by = function () {\r\n    var fields = [],\r\n      n_fields = arguments.length,\r\n      field,\r\n      name,\r\n      cmp;\r\n\r\n    // preprocess sorting options\r\n    for (var i = 0; i < n_fields; i++) {\r\n      field = arguments[i];\r\n      if (typeof field === \"string\") {\r\n        name = field;\r\n        cmp = default_cmp;\r\n      } else {\r\n        name = field.name;\r\n        cmp = getCmpFunc(field.primer, field.reverse);\r\n      }\r\n      fields.push({\r\n        name: name,\r\n        cmp: cmp,\r\n      });\r\n    }\r\n\r\n    return function (A, B) {\r\n      var name, cmp, result;\r\n      for (var i = 0, l = n_fields; i < l; i++) {\r\n        result = 0;\r\n        field = fields[i];\r\n        name = field.name;\r\n        cmp = field.cmp;\r\n\r\n        result = cmp(A[name], B[name]);\r\n        if (result !== 0) break;\r\n      }\r\n      return result;\r\n    };\r\n  };\r\n})();\r\n\r\nSpreadsheet.propTypes = {\r\n  airportCodes: PropTypes.any,\r\n  rows: PropTypes.any,\r\n  columns: PropTypes.any,\r\n  status: PropTypes.any,\r\n  textValue: PropTypes.any,\r\n  count: PropTypes.any,\r\n  updateCellData: PropTypes.any,\r\n  selectBulkData: PropTypes.any,\r\n  pinnedReorder: PropTypes.any,\r\n  maxLeftPinnedColumn: PropTypes.any,\r\n  globalSearchLogic: PropTypes.any,\r\n  closeWarningStatus: PropTypes.any,\r\n};\r\n\r\nexport default Spreadsheet;\r\n","export const applyFormula = (obj, columnName) => {\n  let item = obj[columnName].toString();\n  if (item && item.charAt(0) === \"=\") {\n    var operation = item.split(\"(\");\n    var value = operation[1]\n      .substring(0, operation[1].length - 1)\n      .split(/[,:]/);\n    switch (operation[0]) {\n      case \"=SUM\":\n      case \"=ADD\":\n      case \"=sum\":\n      case \"=add\":\n        obj[columnName] = value.reduce(function (a, b) {\n          return Number(a) + Number(b);\n        });\n        break;\n      case \"=MUL\":\n      case \"=mul\":\n        obj[columnName] = value.reduce(function (a, b) {\n          return Number(a) * Number(b);\n        });\n        break;\n      case \"=SUB\":\n      case \"=sub\":\n      case \"=DIFF\":\n      case \"=diff\":\n        obj[columnName] = value.reduce(function (a, b) {\n          return Number(a) - Number(b);\n        });\n        break;\n      case \"=min\":\n      case \"=MIN\":\n        obj[columnName] = Math.min.apply(Math, value);\n        break;\n      case \"=max\":\n      case \"=MAX\":\n        obj[columnName] = Math.max.apply(Math, value);\n        break;\n      default:\n        console.log(\"No Calculation\");\n    }\n  }\n  return obj;\n};","import React, { useState, useEffect } from \"react\";\r\nimport Spreadsheet from \"spreadsheet\";\r\nimport CargoData from \"./data.json\";\r\n//import { fetchData } from \"./getData\";\r\n\r\nconst App = (props) => {\r\n  //Get spreadsheet height value, which is a required value\r\n  const gridHeight = \"90vh\";\r\n  //Set state value for variable to hold grid data\r\n  const [data, setData] = useState();\r\n  const rows = CargoData;\r\n  \r\n  // Spreadsheet page size\r\n  const pageSize = 500;\r\n  const maxLeftPinnedColumn = 5;\r\n  //Configure columns and its related featues such as editor(Text/DropDown), FormulaApplicable(True/False)\r\n  //Editable, Draggable, sortable, resizable, filterable, default width\r\n  const columns = [\r\n    {\r\n      key: \"flightno\",\r\n      name: \"FlightNo\",\r\n      draggable: false,\r\n      editor: \"Text\",\r\n      formulaApplicable: false,\r\n      sortable: true,\r\n      resizable: true,\r\n      filterable: true,\r\n      width: 150,\r\n      filterType: \"autoCompleteFilter\",\r\n    },\r\n    {\r\n      key: \"date\",\r\n      name: \"Date\",\r\n      draggable: false,\r\n      editor: \"DatePicker\",\r\n      formulaApplicable: false,\r\n      sortable: true,\r\n      resizable: true,\r\n      filterable: true,\r\n      width: 150,\r\n      filterType: \"autoCompleteFilter\",\r\n    },\r\n    {\r\n      key: \"segmentfrom\",\r\n      name: \"Segment From\",\r\n      draggable: false,\r\n      editor: \"DropDown\",\r\n      formulaApplicable: false,\r\n      sortable: true,\r\n      resizable: true,\r\n      filterable: true,\r\n      width: 150,\r\n      filterType: \"autoCompleteFilter\",\r\n    },\r\n    {\r\n      key: \"revenue\",\r\n      name: \"Revenue\",\r\n      draggable: false,\r\n      editor: \"Text\",\r\n      formulaApplicable: true,\r\n      sortable: true,\r\n      resizable: true,\r\n      filterable: true,\r\n      width: 150,\r\n      filterType: \"autoCompleteFilter\",\r\n    },\r\n    {\r\n      key: \"yeild\",\r\n      name: \"Yeild\",\r\n      draggable: false,\r\n      editor: \"Text\",\r\n      formulaApplicable: true,\r\n      sortable: true,\r\n      resizable: true,\r\n      filterable: true,\r\n      width: 150,\r\n      filterType: \"autoCompleteFilter\",\r\n    },\r\n    {\r\n      key: \"segmentto\",\r\n      name: \"Segment To\",\r\n      draggable: false,\r\n      editor: \"DropDown\",\r\n      formulaApplicable: false,\r\n      sortable: true,\r\n      resizable: true,\r\n      filterable: true,\r\n      width: 150,\r\n      filterType: \"autoCompleteFilter\",\r\n    },\r\n    {\r\n      key: \"flightModel\",\r\n      name: \"Flight Model\",\r\n      draggable: false,\r\n      formulaApplicable: false,\r\n      sortable: true,\r\n      resizable: true,\r\n      filterable: true,\r\n      width: 150,\r\n      filterType: \"numeric\",\r\n    },\r\n    {\r\n      key: \"bodyType\",\r\n      name: \"Body Type\",\r\n      draggable: false,\r\n      editor: \"Text\",\r\n      formulaApplicable: false,\r\n      sortable: true,\r\n      resizable: true,\r\n      filterable: true,\r\n      width: 150,\r\n      filterType: \"autoCompleteFilter\",\r\n    },\r\n    {\r\n      key: \"type\",\r\n      name: \"Type\",\r\n      draggable: false,\r\n      editor: \"Text\",\r\n      formulaApplicable: false,\r\n      sortable: true,\r\n      resizable: true,\r\n      filterable: true,\r\n      width: 150,\r\n      filterType: \"autoCompleteFilter\",\r\n    },\r\n    {\r\n      key: \"startTime\",\r\n      name: \"Start Time\",\r\n      draggable: false,\r\n      editor: \"Text\",\r\n      formulaApplicable: false,\r\n      sortable: true,\r\n      resizable: true,\r\n      filterable: true,\r\n      width: 150,\r\n      filterType: \"autoCompleteFilter\",\r\n    },\r\n    {\r\n      key: \"endTime\",\r\n      name: \"End Time\",\r\n      draggable: false,\r\n      editor: \"Text\",\r\n      formulaApplicable: false,\r\n      sortable: true,\r\n      resizable: true,\r\n      filterable: true,\r\n      width: 150,\r\n      filterType: \"autoCompleteFilter\",\r\n    },\r\n    {\r\n      key: \"status\",\r\n      name: \"Status\",\r\n      draggable: false,\r\n      editor: \"Text\",\r\n      formulaApplicable: false,\r\n      sortable: true,\r\n      resizable: true,\r\n      filterable: true,\r\n      width: 150,\r\n      filterType: \"autoCompleteFilter\",\r\n    },\r\n    {\r\n      key: \"additionalStatus\",\r\n      name: \"Additional Status\",\r\n      draggable: false,\r\n      editor: \"Text\",\r\n      formulaApplicable: false,\r\n      sortable: true,\r\n      resizable: true,\r\n      filterable: true,\r\n      width: 150,\r\n      filterType: \"autoCompleteFilter\",\r\n    },\r\n    {\r\n      key: \"timeStatus\",\r\n      name: \"Time Status\",\r\n      draggable: false,\r\n      editor: \"Text\",\r\n      formulaApplicable: false,\r\n      sortable: true,\r\n      resizable: true,\r\n      filterable: true,\r\n      width: 150,\r\n      filterType: \"autoCompleteFilter\",\r\n    },\r\n    {\r\n      key: \"weightpercentage\",\r\n      name: \"Weight Percentage\",\r\n      draggable: false,\r\n      editor: \"Text\",\r\n      formulaApplicable: false,\r\n      sortable: true,\r\n      resizable: true,\r\n      filterable: true,\r\n      width: 150,\r\n      filterType: \"autoCompleteFilter\",\r\n    },\r\n    {\r\n      key: \"weightvalue\",\r\n      name: \"Weight Value\",\r\n      draggable: false,\r\n      editor: \"Text\",\r\n      formulaApplicable: true,\r\n      sortable: true,\r\n      resizable: true,\r\n      filterable: true,\r\n      width: 150,\r\n      filterType: \"autoCompleteFilter\",\r\n    },\r\n    {\r\n      key: \"volumepercentage\",\r\n      name: \"Volume Percentage\",\r\n      draggable: false,\r\n      editor: \"Text\",\r\n      formulaApplicable: true,\r\n      sortable: true,\r\n      resizable: true,\r\n      filterable: true,\r\n      width: 150,\r\n      filterType: \"autoCompleteFilter\",\r\n    },\r\n    {\r\n      key: \"volumevalue\",\r\n      name: \"Volume Value\",\r\n      draggable: false,\r\n      editor: \"Text\",\r\n      formulaApplicable: false,\r\n      sortable: true,\r\n      resizable: true,\r\n      filterable: true,\r\n      width: 150,\r\n      filterType: \"autoCompleteFilter\",\r\n    },\r\n    {\r\n      key: \"uldposition1\",\r\n      name: \"uldposition1\",\r\n      draggable: false,\r\n      editor: \"Text\",\r\n      formulaApplicable: false,\r\n      sortable: true,\r\n      resizable: true,\r\n      filterable: true,\r\n      width: 150,\r\n      filterType: \"autoCompleteFilter\",\r\n    },\r\n    {\r\n      key: \"uldvalue1\",\r\n      name: \"uldvalue1\",\r\n      draggable: false,\r\n      editor: \"Text\",\r\n      formulaApplicable: false,\r\n      sortable: true,\r\n      resizable: true,\r\n      filterable: true,\r\n      width: 150,\r\n      filterType: \"autoCompleteFilter\",\r\n    },\r\n    {\r\n      key: \"uldposition2\",\r\n      name: \"uldposition2\",\r\n      draggable: false,\r\n      editor: \"Text\",\r\n      formulaApplicable: false,\r\n      sortable: true,\r\n      resizable: true,\r\n      filterable: true,\r\n      width: 150,\r\n      filterType: \"autoCompleteFilter\",\r\n    },\r\n    {\r\n      key: \"uldvalue2\",\r\n      name: \"uldvalue2\",\r\n      draggable: false,\r\n      editor: \"Text\",\r\n      formulaApplicable: false,\r\n      sortable: true,\r\n      resizable: true,\r\n      filterable: true,\r\n      width: 150,\r\n      filterType: \"autoCompleteFilter\",\r\n    },\r\n    {\r\n      key: \"uldposition3\",\r\n      name: \"uldposition3\",\r\n      draggable: false,\r\n      editor: \"Text\",\r\n      formulaApplicable: false,\r\n      sortable: true,\r\n      resizable: true,\r\n      filterable: true,\r\n      width: 150,\r\n      filterType: \"autoCompleteFilter\",\r\n    },\r\n    {\r\n      key: \"uldvalue3\",\r\n      name: \"uldvalue3\",\r\n      draggable: false,\r\n      editor: \"Text\",\r\n      formulaApplicable: false,\r\n      sortable: true,\r\n      resizable: true,\r\n      filterable: true,\r\n      width: 150,\r\n      filterType: \"autoCompleteFilter\",\r\n    },\r\n    {\r\n      key: \"uldposition4\",\r\n      name: \"uldposition4\",\r\n      draggable: false,\r\n      editor: \"Text\",\r\n      formulaApplicable: false,\r\n      sortable: true,\r\n      resizable: true,\r\n      filterable: true,\r\n      width: 150,\r\n      filterType: \"autoCompleteFilter\",\r\n    },\r\n    {\r\n      key: \"uldvalue4\",\r\n      name: \"uldvalue4\",\r\n      draggable: false,\r\n      editor: \"Text\",\r\n      formulaApplicable: false,\r\n      sortable: true,\r\n      resizable: true,\r\n      filterable: true,\r\n      width: 150,\r\n      filterType: \"autoCompleteFilter\",\r\n    },\r\n\r\n    {\r\n      key: \"sr\",\r\n      name: \"SR\",\r\n      draggable: false,\r\n      editor: \"Text\",\r\n      formulaApplicable: false,\r\n      sortable: true,\r\n      resizable: true,\r\n      filterable: true,\r\n      width: 150,\r\n      filterType: \"autoCompleteFilter\",\r\n    },\r\n    {\r\n      key: \"queuedBookingSR\",\r\n      name: \"Queued Booking SR\",\r\n      draggable: false,\r\n      editor: \"Text\",\r\n      formulaApplicable: false,\r\n      sortable: true,\r\n      resizable: true,\r\n      filterable: true,\r\n      width: 150,\r\n      filterType: \"autoCompleteFilter\",\r\n    },\r\n    {\r\n      key: \"queuedBookingvolume\",\r\n      name: \"Queued Booking Volume\",\r\n      draggable: false,\r\n      editor: \"Text\",\r\n      formulaApplicable: false,\r\n      sortable: true,\r\n      resizable: true,\r\n      filterable: true,\r\n      width: 150,\r\n      filterType: \"autoCompleteFilter\",\r\n    },\r\n  ];\r\n\r\n  //Configure columns and its related functions\r\n  const airportCodeList = [\r\n    \"AAA\",\r\n    \"AAB\",\r\n    \"AAC\",\r\n    \"ABA\",\r\n    \"ABB\",\r\n    \"ABC\",\r\n    \"ACA\",\r\n    \"ACB\",\r\n    \"ACC\",\r\n    \"BAA\",\r\n    \"BAB\",\r\n    \"BAC\",\r\n    \"BBA\",\r\n    \"BBB\",\r\n    \"BBC\",\r\n    \"BCA\",\r\n    \"BCB\",\r\n    \"BCC\",\r\n    \"CAA\",\r\n    \"CAB\",\r\n    \"CAC\",\r\n    \"CBA\",\r\n    \"CBB\",\r\n    \"CBC\",\r\n    \"CCA\",\r\n    \"CCB\",\r\n    \"CCC\",\r\n    \"XXX\",\r\n    \"XXY\",\r\n    \"XXZ\",\r\n    \"XYX\",\r\n    \"XYY\",\r\n    \"XYZ\",\r\n    \"XZX\",\r\n    \"XZY\",\r\n    \"XZZ\",\r\n    \"YXX\",\r\n    \"YXY\",\r\n    \"YXZ\",\r\n    \"YYX\",\r\n    \"YYY\",\r\n    \"YYZ\",\r\n    \"YZX\",\r\n    \"YZY\",\r\n    \"YZZ\",\r\n    \"ZXX\",\r\n    \"ZXY\",\r\n    \"ZXZ\",\r\n    \"ZYX\",\r\n    \"ZYY\",\r\n    \"ZYZ\",\r\n    \"ZZX\",\r\n    \"ZZY\",\r\n    \"ZZZ\",\r\n  ];\r\n\r\n  //Gets called when there is a cell edit\r\n  const updateCellData = (fromRow, toRow, value, updateType) => {\r\n    if (updateType === \"CELL_UPDATE\") {\r\n      console.log(\r\n        \"Starting row:\",\r\n        fromRow,\r\n        \"updated-Value:\",\r\n        value,\r\n        \"Updation-Type:\",\r\n        updateType,\r\n        \"Ending Row:\",\r\n        toRow\r\n      );\r\n    }\r\n    if (updateType === \"CELL_DRAG\") {\r\n      console.log(\r\n        \"fromRow:\",\r\n        fromRow,\r\n        \"toRow:\",\r\n        toRow,\r\n        \"updated-Value:\",\r\n        value,\r\n        \"Updation-Type:\",\r\n        updateType\r\n      );\r\n    }\r\n  };\r\n\r\n  //Gets called when row bulk edit is done\r\n  const selectBulkData = (selectedRows) => {\r\n    console.log(\"selectedRows:\", selectedRows);\r\n  };\r\n\r\n  useEffect(() => {\r\n    //Make API call to fetch initial set of data, uncomment below code to use API call\r\n    // fetchData(0).then((data) => {\r\n    //   setItems(data);\r\n    // });\r\n    setData(rows);\r\n  }, [rows]);\r\n\r\n  if (data) {\r\n    return (\r\n      <div>\r\n        <Spreadsheet\r\n          rows={data.slice(0, pageSize)}\r\n          dataSet={data}\r\n          pageSize={pageSize}\r\n          count={pageSize}\r\n          columns={columns}\r\n          airportCodes={airportCodeList}\r\n          gridHeight={gridHeight}\r\n          updateCellData={updateCellData}\r\n          selectBulkData={selectBulkData}\r\n          maxLeftPinnedColumn={maxLeftPinnedColumn}\r\n        />\r\n      </div>\r\n    );\r\n  } else if (data === undefined) {\r\n    return <h2>Loading Data</h2>;\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}